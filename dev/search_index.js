var documenterSearchIndex = {"docs":
[{"location":"#Madagascar.jl-documentation","page":"Home","title":"Madagascar.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#RSF-I/O-interface","page":"Home","title":"RSF I/O interface","text":"","category":"section"},{"location":"#Writing-RSF-file","page":"Home","title":"Writing RSF file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"rsf_write","category":"page"},{"location":"#Madagascar.rsf_write","page":"Home","title":"Madagascar.rsf_write","text":"rsf_write(file, dat, n, d, o, label, unit)\n\nWrite RSF file. file may be file handle (m8r.RSFFile), filename (m8r.RSFFile.tag) or absent:\n\nrsf_write(dat, n, d, o, label, unit) -> temp_tag::String\n\nIn this case, the file is temporary with name temp_tag.\n\nIn all methods, n, d, o, label, and unit are optional. If given, they should be of type AbstractArray.\n\nwarning: Writing to file handles\nDo not supply the file as an m8r.RSFFile type unless you know exactly what you are doing. Because of how Madagascar is set up, calling m8r.output automatically sets the filetype to whatever was read in the previous m8r.input(\"in\") call. If this function has not yet been called, it defaults to float. Therefore, it is impossible to create a complex file immediately after reading a float-type file. We overcome this limitation with other rsf_write methods by writing dummy files to dummy pipes to \"trick\" Madagascar into switching file types.In addition, do not try to write to a file handle which has already been written to with rsf_write, as rsf_write closes the file. Doing so will cause a segfault.\n\nExamples\n\nWrite file by name\n\njulia> rsf_write(\"spike.rsf\", [1., 2.])\n\njulia> rsf_read(\"spike.rsf\")\n(Float32[1.0, 2.0], [2], Float32[1.0], Float32[0.0], String[\"\"], String[\"\"])\n\nWrite to temporary file\n\njulia> rsf_write([1. im]) |> sfreal |> rsf_read\n(Complex{Float32}[1.0+0.0im 0.0+1.0im], [1, 2], Float32[1.0, 1.0], Float32[0.0, 0.0], String[\"\", \"\"], String[\"\", \"\"])\n\nWrite from pipe\n\njulia> sfspike(;n1=1) |> x -> rsf_write(x, \"spike.rsf\")\n\njulia> rsf_read(\"spike.rsf\")\n(Float32[1.0, 2.0], [2], Float32[1.0], Float32[0.0], String[\"\"], String[\"\"])\n\nWriting file handle (avoid this!)\n\njulia> out = m8r.output(\"test.rsf\")\nm8r.File(\"test.rsf\", Ptr{UInt8} @0x0000000003847880, false)\n\njulia> rsf_write(out, [1., 2]) # rsf_write(out, [im, 2]) will not work due to warning\n\njulia> rsf_read(out.tag)\n(Float32[1.0, 2.0], [2], Float32[1.0], Float32[0.0], String[\"\"], String[\"\"])\n\n\n\n\n\n","category":"function"},{"location":"#Reading-RSF-file","page":"Home","title":"Reading RSF file","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"rsf_read","category":"page"},{"location":"#Madagascar.rsf_read","page":"Home","title":"Madagascar.rsf_read","text":"rsf_read(file)\n\nReads RSF file, returning its contents and header. file may be file handle  (m8r.RSFFile) or filename (m8r.RSFFile.tag). When called with headers_only keyword argument set to true, does not read contents, only headers.\n\nExamples\n\nReading file handle\n\njulia> sfspike(;n1=2, n2=3) |> x -> rsf_write(x, \"spike.rsf\")\n\njulia> inp = m8r.input(\"spike.rsf\")\n\njulia> dat, n, d, o, l, u = rsf_read(inp)\n(Float32[1.0 1.0 1.0; 1.0 1.0 1.0], [2, 3], Float32[0.004, 0.1], Float32[0.0, 0.0], String[\"Time\", \"Distance\"], String[\"s\", \"km\"])\n\nReading file name\n\njulia> rsf_read(\"spike.rsf\")\n(Float32[1.0 1.0 1.0; 1.0 1.0 1.0], [2, 3], Float32[0.004, 0.1], Float32[0.0, 0.0], String[\"Time\", \"Distance\"], String[\"s\", \"km\"])\n\n\n\n\n\n","category":"function"},{"location":"#Madagascar-executables-API","page":"Home","title":"Madagascar executables API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [Madagascar]\nFilter = t -> startswith(string(t), \"sf\")","category":"page"},{"location":"#Madagascar.sfAzsort-Tuple{}","page":"Home","title":"Madagascar.sfAzsort","text":"sfAzsort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfAzsort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfAzsort. See ?m8r for examples.\n\nRSF Documentation\n\nsfAzsort(1)                   Madagascar Manuals                   sfAzsort(1)\n\nNAME\n       sfAzsort - None\n\nSYNOPSIS\n       sfAzsort  <  three.rsf  > two.rsf out2=two2.rsf common=commonoffset.rsf\n       sectio=sectionf.rsf filt=filtered.rsf dimen= win= radius=\n\nPARAMETERS\n       file   common =      auxiliary output file name\n       dimen  =      command-line parameter\n       file   filt =      auxiliary output file name\n       file   out2 =      auxiliary output file name\n       radius =      command-line parameter\n       file   sectio =      auxiliary output file name\n       win    =      command-line parameter\nSOURCE\n       user/mehdi/MAzsort.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfAzsort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfGridDeriv-Tuple{}","page":"Home","title":"Madagascar.sfGridDeriv","text":"sfGridDeriv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfGridDeriv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfGridDeriv. See ?m8r for examples.\n\nRSF Documentation\n\nsfGridDeriv(1)                Madagascar Manuals                sfGridDeriv(1)\n\nNAME\n       sfGridDeriv - None\n\nSYNOPSIS\n       sfGridDeriv\n\nSOURCE\n       trip/iwave/grid/main/GridDeriv.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfGridDeriv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfMCCCnew-Tuple{}","page":"Home","title":"Madagascar.sfMCCCnew","text":"sfMCCCnew(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfMCCCnew on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfMCCCnew. See ?m8r for examples.\n\nRSF Documentation\n\nsfMCCCnew(1)                  Madagascar Manuals                  sfMCCCnew(1)\n\nNAME\n       sfMCCCnew - None\n\nSYNOPSIS\n       sfMCCCnew < infile.rsf > outfile.rsf times=timefile.rsf maxshift= nlen=\n       vel=1500.\n\nPARAMETERS\n       maxshift\n              =      Maximum allowed time shift\n       nlen   =      Window length of shift vector (in samples)\n       file   times =      auxiliary output file name\n       vel    =1500.       Rupture speed for linear shift\nSOURCE\n       user/jeff/MMCCCnew.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfMCCCnew(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfR2to3-Tuple{}","page":"Home","title":"Madagascar.sfR2to3","text":"sfR2to3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfR2to3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfR2to3. See ?m8r for examples.\n\nRSF Documentation\n\nsfR2to3(1)                    Madagascar Manuals                    sfR2to3(1)\n\nNAME\n       sfR2to3 - None\n\nSYNOPSIS\n       sfR2to3 < two.rsf > three.rsf common=commonoffset.rsf cut= offset=\n\nPARAMETERS\n       file   common =      auxiliary output file name\n       cut    =      command-line parameter\n       offset =      command-line parameter\nSOURCE\n       user/mehdi/MR2to3.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfR2to3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfScanCoef-Tuple{}","page":"Home","title":"Madagascar.sfScanCoef","text":"sfScanCoef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfScanCoef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfScanCoef. See ?m8r for examples.\n\nRSF Documentation\n\nsfScanCoef(1)                 Madagascar Manuals                 sfScanCoef(1)\n\nNAME\n       sfScanCoef - Coeffecients of the eta expansion eikonal solver (3-D).\n\nSYNOPSIS\n       sfScanCoef  <  btime.rsf  > time.rsf shotfile=shots.rsf btime=y order=2\n       br1=d1 br2=d2 br3=d3 plane1=n plane2=n plane3=n b1=plane[2]? n1:  (int)\n       (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int)\n       (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3\n       t1= t2=\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       bool   btime =y [y/n]     if y, the input is background time; n, Veloc‐\n              ity\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       string t1 = ®\n       string t2 = ®\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/tariq/MScanCoef.c\nVERSION\n       4.2-git MScanCoef.c 4136 2009-02-07 17:20:32Z sfomel\n\nMadagascar                         JULY 2024                     sfScanCoef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTTinv-Tuple{}","page":"Home","title":"Madagascar.sfTTinv","text":"sfTTinv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTTinv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTTinv. See ?m8r for examples.\n\nRSF Documentation\n\nsfTTinv(1)                    Madagascar Manuals                    sfTTinv(1)\n\nNAME\n       sfTTinv - None\n\nSYNOPSIS\n       sfTTinv  CCorrect=Ccor.rsf Cpredicted=Cpred.rsf common=commonoffset.rsf\n       azimuth= offset=\n\nPARAMETERS\n       file   CCorrect =      auxiliary output file name\n       file   Cpredicted =      auxiliary output file name\n       azimuth\n              =      command-line parameter\n       file   common =      auxiliary output file name\n       offset =      command-line parameter\nSOURCE\n       user/mehdi/MTTinv.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfTTinv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestaniso-Tuple{}","page":"Home","title":"Madagascar.sfTestaniso","text":"sfTestaniso(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestaniso on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestaniso. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestaniso(1)                Madagascar Manuals                sfTestaniso(1)\n\nNAME\n       sfTestaniso  -  A  2D demo of elliptically-anisotropic wave propagation\n       (4th order)\n\nSYNOPSIS\n       sfTestaniso < Fvz.rsf vx=Fvx.rsf > Fw.rsf verb=n nb=30 nt= dt=  fm=20.0\n       ft=0 jt=1\n\nCOMMENTS\n       Note:  It  is  adapted  according  to Seregy Fomel's lecture on Seismic\n       imaging.\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    nb =30      thickness of sponge ABC\n       int    nt =      number of time steps\n       bool   verb =n [y/n]     verbosity\n       file   vx =      auxiliary input file name\nSOURCE\n       user/pyang/MTestaniso.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfTestaniso(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestcdstep-Tuple{}","page":"Home","title":"Madagascar.sfTestcdstep","text":"sfTestcdstep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestcdstep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestcdstep. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestcdstep(1)               Madagascar Manuals               sfTestcdstep(1)\n\nNAME\n       sfTestcdstep - None\n\nSYNOPSIS\n       sfTestcdstep\n\nSOURCE\n       user/lcasasan/MTestcdstep.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfTestcdstep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTesteb-Tuple{}","page":"Home","title":"Madagascar.sfTesteb","text":"sfTesteb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTesteb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTesteb. See ?m8r for examples.\n\nRSF Documentation\n\nsfTesteb(1)                   Madagascar Manuals                   sfTesteb(1)\n\nNAME\n       sfTesteb - Demo for effective boundary saving in regular grid\n\nSYNOPSIS\n       sfTesteb  <  Fv.rsf  >  Fw1.rsf back=Fw2.rsf nb=20 nt= dt= fm=20.0 ft=0\n       jt=1 ns=1 ng=nx\n\nCOMMENTS\n       The sponge absorbing boundary condition is applied for simplicity!  2N-\n       order  FD:  effective  boundary  needs N points on each side!  Note: In\n       this demo, 2N=4 (N=2).\n\nPARAMETERS\n       file   back =      auxiliary output file name\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    nb =20      thickness of sponge ABC\n       int    ng =nx      number of receivers\n       int    ns =1      number of shots\n       int    nt =      number of time steps\nSOURCE\n       user/pyang/MTesteb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfTesteb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestelastic2d-Tuple{}","page":"Home","title":"Madagascar.sfTestelastic2d","text":"sfTestelastic2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestelastic2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestelastic2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestelastic2d(1)            Madagascar Manuals            sfTestelastic2d(1)\n\nNAME\n       sfTestelastic2d  -  2D 8-th order elastic wave propagation using sponge\n       ABC\n\nSYNOPSIS\n       sfTestelastic2d  <  Fvp.rsf   vs=Fvs.rsf   rho=Frho.rsf   >   Fwavz.rsf\n       wavx=Fwavx.rsf verb=n nb=30 nt= kt= dt= fm=20.0 ft=0 jt=1\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    kt =      record wavefield at time kt\n       int    nb =30      thickness of PML boundary\n       int    nt =      number of time steps\n       file   rho =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       file   vs =      auxiliary input file name\n       file   wavx =      auxiliary output file name\nSOURCE\n       user/pyang/MTestelastic2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfTestelastic2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestfd2d-Tuple{}","page":"Home","title":"Madagascar.sfTestfd2d","text":"sfTestfd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestfd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestfd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestfd2d(1)                 Madagascar Manuals                 sfTestfd2d(1)\n\nNAME\n       sfTestfd2d - A demo of 2D FD test\n\nSYNOPSIS\n       sfTestfd2d < Fv.rsf > Fw.rsf nb=30 nt= dt= fm=20.0 ft=0 jt=1\n\nCOMMENTS\n       Sponage absorbing boundary condition\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    nb =30      thickness of sponge ABC\n       int    nt =      number of time steps\nSOURCE\n       user/pyang/MTestfd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfTestfd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestfd3d-Tuple{}","page":"Home","title":"Madagascar.sfTestfd3d","text":"sfTestfd3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestfd3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestfd3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestfd3d(1)                 Madagascar Manuals                 sfTestfd3d(1)\n\nNAME\n       sfTestfd3d - 3D acoustic time-domain FD modeling\n\nSYNOPSIS\n       sfTestfd3d  <  Fv.rsf  > Fw.rsf verb=n verb=n frsf=n nt= kt= ns=1 nb=30\n       dt= fm=20\n\nCOMMENTS\n       4th order in space, 2nd order in time, sponge absorbing boundary condi‐\n       tion.\n\nPARAMETERS\n       float  dt = ®\n       float  fm =20 ®\n       bool   frsf =n [y/n]     free surface or not\n       int    kt =      record wavefield at time kt\n       int    nb =30 ®\n       int    ns =1 ®\n       int    nt = ®\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/MTestfd3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfTestfd3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestsolver-Tuple{}","page":"Home","title":"Madagascar.sfTestsolver","text":"sfTestsolver(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestsolver on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestsolver. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestsolver(1)               Madagascar Manuals               sfTestsolver(1)\n\nNAME\n       sfTestsolver  -  Test  for conjugate gradient, steepest descent, jacobi\n       iteration, gauss-seidel iteration, successive over relaxation (SOR) it‐\n       eration\n\nSYNOPSIS\n       sfTestsolver\n\nSOURCE\n       user/chenyk/MTestsolver.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfTestsolver(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestsolver1-Tuple{}","page":"Home","title":"Madagascar.sfTestsolver1","text":"sfTestsolver1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestsolver1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestsolver1. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestsolver1(1)              Madagascar Manuals              sfTestsolver1(1)\n\nNAME\n       sfTestsolver1  -  Test for conjugate gradient, steepest descent, jacobi\n       iteration, gauss-seidel iteration, successive over relaxation (SOR) it‐\n       eration\n\nSYNOPSIS\n       sfTestsolver1\n\nSOURCE\n       user/chenyk/MTestsolver1.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfTestsolver1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfTestspml-Tuple{}","page":"Home","title":"Madagascar.sfTestspml","text":"sfTestspml(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfTestspml on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfTestspml. See ?m8r for examples.\n\nRSF Documentation\n\nsfTestspml(1)                 Madagascar Manuals                 sfTestspml(1)\n\nNAME\n       sfTestspml  -  2D acoustic FD using Split PML (SPML) absorbing boundary\n       condition\n\nSYNOPSIS\n       sfTestspml < Fv.rsf  >  Fw.rsf  pz=Fpz.rsf  px=Fpx.rsf  nb=30  nt=  dt=\n       fm=20.0 ft=0 jt=1 verb=n kt=\n\nCOMMENTS\n       NB: Staggered grid finite difference used!\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    kt =      output px and pz component at kt\n       int    nb =30      thickness of PML ABC\n       int    nt =      number of time steps\n       file   px =      auxiliary output file name\n       file   pz =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity, if y, output px and pz\nSOURCE\n       user/pyang/MTestspml.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfTestspml(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaapwd-Tuple{}","page":"Home","title":"Madagascar.sfaapwd","text":"sfaapwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaapwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaapwd. See ?m8r for examples.\n\nRSF Documentation\n\nsfaapwd(1)                    Madagascar Manuals                    sfaapwd(1)\n\nNAME\n       sfaapwd - Amplitude-adjusted plane-wave destruction\n\nSYNOPSIS\n       sfaapwd  <  inp.rsf  dip=dip.rsf  amp=amp.rsf > out.rsf dipin=dipin.rsf\n       ampin=ampin.rsf mask=msk.rsf order=1  drift=n  verb=(bool)  (1  ==  nt)\n       niter=0 liter=50 rect1=1 rect2=1 lambda=1.0f\n\nPARAMETERS\n       file   amp =      auxiliary output file name\n       string ampin =      auxiliary input file name\n       file   dip =      auxiliary output file name\n       string dipin =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       float  lambda =1.0f      scaling\n       int    liter =50      number of linear iterations\n       string mask =      auxiliary input file name\n       int    niter =0      number of iterations\n       int    order =1      PWD order\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing radius\n       bool   verb =(bool) (1 == nt) [y/n]     verbosity flag\nSOURCE\n       user/pwd/Maapwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfaapwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaapwd1-Tuple{}","page":"Home","title":"Madagascar.sfaapwd1","text":"sfaapwd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaapwd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaapwd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfaapwd1(1)                   Madagascar Manuals                   sfaapwd1(1)\n\nNAME\n       sfaapwd1 - Amplitude-adjusted PWD - linear operator\n\nSYNOPSIS\n       sfaapwd1  < inp.rsf dip=dip.rsf sig=sig.rsf amp=amp.rsf > out.rsf adj=n\n       drift=n forx=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   amp =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       bool   forx =n [y/n]     for x only\n       file   sig =      auxiliary input file name\nSOURCE\n       user/pwd/Maapwd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfaapwd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaastack-Tuple{}","page":"Home","title":"Madagascar.sfaastack","text":"sfaastack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaastack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaastack. See ?m8r for examples.\n\nRSF Documentation\n\nsfaastack(1)                  Madagascar Manuals                  sfaastack(1)\n\nNAME\n       sfaastack - Stack with antialiasing\n\nSYNOPSIS\n       sfaastack  <  inp.rsf  >  out.rsf  adj=n  inv=n  n2=15 n2=1 vel=1.5 an‐\n       tialias=1. box=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  antialias =1.       antialiasing\n       bool   box =n [y/n]     box antialiasing\n       bool   inv =n [y/n]     inverse flag\n       int    n2 =1 ®\n       float  vel =1.5      velocity\nUSED IN\n       bei/trimo/all\nSOURCE\n       system/seismic/Maastack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfaastack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfabalance-Tuple{}","page":"Home","title":"Madagascar.sfabalance","text":"sfabalance(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfabalance on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfabalance. See ?m8r for examples.\n\nRSF Documentation\n\nsfabalance(1)                 Madagascar Manuals                 sfabalance(1)\n\nNAME\n       sfabalance - Amplitude balancing.\n\nSYNOPSIS\n       sfabalance < in.rsf other=ref.rsf > out.rsf weight=weight.rsf reverse=y\n       niter=100 order=100 ref=1.\n\nPARAMETERS\n       int    niter =100      number of iterations\n       int    order =100      Hilbert transformer order\n       file   other =      auxiliary input file name\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       bool   reverse =y [y/n]     reverse weight\n       string weight =      optional  weight  output  (auxiliary  output  file\n              name)\nSOURCE\n       user/fomels/Mabalance.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfabalance(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaccumulate-Tuple{}","page":"Home","title":"Madagascar.sfaccumulate","text":"sfaccumulate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaccumulate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaccumulate. See ?m8r for examples.\n\nRSF Documentation\n\nsfaccumulate(1)               Madagascar Manuals               sfaccumulate(1)\n\nNAME\n       sfaccumulate - Accumulate\n\nSYNOPSIS\n       sfaccumulate < Fin.rsf > Fou.rsf verb=n axis=3\n\nPARAMETERS\n       int    axis =3      accumulate axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Maccumulate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfaccumulate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacd-Tuple{}","page":"Home","title":"Madagascar.sfacd","text":"sfacd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacd. See ?m8r for examples.\n\nRSF Documentation\n\nsfacd(1)                      Madagascar Manuals                      sfacd(1)\n\nNAME\n       sfacd - None\n\nSYNOPSIS\n       sfacd\n\nSOURCE\n       trip/iwave/acd/main/acd.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfacd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacd2d-Tuple{}","page":"Home","title":"Madagascar.sfacd2d","text":"sfacd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfacd2d(1)                    Madagascar Manuals                    sfacd2d(1)\n\nNAME\n       sfacd2d - time-domain acoustic FD modeling\n\nSYNOPSIS\n       sfacd2d < Fw.rsf > Fo.rsf vel=Fv.rsf ref=Fr.rsf verb=n\n\nPARAMETERS\n       file   ref =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     setup I/O files\nSOURCE\n       user/hpcss/Macd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfacd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacdcgne-Tuple{}","page":"Home","title":"Madagascar.sfacdcgne","text":"sfacdcgne(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacdcgne on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacdcgne. See ?m8r for examples.\n\nRSF Documentation\n\nsfacdcgne(1)                  Madagascar Manuals                  sfacdcgne(1)\n\nNAME\n       sfacdcgne - None\n\nSYNOPSIS\n       sfacdcgne\n\nSOURCE\n       trip/iwave/acd/main/acdcgne.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfacdcgne(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacdfwi-Tuple{}","page":"Home","title":"Madagascar.sfacdfwi","text":"sfacdfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacdfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacdfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfacdfwi(1)                   Madagascar Manuals                   sfacdfwi(1)\n\nNAME\n       sfacdfwi - None\n\nSYNOPSIS\n       sfacdfwi\n\nSOURCE\n       trip/iwave/acd/main/acdfwi.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfacdfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacdvpe-Tuple{}","page":"Home","title":"Madagascar.sfacdvpe","text":"sfacdvpe(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacdvpe on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacdvpe. See ?m8r for examples.\n\nRSF Documentation\n\nsfacdvpe(1)                   Madagascar Manuals                   sfacdvpe(1)\n\nNAME\n       sfacdvpe - None\n\nSYNOPSIS\n       sfacdvpe\n\nSOURCE\n       trip/iwave/acd/main/acdvpe.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfacdvpe(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacoustic1D-Tuple{}","page":"Home","title":"Madagascar.sfacoustic1D","text":"sfacoustic1D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacoustic1D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacoustic1D. See ?m8r for examples.\n\nRSF Documentation\n\nsfacoustic1D(1)               Madagascar Manuals               sfacoustic1D(1)\n\nNAME\n       sfacoustic1D - 1-D acoustic wave propagation with CE absorbing boundary\n\nSYNOPSIS\n       sfacoustic1D  <  Fsrc.rsf  vel=Fvel.rsf > Frec.rsf rec_all=Frec_all.rsf\n       verb=n sx= rx=\n\nPARAMETERS\n       file   rec_all =      auxiliary output file name\n       int    rx =      reciever position\n       int    sx =      source position\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nUSED IN\n       carrot/test/modeling\nSOURCE\n       user/carrot/Macoustic1D.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfacoustic1D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacoustic1D_FWI_adj-Tuple{}","page":"Home","title":"Madagascar.sfacoustic1D_FWI_adj","text":"sfacoustic1D_FWI_adj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacoustic1D_FWI_adj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacoustic1D_FWI_adj. See ?m8r for examples.\n\nRSF Documentation\n\nsfacoustic1DFWIadj(1)       Madagascar Manuals       sfacoustic1DFWIadj(1)\n\nNAME\n       sfacoustic1D_FWI_adj - 1-D acoustic FWI with adjoint state method\n\nSYNOPSIS\n       sfacoustic1D_FWI_adj   <   Frec.rsf  vel=Fvel.rsf  src=Fsrc.rsf  gradi‐\n       ent=Fgradient.rsf > Fvel_recover.rsf verb=n sx= rx= niter=\n\nPARAMETERS\n       file   gradient =      auxiliary output file name\n       int    niter =      iteration number\n       int    rx =      reciever position\n       file   src =      auxiliary input file name\n       int    sx =      source position\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/carrot/Macoustic1D_FWI_adj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024           sfacoustic1D_FWI_adj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacoustic1D_FWI_ptb-Tuple{}","page":"Home","title":"Madagascar.sfacoustic1D_FWI_ptb","text":"sfacoustic1D_FWI_ptb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacoustic1D_FWI_ptb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacoustic1D_FWI_ptb. See ?m8r for examples.\n\nRSF Documentation\n\nsfacoustic1DFWIptb(1)       Madagascar Manuals       sfacoustic1DFWIptb(1)\n\nNAME\n       sfacoustic1D_FWI_ptb - 1-D acoustic FWI with Perturbation method\n\nSYNOPSIS\n       sfacoustic1D_FWI_ptb  <  Frec.rsf  vel=Fvel.rsf src=Fsrc.rsf > Fvel_re‐\n       cover.rsf verb=n sx= rx= niter= damp=\n\nPARAMETERS\n       float  damp =      damping factor\n       int    niter =      iteration number\n       int    rx =      reciever position\n       file   src =      auxiliary input file name\n       int    sx =      source position\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/carrot/Macoustic1D_FWI_ptb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024           sfacoustic1D_FWI_ptb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacqgeo-Tuple{}","page":"Home","title":"Madagascar.sfacqgeo","text":"sfacqgeo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacqgeo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacqgeo. See ?m8r for examples.\n\nRSF Documentation\n\nsfacqgeo(1)                   Madagascar Manuals                   sfacqgeo(1)\n\nNAME\n       sfacqgeo - generating acquisition geometry file for sfmpicfftrtm\n\nSYNOPSIS\n       sfacqgeo  > Fgeo.rsf nz= nx= ny= sou_z= sou_ox= sou_oy= sou_nx= sou_ny=\n       sou_jx=(sou_nx>1)?  (nx-sou_ox)/(sou_nx-1):0  sou_jy=(sou_ny>1)?   (ny-\n       sou_oy)/(sou_ny-1):0 rec_z= rec_nx= rec_ny= npad= noff= roll=\n\nPARAMETERS\n       int    noff =      near offset\n       int    npad =      computational domain padding\n       int    nx =      dimension in x\n       int    ny =      dimension in y\n       int    nz =      dimension in z\n       int    rec_nx =      number of receivers in x\n       int    rec_ny =      number of receivers in y\n       int    rec_z =      receiver position in depth\n       int    roll  =       acquisition  pattern: 0-> fixed-spread, 1-> towed-\n              streamer to the negative\n       int    sou_jx =(sou_nx>1)? (nx-sou_ox)/(sou_nx-1):0      source  inter‐\n              val in x\n       int    sou_jy  =(sou_ny>1)? (ny-sou_oy)/(sou_ny-1):0      source inter‐\n              val in y\n       int    sou_nx =      number of sources in x\n       int    sou_ny =      number of sources in y\n       int    sou_ox =      source starting location in x\n       int    sou_oy =      source starting location in y\n       int    sou_z =      source position in depth\nSOURCE\n       user/jsun/Macqgeo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfacqgeo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfacurv-Tuple{}","page":"Home","title":"Madagascar.sfacurv","text":"sfacurv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfacurv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfacurv. See ?m8r for examples.\n\nRSF Documentation\n\nsfacurv(1)                    Madagascar Manuals                    sfacurv(1)\n\nNAME\n       sfacurv - Azimuth CURVature\n\nSYNOPSIS\n       sfacurv  <  in.rsf > out.rsf rect1=1 rect2=1 rect3=1 order=2 nazmuth=10\n       interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    nazmuth =10      azimuth number\n       int    order =2      approximating order of finite difference\n       int    rect1 =1      smoothness on 1st axis\n       int    rect2 =1      smoothness on 2nd axis\n       int    rect3 =1      smoothness on 3rd axis\nSOURCE\n       user/chen/Macurv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfacurv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadd-Tuple{}","page":"Home","title":"Madagascar.sfadd","text":"sfadd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadd. See ?m8r for examples.\n\nRSF Documentation\n\nsfadd(1)                      Madagascar Manuals                      sfadd(1)\n\nNAME\n       sfadd - Add, multiply, or divide  RSF datasets.\n\nSYNOPSIS\n       sfadd  >  out.rsf  scale= add= sqrt= abs= log= exp= mode= [< file0.rsf]\n       file1.rsf file2.rsf ...\n\nCOMMENTS\n       The various operations, if selected, occur in the following order:\n\n       (1) Take absolute value, abs= (2) Add a scalar, add= (3) Take the natu‐\n       ral  logarithm,  log= (4) Take the square root, sqrt= (5) Multiply by a\n       scalar, scale= (6) Compute the base-e exponential, exp= (7) Add, multi‐\n       ply, or divide the data sets, mode=\n\n       sfadd  operates  on  integer, float, or complex data, but all the input\n       and output files must be of the same data type.\n\n       An alternative to sfadd is sfmath, which is more versatile, but may  be\n       less efficient.\n\nPARAMETERS\n       bools  abs =      If true take absolute value [nin]\n       floats add =      Scalar values to add to each dataset [nin]\n       bools  exp =      If true compute exponential [nin]\n       bools  log =      If true take logarithm [nin]\n       string mode  =       'a'  means  add (default),        'p' or 'm' means\n              multiply,        'd' means divide\n       floats scale =      Scalar values to multiply each dataset with [nin]\n       bools  sqrt =      If true take square root [nin]\nUSED IN\n       bei/sg/toldi\n       cup/rna2d/shot\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/operator\n       cwp/geo2009VTIModeSeparation/aniopsize\n       cwp/geo2009VTIModeSeparation/oporder\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n       data/alaska/line31-81-m8r\nSOURCE\n       system/main/add.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfadd\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfadd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaddevent-Tuple{}","page":"Home","title":"Madagascar.sfaddevent","text":"sfaddevent(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaddevent on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaddevent. See ?m8r for examples.\n\nRSF Documentation\n\nsfaddevent(1)                 Madagascar Manuals                 sfaddevent(1)\n\nNAME\n       sfaddevent - Add a dispersive event to a seismic profile\n\nSYNOPSIS\n       sfaddevent  <  in.rsf  >  out.rsf wvtype=0 w0=35.0 event=2 nfft= t0=0.3\n       v0=1500.0 a0=1.0 qv=-1.0 qa=qv f0=w0 a0ref=0\n\nPARAMETERS\n       float  a0 =1.0      event amplitude at t=a0ref (x=0)\n       int    a0ref =0      reference point for a0: 0 - t0; 1 - a0\n       int    event =2      0: linear; 1: parabolic; 2:hyperbolic\n       float  f0 =w0      reference frequency for velocity dispersion and  am‐\n              plitude attenuation\n       int    nfft =      fft length\n       float  qa =qv      Q factor for amplitude attenuation\n       float  qv =-1.0      Q factor for velocity dispersion\n       float  t0 =0.3      event travel time at x=0\n       float  v0  =1500.0       event velocity at x=0, for reference frequency\n              f0\n       float  w0 =35.0      central frequency of Ricker wavelet  or  bandwidth\n              of sinc wavelet\n       int    wvtype =0      0: ricker; 1: sinc; x: not support\nUSED IN\n       chen/test/fpca\nSOURCE\n       user/chen/Maddevent.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfaddevent(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaddimag-Tuple{}","page":"Home","title":"Madagascar.sfaddimag","text":"sfaddimag(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaddimag on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaddimag. See ?m8r for examples.\n\nRSF Documentation\n\nsfaddimag(1)                  Madagascar Manuals                  sfaddimag(1)\n\nNAME\n       sfaddimag  -  Convert  large-size  (with  n3=) real data to complex (by\n       adding zero imaginary part)\n\nSYNOPSIS\n       sfaddimag < in.rsf > out.rsf\n\nSOURCE\n       user/zhiguang/Maddimag.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfaddimag(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaddtrace-Tuple{}","page":"Home","title":"Madagascar.sfaddtrace","text":"sfaddtrace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaddtrace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaddtrace. See ?m8r for examples.\n\nRSF Documentation\n\nsfaddtrace(1)                 Madagascar Manuals                 sfaddtrace(1)\n\nNAME\n       sfaddtrace  -  Add  zero  trace to original profile in order to improve\n       lateral resolution\n\nSYNOPSIS\n       sfaddtrace < in.rsf > out.rsf ratio=2\n\nPARAMETERS\n       int    ratio =2 ®\nSOURCE\n       user/chenyk/Maddtrace.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfaddtrace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadiradon2-Tuple{}","page":"Home","title":"Madagascar.sfadiradon2","text":"sfadiradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadiradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadiradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfadiradon2(1)                Madagascar Manuals                sfadiradon2(1)\n\nNAME\n       sfadiradon2  -  direct adjoint 2to2 hyper Radon transform (single inte‐\n       gral, nearest point interpolation)\n\nSYNOPSIS\n       sfadiradon2 < input.rsf > output.rsf nt= nx= t0= dt= x0= dx=\n\nPARAMETERS\n       dt     = ®\n       dx     = ®\n       nt     = ®\n       nx     = ®\n       t0     = ®\n       x0     = ®\nSOURCE\n       user/jingwei/Madiradon2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfadiradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjgradient2d-Tuple{}","page":"Home","title":"Madagascar.sfadjgradient2d","text":"sfadjgradient2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjgradient2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjgradient2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjgradient2d(1)            Madagascar Manuals            sfadjgradient2d(1)\n\nNAME\n       sfadjgradient2d  -  Gradient adjoint-state calculation for image-domain\n       WET\n\nSYNOPSIS\n       sfadjgradient2d < Fvel.rsf  xig=Fxig.rsf  swf=Fswf.rsf  rwf=Frwf.rsf  >\n       Fgrd.rsf nxtap=40 verbose=n\n\nPARAMETERS\n       int    nxtap =40      TAPER size\n       file   rwf =      auxiliary input file name\n       file   swf =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       file   xig =      auxiliary input file name\nSOURCE\n       user/jeff/Madjgradient2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfadjgradient2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjgradient2d_coupled-Tuple{}","page":"Home","title":"Madagascar.sfadjgradient2d_coupled","text":"sfadjgradient2d_coupled(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjgradient2d_coupled on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjgradient2d_coupled. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjgradient2dcoupled(1)    Madagascar Manuals    sfadjgradient2dcoupled(1)\n\nNAME\n       sfadjgradient2d_coupled - Gradient adjoint-state calculation for image-\n       domain WET\n\nSYNOPSIS\n       sfadjgradient2d_coupled   <   Fvel1.rsf   xig1=Fxig1.rsf   us1=Fus1.rsf\n       ur1=Fur1.rsf  >  Fgr1.rsf  vel2=Fvel2.rsf  xig2=Fxig2.rsf  us2=Fus2.rsf\n       ur2=Fur2.rsf gr2=Fgr2.rsf nxtap=40 verbose=n\n\nPARAMETERS\n       file   gr2 =      auxiliary output file name\n       int    nxtap =40      TAPER size\n       file   ur1 =      auxiliary input file name\n       file   ur2 =      auxiliary input file name\n       file   us1 =      auxiliary input file name\n       file   us2 =      auxiliary input file name\n       file   vel2 =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       file   xig1 =      auxiliary input file name\n       file   xig2 =      auxiliary input file name\nSOURCE\n       user/jeff/Madjgradient2d_coupled.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024        sfadjgradient2d_coupled(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjgradient2d_coupled_gpu-Tuple{}","page":"Home","title":"Madagascar.sfadjgradient2d_coupled_gpu","text":"sfadjgradient2d_coupled_gpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjgradient2d_coupled_gpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjgradient2d_coupled_gpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjgradient2dcoupledgpu(1)Madagascar Manualssfadjgradient2dcoupledgpu(1)\n\nNAME\n       sfadjgradient2d_coupled_gpu - 2D ISOTROPIC wave-equation finite-differ‐\n       ence migration on GPU\n\nSYNOPSIS\n       sfadjgradient2d_coupled_gpu < Fvel1.rsf  vel2=Fvel2.rsf  xig1=Fxig1.rsf\n       xig2=Fxig2.rsf  us1=Fus1.rsf  ur1=Fur1.rsf  us2=Fus2.rsf ur2=Fur2.rsf >\n       Fgrd1.rsf  grd2=Fgrd2.rsf   nxtap=40   hzero=5   verbose=n   epsDSO=1.f\n       eps4D=0.f gpu=0\n\nPARAMETERS\n       float  eps4D =0.f      Weighting for 4D penalty\n       float  epsDSO =1.f      Weighting for DSO penalty\n       int    gpu =0      ID of the GPU to be used\n       file   grd2 =      auxiliary output file name\n       int    hzero =5      Number of near offsets to zero\n       int    nxtap =40      TAPER size\n       file   ur1 =      auxiliary input file name\n       file   ur2 =      auxiliary input file name\n       file   us1 =      auxiliary input file name\n       file   us2 =      auxiliary input file name\n       file   vel2 =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       file   xig1 =      auxiliary input file name\n       file   xig2 =      auxiliary input file name\nSOURCE\n       user/rweiss/Madjgradient2d_coupled_gpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024    sfadjgradient2d_coupled_gpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjgradient2d_gpu-Tuple{}","page":"Home","title":"Madagascar.sfadjgradient2d_gpu","text":"sfadjgradient2d_gpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjgradient2d_gpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjgradient2d_gpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjgradient2dgpu(1)        Madagascar Manuals        sfadjgradient2dgpu(1)\n\nNAME\n       sfadjgradient2d_gpu  - 2D ISOTROPIC wave-equation finite-difference mi‐\n       gration on GPU\n\nSYNOPSIS\n       sfadjgradient2d_gpu < Fvel.rsf xig=Fxig.rsf swf=Fswf.rsf rwf=Frwf.rsf >\n       Fgrd.rsf nxtap=40 verbose=n gpu=0\n\nPARAMETERS\n       int    gpu =0      ID of the GPU to be used\n       int    nxtap =40      TAPER size\n       file   rwf =      auxiliary input file name\n       file   swf =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       file   xig =      auxiliary input file name\nSOURCE\n       user/rweiss/Madjgradient2d_gpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024            sfadjgradient2d_gpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjtest-Tuple{}","page":"Home","title":"Madagascar.sfadjtest","text":"sfadjtest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjtest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjtest. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjtest(1)                  Madagascar Manuals                  sfadjtest(1)\n\nNAME\n       sfadjtest - Ajoint test of prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfadjtest < fft.rsf flag= reg=\n\nPARAMETERS\n       flag   = ®\n       reg    = ®\nSOURCE\n       user/jingwei/Madjtest.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfadjtest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfadjtest1-Tuple{}","page":"Home","title":"Madagascar.sfadjtest1","text":"sfadjtest1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfadjtest1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfadjtest1. See ?m8r for examples.\n\nRSF Documentation\n\nsfadjtest1(1)                 Madagascar Manuals                 sfadjtest1(1)\n\nNAME\n       sfadjtest1 - Ajoint test of prop1Pa and prop1P, prop2Na and prop2N\n\nSYNOPSIS\n       sfadjtest1 < fft.rsf\n\nSOURCE\n       user/jingwei/Madjtest1.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfadjtest1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfafac-Tuple{}","page":"Home","title":"Madagascar.sfafac","text":"sfafac(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfafac on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfafac. See ?m8r for examples.\n\nRSF Documentation\n\nsfafac(1)                     Madagascar Manuals                     sfafac(1)\n\nNAME\n       sfafac - Wilson-Burg factorization\n\nSYNOPSIS\n       sfafac < Fa.rsf > Ff.rsf lag=Fl.rsf ompchunk=1 verb=n stable=n niter=20\n       nn=1000 nf=32\n\nPARAMETERS\n       string lag =      auxiliary output file name\n       int    nf =32      factor coefficients\n       int    niter =20      Wilson iterations\n       int    nn =1000      Helix diameter\n       int    ompchunk =1      OMP chunk size\n       bool   stable =n [y/n]     stability flag\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/gee/Mafac.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfafac(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfafd2d-Tuple{}","page":"Home","title":"Madagascar.sfafd2d","text":"sfafd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfafd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfafd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfafd2d(1)                    Madagascar Manuals                    sfafd2d(1)\n\nNAME\n       sfafd2d  -  2D  coustic time-domain FD modeling with different boundary\n       conditions\n\nSYNOPSIS\n       sfafd2d  <  Fw.rsf  >  Fo.rsf  vel=Fv.rsf  ref=Fr.rsf   verb=0   free=n\n       ifoneway=y ifsponge=y nb=5\n\nPARAMETERS\n       bool   free =n [y/n]\n       bool   ifoneway =y [y/n]\n       bool   ifsponge =y [y/n]\n       int    nb =5      setup I/O files\n       file   ref =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =0 [y/n]\nSOURCE\n       user/chenyk/Mafd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfafd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfafd2domp-Tuple{}","page":"Home","title":"Madagascar.sfafd2domp","text":"sfafd2domp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfafd2domp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfafd2domp. See ?m8r for examples.\n\nRSF Documentation\n\nsfafd2domp(1)                 Madagascar Manuals                 sfafd2domp(1)\n\nNAME\n       sfafd2domp - 2D coustic time-domain FD modeling with different boundary\n       conditions using OpenMP\n\nSYNOPSIS\n       sfafd2domp <  Fw.rsf  >  Fo.rsf  vel=Fv.rsf  ref=Fr.rsf  verb=0  free=n\n       ifoneway=y ifsponge=y nb=5\n\nPARAMETERS\n       bool   free =n [y/n]\n       bool   ifoneway =y [y/n]\n       bool   ifsponge =y [y/n]\n       int    nb =5      setup I/O files\n       file   ref =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =0 [y/n]\nSOURCE\n       user/chenyk/Mafd2domp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfafd2domp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfagc-Tuple{}","page":"Home","title":"Madagascar.sfagc","text":"sfagc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfagc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfagc. See ?m8r for examples.\n\nRSF Documentation\n\nsfagc(1)                      Madagascar Manuals                      sfagc(1)\n\nNAME\n       sfagc - Automatic gain control.\n\nSYNOPSIS\n       sfagc < in.rsf > out.rsf repeat=1 rect#=(125,1,1,...)\n\nCOMMENTS\n       October 2011 program of the month: http://ahay.org/blog/2011/10/01/pro‐\n       gram-of-the-month-sfagc/\n\nPARAMETERS\n       int    rect# =(125,1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\nUSED IN\n       bei/dpmv/krchdmo\n       bei/krch/wgkirch\n       bei/vela/vscan\nSOURCE\n       system/generic/Magc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfagc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfagmig-Tuple{}","page":"Home","title":"Madagascar.sfagmig","text":"sfagmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfagmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfagmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfagmig(1)                    Madagascar Manuals                    sfagmig(1)\n\nNAME\n       sfagmig - Angle-gather constant-velocity time migration.\n\nSYNOPSIS\n       sfagmig < in.rsf > out.rsf vel= ng= dg= g0= na=nx a=80.\n\nPARAMETERS\n       float  a =80.       maximum dip angle\n       float  dg =      reflection angle sampling\n       float  g0 =      reflection angle origin\n       int    na =nx      number of dip angles\n       int    ng =      number of reflection angles\n       float  vel =      velocity\nSOURCE\n       system/seismic/Magmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfagmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfahelicon-Tuple{}","page":"Home","title":"Madagascar.sfahelicon","text":"sfahelicon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfahelicon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfahelicon. See ?m8r for examples.\n\nRSF Documentation\n\nsfahelicon(1)                 Madagascar Manuals                 sfahelicon(1)\n\nNAME\n       sfahelicon - Apply multidimensional nonstationary filter on a helix.\n\nSYNOPSIS\n       sfahelicon < in.rsf filt=filt.rsf > out.rsf n= dim=ndim lag=\n\nPARAMETERS\n       int    dim =ndim      number of dimensions\n       file   filt =      auxiliary output file name\n       string lag =      file with filter lags\n       ints   n =       [dim]\nSOURCE\n       user/gee/Mahelicon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfahelicon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfahpef-Tuple{}","page":"Home","title":"Madagascar.sfahpef","text":"sfahpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfahpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfahpef. See ?m8r for examples.\n\nRSF Documentation\n\nsfahpef(1)                    Madagascar Manuals                    sfahpef(1)\n\nNAME\n       sfahpef - Adaptive multidimensional nonstationary PEF.\n\nSYNOPSIS\n       sfahpef < in.rsf > filt.rsf maskin=mask.rsf a= center= gap= n= dim=ndim\n       na=0 niter=100 verb=y lag= res=\n\nPARAMETERS\n       ints   a =       [dim]\n       ints   center =       [dim]\n       int    dim =ndim      number of dimensions\n       ints   gap =       [dim]\n       string lag =      output file for filter lags\n       string maskin =      optional input mask  file  (auxiliary  input  file\n              name)\n       ints   n =       [dim]\n       int    na =0      filter size\n       int    niter =100      number of iterations\n       string res =      output residual (optional)\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/gee/Mahpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfahpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfai2refl-Tuple{}","page":"Home","title":"Madagascar.sfai2refl","text":"sfai2refl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfai2refl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfai2refl. See ?m8r for examples.\n\nRSF Documentation\n\nsfai2refl(1)                  Madagascar Manuals                  sfai2refl(1)\n\nNAME\n       sfai2refl - Convert acoustic impedance to reflectivity.\n\nSYNOPSIS\n       sfai2refl < ai.rsf > mod.rsf\n\nCOMMENTS\n       August         2013         program         of        the        month:\n       http://www.ahay.org/blog/2013/08/02/program-of-the-month-sfai2refl/\n\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n\nSOURCE\n       system/seismic/Mai2refl.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfai2refl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaimplfd1-Tuple{}","page":"Home","title":"Madagascar.sfaimplfd1","text":"sfaimplfd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaimplfd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaimplfd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfaimplfd1(1)                 Madagascar Manuals                 sfaimplfd1(1)\n\nNAME\n       sfaimplfd1 - Implicit solution of 1-D acoustic wave equation.\n\nSYNOPSIS\n       sfaimplfd1 < vel.rsf > usol.rsf src=src.rsf niter=10\n\nPARAMETERS\n       int    niter =10      Number of solver iterations\n       string src =      Source wavelet (auxiliary input file name)\nSOURCE\n       user/petsc/Maimplfd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfaimplfd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaimplfd2-Tuple{}","page":"Home","title":"Madagascar.sfaimplfd2","text":"sfaimplfd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaimplfd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaimplfd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfaimplfd2(1)                 Madagascar Manuals                 sfaimplfd2(1)\n\nNAME\n       sfaimplfd2 - Implicit solution of 2-D acoustic wave equation.\n\nSYNOPSIS\n       sfaimplfd2 < vel.rsf > usol.rsf src=src.rsf niter=10 fourth=y\n\nPARAMETERS\n       bool   fourth =y [y/n]     Higher order flag\n       int    niter =10      Number of solver iterations\n       string src =      Source wavelet (auxiliary input file name)\nSOURCE\n       user/petsc/Maimplfd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfaimplfd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaliasp-Tuple{}","page":"Home","title":"Madagascar.sfaliasp","text":"sfaliasp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaliasp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaliasp. See ?m8r for examples.\n\nRSF Documentation\n\nsfaliasp(1)                   Madagascar Manuals                   sfaliasp(1)\n\nNAME\n       sfaliasp - Aliasing test.\n\nSYNOPSIS\n       sfaliasp > out.rsf n1=600 n2=24 cycles=10. ix0=0 slow=0.1\n\nPARAMETERS\n       float  cycles =10.       wave frequency\n       int    ix0 =0      central trace\n       int    n1 =600 ®\n       int    n2 =24      dimensions\n       float  slow =0.1      slowness\nUSED IN\n       bei/krch/alias\n       bei/trimo/subsamp\nSOURCE\n       system/generic/Maliasp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfaliasp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanalytical-Tuple{}","page":"Home","title":"Madagascar.sfanalytical","text":"sfanalytical(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanalytical on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanalytical. See ?m8r for examples.\n\nRSF Documentation\n\nsfanalytical(1)               Madagascar Manuals               sfanalytical(1)\n\nNAME\n       sfanalytical  - First-arrival traveltime table using analytical travel‐\n       times\n\nSYNOPSIS\n       sfanalytical < in.rsf > out.rsf vel=y order=3 yshot=x0 +  0.5*(nx-1)*dx\n       zshot=z0\n\nPARAMETERS\n       int    order =3      interpolation accuracy for velocity\n       bool   vel =y [y/n]     y, input is velocity; n, slowness\n       float  yshot =x0 + 0.5*(nx-1)*dx ®\n       float  zshot =z0      read velocity or slowness\nSOURCE\n       user/fomels/Manalytical.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfanalytical(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfangle-Tuple{}","page":"Home","title":"Madagascar.sfangle","text":"sfangle(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfangle on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfangle. See ?m8r for examples.\n\nRSF Documentation\n\nsfangle(1)                    Madagascar Manuals                    sfangle(1)\n\nNAME\n       sfangle - Illustration of angle gathers.\n\nSYNOPSIS\n       sfangle   >   angle.rsf  nw=513  nm=257  nh=257  dw=1./(2*(nw-1)*0.004)\n       dm=1./(2*(nm-1)*0.01) dh=1./(2*(nh-1)*0.01) w0=dw vel=2.\n\nPARAMETERS\n       float  dh =1./(2*(nh-1)*0.01) ®\n       float  dm =1./(2*(nm-1)*0.01) ®\n       float  dw =1./(2*(nw-1)*0.004) ®\n       int    nh =257 ®\n       int    nm =257 ®\n       int    nw =513 ®\n       float  vel =2.  ®\n       float  w0 =dw ®\nSOURCE\n       user/fomels/Mangle.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfangle(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfangle2-Tuple{}","page":"Home","title":"Madagascar.sfangle2","text":"sfangle2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfangle2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfangle2. See ?m8r for examples.\n\nRSF Documentation\n\nsfangle2(1)                   Madagascar Manuals                   sfangle2(1)\n\nNAME\n       sfangle2 - Another illustration of angle gathers.\n\nSYNOPSIS\n       sfangle2 > angle.rsf nx=451 ny=451 dx=0.1 dy=0.1 zx=0. zy=0.\n\nPARAMETERS\n       float  dx =0.1 ®\n       float  dy =0.1 ®\n       int    nx =451 ®\n       int    ny =451 ®\n       float  zx =0.  ®\n       float  zy =0.  ®\nSOURCE\n       user/fomels/Mangle2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfangle2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfangmig2-Tuple{}","page":"Home","title":"Madagascar.sfangmig2","text":"sfangmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfangmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfangmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsfangmig2(1)                  Madagascar Manuals                  sfangmig2(1)\n\nNAME\n       sfangmig2 - Angle-gather constant-velocity time migration.\n\nSYNOPSIS\n       sfangmig2  <  in.rsf  > out.rsf semb=semb.rsf mask=mask.rsf vin=vin.rsf\n       adj=n weighting=y  na=  amax=  ng=na  gmax=amax  nxi=nx  xi0=x0  dxi=dx\n       ntau=nt  tau0=t0  dtau=dt  nh=  h0=  dh=  ng=na gmax=amax nx=nxi x0=xi0\n       dx=dxi nt=ntau t0=tau0 dt=dtau eps=0.00001 l2=y\n\nPARAMETERS\n       bool   adj =n [y/n]     if y modeling, if n, migration\n       float  amax =      maximum dip angle\n       float  dh =      offset increment\n       float  dt =dtau      time increment\n       float  dtau =dt      output vertical sampling\n       float  dx =dxi      data domain spatial increment\n       float  dxi =dx      output sampling\n       float  eps =0.00001      epsilon for division in semblance calc\n       float  gmax =amax      maximum reflection angle\n       float  h0 =      initial offset\n       bool   l2 =y [y/n]     if y use l2 norm for semb, if n, use l1 norm\n       string mask =      input file contining image mask locations, 0 =  skip\n              (auxiliary input file name)\n       int    na =      number of dip angles\n       int    ng =na      number of reflection angles\n       int    nh =      number of offsets\n       int    nt =ntau      number time samples\n       int    ntau =nt      output vertical samples\n       int    nx =nxi      data domain spatial samples\n       int    nxi =nx      output samples\n       string semb  =       output file containing Semblance (auxiliary output\n              file name)\n       float  t0 =tau0      time orgin\n       float  tau0 =t0      output vertical orgin\n       string vin =      input velocity file (auxiliary input file name)\n       bool   weighting =y [y/n]     kirchhoff weighting?\n       float  x0 =xi0      data domain spatial orgin\n       float  xi0 =x0      output orgin\nSOURCE\n       user/luke/Mangmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfangmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfangmigM-Tuple{}","page":"Home","title":"Madagascar.sfangmigM","text":"sfangmigM(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfangmigM on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfangmigM. See ?m8r for examples.\n\nRSF Documentation\n\nsfangmigM(1)                  Madagascar Manuals                  sfangmigM(1)\n\nNAME\n       sfangmigM  -  Angle-gather  constant-velocity  time migration with mask\n       file.\n\nSYNOPSIS\n       sfangmigM < in.rsf > out.rsf  semb=semb.rsf  mask=mask.rsf  vin=vin.rsf\n       adj=n  weighting=y  na=  amax=  ng=na  gmax=amax  nxi=nx  xi0=x0 dxi=dx\n       ntau=nt tau0=t0 dtau=dt nh=  h0=  dh=  ng=na  gmax=amax  nx=nxi  x0=xi0\n       dx=dxi nt=ntau t0=tau0 dt=dtau eps=0.00001 l2=y\n\nPARAMETERS\n       bool   adj =n [y/n]     if y modeling, if n, migration\n       float  amax =      maximum dip angle\n       float  dh =      offset increment\n       float  dt =dtau      time increment\n       float  dtau =dt      output vertical sampling\n       float  dx =dxi      data domain spatial increment\n       float  dxi =dx      output sampling\n       float  eps =0.00001      epsilon for division in semblance calc\n       float  gmax =amax      maximum reflection angle\n       float  h0 =      initial offset\n       bool   l2 =y [y/n]     if y use l2 norm for semb, if n, use l1 norm\n       string mask  =      input file contining image mask locations, 0 = skip\n              (auxiliary input file name)\n       int    na =      number of dip angles\n       int    ng =na      number of reflection angles\n       int    nh =      number of offsets\n       int    nt =ntau      number time samples\n       int    ntau =nt      output vertical samples\n       int    nx =nxi      data domain spatial samples\n       int    nxi =nx      output samples\n       string semb =      output file containing Semblance  (auxiliary  output\n              file name)\n       float  t0 =tau0      time orgin\n       float  tau0 =t0      output vertical orgin\n       string vin =      input velocity file (auxiliary input file name)\n       bool   weighting =y [y/n]     kirchhoff weighting?\n       float  x0 =xi0      data domain spatial orgin\n       float  xi0 =x0      output orgin\nSOURCE\n       user/luke/MangmigM.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfangmigM(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanisodiffuse-Tuple{}","page":"Home","title":"Madagascar.sfanisodiffuse","text":"sfanisodiffuse(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanisodiffuse on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanisodiffuse. See ?m8r for examples.\n\nRSF Documentation\n\nsfanisodiffuse(1)             Madagascar Manuals             sfanisodiffuse(1)\n\nNAME\n       sfanisodiffuse - Anisotropic diffusion by regularized inversion.\n\nSYNOPSIS\n       sfanisodiffuse  <  in.rsf  > out.rsf vx=fvx.rsf vy=fvy.rsf niter=10 re‐\n       peat=1 eps=1.\n\nCOMMENTS\n       Applied in 3D in a slice by slice fashion: set of 2D diffusions  for  a\n       fixed time sample.\n\nPARAMETERS\n       float  eps =1.       regularization parameter\n       int    niter =10      number of conjugate-gradient iterations\n       int    repeat =1      number of smoothing iterations\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Manisodiffuse.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfanisodiffuse(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanisodiffuse2-Tuple{}","page":"Home","title":"Madagascar.sfanisodiffuse2","text":"sfanisodiffuse2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanisodiffuse2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanisodiffuse2. See ?m8r for examples.\n\nRSF Documentation\n\nsfanisodiffuse2(1)            Madagascar Manuals            sfanisodiffuse2(1)\n\nNAME\n       sfanisodiffuse2 - Anisotropic diffusion by regularized inversion.\n\nSYNOPSIS\n       sfanisodiffuse2  <  in.rsf > out.rsf vx=fvx.rsf vy=fvy.rsf niter=10 re‐\n       peat=1 eps=1.\n\nPARAMETERS\n       float  eps =1.       regularization parameter\n       int    niter =10      number of conjugate-gradient iterations\n       int    repeat =1      number of smoothing iterations\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Manisodiffuse2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfanisodiffuse2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanisolr2-Tuple{}","page":"Home","title":"Madagascar.sfanisolr2","text":"sfanisolr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanisolr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanisolr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfanisolr2(1)                 Madagascar Manuals                 sfanisolr2(1)\n\nNAME\n       sfanisolr2 - Lowrank decomposition for 2-D anisotropic wave propagation\n       (Real number).\n\nSYNOPSIS\n       sfanisolr2 < velz.rsf vels=vels.rsf fft=fft.rsf xtap=fxtap.rsf ktap=fk‐\n       tap.rsf  left=left.rsf  > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n       fftexp0=0 approx=2 relation=3 xtaper=false ktaper=false\n\nPARAMETERS\n       approx =2      Type of approximation (0=exact 1=zone 2=acoustic)\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       fftexp0\n              =0      model/mig with sffftexp0\n       file   ktap =      auxiliary input file name\n       ktaper =false      if taper in k\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       relation\n              =3      Type of q relationship  (0=shale,  1=sand,  2=carbonate,\n              default being smallest error)\n       seed   =time(NULL ®\n       file   vels =      auxiliary input file name\n       file   xtap =      auxiliary input file name\n       xtaper =false      if taper in x\nSOURCE\n       user/fomels/Manisolr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfanisolr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanovc-Tuple{}","page":"Home","title":"Madagascar.sfanovc","text":"sfanovc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanovc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanovc. See ?m8r for examples.\n\nRSF Documentation\n\nsfanovc(1)                    Madagascar Manuals                    sfanovc(1)\n\nNAME\n       sfanovc  -  Oriented anisotropy continuation: shifted hyperbola travel-\n       time approximation.\n\nSYNOPSIS\n       sfanovc < in.rsf >  out.rsf  eps=0.1  nv=1  lagrange=n  plus=y  debug=y\n       isotr=n testwarp=n full=n v0= ns=1 ds= s0= smax= epsr=0.001 s0=\n\nCOMMENTS\n       Axis order: t, p, x\n\nPARAMETERS\n       bool   debug =y [y/n]     Implement debugger: add it later\n       float  ds =      s step size\n       float  eps =0.1      stretch regularization\n       float  epsr =0.001      damper for root\n       bool   full =n [y/n]     full accuracy flag - considers all (s-1) terms\n              in any power\n       bool   isotr =n [y/n]     Implement debugger: add it later\n       bool   lagrange =n [y/n]     Use Lagrangian method\n       int    ns =1      s steps\n       int    nv =1      number of velocity steps\n       bool   plus =y [y/n]     Plus or minus in coefficients: I have two ver‐\n              sions\n       float  s0 =      start\n       float  smax = ®\n       bool   testwarp =n [y/n]     Implement debugger: add it later\n       float  v0 = ®\nSOURCE\n       system/seismic/Manovc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfanovc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfanovcv-Tuple{}","page":"Home","title":"Madagascar.sfanovcv","text":"sfanovcv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfanovcv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfanovcv. See ?m8r for examples.\n\nRSF Documentation\n\nsfanovcv(1)                   Madagascar Manuals                   sfanovcv(1)\n\nNAME\n       sfanovcv  - Oriented anisotropy continuation: shifted hyperbola travel-\n       time approximation.\n\nSYNOPSIS\n       sfanovcv <  in.rsf  >  out.rsf  velocity=vel.rsf  kappa1=kappa1file.rsf\n       kappa2=kappa2file.rsf  kappa3=kappa3file.rsf  rootin=rootin.rsf eps=0.1\n       clip=0.5 windowtime=t0 + (nt-1.0)*dt  nv=1  lagrange=n  plus=y  debug=y\n       isotr=n testwarp=n full=n v0= v0= ns=1 ds= s0= smax= epsr=0.001 s0=\n\nCOMMENTS\n       Axis order: t, p, x\n\nPARAMETERS\n       float  clip =0.5      maximum stretch\n       bool   debug =y [y/n]     Implement debugger: add it later\n       float  ds =      s step size\n       float  eps =0.1      stretch regularization\n       float  epsr =0.001      damper for root\n       bool   full =n [y/n]     full accuracy flag - considers all (s-1) terms\n              in any power\n       bool   isotr =n [y/n]     Implement debugger: add it later\n       string kappa1 =      auxiliary output file name\n       string kappa2 =      auxiliary output file name\n       string kappa3 =      auxiliary output file name\n       bool   lagrange =n [y/n]     Use Lagrangian method\n       int    ns =1      s steps\n       int    nv =1      number of velocity steps\n       bool   plus =y [y/n]     Plus or minus in coefficients: I have two ver‐\n              sions\n       string rootin =      auxiliary output file name\n       float  s0 =      start\n       float  smax = ®\n       bool   testwarp =n [y/n]     Implement debugger: add it later\n       float  v0 =      constant velocity (if no velocity=)\n       string velocity =      velocity file (auxiliary input file name)\n       float  windowtime =t0 + (nt-1.0)*dt      maximum time 2 consider\nSOURCE\n       system/seismic/Manovcv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfanovcv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapef-Tuple{}","page":"Home","title":"Madagascar.sfapef","text":"sfapef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapef. See ?m8r for examples.\n\nRSF Documentation\n\nsfapef(1)                     Madagascar Manuals                     sfapef(1)\n\nNAME\n       sfapef - Estimate adaptive nonstationary PEF on aliased traces.\n\nSYNOPSIS\n       sfapef < mat.rsf > flt.rsf pred=pre.rsf maskin=maskin.rsf maskout=mask‐\n       out.rsf a= jump=2 dim=mdim niter=100 verb=n\n\nPARAMETERS\n       ints   a =       [ndim]\n       int    dim =mdim      number of dimensions\n       int    jump =2      Jump parameter\n       string maskin =      optional input mask  file  (auxiliary  input  file\n              name)\n       string maskout  =      optional output mask file (auxiliary output file\n              name)\n       int    niter =100      number of iterations\n       string pred =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mapef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfapef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapef2-Tuple{}","page":"Home","title":"Madagascar.sfapef2","text":"sfapef2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapef2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapef2. See ?m8r for examples.\n\nRSF Documentation\n\nsfapef2(1)                    Madagascar Manuals                    sfapef2(1)\n\nNAME\n       sfapef2 - 2D adaptive nonstationary PEF on aliased traces.\n\nSYNOPSIS\n       sfapef2  <  mat.rsf  >  flt.rsf  pred=pre.rsf  maskin=maskin.rsf  mask‐\n       out=maskout.rsf a= jump=2 niter=100 verb=n\n\nPARAMETERS\n       ints   a =       [mdim]\n       int    jump =2      Jump parameter\n       string maskin =      optional input mask  file  (auxiliary  input  file\n              name)\n       string maskout  =      optional output mask file (auxiliary output file\n              name)\n       int    niter =100      number of iterations\n       string pred =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mapef2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfapef2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapefsignoi-Tuple{}","page":"Home","title":"Madagascar.sfapefsignoi","text":"sfapefsignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapefsignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapefsignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsfapefsignoi(1)               Madagascar Manuals               sfapefsignoi(1)\n\nNAME\n       sfapefsignoi - Signal and noise separation using adaptive PEFs.\n\nSYNOPSIS\n       sfapefsignoi   <   in.rsf  sfilt=sfilt.rsf  nfilt=nfilt.rsf  >  out.rsf\n       niter=100 eps=0. verb=n\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       file   nfilt =      auxiliary input file name\n       int    niter =100      Number of iterations\n       file   sfilt =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mapefsignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfapefsignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapick-Tuple{}","page":"Home","title":"Madagascar.sfapick","text":"sfapick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapick. See ?m8r for examples.\n\nRSF Documentation\n\nsfapick(1)                    Madagascar Manuals                    sfapick(1)\n\nNAME\n       sfapick - Automatic event PICKing\n\nSYNOPSIS\n       sfapick < in.rsf > out.rsf\n\nSOURCE\n       user/chen/Mapick.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfapick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapprox-Tuple{}","page":"Home","title":"Madagascar.sfapprox","text":"sfapprox(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapprox on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapprox. See ?m8r for examples.\n\nRSF Documentation\n\nsfapprox(1)                   Madagascar Manuals                   sfapprox(1)\n\nNAME\n       sfapprox - Illustrating non-hyperbolic approximations\n\nSYNOPSIS\n       sfapprox > out.rsf np=300 nq=300 dp=1./(np-1) dq=4./(nq-1) dist= appr=\n\nPARAMETERS\n       string appr =      approximation type\n       string dist =      distribution type\n       float  dp =1./(np-1) ®\n       float  dq =4./(nq-1) ®\n       int    np =300 ®\n       int    nq =300 ®\nSOURCE\n       user/fomels/Mapprox.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfapprox(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfapradon2-Tuple{}","page":"Home","title":"Madagascar.sfapradon2","text":"sfapradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfapradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfapradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfapradon2(1)                 Madagascar Manuals                 sfapradon2(1)\n\nNAME\n       sfapradon2 - apex shifted 2to3 Radon transform (using 2to2 butterfly)\n\nSYNOPSIS\n       sfapradon2 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp= N=\n\nPARAMETERS\n       N      =      number of partitions\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mapradon2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfapradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaps3d-Tuple{}","page":"Home","title":"Madagascar.sfaps3d","text":"sfaps3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaps3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaps3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfaps3d(1)                    Madagascar Manuals                    sfaps3d(1)\n\nNAME\n       sfaps3d  -  3D  acoustic  wavefield  modeling using the pseudo-spectral\n       method\n\nSYNOPSIS\n       sfaps3d < Fi.rsf >  Fo.rsf  dat=Fd.rsf  dat_v=Fd_v.rsf  snaps=snaps.rsf\n       spx=  spy=  spz=  f0=  t0= A= jsnap=0 cmplx=y pad1=1 abc=n nbt= nbb=nbt\n       nblx=nbt nbrx=nbt nbly=nbt nbry=nbt  ct=  cb=ct  clx=ct  crx=ct  cly=ct\n       cry=ct  verb=n  ps=n  tri=n  vref=1500 nt= dt= gplx=-1 gply=-1 gpl_v=-1\n       src=0 ns=1 gpx=-1 gpy=-1 gpz=-1 gpx_v=-1 gpy_v=-1 gpz_v=-1\n\nCOMMENTS\n       DEMO:                             https://github.com/chenyk1990/tutori‐\n       als/blob/main/demo/aps3d/SConstruct\n\nPARAMETERS\n       floats A =      wavelet amplitude [ns]\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  clx =ct ®\n       float  cly =ct ®\n       bool   cmplx =y [y/n]     use complex fft\n       float  crx =ct ®\n       float  cry =ct ®\n       float  ct = ®\n       string dat =      auxiliary input file name\n       string dat_v =      auxiliary input file name\n       float  dt = ®\n       floats f0 =      wavelet peak freq [ns]\n       int    gpl_v =-1      geophone height\n       int    gplx =-1      geophone length X\n       int    gply =-1      geophone length Y\n       int    gpx =-1      geophone position x\n       int    gpx_v =-1      geophone position x\n       int    gpy =-1      geophone position y\n       int    gpy_v =-1      geophone position y\n       int    gpz =-1      geophone position z\n       int    gpz_v =-1      geophone position z\n       int    jsnap =0      interval for snapshots\n       int    nbb =nbt ®\n       int    nblx =nbt ®\n       int    nbly =nbt ®\n       int    nbrx =nbt ®\n       int    nbry =nbt ®\n       int    nbt = ®\n       int    ns =1      source type\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       bool   ps =n [y/n]     use pseudo-spectral\n       file   snaps =      auxiliary output file name\n       ints   spx =      shot position x [ns]\n       ints   spy =      shot position y [ns]\n       ints   spz =      shot position z [ns]\n       int    src =0      source type\n       floats t0 =      wavelet time lag [ns]\n       bool   tri =n [y/n]     if choose time reversal imaging\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500      reference velocity (default using water)\nSOURCE\n       user/chenyk/Maps3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfaps3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfarrival-Tuple{}","page":"Home","title":"Madagascar.sfarrival","text":"sfarrival(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfarrival on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfarrival. See ?m8r for examples.\n\nRSF Documentation\n\nsfarrival(1)                  Madagascar Manuals                  sfarrival(1)\n\nNAME\n       sfarrival - Multiple-arrival interpolation from down-marching.\n\nSYNOPSIS\n       sfarrival < in.rsf place=place.rsf > out.rsf depth=depth.rsf sx=0. nw=3\n\nPARAMETERS\n       string depth =      auxiliary input file name\n       int    nw =3      interpolation accuracy\n       file   place =      auxiliary input file name\n       float  sx =0.       source x position\nSOURCE\n       user/fomels/Marrival.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfarrival(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfasc2rsf-Tuple{}","page":"Home","title":"Madagascar.sfasc2rsf","text":"sfasc2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfasc2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfasc2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfasc2rsf(1)                  Madagascar Manuals                  sfasc2rsf(1)\n\nNAME\n       sfasc2rsf - ERROR : need numpy\n\nSYNOPSIS\n       sfasc2rsf > po.rsf\n\nSOURCE\n       user/chen/Masc2rsf.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfasc2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfasg-Tuple{}","page":"Home","title":"Madagascar.sfasg","text":"sfasg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfasg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfasg. See ?m8r for examples.\n\nRSF Documentation\n\nsfasg(1)                      Madagascar Manuals                      sfasg(1)\n\nNAME\n       sfasg - None\n\nSYNOPSIS\n       sfasg\n\nSOURCE\n       trip/iwave/asg/main/asg.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfasg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfatm1-Tuple{}","page":"Home","title":"Madagascar.sfatm1","text":"sfatm1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfatm1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfatm1. See ?m8r for examples.\n\nRSF Documentation\n\nsfatm1(1)                     Madagascar Manuals                     sfatm1(1)\n\nNAME\n       sfatm1 - 1D alpha-trimmed-mean filtering.\n\nSYNOPSIS\n       sfatm1 < in.rsf > out.rsf nfw= alpha= boundary=n\n\nCOMMENTS\n       median filter (alpha=0.5); mean filter (alpha=0.)\n\nPARAMETERS\n       float  alpha  =       0.0  <=  alpha <= 0.5: median filter (alpha=0.5);\n              mean filter (alpha=0.)\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\nSOURCE\n       user/yliu/Matm1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfatm1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfatm2-Tuple{}","page":"Home","title":"Madagascar.sfatm2","text":"sfatm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfatm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfatm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfatm2(1)                     Madagascar Manuals                     sfatm2(1)\n\nNAME\n       sfatm2 - 2D alpha-trimmed-mean filtering.\n\nSYNOPSIS\n       sfatm2  <  in.rsf  >  out.rsf  nfw1= nfw2=nfw1 alpha= boundary=n verb=n\n       type=\n\nCOMMENTS\n       1D filter (nfw2=1); 2D filter (otherwise)  median  filter  (alpha=0.5);\n       mean filter (alpha=0.)\n\nPARAMETERS\n       float  alpha  =       0.0  <=  alpha <= 0.5: median filter (alpha=0.5);\n              mean filter (alpha=0.)\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw1 =      filter-window length in n1 direction  (positive  and\n              odd integer)\n       int    nfw2  =nfw1       filter-window  length  in  n2  direction  (de‐\n              fault=nfw1)\n       string type =      [rectangular,cross] 2-D window type, the default  is\n              rectangular\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Matm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfatm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfattr-Tuple{}","page":"Home","title":"Madagascar.sfattr","text":"sfattr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfattr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfattr. See ?m8r for examples.\n\nRSF Documentation\n\nsfattr(1)                     Madagascar Manuals                     sfattr(1)\n\nNAME\n       sfattr - Display dataset attributes.\n\nSYNOPSIS\n       sfattr < in.rsf lval=2 want=\n\nCOMMENTS\n       Sample  output  from  \"sfspike  n1=100  |  sfbandpass  fhi=60 | sfattr\"\n       ******************************************* rms =      0.992354 mean  =\n       0.987576  2-norm  =        9.92354  variance  =    0.00955481 std dev =\n       0.0977487 max =       1.12735 at 97 min =      0.151392 at 100  nonzero\n       samples        =        100       total       samples       =       100\n       *******************************************\n\n       rms                = sqrt[  sum(data^2)  /  n  ]  mean                =\n       sum(data)  /  n norm               = sum(abs(data)^lval)^(1/lval) vari‐\n       ance           = [ sum(data^2) - n*mean^2 ] / [ n-1 ]  standard  devia‐\n       tion = sqrt [ variance ]\n\nPARAMETERS\n       int    lval  =2       norm option, lval is a non-negative integer, com‐\n              putes the vector lval-norm\n       string want =      'all'(default), 'rms', 'mean', 'norm', 'var',\n                     'std', 'max', 'min', 'nonzero', 'samples', 'short'\n                      want=   'rms' displays the root mean square\n                      want=   'norm' displays the square norm, otherwise spec‐\n              ified by lval.\n                      want=   'var' displays the variance\n                      want=   'std' displays the standard deviation\n                      want=   'nonzero' displays number of nonzero samples\n                      want=   'samples' displays total number of samples\n                      want=   'short' displays a short one-line version\nSOURCE\n       system/main/attr.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfattr\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfattr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfautocorr-Tuple{}","page":"Home","title":"Madagascar.sfautocorr","text":"sfautocorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfautocorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfautocorr. See ?m8r for examples.\n\nRSF Documentation\n\nsfautocorr(1)                 Madagascar Manuals                 sfautocorr(1)\n\nNAME\n       sfautocorr - Autocorrelation for helix filters.\n\nSYNOPSIS\n       sfautocorr < in.rsf > out.rsf lag=lag0.rsf lagout=lag.rsf\n\nPARAMETERS\n       string lag =      optional input file with filter lags (auxiliary input\n              file name)\n       string lagout =      auxiliary output file name\nSOURCE\n       user/gee/Mautocorr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfautocorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfautofocusing-Tuple{}","page":"Home","title":"Madagascar.sfautofocusing","text":"sfautofocusing(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfautofocusing on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfautofocusing. See ?m8r for examples.\n\nRSF Documentation\n\nsfautofocusing(1)             Madagascar Manuals             sfautofocusing(1)\n\nNAME\n       sfautofocusing - Marchenko-Wapenaar-Broggini iterative scheme\n\nSYNOPSIS\n       sfautofocusing < Fplus.rsf refl=FRefl.rsf > FGp.rsf Gm=FGm.rsf G=FG.rsf\n       H=FH.rsf  p=Fp.rsf  q=Fq.rsf  window=Ftwin.rsf  verb=n  conj=n   twin=n\n       pandq=n Gtot=n Htot=n niter=1 nshots=1 scale=1.0 eps=1e-4 shift=5\n\nCOMMENTS\n       sfmarchenko  <  downgoing.rsf  refl=REFL_000.rsf  conj=y  verb=n Gtot=y\n       niter=21 nshots=401 scale=1 eps=1e-4 shift=5 Gm=Gm.rsf G=G.rsf> Gp.rsf\n\n       ======= INPUTS ============\n\n       p0plus.rsf: initial downgoing wavefield\n\n       REFL_000.rsf: Fourier transform of the reflection response\n\n       ======= PARAMETERS ========\n\n       conj  = [y]/n  - complex-conjugation of the first input (corresponds to\n       time-reversal in time) verb = y/[n]   - verbosity flag twin  = y/[n]  -\n       returns the timewindow as one of the outputs (window=window.rsf)  pandq\n       =  y/[n]  -  pandq=true: returns p and q, pandq=false returns Gp and Gm\n       Gtot  = y/[n] - Gtot=true returns G=Gp+Gm Htot   =  y/[n]  -  Htot=true\n       returns  H=Gp-Gm  niter   = 1          - number of iterations nshots  =\n       1         - number of shots in the reflection response scale  = 1.0   -\n       scale  factor (often due to resampling) eps  = 1e-4         - threshold\n       for the timewindow shift  =  5          -  shift  in  samples  for  the\n       timewindow\n\nPARAMETERS\n       file   G =      auxiliary output file name\n       file   Gm =      auxiliary output file name\n       bool   Gtot =n [y/n]     Gtot=true: returns G=Gp+Gm\n       file   H =      auxiliary output file name\n       bool   Htot =n [y/n]     Htot=true: returns H=Gp-Gm\n       bool   conj =n [y/n]     complex conjugation (time-reversal) flag\n       float  eps =1e-4      threshold for the timewindow\n       int    niter =1      number of iterations\n       int    nshots =1      number of shots\n       file   p =      auxiliary output file name\n       bool   pandq =n [y/n]     pandq=true: returns p and q\n       file   q =      auxiliary output file name\n       string refl =      000.rsf are 7 characters (auxiliary input file name)\n       float  scale =1.0      scale factor\n       int    shift =5      shift in samples for the timewindow\n       bool   twin =n [y/n]     returns the timewindow as one of the outputs\n       bool   verb =n [y/n]     verbosity flag\n       file   window =      auxiliary output file name\nSOURCE\n       user/fbroggin/Mautofocusing.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfautofocusing(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfavo-Tuple{}","page":"Home","title":"Madagascar.sfavo","text":"sfavo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfavo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfavo. See ?m8r for examples.\n\nRSF Documentation\n\nsfavo(1)                      Madagascar Manuals                      sfavo(1)\n\nNAME\n       sfavo - Compute intercept and gradient by least squares.\n\nSYNOPSIS\n       sfavo < cmp.rsf > avo.rsf offset=offset.rsf half=y\n\nPARAMETERS\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       string offset =      auxiliary input file name\nSOURCE\n       system/seismic/Mavo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfavo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfavvvdwe2d-Tuple{}","page":"Home","title":"Madagascar.sfavvvdwe2d","text":"sfavvvdwe2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfavvvdwe2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfavvvdwe2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfavvvdwe2d(1)                Madagascar Manuals                sfavvvdwe2d(1)\n\nNAME\n       sfavvvdwe2d  -  2D acoustic variable-velocity variable-density time-do‐\n       main FD modeling\n\nSYNOPSIS\n       sfavvvdwe2d   <   Fwav.rsf   vel=Fvel.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf  > Fdat.rsf wfl=Fwfl.rsf verb=n free=n dabc=n adj=n snap=y\n       nb=NOP jsnap=1 dpt=n\n\nCOMMENTS\n       The code uses a standard second-order stencil  in  time.   The  coeffi‐\n       cients  of  the  spatial  stencil are computed by matching the transfer\n       function of the 6-point discretized first-derivative  operator  to  the\n       ideal response.\n\n       The code implements the linearized operator obtained from the system of\n       first-order PDEs parametrized in incompressibility and density\n\n       dv/dt = - 1./rho * grad(p) dp/dt = - K * div(v)\n\n       where rho  : density K    : incompressibility div  : divergence  opera‐\n       tor  grad  : gradient  operator p,v    : pressure and particle velocity\n       wavefields\n\n       The models supplied by the user are wave speed and  density,  the  code\n       performs  the  conversion  internally to buoyancy (inverse density) and\n       incompressibility.\n\n       Author: Francesco Perrone Date: February 2020\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjointness\n       bool   dabc =n [y/n]     Absorbing BC\n       file   den =      auxiliary input file name\n       bool   dpt =n [y/n]     run dot product test\n       bool   free =n [y/n]     Free surface\n       int    jsnap =1      undersampling factor for the wavefields\n       int    nb =NOP      thickness of the absorbing  boundary:  NOP  is  the\n              width of the FD stencil\n       file   rec =      auxiliary input file name\n       bool   snap =y [y/n]     wavefield snapshots\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/fperrone/Mavvvdwe2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfavvvdwe2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfavvvdwe3d-Tuple{}","page":"Home","title":"Madagascar.sfavvvdwe3d","text":"sfavvvdwe3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfavvvdwe3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfavvvdwe3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfavvvdwe3d(1)                Madagascar Manuals                sfavvvdwe3d(1)\n\nNAME\n       sfavvvdwe3d  -  3D acoustic variable-velocity variable-density time-do‐\n       main FD modeling\n\nSYNOPSIS\n       sfavvvdwe3d   <   Fwav.rsf   vel=Fvel.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf  > Fdat.rsf wfl=Fwfl.rsf verb=n free=n dabc=n adj=n snap=y\n       nb=NOP jsnap=1 dpt=n\n\nCOMMENTS\n       The code uses a standard second-order stencil  in  time.   The  coeffi‐\n       cients  of  the  spatial  stencil are computed by matching the transfer\n       function of the 6-point discretized first-derivative  operator  to  the\n       ideal response.\n\n       The code implements the linearized operator obtained from the system of\n       first-order PDEs parametrized in incompressibility and density\n\n       dv/dt = - 1./rho * grad(p) dp/dt = - K * div(v)\n\n       where rho  : density K    : incompressibility div  : divergence  opera‐\n       tor  grad  : gradient  operator p,v    : pressure and particle velocity\n       wavefields\n\n       The models supplied by the user are wave speed and  density,  the  code\n       performs  the  conversion  internally to buoyancy (inverse density) and\n       incompressibility.\n\n       Author: Francesco Perrone Date: November 2020\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjointness\n       bool   dabc =n [y/n]     Absorbing BC\n       file   den =      auxiliary input file name\n       bool   dpt =n [y/n]     run dot product test\n       bool   free =n [y/n]     Free surface\n       int    jsnap =1      undersampling factor for the wavefields\n       int    nb =NOP      thickness of the absorbing  boundary:  NOP  is  the\n              width of the FD stencil\n       file   rec =      auxiliary input file name\n       bool   snap =y [y/n]     wavefield snapshots\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/fperrone/Mavvvdwe3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfavvvdwe3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2d-Tuple{}","page":"Home","title":"Madagascar.sfawefd2d","text":"sfawefd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2d(1)                  Madagascar Manuals                  sfawefd2d(1)\n\nNAME\n       sfawefd2d - 2D acoustic time-domain FD modeling\n\nSYNOPSIS\n       sfawefd2d     <    file_wav.rsf    vel=file_vel.rsf    sou=file_src.rsf\n       rec=file_rec.rsf  >  file_dat.rsf   wfl=file_wfl.rsf   den=file_den.rsf\n       verb=n  snap=n  expl=n dabc=n cden=n adj=n fsrf=n optfd=n fdorder=4 hy‐\n       bridbc=n sinc=n jsnap=nt jdata=1 nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az)\n       oqx=sf_o(ax) dqz=sf_d(az) dqx=sf_d(ax)\n\nCOMMENTS\n       2Nth  order in space, 2nd order in time with optimized FD scheme option\n       and hybrid one-way ABC option adj flag indicates backwards  source  in‐\n       jection, not exact adjoint propagator\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   cden =n [y/n]     Constant density\n       bool   dabc =n [y/n]     Absorbing BC\n       string den =      auxiliary input file name\n       float  dqx =sf_d(ax)      Saved wfld window dx\n       float  dqz =sf_d(az)      Saved wfld window dz\n       bool   expl =n [y/n]     Multiple sources, one wvlt\n       int    fdorder =4      spatial FD order\n       bool   fsrf =n [y/n]     Free surface flag\n       bool   hybridbc =n [y/n]     hybrid Absorbing BC\n       int    jdata =1      # of t steps at which to save receiver data\n       int    jsnap =nt      # of t steps at which to save wavefield\n       int    nqx =sf_n(ax)      Saved wfld window nx\n       int    nqz =sf_n(az)      Saved wfld window nz\n       bool   optfd =n [y/n]     optimized FD coefficients flag\n       float  oqx =sf_o(ax)      Saved wfld window ox\n       float  oqz =sf_o(az)      Saved wfld window oz\n       file   rec =      auxiliary input file name\n       bool   sinc =n [y/n]     sinc source injection\n       bool   snap =n [y/n]     Wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\n       file   wfl =      auxiliary output file name\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n       data/amoco/fdmod\nSOURCE\n       user/cwp/Mawefd2d.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfawefd2d\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfawefd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2d_fo-Tuple{}","page":"Home","title":"Madagascar.sfawefd2d_fo","text":"sfawefd2d_fo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2d_fo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2d_fo. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2dfo(1)               Madagascar Manuals               sfawefd2dfo(1)\n\nNAME\n       sfawefd2d_fo  -  Finite-difference  time-domain (FDTD) wave propagation\n       modeling in lossless acoustic 2D media.\n\nSYNOPSIS\n       sfawefd2d_fo  <   Fwav.rsf   vel=Fvel.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf  >  Fdat.rsf  datvz=Fdatvz.rsf  wfl=Fwfl.rsf verb=n snap=n\n       free=n expl=n dabc=n recvz=n srctype=1  jdata=1  jsnap=nt  nqz=sf_n(az)\n       nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)\n\nCOMMENTS\n       This program fdelmodc can be used to model waves conforming the 2D wave\n       equation in different media.  This program computes a solution  of  the\n       2D  acoustic  wave  equation defined through the first-order linearized\n       systems of Newton's and Hooke's law.\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   datvz =      auxiliary output file name\n       file   den =      auxiliary input file name\n       bool   expl =n [y/n]     exploding reflector\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   recvz =n [y/n]     vertical particle velocity data\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       int    srctype                                                       =1\n                   ------------------------------------------------------------\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/fbroggin/Mawefd2d_fo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfawefd2d_fo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2dds-Tuple{}","page":"Home","title":"Madagascar.sfawefd2dds","text":"sfawefd2dds(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2dds on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2dds. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2dds(1)                Madagascar Manuals                sfawefd2dds(1)\n\nNAME\n       sfawefd2dds - 2D acoustic time-domain FD modeling  for source perturba‐\n       tion -first order\n\nSYNOPSIS\n       sfawefd2dds   <   Fwav.rsf   vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2dds.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfawefd2dds(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2dds2nd-Tuple{}","page":"Home","title":"Madagascar.sfawefd2dds2nd","text":"sfawefd2dds2nd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2dds2nd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2dds2nd. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2dds2nd(1)             Madagascar Manuals             sfawefd2dds2nd(1)\n\nNAME\n       sfawefd2dds2nd  -  2D acoustic time-domain FD modeling  for source per‐\n       turbation- 2nd order approximation\n\nSYNOPSIS\n       sfawefd2dds2nd  <  Fwav.rsf  vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2dds2nd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfawefd2dds2nd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2dds2ndV-Tuple{}","page":"Home","title":"Madagascar.sfawefd2dds2ndV","text":"sfawefd2dds2ndV(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2dds2ndV on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2dds2ndV. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2dds2ndV(1)            Madagascar Manuals            sfawefd2dds2ndV(1)\n\nNAME\n       sfawefd2dds2ndV  - 2D acoustic time-domain FD modeling  for source per‐\n       turbation - 2nd order approximation for complex v\n\nSYNOPSIS\n       sfawefd2dds2ndV  <  Fwav.rsf  vel=Fvel.rsf  sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2dds2ndV.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfawefd2dds2ndV(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2dds2ndhomo-Tuple{}","page":"Home","title":"Madagascar.sfawefd2dds2ndhomo","text":"sfawefd2dds2ndhomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2dds2ndhomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2dds2ndhomo. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2dds2ndhomo(1)         Madagascar Manuals         sfawefd2dds2ndhomo(1)\n\nNAME\n       sfawefd2dds2ndhomo  -  2D  acoustic time-domain FD modeling  for source\n       perturbation- 2nd order test\n\nSYNOPSIS\n       sfawefd2dds2ndhomo < Fwav.rsf  vel=Fvel.rsf  sou=Fsou.rsf  rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2dds2ndhomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sfawefd2dds2ndhomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2ddsV-Tuple{}","page":"Home","title":"Madagascar.sfawefd2ddsV","text":"sfawefd2ddsV(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2ddsV on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2ddsV. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2ddsV(1)               Madagascar Manuals               sfawefd2ddsV(1)\n\nNAME\n       sfawefd2ddsV  - 2D acoustic time-domain FD modeling  for source pertur‐\n       bation- 1st order approximation for complex v\n\nSYNOPSIS\n       sfawefd2ddsV  <   Fwav.rsf   vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2ddsV.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfawefd2ddsV(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd2ddshomo-Tuple{}","page":"Home","title":"Madagascar.sfawefd2ddshomo","text":"sfawefd2ddshomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd2ddshomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd2ddshomo. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd2ddshomo(1)            Madagascar Manuals            sfawefd2ddshomo(1)\n\nNAME\n       sfawefd2ddshomo  - 2D acoustic time-domain FD modeling  for source per‐\n       turbation-1st order test\n\nSYNOPSIS\n       sfawefd2ddshomo  <  Fwav.rsf  vel=Fvel.rsf  sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       dl=0.0  jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)   oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  dl =0.0      dl=0.0 perturbation distance\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/tariq/Mawefd2ddshomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfawefd2ddshomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd3d-Tuple{}","page":"Home","title":"Madagascar.sfawefd3d","text":"sfawefd3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd3d(1)                  Madagascar Manuals                  sfawefd3d(1)\n\nNAME\n       sfawefd3d - 3D acoustic time-domain FD modeling\n\nSYNOPSIS\n       sfawefd3d     <    file_wav.rsf    vel=file_vel.rsf    sou=file_src.rsf\n       rec=file_rec.rsf  >  file_dat.rsf   wfl=file_wfl.rsf   den=file_den.rsf\n       verb=n  snap=n  expl=n dabc=n cden=n adj=n fsrf=n optfd=n fdorder=4 hy‐\n       bridbc=n sinc=n jsnap=nt jdata=1 nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay)\n       oqz=sf_o(az)   oqx=sf_o(ax)   oqy=sf_o(ay)   dqz=sf_d(az)  dqx=sf_d(ax)\n       dqy=sf_d(ay)\n\nCOMMENTS\n       2Nth order in space, 2nd order in time with optimized FD scheme  option\n       and  hybrid  one-way ABC option adj flag indicates backwards source in‐\n       jection, not exact adjoint propagator\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   cden =n [y/n]     Constant density\n       bool   dabc =n [y/n]     Absorbing BC\n       string den =      auxiliary input file name\n       float  dqx =sf_d(ax)      Saved wfld window dx\n       float  dqy =sf_d(ay)      Saved wfld window dy\n       float  dqz =sf_d(az)      Saved wfld window dz\n       bool   expl =n [y/n]     Multiple sources, one wvlt\n       int    fdorder =4      spatial FD order\n       bool   fsrf =n [y/n]     Free surface flag\n       bool   hybridbc =n [y/n]     hybrid Absorbing BC\n       int    jdata =1      # of t steps at which to save receiver data\n       int    jsnap =nt      # of t steps at which to save wavefield\n       int    nqx =sf_n(ax)      Saved wfld window nx\n       int    nqy =sf_n(ay)      Saved wfld window ny\n       int    nqz =sf_n(az)      Saved wfld window nz\n       bool   optfd =n [y/n]     optimized FD coefficients flag\n       float  oqx =sf_o(ax)      Saved wfld window ox\n       float  oqy =sf_o(ay)      Saved wfld window oy\n       float  oqz =sf_o(az)      Saved wfld window oz\n       file   rec =      auxiliary input file name\n       bool   sinc =n [y/n]     sinc source injection\n       bool   snap =n [y/n]     Wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\n       file   wfl =      auxiliary output file name\nUSED IN\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\nSOURCE\n       user/cwp/Mawefd3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfawefd3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawefd3dgpu-Tuple{}","page":"Home","title":"Madagascar.sfawefd3dgpu","text":"sfawefd3dgpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawefd3dgpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawefd3dgpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfawefd3dgpu(1)               Madagascar Manuals               sfawefd3dgpu(1)\n\nNAME\n       sfawefd3dgpu  - 3D acoustic wave equation finite difference time domain\n       modeling\n\nSYNOPSIS\n       sfawefd3dgpu   <   file_wav.rsf   >    file_dat.rsf    vel=file_vel.rsf\n       sou=file_src.rsf   rec=file_rec.rsf  den=file_den.rsf  wfl=file_wfl.rsf\n       verb=n nbd=20 snap=n cden=y jsnap=1\n\nPARAMETERS\n       bool   cden =y [y/n]\n       file   den =      auxiliary input file name\n       int    jsnap =1 ®\n       int    nbd =20 ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/hwang/Mawefd3dgpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfawefd3dgpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaweop2d-Tuple{}","page":"Home","title":"Madagascar.sfaweop2d","text":"sfaweop2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaweop2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaweop2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfaweop2d(1)                  Madagascar Manuals                  sfaweop2d(1)\n\nNAME\n       sfaweop2d - 2D AWE modeling\n\nSYNOPSIS\n       sfaweop2d  sou=Fs.rsf  rec=Fr.rsf vel=Fvel.rsf < Fd.rsf > Fm.rsf verb=n\n       fsrf=n dabc=n adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   dabc =n [y/n]     Absorbing BC\n       bool   fsrf =n [y/n]     free surface\n       string rec =      auxiliary input file name\n       string sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Maweop2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfaweop2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaweop3d-Tuple{}","page":"Home","title":"Madagascar.sfaweop3d","text":"sfaweop3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaweop3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaweop3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfaweop3d(1)                  Madagascar Manuals                  sfaweop3d(1)\n\nNAME\n       sfaweop3d - 3D AWE modeling\n\nSYNOPSIS\n       sfaweop3d  sou=Fs.rsf  rec=Fr.rsf vel=Fvel.rsf < Fd.rsf > Fm.rsf verb=n\n       fsrf=n dabc=n adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   dabc =n [y/n]     Absorbing BC\n       bool   fsrf =n [y/n]     free surface\n       string rec =      auxiliary input file name\n       string sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Maweop3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfaweop3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfawesg-Tuple{}","page":"Home","title":"Madagascar.sfawesg","text":"sfawesg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfawesg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfawesg. See ?m8r for examples.\n\nRSF Documentation\n\nsfawesg(1)                    Madagascar Manuals                    sfawesg(1)\n\nNAME\n       sfawesg - Acoustic staggered-gridded time-domain FD modeling,\n\nSYNOPSIS\n       sfawesg    <    Fwav.rsf   bulk=Fbulk.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf ompchunk=1 ompnth=0 verb=n  snap=n\n       free=n  abc=n  pml=n debug=n jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax)\n       oqz=sf_o(az)  oqx=sf_o(ax)   nqz=sf_n(az)   nqx=sf_n(ax)   nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       automatically determines whether or not to use 3D or 2D.\n\n       Acoustic  wave  equation  finite difference modeling in both 2D and 3D,\n       using an explicit time-domain solver.\n\n       *** Please see the SConstruct in  book/tutorial/ewe  for  a  SConstruct\n       that  demonstrates  how to use predefined functions for using this pro‐\n       gram. ***\n\n       This program solves a system of first-order PDE's for pressure and par‐\n       ticle  velocity  using a staggered-grid approach.  The model parameters\n       are incompressibility (K: bulk modulus) and density.\n\n       The program is parallelized using OpenMP, so be sure to use a  compati‐\n       ble compiler to take advantage of the performance boost\n\n       ============= STAGGERED-GRID   ========================\n\n                 o  --  x  -- o -- x -- o -- x -- o           |    |    |    |\n       |    |    |           x -- x -- x -- x -- x -- x -- x           |     |\n       |    |    |    |    |           o -- x -- o -- x -- o -- x -- o\n\n       The  \"o\"'s  are  the  points  where  the pressures at computed (integer\n       grid). The \"x\"'s are the points where the particle velocities are  com‐\n       puted (half grid).\n\n       ============= FILE DESCRIPTIONS   ========================\n\n       Fdat.rsf  -  An  RSF file containing your data in the following format:\n       axis 1 - source location axis 2 -  wavefield  component  (z,x,y)  order\n       axis  3  -  Time                 Fwav.rsf - An RSF file containing your\n       VOLUME DENSITY INJECTION RATE AND DENSITY OF FORCE wavelet information.\n       The  sampling interval, origin time, and number of time samples will be\n       used as the defaults for the  modeling  code.                i.e.  your\n       wavelet  needs  to have the same length and parameters that you want to\n       model with!              The first axis is the number of  source  loca‐\n       tions.               The second axis contains [fz, fx, (fy,) q],respec‐\n       tively. If the file is 1D then the source is assumed             to  be\n       a  isotropic  pressure  source.                The  third axis is time.\n                   The code check the dimensions of the model and  the  dimen‐\n       sions of the wavelt file; for 2D modeling, the wavelet             file\n       may have n2=1 or n2=3, for 3D modeling, n2=1 or n2=4.  An error is  re‐\n       turned  if the dimensions don't match.             Fbulk.rsf - An N di‐\n       mensional RSF file that contains the values for  the  incompressibility\n       (bulk   modulus   K)  at  every  point  in  the  computational  domain.\n                  Fden.rsf - An N dimensional RSF file that contains the  val‐\n       ues for density at every point in the computational domain.\n\n       Fsou.rsf,  Frec.rsf  -  The source and receiver RSF files respectively.\n       The  1st  axis  contains  the  locations  for  the  points   like   so:\n                               [x,y,z]  The second axis is a concatenated list\n       of all points in the list.                         So, for an array  of\n       receivers,   it  would  look  like:  [x1,y1,z1]  [x2,y2,z2]  [x3,y3,z3]\n       [x4,y4,z4]                      Fwfl.rsf     - The name of the file  to\n       save  the  PRESSURE wavefield snapshots to.  This will be an N+2 dimen‐\n       sional file.  The file will be organized as follows: 1-2(3) axes,  spa‐\n       tial coordinates 3(4) axis, wavefield value 4(5) axis, time, sequential\n       snapshots ***The parentheses indicate what the axes will be for 3D mod‐\n       els.\n\n       Fdat.rsf      - The name of the file to save the receiver data to.  The\n       data has the format of:            spatial coordinates, then  value  of\n       the wavefield.  Lastly, time.             ======= PARAMETERS ========\n\n       free  =  y/[n]   - Free surface boundary condition (the free surface is\n       for PRESSURE).\n\n       abc  = y/[n]   - Absorbing Boundary Conditions (PML).\n\n       nb             - thickness of the absorbing boundary\n\n       verb = y/[n]   - verbosity flag\n\n                            ======= TIPS ========\n\n       If the simulation seems to slow down as it's running, its a pretty good\n       indication  that  the simulation has become unstable and is overflowing\n       with NaNs.\n\nPARAMETERS\n       bool   abc =n [y/n]     ABC if the abcpml=n: spongeABC\n       file   bulk =      auxiliary input file name\n       bool   debug =n [y/n]     debug\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt      save wavefield every *jsnap* time steps\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       bool   pml =n [y/n]     \"PML ABC\"\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/cwp/Mawesg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfawesg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfaxplusy-Tuple{}","page":"Home","title":"Madagascar.sfaxplusy","text":"sfaxplusy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfaxplusy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfaxplusy. See ?m8r for examples.\n\nRSF Documentation\n\nsfaxplusy(1)                  Madagascar Manuals                  sfaxplusy(1)\n\nNAME\n       sfaxplusy  -  Computes  a*x  +  y, where x and y are datasets, and a is\n       scalar\n\nSYNOPSIS\n       sfaxplusy < in.rsf y=yfile.rsf > out.rsf afile=fa.rsf a=1 verb=n\n\nCOMMENTS\n       x and y are floats or sf_complex, single precision x is the stdin a  is\n       double precision Computations are done in double precision.\n\nPARAMETERS\n       double a =1      Scaling factor\n       file   afile =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\n       file   y =      auxiliary input file name\nSOURCE\n       user/jeff/Maxplusy.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfaxplusy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfazpwd-Tuple{}","page":"Home","title":"Madagascar.sfazpwd","text":"sfazpwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfazpwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfazpwd. See ?m8r for examples.\n\nRSF Documentation\n\nsfazpwd(1)                    Madagascar Manuals                    sfazpwd(1)\n\nNAME\n       sfazpwd - Azimuthal Plane-Wave Destruction\n\nSYNOPSIS\n       sfazpwd  < in.rsf dip=dip.rsf az=azin.rsf > out.rsf order=1 nj1=1 nj2=1\n       sm=y adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   az =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    order =1 [1,2,3]   accuracy order\n       bool   sm =y [y/n]     if perform AzPWD filtering\nSOURCE\n       user/dmerzlikin/Mazpwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfazpwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfazspr-Tuple{}","page":"Home","title":"Madagascar.sfazspr","text":"sfazspr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfazspr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfazspr. See ?m8r for examples.\n\nRSF Documentation\n\nsfazspr(1)                    Madagascar Manuals                    sfazspr(1)\n\nNAME\n       sfazspr  -  Combining Sprays: Simply Input Sprays in In-line And Cross-\n       line\n\nSYNOPSIS\n       sfazspr < in.rsf spry=in2.rsf az=azin.rsf > out.rsf order=1 nj1=1 nj2=1\n       sm=y adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   az =      auxiliary input file name\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    order =1 [1,2,3]   accuracy order\n       bool   sm =y [y/n]     if perform AzPWD filtering\n       file   spry =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mazspr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfazspr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbackdire-Tuple{}","page":"Home","title":"Madagascar.sfbackdire","text":"sfbackdire(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbackdire on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbackdire. See ?m8r for examples.\n\nRSF Documentation\n\nsfbackdire(1)                 Madagascar Manuals                 sfbackdire(1)\n\nNAME\n       sfbackdire - Background directivity(Dip).\n\nSYNOPSIS\n       sfbackdire < Zz.rsf > Zo.rsf verb=0\n\nPARAMETERS\n       bool   verb =0 [y/n]\nSOURCE\n       user/parvaneh/Mbackdire.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbackdire(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbackdireazi-Tuple{}","page":"Home","title":"Madagascar.sfbackdireazi","text":"sfbackdireazi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbackdireazi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbackdireazi. See ?m8r for examples.\n\nRSF Documentation\n\nsfbackdireazi(1)              Madagascar Manuals              sfbackdireazi(1)\n\nNAME\n       sfbackdireazi - Background directivity(Azimuth).\n\nSYNOPSIS\n       sfbackdireazi < Zz.rsf > Zo.rsf verb=0\n\nPARAMETERS\n       bool   verb =0 [y/n]\nSOURCE\n       user/parvaneh/Mbackdireazi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfbackdireazi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbackus-Tuple{}","page":"Home","title":"Madagascar.sfbackus","text":"sfbackus(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbackus on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbackus. See ?m8r for examples.\n\nRSF Documentation\n\nsfbackus(1)                   Madagascar Manuals                   sfbackus(1)\n\nNAME\n       sfbackus - None\n\nSYNOPSIS\n       sfbackus < infile.rsf > outfile.rsf navg=201 all=n ang=30.\n\nPARAMETERS\n       all    =n      Print extra information\n       ang    =30.       Input angle\n       navg   =201      Number of samples to average over\nSOURCE\n       user/jeff/Mbackus.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfbackus(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbackusave-Tuple{}","page":"Home","title":"Madagascar.sfbackusave","text":"sfbackusave(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbackusave on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbackusave. See ?m8r for examples.\n\nRSF Documentation\n\nsfbackusave(1)                Madagascar Manuals                sfbackusave(1)\n\nNAME\n       sfbackusave - C-Wave Backus Averaging (See Marion et al., 1994)\n\nSYNOPSIS\n       sfbackusave  <  deptha.rsf  <  slowa.rsf  <  rhoba.rsf  > depth_bkn.rsf\n       vel_bk=vel_bkn.rsf slow_bk=slow_bkn.rsf rhob_bk=rhob_bkn.rsf  slowness=\n       density= ratio= peak_f= depthsample=\n\nPARAMETERS\n       string density =      Density from Logs\n       float  depthsample =      Depth Sampling\n       float  peak_f =      Dom wavelength\n       float  ratio =      Percent of dom wavelength\n       file   rhob_bk =      auxiliary output file name\n       file   slow_bk =      auxiliary output file name\n       string slowness =      Slowness from Logs\n       file   vel_bk =      auxiliary output file name\nSOURCE\n       user/sbader/Mbackusave.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbackusave(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbandpass-Tuple{}","page":"Home","title":"Madagascar.sfbandpass","text":"sfbandpass(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbandpass on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbandpass. See ?m8r for examples.\n\nRSF Documentation\n\nsfbandpass(1)                 Madagascar Manuals                 sfbandpass(1)\n\nNAME\n       sfbandpass - Bandpass filtering.\n\nSYNOPSIS\n       sfbandpass < in.rsf > out.rsf flo= fhi= phase=n verb=n nplo=6 nphi=6\n\nCOMMENTS\n       November         2012        program        of        the        month:\n       http://ahay.org/blog/2012/11/03/program-of-the-month-sfbandpass/\n\nPARAMETERS\n       float  fhi =      High frequency in band, default is Nyquist\n       float  flo =      Low frequency in band, default is 0\n       int    nphi =6      number of poles for high cutoff\n       int    nplo =6      number of poles for low cutoff\n       bool   phase =n [y/n]     y: minimum phase, n: zero phase\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/generic/Mbandpass.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbandpass(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbar-Tuple{}","page":"Home","title":"Madagascar.sfbar","text":"sfbar(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbar on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbar. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbargraph-Tuple{}","page":"Home","title":"Madagascar.sfbargraph","text":"sfbargraph(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbargraph on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbargraph. See ?m8r for examples.\n\nRSF Documentation\n\nsfbargraph(1)                 Madagascar Manuals                 sfbargraph(1)\n\nNAME\n       sfbargraph - Bar plot.\n\nSYNOPSIS\n       sfbargraph  <  in.rsf wantframenum=(bool) (n3 > 1) pclip=100. width=0.8\n       stack=y transp=n > plot.vpl\n\nCOMMENTS\n       Run \"sfdoc stdplot\" for more parameters.\n\nPARAMETERS\n       float  pclip =100.       clip percentile\n       bool   stack =y [y/n]     if stack bars on top\n       bool   transp =n [y/n]     if y, transpose the axes\n       bool   wantframenum =(bool) (n3 > 1) [y/n]     if y, display third axis\n              position in the corner\n       float  width =0.8      bar width\nSOURCE\n       plot/main/bargraph.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbargraph(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbatch-Tuple{}","page":"Home","title":"Madagascar.sfbatch","text":"sfbatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbatch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbdix-Tuple{}","page":"Home","title":"Madagascar.sfbdix","text":"sfbdix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbdix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbdix. See ?m8r for examples.\n\nRSF Documentation\n\nsfbdix(1)                     Madagascar Manuals                     sfbdix(1)\n\nNAME\n       sfbdix - Convert RMS to interval velocity using LS and shaping regular‐\n       ization.\n\nSYNOPSIS\n       sfbdix < vrms.rsf >  vint.rsf  weight=weight.rsf  block=block.rsf  vrm‐\n       sout=vout.rsf perc=50.0 niter=100 rect1= rect2= ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       file   block =      auxiliary input file name\n       int    niter =100      maximum number of iterations\n       float  perc =50.0      percentage for sharpening\n       string vrmsout =      optionally, output predicted vrms (auxiliary out‐\n              put file name)\n       file   weight =      auxiliary input file name\nSOURCE\n       user/fomels/Mbdix.c\nVERSION\n       4.2-git Mdix.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                         sfbdix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbeamform-Tuple{}","page":"Home","title":"Madagascar.sfbeamform","text":"sfbeamform(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbeamform on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbeamform. See ?m8r for examples.\n\nRSF Documentation\n\nsfbeamform(1)                 Madagascar Manuals                 sfbeamform(1)\n\nNAME\n       sfbeamform - 2-D beam forming.\n\nSYNOPSIS\n       sfbeamform < in.rsf dip=dip.rsf > out.rsf rect=3 adj=y gauss=n order=1\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       file   dip =      auxiliary input file name\n       bool   gauss =n [y/n]     use pseudo-gaussian\n       int    order =1      PWD accuracy order\n       int    rect =3      smoothing radius\nSOURCE\n       user/pwd/Mbeamform.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbeamform(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbeamform1-Tuple{}","page":"Home","title":"Madagascar.sfbeamform1","text":"sfbeamform1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbeamform1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbeamform1. See ?m8r for examples.\n\nRSF Documentation\n\nsfbeamform1(1)                Madagascar Manuals                sfbeamform1(1)\n\nNAME\n       sfbeamform1 - Gaussian beam forming.\n\nSYNOPSIS\n       sfbeamform1 < in.rsf > out.rsf rect=3 adj=y repeat=1\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       int    rect =3      smoothing radius\n       int    repeat =1      repeat triangle smoothing\nSOURCE\n       user/fomels/Mbeamform1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbeamform1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbeamspray-Tuple{}","page":"Home","title":"Madagascar.sfbeamspray","text":"sfbeamspray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbeamspray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbeamspray. See ?m8r for examples.\n\nRSF Documentation\n\nsfbeamspray(1)                Madagascar Manuals                sfbeamspray(1)\n\nNAME\n       sfbeamspray - 2-D beam spraying.\n\nSYNOPSIS\n       sfbeamspray < in.rsf dip=dip.rsf cur=cur.rsf > out.rsf rect=3 eps=1.0\n\nPARAMETERS\n       file   cur =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       float  eps =1.0      experimental\n       int    rect =3      smoothing radius\nSOURCE\n       system/seismic/Mbeamspray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbeamspray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbeamsteer-Tuple{}","page":"Home","title":"Madagascar.sfbeamsteer","text":"sfbeamsteer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbeamsteer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbeamsteer. See ?m8r for examples.\n\nRSF Documentation\n\nsfbeamsteer(1)                Madagascar Manuals                sfbeamsteer(1)\n\nNAME\n       sfbeamsteer - Beam steering for 2D surface array.\n\nSYNOPSIS\n       sfbeamsteer  <  in.rsf > out.rsf mode=y xref= yref= npx= dpx= opx= npy=\n       dpy= opy=\n\nPARAMETERS\n       float  dpx =      px sampling (if mode=y).\n       float  dpy =      py sampling (if mode=y).\n       bool   mode =y [y/n]     if n, beams computed as a function of apparent\n              slowness and azimuth angle.\n       int    npx =      number of px values (if mode=y).\n       int    npy =      number of py values (if mode=y).\n       float  opx =      px origin (if mode=y)\n       float  opy =      py origin (if mode=y)\n       float  xref =      x coordinate where beams are computed\n       float  yref =      y coordinate where beams are computed\nSOURCE\n       user/browaeys/Mbeamsteer.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbeamsteer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbigmpiencode-Tuple{}","page":"Home","title":"Madagascar.sfbigmpiencode","text":"sfbigmpiencode(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbigmpiencode on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbigmpiencode. See ?m8r for examples.\n\nRSF Documentation\n\nsfbigmpiencode(1)             Madagascar Manuals             sfbigmpiencode(1)\n\nNAME\n       sfbigmpiencode  -  shot  encoding  with  arbitrary  phase and amplitude\n       weights using MPI on a distributed cluster\n\nSYNOPSIS\n       sfbigmpiencode encode=Fencode.rsf nx= ny= dy= dx= ox= oy= verb=n  dpre‐\n       fix= eprefix= shots=\n\nCOMMENTS\n       Use mpiencode if your shots are on the same grid prior to encoding.\n\n       Use bigmpiencode if your shots are not on a single grid prior to encod‐\n       ing.  YOUR SHOTS MUST ALL FALL ONTO THE SAME REGULAR  GRID.   BigMPIEN‐\n       CODE does not do any shot interpolation.\n\n       Data axes - X, Y, W\n\nPARAMETERS\n       string dprefix  =       printf  like statement that can be evaluated to\n              find the data files corresponding to shot records\n       float  dx =      dx of output grid points\n       float  dy =      dy of output grid points\n       file   encode =      auxiliary input file name\n       string eprefix =      printf like statement that can be  evaluated  for\n              the output encodings\n       int    nx =      # of output grid x points\n       int    ny =      # of output grid y points\n       float  ox =      ox of output grid points\n       float  oy =      ox of output grid points\n       string shots =      shot-file name, dimensions are 1xNS\n       bool   verb =n [y/n]\nSOURCE\n       user/cwp/Mbigmpiencode.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfbigmpiencode(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbigmpistack-Tuple{}","page":"Home","title":"Madagascar.sfbigmpistack","text":"sfbigmpistack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbigmpistack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbigmpistack. See ?m8r for examples.\n\nRSF Documentation\n\nsfbigmpistack(1)              Madagascar Manuals              sfbigmpistack(1)\n\nNAME\n       sfbigmpistack - remap and stacks rsf files using mpi\n\nSYNOPSIS\n       sfbigmpistack  nx=  ny=  nz= debug=n verb=n dx= dy= dz= oz= oy= ox= nf=\n       jf= of= prefix= shots= oname=\n\nCOMMENTS\n       Assumes that files are commonly named sequentially, e.g.:\n\n       File001.rsf File002.rsf File003.rsf ...  FileN.rsf\n\n       Such that all files can be represented as a prefix, which is  a  printf\n       like statement that will be evaluated for all files to be included in a\n       range.\n\n       For the above example the prefix would be:\n\n       prefix=\"File%03d.rsf\"\n\n       The nf, jf, and of parameters specify a range of  numbers  to  evaluate\n       the prefix for, giving the program filenames to be used for summing to‐\n       gether.  For example:\n\n       nf=10,of=0,jf=1  -->   (0,1,2,3,4,5,6,7,8,9,10)   nf=10,of=5,jf=2   -->\n       (5,7,9,11,13,15,17,19,21,23)\n\n       If  there  are more files than processes, then this program will subdi‐\n       vide the files onto various processes, and run  multiple  rounds  until\n       everything is done.\n\n       These must be 3D arrays (or 2D ,but with three dimensions), arrays must\n       be X-Y-Z a1-a2-a3\n\nPARAMETERS\n       bool   debug =n [y/n]\n       float  dx = ®\n       float  dy = ®\n       float  dz = ®\n       int    jf =      delta between files\n       int    nf =      number of files to stack\n       int    nx =      origin of files\n       int    ny =      origin of files\n       int    nz =      origin of files\n       int    of =      origin of files\n       string oname =      name of output file\n       float  ox = ®\n       float  oy = ®\n       float  oz = ®\n       string prefix =      printf like prefix\n       string shots =      name of shot file\n       bool   verb =n [y/n]\nSOURCE\n       user/cwp/Mbigmpistack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfbigmpistack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbil1-Tuple{}","page":"Home","title":"Madagascar.sfbil1","text":"sfbil1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbil1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbil1. See ?m8r for examples.\n\nRSF Documentation\n\nsfbil1(1)                     Madagascar Manuals                     sfbil1(1)\n\nNAME\n       sfbil1 - Bi-variate L1 regression\n\nSYNOPSIS\n       sfbil1  <  inp.rsf  reg=reg.rsf  >  out.rsf niter=10 perc=90.0 fact=1.5\n       type=\n\nPARAMETERS\n       float  fact =1.5      factor for sharpening\n       int    niter =10      number of POCS iterations\n       float  perc =90.0      percentage for sharpening\n       file   reg =      auxiliary input file name\n       string type =      thresholding type\nSOURCE\n       user/fomels/Mbil1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfbil1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbil1_new-Tuple{}","page":"Home","title":"Madagascar.sfbil1_new","text":"sfbil1_new(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbil1_new on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbil1_new. See ?m8r for examples.\n\nRSF Documentation\n\nsfbil1new(1)                 Madagascar Manuals                 sfbil1new(1)\n\nNAME\n       sfbil1_new - L1 regression 0 ~= d - G * m\n\nSYNOPSIS\n       sfbil1_new  <  inp.rsf  reg=reg.rsf  > out.rsf verb=n niter=10 Liter=10\n       perc=90.0\n\nCOMMENTS\n       * * adapted from sfbil1 *\n\nPARAMETERS\n       int    Liter =10      number of CG iterations\n       int    niter =10      number of POCS iterations\n       float  perc =90.0      percentage for sharpening\n       file   reg =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/lcasasan/Mbil1_new.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbil1_new(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbilat2-Tuple{}","page":"Home","title":"Madagascar.sfbilat2","text":"sfbilat2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbilat2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbilat2. See ?m8r for examples.\n\nRSF Documentation\n\nsfbilat2(1)                   Madagascar Manuals                   sfbilat2(1)\n\nNAME\n       sfbilat2 - 2-D bilateral filtering\n\nSYNOPSIS\n       sfbilat2 < inp.rsf > out.rsf r1=1 r2=1 a1=0.0f a2=a1 a3=0.0f repeat=1\n\nPARAMETERS\n       float  a1 =0.0f      vertical attenuation factor\n       float  a2 =a1      horizontal attenuation factor\n       float  a3 =0.0f      data attenuation factor\n       int    r1 =1      vertical smoothing radius\n       int    r2 =1      horizontal smoothing radius\n       int    repeat =1      repeat the operation\nSOURCE\n       user/fomels/Mbilat2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfbilat2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbilstack-Tuple{}","page":"Home","title":"Madagascar.sfbilstack","text":"sfbilstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbilstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbilstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfbilstack(1)                 Madagascar Manuals                 sfbilstack(1)\n\nNAME\n       sfbilstack - Bilateral stacking.\n\nSYNOPSIS\n       sfbilstack < in.rsf > out.rsf weight=weight.rsf verb=n niter=20 bilat=n\n       ax= bx=\n\nPARAMETERS\n       float  ax =      Gaussian weight for the range distance\n       bool   bilat =n [y/n]     if y, bilateral smoothing\n       float  bx =      Exponential weight for the domain distance\n       int    niter =20      number of iterations\n       bool   verb =n [y/n]     verbosity\n       file   weight =      auxiliary output file name\nSOURCE\n       user/yliu/Mbilstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbilstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbin-Tuple{}","page":"Home","title":"Madagascar.sfbin","text":"sfbin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbin. See ?m8r for examples.\n\nRSF Documentation\n\nsfbin(1)                      Madagascar Manuals                      sfbin(1)\n\nNAME\n       sfbin - Data binning in 2-D slices.\n\nSYNOPSIS\n       sfbin  < in.rsf > out.rsf fold=fold.rsf xkey=0 ykey=1 xmax= xmin= ymax=\n       ymin= x0=xmin y0=ymin nx=(int) (xmax - xmin + 1.) ny=(int) (ymax - ymin\n       + 1.) dx= dy= interp=1 norm=y clip=FLT_EPSILON head=\n\nCOMMENTS\n       December         2014        program        of        the        month:\n       http://ahay.org/blog/2014/12/01/program-of-the-month-sfbin/\n\nPARAMETERS\n       float  clip =FLT_EPSILON      clip for fold normalization\n       float  dx =      bin size in x\n       float  dy =      bin size in y\n       string fold =      output file for fold  (optional)  (auxiliary  output\n              file name)\n       string head =      header file\n       int    interp =1 [0,1,2]   interpolation method;\n                     0: median, 1: nearest neighbor, 2: bi-linear,\n       bool   norm =y [y/n]     if normalize\n       int    nx =(int) (xmax - xmin + 1.)       Number of bins in x\n       int    ny =(int) (ymax - ymin + 1.)       Number of bins in y\n       float  x0 =xmin      x origin\n       int    xkey =0      x key number\n       float  xmax =      x maximum\n       float  xmin =      x minimum\n       float  y0 =ymin      y origin\n       int    ykey =1      y key number\n       float  ymax =      y maximum\n       float  ymin =      y minimum\nUSED IN\n       data/alaska/foldplot\nSOURCE\n       system/generic/Mbin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfbin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbin1-Tuple{}","page":"Home","title":"Madagascar.sfbin1","text":"sfbin1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbin1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbin1. See ?m8r for examples.\n\nRSF Documentation\n\nsfbin1(1)                     Madagascar Manuals                     sfbin1(1)\n\nNAME\n       sfbin1 - Data binning in 1-D slices.\n\nSYNOPSIS\n       sfbin1 < in.rsf > out.rsf pattern=pattern.rsf fold=fold.rsf xmin= xmax=\n       nx= x0=xmin dx= interp=1 clip=FLT_EPSILON head=\n\nPARAMETERS\n       float  clip =FLT_EPSILON      clip for fold normalization\n       float  dx =      grid spacing\n       string fold =      output fold file (optional) (auxiliary  output  file\n              name)\n       string head = ®\n       int    interp  =1  [1,2]     interpolation method, 1: nearest neighbor,\n              2: linear\n       int    nx =      Number of bins\n       string pattern =      auxiliary input file name\n       float  x0 =xmin      grid origin\n       float  xmax = ®\n       float  xmin =      grid dimensions\nSOURCE\n       system/generic/Mbin1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfbin1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbin2rsf-Tuple{}","page":"Home","title":"Madagascar.sfbin2rsf","text":"sfbin2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbin2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbin2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfbin2rsf(1)                  Madagascar Manuals                  sfbin2rsf(1)\n\nNAME\n       sfbin2rsf - Binary file to RSF file\n\nSYNOPSIS\n       sfbin2rsf > out.rsf n1= n2= d1=0.004 d2=1 o1=0 o2=0 bfile=\n\nCOMMENTS\n       Convert  a  file containing a two dimensional array of binary floats to\n       and the rsf file is written to standard output.  If you have  a  higher\n       dimension file (3d, 4d, ..) you can change n2, n3, etc using sfput.\n\n       Example that converts and plots a binary velocity grid:\n\n       <Vp sfbin2rsf n1=400 d1=1 n2=1600 d2=1 o2=101 | sfgrey color=jet scale‐\n       bar=y allpos=y | sfpen\n\nPARAMETERS\n       string bfile = ®\n       float  d1 =0.004 ®\n       float  d2 =1 ®\n       int    n1 = ®\n       int    n2 = ®\n       float  o1 =0 ®\n       float  o2 =0 ®\nSOURCE\n       user/chenyk/Mbin2rsf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfbin2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfblend-Tuple{}","page":"Home","title":"Madagascar.sfblend","text":"sfblend(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfblend on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfblend. See ?m8r for examples.\n\nRSF Documentation\n\nsfblend(1)                    Madagascar Manuals                    sfblend(1)\n\nNAME\n       sfblend - Seismic blending operator.\n\nSYNOPSIS\n       sfblend < in.rsf > out.rsf verbose=1 shot_time_in= shot_time_out=\n\nCOMMENTS\n       Custom program to blend the seismic data.\n\nPARAMETERS\n       string shot_time_in = ®\n       string shot_time_out = ®\n       int    verbose =1      0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/chenyk/Mblend.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfblend(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfblur-Tuple{}","page":"Home","title":"Madagascar.sfblur","text":"sfblur(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfblur on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfblur. See ?m8r for examples.\n\nRSF Documentation\n\nsfblur(1)                     Madagascar Manuals                     sfblur(1)\n\nNAME\n       sfblur - 2-D blurring and deblurring\n\nSYNOPSIS\n       sfblur  <  in.rsf  >  out.rsf  adj=n inv=n spk=y niter=100 eps=1. rect=\n       rect2=1.0 repeat=1 ncycle=1 perc=50.0 fact=0.5\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  eps =1.       scaling\n       float  fact =0.5      factor for sharpening\n       bool   inv =n [y/n]     inversion flag\n       int    ncycle =1      number of nonlinear cycles\n       int    niter =100      maximum number of iterations\n       float  perc =50.0      percentage for sharpening\n       int    rect =      blurring radius\n       float  rect2 =1.0      smoothing radius\n       int    repeat =1      repeat smoothing\n       bool   spk =y [y/n]     spiky inversion\nSOURCE\n       user/fomels/Mblur.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfblur(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbmcgauss-Tuple{}","page":"Home","title":"Madagascar.sfbmcgauss","text":"sfbmcgauss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbmcgauss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbmcgauss. See ?m8r for examples.\n\nRSF Documentation\n\nsfbmcgauss(1)                 Madagascar Manuals                 sfbmcgauss(1)\n\nNAME\n       sfbmcgauss  -  Correlated  Gaussian joint probability distribution his‐\n       togram generated with modified Box Mulller algorithm\n\nSYNOPSIS\n       sfbmcgauss > out.rsf n=100 m1=0.0 m2=0.0 s1=1.0  s2=1.0  r=0.0  nbin=51\n       dbin=0.1 obin=0.0 iseed=-33\n\nPARAMETERS\n       float  dbin =0.1      histogram bin size\n       int    iseed =-33      random generator seed\n       float  m1 =0.0      mean for deviate 1\n       float  m2 =0.0      mean for deviate 2\n       int    n =100      number of random deviates pairs\n       int    nbin =51      number of bins for histogram\n       float  obin =0.0      histogram origin\n       float  r =0.0      correlation coefficient\n       float  s1 =1.0      standard deviation for deviate 1\n       float  s2 =1.0      standard deviation for deviate 2\nSOURCE\n       user/browaeys/Mbmcgauss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbmcgauss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbooklist-Tuple{}","page":"Home","title":"Madagascar.sfbooklist","text":"sfbooklist(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbooklist on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbooklist. See ?m8r for examples.\n\nRSF Documentation\n\nsfbooklist(1)                 Madagascar Manuals                 sfbooklist(1)\n\nNAME\n       sfbooklist - List properties of Madagascar example book directories.\n\nSYNOPSIS\n       sfbooklist  levels=3 list= timer= rsfproj= size=1024**2 uses= nofetch=y\n       public=n private=n local=n command= skipfile=\n\nCOMMENTS\n       Scan a directory tree (or list of directory trees) to  a  given  depth,\n       inventory the contents, and optionally execute a command in each leaf.\n\n       The  inventory  and optional command occurs only at the specified depth\n       (default 3), not the intervening depths.  Directories  named  .svn  are\n       skipped.   Only directories containing an SConstruct file are listed or\n       executed.\n\n       Optional directory filters controlling inventory or  command  execution\n       may be specified based on existence of .rsfproj file, sf programs used,\n       type of external data required, and total rsf  data-file  size  of  the\n       completed example.  A an optional input text file may also be specified\n       containing a list of examples to skip.\n\n       The optional command is executed in /bin/sh.\n\n       Examples (from within $RSFSRC):\n\n       sfbooklist book                         # inventory of book  sfbooklist\n       levels=2  book/geostats        #  inventory of book/geostats sfbooklist\n       command=scons book           # build examples with default filters  sf‐\n       booklist size=5 command=scons book    # build examples smaller than 5MB\n\nPARAMETERS\n       string command  =       command to execute in each directory, default =\n              none\n       int    levels =3      directory search depth\n       string list =      how much to list [all,filter,none], default = all\n       bool   local =n [y/n]     fetch-local-data filter\n       bool   nofetch =y [y/n]     fetch-no-data filter\n       bool   private =n [y/n]     fetch-private-data filter\n       bool   public =n [y/n]     fetch-public-data filter\n       string rsfproj =      rsfproj filter [yes,no,both], default = yes\n       int    size =1024**2      max data size filter (MB)\n       string skipfile =      file with list of directories to skip\n       string timer =      output execution time  [log,file,none],  default  =\n              none\n       string uses =      uses filter, default = any\nSOURCE\n       user/jennings/Mbooklist.py\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfbooklist\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbooklist(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfboolcmp-Tuple{}","page":"Home","title":"Madagascar.sfboolcmp","text":"sfboolcmp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfboolcmp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfboolcmp. See ?m8r for examples.\n\nRSF Documentation\n\nsfboolcmp(1)                  Madagascar Manuals                  sfboolcmp(1)\n\nNAME\n       sfboolcmp   -   Element-wise   boolean   comparison   of   values.  For\n       int/float/complex data-sets.\n\nSYNOPSIS\n       sfboolcmp < in.rsf > out.rsf right_f= eps=0 right= sign=\n\nCOMMENTS\n       This program will solve the solution to this problem: - [input]  [sign]\n       [right]  -  sfboolcmp  <left.rsf  sign=ge right=right.rsf - left.rsf >=\n       right.rsf This will return a vector of same length as left  and  return\n       0's  or  1's depending on the result of the inequality.  Optionally you\n       can supply a right_f parameter to compare the input data  to  a  single\n       value.\n\n       Written by: C. Brown, UBC Created: Nov 2007\n\nPARAMETERS\n       float  eps =0      comparing within this range epsilon\n       string right =      the rsf file you will be comparing to\n       float  right_f  =       compare  input  (left)  to a single float value\n              (right)\n       string sign =      'eq'(default),'gt','ge','lq','lt','ne'\n                      sign=   'eq' equal-to ( == )\n                      sign=   'gt' greater-than ( > )\n                      sign=   'ge' greater-than or equal-to ( >= )\n                      sign=   'lq' less-than or equal-to ( <= )\n                      sign=   'lt' less-than ( < )\n                      sign=   'ne' not-equal ( !=  )       sign=    'and'  the\n              values  are  both non-zero ( && )      sign=   'or' one value is\n              non-zero ( !! )\nSOURCE\n       user/slim/Mboolcmp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfboolcmp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbox-Tuple{}","page":"Home","title":"Madagascar.sfbox","text":"sfbox(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbox on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbox. See ?m8r for examples.\n\nRSF Documentation\n\nsfbox(1)                      Madagascar Manuals                      sfbox(1)\n\nNAME\n       sfbox - Draw a balloon-style label.\n\nSYNOPSIS\n       sfbox lab_color=VP_WHITE lab_fat=0 pscale=1. pointer=y reverse=n lat=0.\n       long=90. angle=0. x0=0. y0=0. scale0=1. xt=2. yt=0. x_oval=0. y_oval=0.\n       boxit=y length= scalet= size=.25 font=VP_NO_CHANGE label= > out.vpl\n\nCOMMENTS\n       May 2015 program of the month: http://ahay.org/blog/2015/05/01/program-\n       of-the-month-sfbox/\n\nPARAMETERS\n       float  angle =0.       longitude of floating label in 3-D\n       bool   boxit =y [y/n]     if y, create a box around text\n       int    font =VP_NO_CHANGE      text font\n       int    lab_color =VP_WHITE      label color\n       int    lab_fat =0      label fatness\n       string label =      text for label\n       float  lat =0.       latitude of viewpoint in 3-D\n       float  length =      normalization for xt and yt\n       float  long =90.       longitude of viewpoint in 3-D\n       bool   pointer =y [y/n]     if y, create arrow pointer\n       float  pscale =1.       scale factor for width of pointer\n       bool   reverse =n [y/n]     if reverse\n       float  scale0 =1.       scale factor for x0 and y0\n       float  scalet =      ( scalet scale factor for xt and yt (if length  is\n              not set) )\n       float  size =.25      text height in inches\n       float  x0 =0.       x position of the pointer tip\n       float  x_oval =0.       x size of the oval around pointer\n       float  xt =2.       relative position of text in x\n       float  y0 =0.       y position of the pointer tip\n       float  y_oval =0.       y size of the oval around pointer\n       float  yt =0.       relative position of text in y\nUSED IN\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\nSOURCE\n       plot/main/box.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfbox(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfboxcascade-Tuple{}","page":"Home","title":"Madagascar.sfboxcascade","text":"sfboxcascade(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfboxcascade on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfboxcascade. See ?m8r for examples.\n\nRSF Documentation\n\nsfboxcascade(1)               Madagascar Manuals               sfboxcascade(1)\n\nNAME\n       sfboxcascade - Box filter cascade\n\nSYNOPSIS\n       sfboxcascade < inp.rsf > out.rsf rect=0 inter=n\n\nPARAMETERS\n       int    inter =n      interrupt\n       int    rect =0      smoothing radius\nSOURCE\n       user/fomels/Mboxcascade.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfboxcascade(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfboxfilter-Tuple{}","page":"Home","title":"Madagascar.sfboxfilter","text":"sfboxfilter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfboxfilter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfboxfilter. See ?m8r for examples.\n\nRSF Documentation\n\nsfboxfilter(1)                Madagascar Manuals                sfboxfilter(1)\n\nNAME\n       sfboxfilter - 3D convolution with arbitrary filter\n\nSYNOPSIS\n       sfboxfilter < Fx.rsf > Fy.rsf flt=Ff.rsf verb=n stat=y\n\nPARAMETERS\n       file   flt =      auxiliary input file name\n       bool   stat =y [y/n]     stationary flag\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mboxfilter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfboxfilter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfboxsmooth-Tuple{}","page":"Home","title":"Madagascar.sfboxsmooth","text":"sfboxsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfboxsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfboxsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfboxsmooth(1)                Madagascar Manuals                sfboxsmooth(1)\n\nNAME\n       sfboxsmooth - Multi-dimensional smoothing with boxes.\n\nSYNOPSIS\n       sfboxsmooth < in.rsf > out.rsf repeat=1 rect#=(1,1,...)\n\nPARAMETERS\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\nUSED IN\n       bei/fdm/kjartjac\n       bei/vela/stack\n       bei/vela/strat\nSOURCE\n       system/generic/Mboxsmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfboxsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbrfault-Tuple{}","page":"Home","title":"Madagascar.sfbrfault","text":"sfbrfault(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbrfault on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbrfault. See ?m8r for examples.\n\nRSF Documentation\n\nsfbrfault(1)                  Madagascar Manuals                  sfbrfault(1)\n\nNAME\n       sfbrfault - Bridge fault zones with smooth transition\n\nSYNOPSIS\n       sfbrfault    <   in.rsf   slip=slip.rsf   >   out.rsf   shift=shift.rsf\n       mask=mask.rsf replace=n mode=y width=9 order=1\n\nPARAMETERS\n       file   mask =      auxiliary output file name\n       bool   mode =y [y/n]\n       int    order =1 ®\n       bool   replace =n [y/n]\n       file   shift =      auxiliary input file name\n       file   slip =      auxiliary input file name\n       int    width =9 ®\nSOURCE\n       user/zhiguang/Mbrfault.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfbrfault(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbrowser-Tuple{}","page":"Home","title":"Madagascar.sfbrowser","text":"sfbrowser(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbrowser on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbrowser. See ?m8r for examples.\n\nRSF Documentation\n\nsfbrowser(1)                  Madagascar Manuals                  sfbrowser(1)\n\nNAME\n       sfbrowser -\n\nSYNOPSIS\n       sfbrowser\n\nCOMMENTS\n       Open tkMadagascar program browser.\n\nSOURCE\n       user/godwinj/Mbrowser.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfbrowser(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbspvel2-Tuple{}","page":"Home","title":"Madagascar.sfbspvel2","text":"sfbspvel2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbspvel2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbspvel2. See ?m8r for examples.\n\nRSF Documentation\n\nsfbspvel2(1)                  Madagascar Manuals                  sfbspvel2(1)\n\nNAME\n       sfbspvel2  -  B-spline  coefficients  for  a 2-D (an)isotropic velocity\n       model.\n\nSYNOPSIS\n       sfbspvel2 < velz.rsf > out.rsf vx=velx.rsf eta=eta.rsf  theta=theta.rsf\n       verb=n\n\nPARAMETERS\n       string eta =      Anellipticity (auxiliary input file name)\n       string theta =      Tilt angle (auxiliary input file name)\n       bool   verb =n [y/n]     verbosity flag\n       string vx =      Horizontal velocity (auxiliary input file name)\nSOURCE\n       user/cram/Mbspvel2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfbspvel2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbspvel3-Tuple{}","page":"Home","title":"Madagascar.sfbspvel3","text":"sfbspvel3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbspvel3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbspvel3. See ?m8r for examples.\n\nRSF Documentation\n\nsfbspvel3(1)                  Madagascar Manuals                  sfbspvel3(1)\n\nNAME\n       sfbspvel3  -  B-spline  coefficients  for  a 3-D (an)isotropic velocity\n       model.\n\nSYNOPSIS\n       sfbspvel3 < velz.rsf > out.rsf vx=velx.rsf eta=eta.rsf  theta=theta.rsf\n       phi=phi.rsf verb=n\n\nPARAMETERS\n       string eta =      Anellipticity (auxiliary input file name)\n       string phi =      Tilt angle azimuth (auxiliary input file name)\n       string theta =      Tilt angle elevation (auxiliary input file name)\n       bool   verb =n [y/n]     verbosity flag\n       string vx =      Horizontal velocity (auxiliary input file name)\nSOURCE\n       user/cram/Mbspvel3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfbspvel3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfburg-Tuple{}","page":"Home","title":"Madagascar.sfburg","text":"sfburg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfburg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfburg. See ?m8r for examples.\n\nRSF Documentation\n\nsfburg(1)                     Madagascar Manuals                     sfburg(1)\n\nNAME\n       sfburg - Burg's method for 1-D PEF estimation\n\nSYNOPSIS\n       sfburg < inp.rsf > out.rsf filter=filt.rsf na=10\n\nPARAMETERS\n       file   filter =      auxiliary output file name\n       int    na =10      filter size\nSOURCE\n       system/generic/Mburg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfburg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfburstnoise-Tuple{}","page":"Home","title":"Madagascar.sfburstnoise","text":"sfburstnoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfburstnoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfburstnoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfburstnoise(1)               Madagascar Manuals               sfburstnoise(1)\n\nNAME\n       sfburstnoise - Synthetics with bursts of noise.\n\nSYNOPSIS\n       sfburstnoise < in.rsf > out.rsf sigma=1. thresh=0.93 thresh2=0.4\n\nPARAMETERS\n       float  sigma =1.       noise magnitude\n       float  thresh =0.93      noise threshold\n       float  thresh2 =0.4      noise threshold\nSOURCE\n       user/gee/Mburstnoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfburstnoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbvvvdwe2d-Tuple{}","page":"Home","title":"Madagascar.sfbvvvdwe2d","text":"sfbvvvdwe2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbvvvdwe2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbvvvdwe2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfbvvvdwe2d(1)                Madagascar Manuals                sfbvvvdwe2d(1)\n\nNAME\n       sfbvvvdwe2d - Born variable-density variable-velocity acoustic 2D time-\n       domain FD modeling\n\nSYNOPSIS\n       sfbvvvdwe2d   <   Fwav.rsf   vel=Fvel.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf  vpert=Fvpert.rsf rpert=Frpert.rsf bwfl=Fbwfl.rsf bdat=Fb‐\n       dat.rsf swfl=Fswfl.rsf > Fsdat.rsf verb=y free=n adj=n dabc=n nb=NOP\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       string bdat =      auxiliary output file name\n       string bwfl =      auxiliary output file name\n       bool   dabc =n [y/n]     Absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface\n       int    nb =NOP      thickness of the absorbing  boundary:  NOP  is  the\n              width of the FD stencil\n       file   rec =      auxiliary input file name\n       string rpert =      auxiliary input file name\n       file   sou =      auxiliary input file name\n       string swfl =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\n       file   vpert =      auxiliary input file name\nSOURCE\n       user/fperrone/Mbvvvdwe2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbvvvdwe2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbvvvdwe3d-Tuple{}","page":"Home","title":"Madagascar.sfbvvvdwe3d","text":"sfbvvvdwe3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbvvvdwe3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbvvvdwe3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfbvvvdwe3d(1)                Madagascar Manuals                sfbvvvdwe3d(1)\n\nNAME\n       sfbvvvdwe3d - Born variable-density variable-velocity acoustic 3D time-\n       domain FD modeling\n\nSYNOPSIS\n       sfbvvvdwe3d   <   Fwav.rsf   vel=Fvel.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf  vpert=Fvpert.rsf rpert=Frpert.rsf bwfl=Fbwfl.rsf bdat=Fb‐\n       dat.rsf swfl=Fswfl.rsf > Fsdat.rsf verb=y free=n adj=n dabc=n nb=NOP\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       string bdat =      auxiliary output file name\n       string bwfl =      auxiliary output file name\n       bool   dabc =n [y/n]     Absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface\n       int    nb =NOP      thickness of the absorbing  boundary:  NOP  is  the\n              width of the FD stencil\n       file   rec =      auxiliary input file name\n       string rpert =      auxiliary input file name\n       file   sou =      auxiliary input file name\n       string swfl =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\n       file   vpert =      auxiliary input file name\nSOURCE\n       user/fperrone/Mbvvvdwe3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfbvvvdwe3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbyte-Tuple{}","page":"Home","title":"Madagascar.sfbyte","text":"sfbyte(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbyte on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbyte. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbyte2jpg-Tuple{}","page":"Home","title":"Madagascar.sfbyte2jpg","text":"sfbyte2jpg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbyte2jpg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbyte2jpg. See ?m8r for examples.\n\nRSF Documentation\n\nsfbyte2jpg(1)                 Madagascar Manuals                 sfbyte2jpg(1)\n\nNAME\n       sfbyte2jpg - Convert byte RSF to a JPEG image.\n\nSYNOPSIS\n       sfbyte2jpg < in.rsf color=(bool)(3==n1)\n\nPARAMETERS\n       bool   color =(bool)(3==n1) [y/n]\nSOURCE\n       user/fomels/_byte2jpg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbyte2jpg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfbyte2tif-Tuple{}","page":"Home","title":"Madagascar.sfbyte2tif","text":"sfbyte2tif(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfbyte2tif on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfbyte2tif. See ?m8r for examples.\n\nRSF Documentation\n\nsfbyte2tif(1)                 Madagascar Manuals                 sfbyte2tif(1)\n\nNAME\n       sfbyte2tif - Convert byte RSF to a TIFF image.\n\nSYNOPSIS\n       sfbyte2tif < in.rsf color=(bool)(3==n1)\n\nPARAMETERS\n       bool   color =(bool)(3==n1) [y/n]\nSOURCE\n       user/fomels/_byte2tif.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfbyte2tif(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfc1coh-Tuple{}","page":"Home","title":"Madagascar.sfc1coh","text":"sfc1coh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfc1coh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfc1coh. See ?m8r for examples.\n\nRSF Documentation\n\nsfc1coh(1)                    Madagascar Manuals                    sfc1coh(1)\n\nNAME\n       sfc1coh - C1 coherency algorithm.\n\nSYNOPSIS\n       sfc1coh < in.rsf > out.rsf ntw=3 verb=y lag1=3 lag2=3\n\nPARAMETERS\n       int    lag1 =3      Inline time lag (default=3)\n       int    lag2 =3      Crossline time lag (default=3)\n       int    ntw  =3       Temporal  length  of  the  correlation window (de‐\n              fault=3)\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mc1coh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfc1coh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfc2r-Tuple{}","page":"Home","title":"Madagascar.sfc2r","text":"sfc2r(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfc2r on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfc2r. See ?m8r for examples.\n\nRSF Documentation\n\nsfc2r(1)                      Madagascar Manuals                      sfc2r(1)\n\nNAME\n       sfc2r - Cartesian-Coordinates to Riemannian-Coordinates interpolation\n\nSYNOPSIS\n       sfc2r  < Fi.rsf rays=Fr.rsf > Fo.rsf verb=n adj=n linear=y a2n=1 a2o=0.\n       a2d=1. a1n=1 a1o=0. a1d=1.\n\nPARAMETERS\n       float  a1d =1.  ®\n       int    a1n =1 ®\n       float  a1o =0.  ®\n       float  a2d =1.  ®\n       int    a2n =1 ®\n       float  a2o =0.  ®\n       bool   adj =n [y/n]\n       bool   linear =y [y/n]\n       file   rays =      auxiliary input file name\n       bool   verb =n [y/n]\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/seismic/Mc2r.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfc2r(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcabs-Tuple{}","page":"Home","title":"Madagascar.sfcabs","text":"sfcabs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcabs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcabs. See ?m8r for examples.\n\nRSF Documentation\n\nsfcabs(1)                     Madagascar Manuals                     sfcabs(1)\n\nNAME\n       sfcabs - Absolute value complex data.\n\nSYNOPSIS\n       sfcabs < fin.rsf > fout.rsf\n\nSOURCE\n       user/chenyk/Mcabs.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcabs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcameron2d-Tuple{}","page":"Home","title":"Madagascar.sfcameron2d","text":"sfcameron2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcameron2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcameron2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcameron2d(1)                Madagascar Manuals                sfcameron2d(1)\n\nNAME\n       sfcameron2d - Convert Dix velocity to interval velocity.\n\nSYNOPSIS\n       sfcameron2d  <  fv.rsf  >  fv2.rsf  x0=fx.rsf  t0=ft.rsf nz= dz= nc=100\n       neval=20 method=\n\nCOMMENTS\n       Input in (x0,t0), output in (x,z).\n\nPARAMETERS\n       float  dz = ®\n       string method =      method (chebyshev,lax-friedrichs)\n       int    nc =100      number of chebyshev coefficients\n       int    neval =20      numvber of used chebyshev coefficients\n       int    nz = ®\n       file   t0 =      auxiliary output file name\n       file   x0 =      auxiliary output file name\nSOURCE\n       user/kourkina/Mcameron2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcameron2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcamig3-Tuple{}","page":"Home","title":"Madagascar.sfcamig3","text":"sfcamig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcamig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcamig3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcamig3(1)                   Madagascar Manuals                   sfcamig3(1)\n\nNAME\n       sfcamig3 - 3-D common-azimuth modeling/migration with extended SSF\n\nSYNOPSIS\n       sfcamig3  slo=Fs.rsf  <  Fd.rsf  >  Fw.rsf < Fi.rsf ompchunk=1 ompnth=0\n       verb=n eps=0.01 inv=n twoway=n nrmax=1 dtmax=0.004  pmx=0  pmy=0  phx=0\n       tmx=0 tmy=0 thx=0 nw= dw= ow=0. mode=\n\nPARAMETERS\n       float  dtmax =0.004      time error\n       float  dw = ®\n       float  eps =0.01      stability parameter\n       bool   inv =n [y/n]     y=modeling; n=migration\n       string mode = ®\n       int    nrmax =1      maximum number of refs\n       int    nw = ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  ow =0.  ®\n       int    phx =0      padding hx\n       int    pmx =0      padding mx\n       int    pmy =0      padding my\n       file   slo =      auxiliary input file name\n       int    thx =0      taper hx\n       int    tmx =0      taper mx\n       int    tmy =0      taper my\n       bool   twoway =n [y/n]     two-way traveltime\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mcamig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcamig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcanisolr2-Tuple{}","page":"Home","title":"Madagascar.sfcanisolr2","text":"sfcanisolr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcanisolr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcanisolr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcanisolr2(1)                Madagascar Manuals                sfcanisolr2(1)\n\nNAME\n       sfcanisolr2  -  Lowrank decomposition for 2-D anisotropic wave propaga‐\n       tion (Complex).\n\nSYNOPSIS\n       sfcanisolr2  <  velz.rsf  vels=vels.rsf  fft=fft.rsf  left=left.rsf   >\n       right.rsf  mode=0 seed=time(NULL eps=1.e-4 npk=20 dt= os=true sub=false\n       sub=true taper=1.0 approx=2 relation=3\n\nPARAMETERS\n       approx =2      Type of approximation (0=exact 1=zone 2=acoustic)\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      wave mode (0=p wave, 1=Sv wave)\n       npk    =20      maximum rank\n       os     =true ®\n       relation\n              =3      Type of q relationship  (0=shale,  1=sand,  2=carbonate,\n              default being smallest error)\n       seed   =time(NULL ®\n       sub    =true      for twostep, default true\n       taper  =1.0      wavenumber tapering flag\n       file   vels =      auxiliary input file name\nSOURCE\n       user/jsun/Mcanisolr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcanisolr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcanisolr2abc-Tuple{}","page":"Home","title":"Madagascar.sfcanisolr2abc","text":"sfcanisolr2abc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcanisolr2abc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcanisolr2abc. See ?m8r for examples.\n\nRSF Documentation\n\nsfcanisolr2abc(1)             Madagascar Manuals             sfcanisolr2abc(1)\n\nNAME\n       sfcanisolr2abc  - Lowrank decomposition for 2-D anisotropic wave propa‐\n       gation.\n\nSYNOPSIS\n       sfcanisolr2abc  <  velz.rsf  fft=fft.rsf  left=left.rsf   >   right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20  dt=  nbt=0  nbb=0 nbl=0 nbr=0 ct=0.0\n       cb=0.0 cl=0.0 cr=0.0\n\nPARAMETERS\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcanisolr2abc.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcanisolr2abc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcanny-Tuple{}","page":"Home","title":"Madagascar.sfcanny","text":"sfcanny(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcanny on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcanny. See ?m8r for examples.\n\nRSF Documentation\n\nsfcanny(1)                    Madagascar Manuals                    sfcanny(1)\n\nNAME\n       sfcanny - Canny-like edge detector.\n\nSYNOPSIS\n       sfcanny < in.rsf > out.rsf min=5.0 max=95.0\n\nPARAMETERS\n       float  max =95.0      maximum threshold\n       float  min =5.0      minimum threshold\nSOURCE\n       system/generic/Mcanny.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcanny(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcascade-Tuple{}","page":"Home","title":"Madagascar.sfcascade","text":"sfcascade(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcascade on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcascade. See ?m8r for examples.\n\nRSF Documentation\n\nsfcascade(1)                  Madagascar Manuals                  sfcascade(1)\n\nNAME\n       sfcascade - Velocity partitioning for cascaded migrations.\n\nSYNOPSIS\n       sfcascade < in.rsf > out.rsf ntcut= tcut= ncut=1\n\nPARAMETERS\n       int    ncut =1      number of cuts\n       ints   ntcut =       [ncut]\n       floats tcut =      time cuts [ncut]\nSOURCE\n       system/seismic/Mcascade.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcascade(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcat-Tuple{}","page":"Home","title":"Madagascar.sfcat","text":"sfcat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcat. See ?m8r for examples.\n\nRSF Documentation\n\nsfcat(1)                      Madagascar Manuals                      sfcat(1)\n\nNAME\n       sfcat - Concatenate datasets.\n\nSYNOPSIS\n       sfcat  > out.rsf order= space= axis=3 nspace=(int) (ni/(20*nin) + 1) o=\n       d= [<file0.rsf] file1.rsf file2.rsf ...\n\nCOMMENTS\n       sfmerge inserts additional space between merged data.\n\nPARAMETERS\n       int    axis =3      Axis being merged\n       float  d =      axis sampling\n       int    nspace =(int) (ni/(20*nin)  +  1)       if  space=y,  number  of\n              traces to insert\n       float  o =      axis origin\n       ints   order =      concatenation order [nin]\n       bool   space = [y/n]     Insert additional space.          y is default\n              for sfmerge, n is default for sfcat\nUSED IN\n       bei/conj/causint\n       bei/dpmv/yalei\n       bei/dwnc/sigmoid\n       bei/ft1/autocor\n       bei/ft1/brad\n       bei/ft1/ft2d\n       bei/krch/sep73\n       bei/sg/toldi\n       bei/trimo/all\n       bei/vela/stack\n       bei/vela/strat\n       carrot/test/modeling\n       chen/test/wavmod\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       24 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       cat.html\nSOURCE\n       system/main/cat.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfcat\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfcat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcatan2-Tuple{}","page":"Home","title":"Madagascar.sfcatan2","text":"sfcatan2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcatan2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcatan2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcatan2(1)                   Madagascar Manuals                   sfcatan2(1)\n\nNAME\n       sfcatan2 - Argument of complex data calculated by atan2.\n\nSYNOPSIS\n       sfcatan2 < in.rsf > out.rsf\n\nSOURCE\n       user/browaeys/Mcatan2.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcatan2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcausint-Tuple{}","page":"Home","title":"Madagascar.sfcausint","text":"sfcausint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcausint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcausint. See ?m8r for examples.\n\nRSF Documentation\n\nsfcausint(1)                  Madagascar Manuals                  sfcausint(1)\n\nNAME\n       sfcausint - Causal integration on the first axis.\n\nSYNOPSIS\n       sfcausint < in.rsf > out.rsf adj=n\n\nCOMMENTS\n       December         2013        program        of        the        month:\n       http://ahay.org/blog/2013/12/01/program-of-the-month-sfcausint/\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint integration\nUSED IN\n       bei/conj/causint\n       bei/ft1/autocor\n       cup/rna2d/real\nSOURCE\n       system/generic/Mcausint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcausint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcbeamform1-Tuple{}","page":"Home","title":"Madagascar.sfcbeamform1","text":"sfcbeamform1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcbeamform1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcbeamform1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcbeamform1(1)               Madagascar Manuals               sfcbeamform1(1)\n\nNAME\n       sfcbeamform1 - Gaussian beam forming for complex data.\n\nSYNOPSIS\n       sfcbeamform1 < in.rsf > out.rsf rect=3 adj=y repeat=1\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       int    rect =3      smoothing radius\n       int    repeat =1      repeat triangle smoothing\nSOURCE\n       user/fomels/Mcbeamform1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcbeamform1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfccausint-Tuple{}","page":"Home","title":"Madagascar.sfccausint","text":"sfccausint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfccausint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfccausint. See ?m8r for examples.\n\nRSF Documentation\n\nsfccausint(1)                 Madagascar Manuals                 sfccausint(1)\n\nNAME\n       sfccausint - Complex Causal integration on the first axis.\n\nSYNOPSIS\n       sfccausint < in.rsf > out.rsf adj=n\n\nCOMMENTS\n       December         2013        program        of        the        month:\n       http://ahay.org/blog/2013/12/01/program-of-the-month-sfcausint/\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint integration\nSOURCE\n       user/fomels/Mccausint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfccausint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcchebyshevp-Tuple{}","page":"Home","title":"Madagascar.sfcchebyshevp","text":"sfcchebyshevp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcchebyshevp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcchebyshevp. See ?m8r for examples.\n\nRSF Documentation\n\nsfcchebyshevp(1)              Madagascar Manuals              sfcchebyshevp(1)\n\nNAME\n       sfcchebyshevp - Chebyshev polynomial coefficients for complex functions\n\nSYNOPSIS\n       sfcchebyshevp < inp.rsf > out.rsf\n\nSOURCE\n       user/fomels/Mcchebyshevp.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcchebyshevp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcconjgrad-Tuple{}","page":"Home","title":"Madagascar.sfcconjgrad","text":"sfcconjgrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcconjgrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcconjgrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfcconjgrad(1)                Madagascar Manuals                sfcconjgrad(1)\n\nNAME\n       sfcconjgrad  -  Generic  conjugate-gradient solver for linear inversion\n       with complex data\n\nSYNOPSIS\n       sfcconjgrad < dat.rsf mod=mod.rsf mwt=mwt.rsf >  to.rsf  <  from.rsf  >\n       out.rsf niter=1\n\nPARAMETERS\n       file   mod =      auxiliary input file name\n       string mwt =      auxiliary input file name\n       int    niter =1      number of iterations\nSOURCE\n       system/main/cconjgrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcconjgrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcconjgradmpi-Tuple{}","page":"Home","title":"Madagascar.sfcconjgradmpi","text":"sfcconjgradmpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcconjgradmpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcconjgradmpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfcconjgradmpi(1)             Madagascar Manuals             sfcconjgradmpi(1)\n\nNAME\n       sfcconjgradmpi  -  Generic  conjugate-gradient solver for linear inver‐\n       sion.\n\nSYNOPSIS\n       sfcconjgradmpi mod=mod.rsf x0=x0.rsf niter=1\n\nCOMMENTS\n       In this version, the linear operator program uses --input and  --output\n       instead of stdin and stdout.\n\nPARAMETERS\n       file   mod =      auxiliary input file name\n       int    niter =1      number of iterations\n       string x0 =      auxiliary input file name\nSOURCE\n       system/main/cconjgradmpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcconjgradmpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcconst-Tuple{}","page":"Home","title":"Madagascar.sfcconst","text":"sfcconst(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcconst on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcconst. See ?m8r for examples.\n\nRSF Documentation\n\nsfcconst(1)                   Madagascar Manuals                   sfcconst(1)\n\nNAME\n       sfcconst  - Gaussian beam and exact complex eikonal for constant veloc‐\n       ity medium\n\nSYNOPSIS\n       sfcconst < in.rsf > out.rsf source=o2 s=0. v0=1. angle=45. what=\n\nPARAMETERS\n       float  angle =45.       rotation angle (counter-clock wise with respect\n              to vertically downward)\n       float  s =0.       complex source shift\n       float  source =o2      real source point (on surface)\n       float  v0 =1.       constant velocity background\n       string what =      what to compute (default exact solution)\nSOURCE\n       user/llisiw/Mcconst.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcconst(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcconv-Tuple{}","page":"Home","title":"Madagascar.sfcconv","text":"sfcconv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcconv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcconv. See ?m8r for examples.\n\nRSF Documentation\n\nsfcconv(1)                    Madagascar Manuals                    sfcconv(1)\n\nNAME\n       sfcconv - 1-D convolution with complex numbers.\n\nSYNOPSIS\n       sfcconv < in.rsf > out.rsf filt=filt.rsf single=y lag=1\n\nPARAMETERS\n       file   filt =      auxiliary input file name\n       int    lag =1      lag for internal convolution\n       bool   single =y [y/n]     single channel or multichannel\nSOURCE\n       user/gee/Mcconv.c\nVERSION\n       4.2-git Mconv.c 7107 2011-04-10 02:04:14Z ivlad\n\nMadagascar                         JULY 2024                        sfcconv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfccrsym-Tuple{}","page":"Home","title":"Madagascar.sfccrsym","text":"sfccrsym(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfccrsym on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfccrsym. See ?m8r for examples.\n\nRSF Documentation\n\nsfccrsym(1)                   Madagascar Manuals                   sfccrsym(1)\n\nNAME\n       sfccrsym - determine symmetry using correlation\n\nSYNOPSIS\n       sfccrsym < in.rsf > out.rsf size=0 pad=SF_EPS\n\nPARAMETERS\n       float  pad =SF_EPS      pad for stable devision\n       int    size =0      sliding window radius\nSOURCE\n       user/jsun/Mccrsym.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfccrsym(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcdivdir-Tuple{}","page":"Home","title":"Madagascar.sfcdivdir","text":"sfcdivdir(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcdivdir on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcdivdir. See ?m8r for examples.\n\nRSF Documentation\n\nsfcdivdir(1)                  Madagascar Manuals                  sfcdivdir(1)\n\nNAME\n       sfcdivdir - Direct division for complex data.\n\nSYNOPSIS\n       sfcdivdir < fnum.rsf den=fden.rsf > frat.rsf\n\nPARAMETERS\n       file   den =      auxiliary input file name\nSOURCE\n       user/chenyk/Mcdivdir.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcdivdir(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcdivn-Tuple{}","page":"Home","title":"Madagascar.sfcdivn","text":"sfcdivn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcdivn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcdivn. See ?m8r for examples.\n\nRSF Documentation\n\nsfcdivn(1)                    Madagascar Manuals                    sfcdivn(1)\n\nNAME\n       sfcdivn - Smooth division for complex data.\n\nSYNOPSIS\n       sfcdivn   <   fnum.rsf   den=fden.rsf   >   frat.rsf  niter=100  verb=y\n       rect#=(1,1,...)\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mcdivn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcdivn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcdottest-Tuple{}","page":"Home","title":"Madagascar.sfcdottest","text":"sfcdottest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcdottest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcdottest. See ?m8r for examples.\n\nRSF Documentation\n\nsfcdottest(1)                 Madagascar Manuals                 sfcdottest(1)\n\nNAME\n       sfcdottest - Generic dot-product test for complex linear operators with\n       adjoints\n\nSYNOPSIS\n       sfcdottest mod=mod.rsf dat=dat.rsf > pip.rsf\n\nPARAMETERS\n       file   dat =      auxiliary input file name\n       file   mod =      auxiliary input file name\nSOURCE\n       system/main/cdottest.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcdottest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcdottestmpi-Tuple{}","page":"Home","title":"Madagascar.sfcdottestmpi","text":"sfcdottestmpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcdottestmpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcdottestmpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfcdottestmpi(1)              Madagascar Manuals              sfcdottestmpi(1)\n\nNAME\n       sfcdottestmpi  -  Generic dot-product test for complex linear operators\n       with adjoints\n\nSYNOPSIS\n       sfcdottestmpi mod=mod.rsf dat=dat.rsf\n\nCOMMENTS\n       In this version, the linear operator program uses --input and  --output\n       instead of stdin and stdout.\n\nPARAMETERS\n       file   dat =      auxiliary input file name\n       file   mod =      auxiliary input file name\nSOURCE\n       system/main/cdottestmpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcdottestmpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcell2-Tuple{}","page":"Home","title":"Madagascar.sfcell2","text":"sfcell2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcell2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcell2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcell2(1)                    Madagascar Manuals                    sfcell2(1)\n\nNAME\n       sfcell2 - Second-order cell ray tracing with locally parabolic rays.\n\nSYNOPSIS\n       sfcell2  <  vel.rsf  > time.rsf shotfile=shots.rsf anglefile=angles.rsf\n       vel=y order=4 lsint=n nt=nx*nz nr= a0=0. amax=360. traj= > rays.rsf\n\nCOMMENTS\n       Rays and wavefronts can be displayed with sfplotrays.\n\nPARAMETERS\n       float  a0 =0.       First angle in degrees (if anglefile is not  speci‐\n              fied)\n       float  amax  =360.        Maximum angle in degrees (if anglefile is not\n              specified)\n       string anglefile =      file with initial angles (auxiliary input  file\n              name)\n       bool   lsint =n [y/n]     if use least-squares interpolation\n       int    nr =      Number of angles (if anglefile is not specified)\n       int    nt =nx*nz      number of time steps\n       int    order =4      Interpolation accuracy\n       string shotfile  =       file with shot locations (auxiliary input file\n              name)\n       string traj = ®\n       bool   vel =y [y/n]     If y, the input is velocity; if n, slowness\nSOURCE\n       system/seismic/Mcell2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcell2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcell3-Tuple{}","page":"Home","title":"Madagascar.sfcell3","text":"sfcell3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcell3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcell3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcell3(1)                    Madagascar Manuals                    sfcell3(1)\n\nNAME\n       sfcell3  - Second-order cell ray tracing with locally parabolic rays in\n       3-D.\n\nSYNOPSIS\n       sfcell3 < vel.rsf >  time.rsf  shotfile=shots.rsf  anglefile=angles.rsf\n       vel=y  order=4 nt=nx*nz na= nb= a0=0. amax=360. b0=0. bmax=180. traj= >\n       rays.rsf\n\nCOMMENTS\n       Rays and wavefronts can be displayed with sfplotrays.\n\nPARAMETERS\n       float  a0 =0.       First azimuth angle in degrees (if anglefile is not\n              specified)\n       float  amax  =360.       Maximum azimuth angle in degrees (if anglefile\n              is not specified)\n       string anglefile =      file with initial angles (auxiliary input  file\n              name)\n       float  b0 =0.       First inclination angle in degrees (if anglefile is\n              not specified)\n       float  bmax =180.       Maximum inclination angle in degrees (if angle‐\n              file is not specified)\n       int    na =      Number of azimuths (if anglefile is not specified)\n       int    nb =      Number of inclinations (if anglefile is not specified)\n       int    nt =nx*nz      number of time steps\n       int    order =4      Interpolation accuracy\n       string shotfile  =       file with shot locations (auxiliary input file\n              name)\n       string traj = ®\n       bool   vel =y [y/n]     If y, the input is velocity; if n, slowness\nSOURCE\n       system/seismic/Mcell3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcell3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcemd1-Tuple{}","page":"Home","title":"Madagascar.sfcemd1","text":"sfcemd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcemd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcemd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcemd1(1)                    Madagascar Manuals                    sfcemd1(1)\n\nNAME\n       sfcemd1 - Bivariate empirical mode decomposition using first algorithm.\n\nSYNOPSIS\n       sfcemd1  < inp.rsf > outp.rsf threshold=DEFAULT_THRESHOLD tolerance=DE‐\n       FAULT_TOLERANCE miter=MAX_ITERATIONS mimf=0 nbdir=DEFAULT_NBPHASES\n\nPARAMETERS\n       int    mimf =0      Maximum number of IMFs, the default is as  many  as\n              possible.\n       int    miter  =MAX_ITERATIONS       Maximum number of iterations during\n              sifting, the default is 1000.\n       int    nbdir =DEFAULT_NBPHASES      Number of directions used  to  com‐\n              pute the local mean, the default is 4.\n       float  threshold  =DEFAULT_THRESHOLD       Sifting  stoping  parameter:\n              threshold, the default is 0.05.\n       float  tolerance  =DEFAULT_TOLERANCE       Sifting  stoping  parameter:\n              tolerance, the default is 0.05.\nSOURCE\n       user/chenyk/Mcemd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcemd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcemd2-Tuple{}","page":"Home","title":"Madagascar.sfcemd2","text":"sfcemd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcemd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcemd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcemd2(1)                    Madagascar Manuals                    sfcemd2(1)\n\nNAME\n       sfcemd2  -  Bivariate  empirical  mode decomposition using second algo‐\n       rithm.\n\nSYNOPSIS\n       sfcemd2 < inp.rsf > outp.rsf threshold=DEFAULT_THRESHOLD  tolerance=DE‐\n       FAULT_TOLERANCE miter=MAX_ITERATIONS mimf=0 nbdir=DEFAULT_NBPHASES\n\nPARAMETERS\n       int    mimf  =0       Maximum number of IMFs, the default is as many as\n              possible.\n       int    miter =MAX_ITERATIONS      Maximum number of  iterations  during\n              sifting, the default is 1000.\n       int    nbdir  =DEFAULT_NBPHASES       Number of directions used to com‐\n              pute the local mean, the default is 4.\n       float  threshold  =DEFAULT_THRESHOLD       Sifting  stoping  parameter:\n              threshold, the default is 0.05.\n       float  tolerance  =DEFAULT_TOLERANCE       Sifting  stoping  parameter:\n              tolerance, the default is 0.05.\nSOURCE\n       user/chenyk/Mcemd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcemd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcerf-Tuple{}","page":"Home","title":"Madagascar.sfcerf","text":"sfcerf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcerf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcerf. See ?m8r for examples.\n\nRSF Documentation\n\nsfcerf(1)                     Madagascar Manuals                     sfcerf(1)\n\nNAME\n       sfcerf - None\n\nSYNOPSIS\n       sfcerf\n\nSOURCE\n       user/dmerzlikin/Mcerf.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcerf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftexp2-Tuple{}","page":"Home","title":"Madagascar.sfcfftexp2","text":"sfcfftexp2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftexp2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftexp2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftexp2(1)                 Madagascar Manuals                 sfcfftexp2(1)\n\nNAME\n       sfcfftexp2 - 2-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration\n\nSYNOPSIS\n       sfcfftexp2 < data.rsf > image.rsf left=left.rsf  right=right.rsf  mig=n\n       pad1=1 nz= dz= nt= dt=\n\nPARAMETERS\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\nSOURCE\n       user/jsun/Mcfftexp2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcfftexp2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftexp2test-Tuple{}","page":"Home","title":"Madagascar.sfcfftexp2test","text":"sfcfftexp2test(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftexp2test on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftexp2test. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftexp2test(1)             Madagascar Manuals             sfcfftexp2test(1)\n\nNAME\n       sfcfftexp2test  -  2-D FFT-based zero-offset exploding reflector model‐\n       ing/migration (outputs time volume, not just last image; can be used to\n       generate movie)\n\nSYNOPSIS\n       sfcfftexp2test  <  data.rsf  >  image.rsf left=left.rsf right=right.rsf\n       mig=n pad1=1 nz= dz= nt= dt=\n\nPARAMETERS\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\nSOURCE\n       user/jsun/Mcfftexp2test.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcfftexp2test(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftexpa-dev-Tuple{}","page":"Home","title":"Madagascar.sfcfftexpa-dev","text":"sfcfftexpa-dev(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftexpa-dev on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftexpa-dev. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftexpa-dev(1)             Madagascar Manuals             sfcfftexpa-dev(1)\n\nNAME\n       sfcfftexpa-dev  -  Development  stage-2-D complex FFT-based zero-offset\n       exploding reflector modeling/migration\n\nSYNOPSIS\n       sfcfftexpa-dev < data.rsf  >  image.rsf  left=left.rsf  right=right.rsf\n       adj=n pad1=1 n0=0 nz= dz= nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       file   left =      auxiliary input file name\n       int    n0 =0      geophone surface\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\nSOURCE\n       user/fomels/Mcfftexpa-dev.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcfftexpa-dev(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftexpmig2-Tuple{}","page":"Home","title":"Madagascar.sfcfftexpmig2","text":"sfcfftexpmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftexpmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftexpmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftexpmig2(1)              Madagascar Manuals              sfcfftexpmig2(1)\n\nNAME\n       sfcfftexpmig2 - Complex 2-D exploding reflector migration (read in ini‐\n       tial complex wavefield in depth)\n\nSYNOPSIS\n       sfcfftexpmig2 < wvfld.rsf  >  image.rsf  left=left.rsf  right=right.rsf\n       verb=n nt= dt= pad1=1\n\nPARAMETERS\n       float  dt = ®\n       file   left =      auxiliary input file name\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftexpmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcfftexpmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave1-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave1","text":"sfcfftwave1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave1(1)                Madagascar Manuals                sfcfftwave1(1)\n\nNAME\n       sfcfftwave1 - 1-D complex lowrank FFT wave extrapolation\n\nSYNOPSIS\n       sfcfftwave1   <   inp.rsf   >   out.rsf  left=left.rsf  right=right.rsf\n       prop=prop.rsf nt= dt=\n\nPARAMETERS\n       float  dt = ®\n       file   left =      auxiliary input file name\n       int    nt = ®\n       file   prop =      auxiliary input file name\n       string right =      auxiliary input file name\nSOURCE\n       user/fomels/Mcfftwave1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcfftwave1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave1d-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave1d","text":"sfcfftwave1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave1d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave1d(1)               Madagascar Manuals               sfcfftwave1d(1)\n\nNAME\n       sfcfftwave1d - 1-D complex lowrank FFT wave extrapolation using complex\n       to complex fft using initial condition\n\nSYNOPSIS\n       sfcfftwave1d  <   Fw.rsf   >   Fo.rsf   right=right.rsf   left=left.rsf\n       prop=prop.rsf nt= dt= sub=n os=y cos=y cft=y cmplx=n\n\nPARAMETERS\n       bool   cft =y [y/n]\n       bool   cmplx =n [y/n]\n       bool   cos =y [y/n]\n       float  dt = ®\n       file   left =      auxiliary input file name\n       int    nt = ®\n       bool   os =y [y/n]\n       file   prop =      auxiliary input file name\n       string right =      auxiliary input file name\n       bool   sub =n [y/n]     if -1 is included in the matrix\nSOURCE\n       user/jsun/Mcfftwave1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcfftwave1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave1dd-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave1dd","text":"sfcfftwave1dd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave1dd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave1dd. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave1dd(1)              Madagascar Manuals              sfcfftwave1dd(1)\n\nNAME\n       sfcfftwave1dd  -  1-D complex lowrank FFT wave extrapolation using com‐\n       plex to complex fft using initial condition\n\nSYNOPSIS\n       sfcfftwave1dd  <  Fw.rsf   >   Fo.rsf   left=left.rsf   right=right.rsf\n       prop=prop.rsf sub=n nt= dt=\n\nPARAMETERS\n       float  dt = ®\n       file   left =      auxiliary input file name\n       int    nt = ®\n       file   prop =      auxiliary input file name\n       string right =      auxiliary input file name\n       bool   sub =n [y/n]     if -1 is included in the matrix\nSOURCE\n       user/jsun/Mcfftwave1dd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcfftwave1dd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave1in-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave1in","text":"sfcfftwave1in(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave1in on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave1in. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave1in(1)              Madagascar Manuals              sfcfftwave1in(1)\n\nNAME\n       sfcfftwave1in  -  1-D complex lowrank FFT wave extrapolation using com‐\n       plex to complex fft BY INJECTION\n\nSYNOPSIS\n       sfcfftwave1in   <   Fw.rsf   >   Fo.rsf    refl=Fr.rsf    left=left.rsf\n       right=right.rsf\n\nPARAMETERS\n       file   left =      auxiliary input file name\n       file   refl =      auxiliary input file name\n       file   right =      auxiliary input file name\nSOURCE\n       user/jsun/Mcfftwave1in.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcfftwave1in(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave2-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave2","text":"sfcfftwave2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave2(1)                Madagascar Manuals                sfcfftwave2(1)\n\nNAME\n       sfcfftwave2 - Complex 2-D wave propagation (with multi-threaded FFTW3)\n\nSYNOPSIS\n       sfcfftwave2  < Fw.rsf > Fo.rsf ref=Fr.rsf left=left.rsf right=right.rsf\n       verb=n cmplx=y os=y sub=n sub=y pad1=1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     outputs complex wavefield\n       file   left =      auxiliary input file name\n       bool   os =y [y/n]     one-step flag\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       bool   sub =y [y/n]     subtraction flag\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcfftwave2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave2mix2-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave2mix2","text":"sfcfftwave2mix2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave2mix2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave2mix2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave2mix2(1)            Madagascar Manuals            sfcfftwave2mix2(1)\n\nNAME\n       sfcfftwave2mix2 - Complex 2-D wave propagation\n\nSYNOPSIS\n       sfcfftwave2mix2    <   Fw.rsf   >   Fo.rsf   ref=Fr.rsf   left=left.rsf\n       right=right.rsf verb=n cmplx=y pad1=1 mode=\n\nPARAMETERS\n       bool   cmplx =y [y/n]     outputs complex wavefield\n       file   left =      auxiliary input file name\n       string mode =      default mode is pspi\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave2mix2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfcfftwave2mix2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave2nsps-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave2nsps","text":"sfcfftwave2nsps(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave2nsps on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave2nsps. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave2nsps(1)            Madagascar Manuals            sfcfftwave2nsps(1)\n\nNAME\n       sfcfftwave2nsps - Complex 2-D wave propagation (NSPS)\n\nSYNOPSIS\n       sfcfftwave2nsps    <   Fw.rsf   >   Fo.rsf   ref=Fr.rsf   left=left.rsf\n       right=right.rsf verb=n cmplx=y pad1=1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     outputs complex wavefield\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave2nsps.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfcfftwave2nsps(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave2omp-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave2omp","text":"sfcfftwave2omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave2omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave2omp. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave2omp(1)             Madagascar Manuals             sfcfftwave2omp(1)\n\nNAME\n       sfcfftwave2omp  -  Complex  2-D  wave  propagation (with multi-threaded\n       FFTW3)\n\nSYNOPSIS\n       sfcfftwave2omp   <   Fw.rsf   >   Fo.rsf    ref=Fr.rsf    left=left.rsf\n       right=right.rsf verb=n cmplx=y os=y sub=n sub=y pad1=1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     outputs complex wavefield\n       file   left =      auxiliary input file name\n       bool   os =y [y/n]     one-step flag\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       bool   sub =y [y/n]     subtraction flag\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave2omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcfftwave2omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave2taper-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave2taper","text":"sfcfftwave2taper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave2taper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave2taper. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave2taper(1)           Madagascar Manuals           sfcfftwave2taper(1)\n\nNAME\n       sfcfftwave2taper  -  Complex  2-D wave propagation (with multi-threaded\n       FFTW3)\n\nSYNOPSIS\n       sfcfftwave2taper  <  Fw.rsf   >   Fo.rsf   ref=Fr.rsf   snaps=snaps.rsf\n       left=left.rsf  right=right.rsf  verb=n cmplx=y os=y sub=n sub=y taper=0\n       thresh=0.92 snap=0 pad1=1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     outputs complex wavefield\n       file   left =      auxiliary input file name\n       bool   os =y [y/n]     one-step flag\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   sub =y [y/n]     subtraction flag\n       int    taper =0      tapering in the frequency domain\n       float  thresh =0.92      tapering threshold\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave2taper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfcfftwave2taper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcfftwave3-Tuple{}","page":"Home","title":"Madagascar.sfcfftwave3","text":"sfcfftwave3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcfftwave3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcfftwave3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcfftwave3(1)                Madagascar Manuals                sfcfftwave3(1)\n\nNAME\n       sfcfftwave3 - Simple 3-D lowrank onestep wave propagation\n\nSYNOPSIS\n       sfcfftwave3  < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf verb=y pad1=1 snap=0\n\nPARAMETERS\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/jsun/Mcfftwave3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcfftwave3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcflow-Tuple{}","page":"Home","title":"Madagascar.sfcflow","text":"sfcflow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcflow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcflow. See ?m8r for examples.\n\nRSF Documentation\n\nsfcflow(1)                    Madagascar Manuals                    sfcflow(1)\n\nNAME\n       sfcflow - Fast mean-curvature flow.\n\nSYNOPSIS\n       sfcflow < in.rsf > out.rsf rect=3 order=3 tol=0.1 niter=100 band=1.\n\nPARAMETERS\n       float  band =1.       narrow band\n       int    niter =100      number of iterations\n       int    order =3      interpolation order\n       int    rect =3      smoothing radius\n       float  tol =0.1      error tolerance\nSOURCE\n       user/fomels/Mcflow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcflow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcgconst-Tuple{}","page":"Home","title":"Madagascar.sfcgconst","text":"sfcgconst(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcgconst on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcgconst. See ?m8r for examples.\n\nRSF Documentation\n\nsfcgconst(1)                  Madagascar Manuals                  sfcgconst(1)\n\nNAME\n       sfcgconst - Test Beam for constant velocity gradient\n\nSYNOPSIS\n       sfcgconst  <  in.rsf  > out.rsf mask=mask.rsf source=o2 w=0. v0=1. b=0.\n       p=1/v0\n\nPARAMETERS\n       float  b =0.       velocity gradient\n       file   mask =      auxiliary output file name\n       float  p =1/v0 ®\n       float  source =o2      real source point\n       float  v0 =1.       surface velocity\n       float  w =0.       beam width\nSOURCE\n       user/llisiw/Mcgconst.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcgconst(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcgi-Tuple{}","page":"Home","title":"Madagascar.sfcgi","text":"sfcgi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcgi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcgi. See ?m8r for examples.\n\nRSF Documentation\n\nsfcgi(1)                      Madagascar Manuals                      sfcgi(1)\n\nNAME\n       sfcgi - A generic CGI script\n\nSYNOPSIS\n       sfcgi\n\nSOURCE\n       user/fomels/Mcgi.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfcgi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcgscan-Tuple{}","page":"Home","title":"Madagascar.sfcgscan","text":"sfcgscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcgscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcgscan. See ?m8r for examples.\n\nRSF Documentation\n\nsfcgscan(1)                   Madagascar Manuals                   sfcgscan(1)\n\nNAME\n       sfcgscan  - Hyperbolic Radon transform with conjugate-directions inver‐\n       sion\n\nSYNOPSIS\n       sfcgscan < in.rsf > out.rsf error=err.rsf  mask=msk.rsf  adj=n  niter=0\n       miter=2 psun1=1 psun2=1 anti=1. s02=0. ncycle=0 perc=50.0 fact=0.5\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  anti =1.       antialiasing\n       string error =      auxiliary output file name\n       float  fact =0.5      factor for sharpening\n       string mask =      auxiliary input file name\n       int    miter =2      conjugate-direction memory\n       int    ncycle =0      number of sharpening cycles\n       int    niter =0      number of iterations\n       float  perc =50.0      percentage for sharpening\n       int    psun1 =1      amplitude type for adjoint\n       int    psun2 =1      amplitude type for forward\n       float  s02 =0.       reference slowness squared (for antialiasing)\nSOURCE\n       system/seismic/Mcgscan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcgscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfchain2dfft-Tuple{}","page":"Home","title":"Madagascar.sfchain2dfft","text":"sfchain2dfft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfchain2dfft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfchain2dfft. See ?m8r for examples.\n\nRSF Documentation\n\nsfchain2dfft(1)               Madagascar Manuals               sfchain2dfft(1)\n\nNAME\n       sfchain2dfft - Find a symmetric chain of 2D-Fourier weighting and scal‐\n       ing with movies\n\nSYNOPSIS\n       sfchain2dfft  <  src.rsf   >   wht.rsf   target=tgt.rsf   init_w=w0.rsf\n       init_wf=wf0.rsf fweight=fwht.rsf match=mch.rsf niter=0 liter=50 rect1=1\n       rect2=1 frect1=1 frect2=1\n\nPARAMETERS\n       int    frect1 =1      smoothing in frequency dim1\n       int    frect2 =1      smoothing in frequency dim2\n       file   fweight =      auxiliary output file name\n       file   init_w =      auxiliary input file name\n       file   init_wf =      auxiliary input file name\n       int    liter =50      number of linear iterations\n       file   match =      auxiliary output file name\n       int    niter =0      number of iterations\n       int    rect1 =1      smoothing in time dim1\n       int    rect2 =1      smoothing in time dim2\n       file   target =      auxiliary input file name\nSOURCE\n       user/fomels/Mchain2dfft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfchain2dfft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfchaindr-Tuple{}","page":"Home","title":"Madagascar.sfchaindr","text":"sfchaindr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfchaindr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfchaindr. See ?m8r for examples.\n\nRSF Documentation\n\nsfchaindr(1)                  Madagascar Manuals                  sfchaindr(1)\n\nNAME\n       sfchaindr - chain diffraction extraction debug version\n\nSYNOPSIS\n       sfchaindr  <  inp.rsf > out.rsf vel=vel.rsf dip=dip.rsf dipim=dipim.rsf\n       diffmod=diffmod.rsf outpwd=outpwdcheck.rsf outdip=outdipcheck.rsf  off‐\n       set=offset.rsf  adj=n  sm=y  domod=y reg=0.0 debug= normalize=y nh= an‐\n       tialias=1.0 apt=nx angle=90.0 half=y verb=y rho=1.-1./nt dh=  h0=  v_1=\n       v_2= v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001 pad=nt order=1 nj1=1\n\nPARAMETERS\n       bool   adj =n [y/n]     if perform derivative filtering = PWD\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       bool   debug = [y/n]\n       float  dh =      offset sampling (for modeling)\n       file   diffmod =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       file   dipim =      auxiliary input file name\n       bool   domod =y [y/n]     get regularization parameter\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       int    nj1 =1      antialiasing\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       int    order =1 [1,2,3]   accuracy order\n       file   outdip =      auxiliary output file name\n       file   outpwd =      auxiliary output file name\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       float  reg =0.0      debug flag\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform modelling via Kirchhoff\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mchaindr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfchaindr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfchebvc-Tuple{}","page":"Home","title":"Madagascar.sfchebvc","text":"sfchebvc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfchebvc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfchebvc. See ?m8r for examples.\n\nRSF Documentation\n\nsfchebvc(1)                   Madagascar Manuals                   sfchebvc(1)\n\nNAME\n       sfchebvc  -  Post-stack  2-D  velocity  continuation  by  Chebyshev-tau\n       method.\n\nSYNOPSIS\n       sfchebvc < in.rsf > out.rsf nv= vel=\n\nPARAMETERS\n       int    nv = ®\n       float  vel = ®\nSOURCE\n       user/fomels/Mchebvc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfchebvc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfchebyshev-Tuple{}","page":"Home","title":"Madagascar.sfchebyshev","text":"sfchebyshev(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfchebyshev on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfchebyshev. See ?m8r for examples.\n\nRSF Documentation\n\nsfchebyshev(1)                Madagascar Manuals                sfchebyshev(1)\n\nNAME\n       sfchebyshev - Testing Chebyshev interpolation\n\nSYNOPSIS\n       sfchebyshev < inp.rsf > out.rsf n1=1 o1=0.0f d1=1.0f\n\nPARAMETERS\n       float  d1 =1.0f      output sampling\n       int    n1 =1      number of output points\n       float  o1 =0.0f      output origin\nSOURCE\n       user/fomels/Mchebyshev.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfchebyshev(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfchebyshevp-Tuple{}","page":"Home","title":"Madagascar.sfchebyshevp","text":"sfchebyshevp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfchebyshevp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfchebyshevp. See ?m8r for examples.\n\nRSF Documentation\n\nsfchebyshevp(1)               Madagascar Manuals               sfchebyshevp(1)\n\nNAME\n       sfchebyshevp - Chebyshev polynomial coefficients\n\nSYNOPSIS\n       sfchebyshevp < inp.rsf > out.rsf\n\nSOURCE\n       user/fomels/Mchebyshevp.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfchebyshevp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcheckerboard-Tuple{}","page":"Home","title":"Madagascar.sfcheckerboard","text":"sfcheckerboard(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcheckerboard on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcheckerboard. See ?m8r for examples.\n\nRSF Documentation\n\nsfcheckerboard(1)             Madagascar Manuals             sfcheckerboard(1)\n\nNAME\n       sfcheckerboard - make a 2D/3D checkerboard model\n\nSYNOPSIS\n       sfcheckerboard  >  Fo.rsf  nx=1  ny=1  nz=1 ox=0.0 oy=0.0 oz=0.0 dx=1.0\n       dy=1.0 dz=1.0 N=1\n\nPARAMETERS\n       int    N                                                             =1\n                   ------------------------------------------------------------\n       float  dx =1.0 ®\n       float  dy =1.0 ®\n       float  dz =1.0      get checkerboard size\n       int    nx =1 ®\n       int    ny =1 ®\n       int    nz =1 ®\n       float  ox =0.0 ®\n       float  oy =0.0 ®\n       float  oz =0.0 ®\nSOURCE\n       user/psava/Mcheckerboard.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcheckerboard(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcheckptdemo-Tuple{}","page":"Home","title":"Madagascar.sfcheckptdemo","text":"sfcheckptdemo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcheckptdemo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcheckptdemo. See ?m8r for examples.\n\nRSF Documentation\n\nsfcheckptdemo(1)              Madagascar Manuals              sfcheckptdemo(1)\n\nNAME\n       sfcheckptdemo - RTM with checkpointing in 2D acoustic media\n\nSYNOPSIS\n       sfcheckptdemo  <  Fv.rsf  >  Fw.rsf p1=Fp1.rsf p2=Fp2.rsf nb=20 nt= dt=\n       fm=20.0 ft=0 jt=1 verb=n kt= nob=(int)log2f(nt)\n\nCOMMENTS\n       The real value of checkpointing technology resides in the  backpropaga‐\n       tion with viscoacoustic and viscoelastic wave equation, where the wave‐\n       field reconstruction method using saved boundaries fails. Here, we only\n       demonstrate how to implement it in acoustic media without dissipation.\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    kt =      output px and pz component at kt\n       int    nb =20      thickness of PML ABC\n       int    nob  =(int)log2f(nt)       number  of  buffers,  default=optimal\n              value\n       int    nt =      number of time steps\n       file   p1 =      auxiliary output file name\n       file   p2 =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity, if y, output px and pz\nSOURCE\n       user/pyang/Mcheckptdemo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcheckptdemo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcic3d_ditthara-Tuple{}","page":"Home","title":"Madagascar.sfcic3d_ditthara","text":"sfcic3d_ditthara(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcic3d_ditthara on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcic3d_ditthara. See ?m8r for examples.\n\nRSF Documentation\n\nsfcic3dditthara(1)           Madagascar Manuals           sfcic3dditthara(1)\n\nNAME\n       sfcic3d_ditthara - Conventional IC 3D\n\nSYNOPSIS\n       sfcic3d_ditthara < Fs.rsf ur=Fr.rsf > Fi.rsf verb=n isreversed=n\n\nPARAMETERS\n       bool   isreversed =n [y/n]     received wavefield\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/ditthara/Mcic3d_ditthara.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfcic3d_ditthara(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcicold2d-Tuple{}","page":"Home","title":"Madagascar.sfcicold2d","text":"sfcicold2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcicold2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcicold2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcicold2d(1)                 Madagascar Manuals                 sfcicold2d(1)\n\nNAME\n       sfcicold2d - Conventional IC 2D\n\nSYNOPSIS\n       sfcicold2d < Fs.rsf ur=Fr.rsf > Fi.rsf verb=n isreversed=n\n\nPARAMETERS\n       bool   isreversed =n [y/n]     received wavefield\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mcicold2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcicold2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcicop2d-Tuple{}","page":"Home","title":"Madagascar.sfcicop2d","text":"sfcicop2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcicop2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcicop2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcicop2d(1)                  Madagascar Manuals                  sfcicop2d(1)\n\nNAME\n       sfcicop2d - Conventional IC 2D\n\nSYNOPSIS\n       sfcicop2d  opr=Fopr.rsf  < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n\n       oprcausal=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   opr =      auxiliary input file name\n       bool   oprcausal =n [y/n]     causal opr?\n       bool   verb =n [y/n]     verbosity flag\n       bool   wflcausal =n [y/n]     causal wfl?\nSOURCE\n       user/psava/Mcicop2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcicop2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcicop3d-Tuple{}","page":"Home","title":"Madagascar.sfcicop3d","text":"sfcicop3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcicop3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcicop3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcicop3d(1)                  Madagascar Manuals                  sfcicop3d(1)\n\nNAME\n       sfcicop3d - Conventional IC 2D\n\nSYNOPSIS\n       sfcicop3d  opr=Fopr.rsf  < Fimg.rsf > Fwfl.rsf verb=n adj=n wflcausal=n\n       oprcausal=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   opr =      auxiliary input file name\n       bool   oprcausal =n [y/n]     causal opr?\n       bool   verb =n [y/n]     verbosity flag\n       bool   wflcausal =n [y/n]     causal wfl?\nSOURCE\n       user/psava/Mcicop3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcicop3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcigangle-Tuple{}","page":"Home","title":"Madagascar.sfcigangle","text":"sfcigangle(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcigangle on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcigangle. See ?m8r for examples.\n\nRSF Documentation\n\nsfcigangle(1)                 Madagascar Manuals                 sfcigangle(1)\n\nNAME\n       sfcigangle - src-receiver to angle gathers\n\nSYNOPSIS\n       sfcigangle   <   dist.rsf   time=time.rsf   dept=dept.rsf   >  imag.rsf\n       data=data.rsf nalpha=90 tolz=1.f\n\nPARAMETERS\n       file   data =      auxiliary input file name\n       file   dept =      auxiliary input file name\n       int    nalpha =90 ®\n       file   time =      auxiliary input file name\n       float  tolz =1.f      surface depth\nSOURCE\n       user/roman/Mcigangle.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcigangle(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcij2moveout-Tuple{}","page":"Home","title":"Madagascar.sfcij2moveout","text":"sfcij2moveout(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcij2moveout on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcij2moveout. See ?m8r for examples.\n\nRSF Documentation\n\nsfcij2moveout(1)              Madagascar Manuals              sfcij2moveout(1)\n\nNAME\n       sfcij2moveout  -  Converting interval Cij to interval/effective moveout\n       coefficients in 3D layered orthorhombic with possible  phimuthal  rota‐\n       tion (Sripanich and Fomel, 2016)\n\nSYNOPSIS\n       sfcij2moveout  > a11o.rsf a12o=a12o.rsf a22o=a22o.rsf a1111o=a1111o.rsf\n       a1112o=a1112o.rsf a1122o=a1122o.rsf a1222o=a1222o.rsf a2222o=a2222o.rsf\n       <  C11.rsf  c55=C55.rsf c33=C33.rsf c66=C66.rsf c12=C12.rsf c13=C13.rsf\n       c23=C23.rsf c22=C22.rsf c44=C44.rsf phi=Phi.rsf  scalecij=1  scalequar‐\n       tic=n eff=n\n\nPARAMETERS\n       file   a1111o =      auxiliary output file name\n       file   a1112o =      auxiliary output file name\n       file   a1122o =      auxiliary output file name\n       file   a1222o =      auxiliary output file name\n       file   a12o =      auxiliary output file name\n       file   a2222o =      auxiliary output file name\n       file   a22o =      auxiliary output file name\n       file   c12 =      auxiliary input file name\n       file   c13 =      auxiliary input file name\n       file   c22 =      auxiliary input file name\n       file   c23 =      auxiliary input file name\n       file   c33 =      auxiliary input file name\n       file   c44 =      auxiliary input file name\n       file   c55 =      auxiliary input file name\n       file   c66 =      auxiliary input file name\n       bool   eff =n [y/n]     Output effective parameters instead of interval\n       file   phi =      auxiliary input file name\n       float  scalecij =1      Scaling of input Cij in case of GPa or km^2/s^2\n       bool   scalequartic  =n  [y/n]     Scaling  the  output quartic coeffi‐\n              cients y--multiplied by 2 t0^2 (t0 = two-way)  to  look  at  the\n              property of the layer -> input for GMA\nSOURCE\n       user/zone/Mcij2moveout.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcij2moveout(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcipcut-Tuple{}","page":"Home","title":"Madagascar.sfcipcut","text":"sfcipcut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcipcut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcipcut. See ?m8r for examples.\n\nRSF Documentation\n\nsfcipcut(1)                   Madagascar Manuals                   sfcipcut(1)\n\nNAME\n       sfcipcut - cut at CIPs\n\nSYNOPSIS\n       sfcipcut < Fcub.rsf cip=Fcip.rsf > Fcut.rsf verb=n\n\nPARAMETERS\n       file   cip =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mcipcut.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcipcut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr1-Tuple{}","page":"Home","title":"Madagascar.sfcisolr1","text":"sfcisolr1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr1(1)                  Madagascar Manuals                  sfcisolr1(1)\n\nNAME\n       sfcisolr1 - Complex lowrank decomposition for 2-D isotropic wave propa‐\n       gation.\n\nSYNOPSIS\n       sfcisolr1   <   vel.rsf   fft=fft.rsf   left=left.rsf    >    right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcisolr1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr2-Tuple{}","page":"Home","title":"Madagascar.sfcisolr2","text":"sfcisolr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr2(1)                  Madagascar Manuals                  sfcisolr2(1)\n\nNAME\n       sfcisolr2 - Complex lowrank decomposition for 2-D isotropic wave propa‐\n       gation.\n\nSYNOPSIS\n       sfcisolr2   <   vel.rsf   fft=fft.rsf   left=left.rsf    >    right.rsf\n       seed=time(NULL   eps=1.e-4   npk=20   dt=  os=true  sub=false  sub=true\n       lap=false\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       lap    =false ®\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       os     =true ®\n       seed   =time(NULL ®\n       sub    =true      for twostep, default true\nSOURCE\n       user/jsun/Mcisolr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcisolr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr2abc-Tuple{}","page":"Home","title":"Madagascar.sfcisolr2abc","text":"sfcisolr2abc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr2abc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr2abc. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr2abc(1)               Madagascar Manuals               sfcisolr2abc(1)\n\nNAME\n       sfcisolr2abc  -  Complex  lowrank  decomposition for 2-D isotropic wave\n       propagation with absorbing boundaries.\n\nSYNOPSIS\n       sfcisolr2abc  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20  dt=  nbt=0  nbb=0 nbl=0 nbr=0 ct=0.0\n       cb=0.0 cl=0.0 cr=0.0 rev=false\n\nPARAMETERS\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       rev    =false ®\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr2abc.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcisolr2abc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr2abc1-Tuple{}","page":"Home","title":"Madagascar.sfcisolr2abc1","text":"sfcisolr2abc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr2abc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr2abc1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr2abc1(1)              Madagascar Manuals              sfcisolr2abc1(1)\n\nNAME\n       sfcisolr2abc1  -  Complex  lowrank decomposition for 2-D isotropic wave\n       propagation with absorbing boundaries.\n\nSYNOPSIS\n       sfcisolr2abc1  <  vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20 dt= rev=false nbt=0 nbb=0 nbl=0 nbr=0\n       ct=0.0 cb=0.0 cl=0.0 cr=0.0\n\nPARAMETERS\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       rev    =false      reversal\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr2abc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcisolr2abc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr2grad-Tuple{}","page":"Home","title":"Madagascar.sfcisolr2grad","text":"sfcisolr2grad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr2grad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr2grad. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr2grad(1)              Madagascar Manuals              sfcisolr2grad(1)\n\nNAME\n       sfcisolr2grad  -  Complex  lowrank decomposition for 2-D isotropic wave\n       propagation (including velocity gradient term).\n\nSYNOPSIS\n       sfcisolr2grad <  vel.rsf  grad1=grad1.rsf  grad2=grad2.rsf  fft=fft.rsf\n       left=left.rsf > right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   grad1 =      auxiliary input file name\n       file   grad2 =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr2grad.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfcisolr2grad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr2rev-Tuple{}","page":"Home","title":"Madagascar.sfcisolr2rev","text":"sfcisolr2rev(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr2rev on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr2rev. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr2rev(1)               Madagascar Manuals               sfcisolr2rev(1)\n\nNAME\n       sfcisolr2rev  -  Complex  lowrank  decomposition for 2-D isotropic wave\n       propagation.\n\nSYNOPSIS\n       sfcisolr2rev  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr2rev.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcisolr2rev(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcisolr3-Tuple{}","page":"Home","title":"Madagascar.sfcisolr3","text":"sfcisolr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcisolr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcisolr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcisolr3(1)                  Madagascar Manuals                  sfcisolr3(1)\n\nNAME\n       sfcisolr3 - Lowrank decomposition for 3-D isotropic wave propagation.\n\nSYNOPSIS\n       sfcisolr3    <    vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mcisolr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcisolr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfckolmog-Tuple{}","page":"Home","title":"Madagascar.sfckolmog","text":"sfckolmog(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfckolmog on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfckolmog. See ?m8r for examples.\n\nRSF Documentation\n\nsfckolmog(1)                  Madagascar Manuals                  sfckolmog(1)\n\nNAME\n       sfckolmog - complex Kolmogoroff spectral factorization.\n\nSYNOPSIS\n       sfckolmog < in.rsf > out.rsf\n\nSOURCE\n       user/gee/Mckolmog.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfckolmog(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclaplac-Tuple{}","page":"Home","title":"Madagascar.sfclaplac","text":"sfclaplac(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclaplac on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclaplac. See ?m8r for examples.\n\nRSF Documentation\n\nsfclaplac(1)                  Madagascar Manuals                  sfclaplac(1)\n\nNAME\n       sfclaplac  - 2-D finite-difference Laplacian operation for complex num‐\n       bers.\n\nSYNOPSIS\n       sfclaplac < in.rsf > out.rsf\n\nSOURCE\n       user/jsun/Mclaplac.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfclaplac(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfd1-Tuple{}","page":"Home","title":"Madagascar.sfclfd1","text":"sfclfd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfd1(1)                    Madagascar Manuals                    sfclfd1(1)\n\nNAME\n       sfclfd1  - 2-D Fourth-order Optimized Finite-difference wave extrapola‐\n       tion\n\nSYNOPSIS\n       sfclfd1 > out.rsf < ini.rsf G=G.rsf dt= nt= mode=0 cpxexp=y\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       bool   cpxexp =y [y/n]\n       float  dt = ®\n       int    mode =0 ®\n       int    nt = ®\nSOURCE\n       user/jsun/Mclfd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfclfd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfd2-Tuple{}","page":"Home","title":"Madagascar.sfclfd2","text":"sfclfd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfd2(1)                    Madagascar Manuals                    sfclfd2(1)\n\nNAME\n       sfclfd2  - 2-D Fourth-order Optimized Finite-difference wave extrapola‐\n       tion\n\nSYNOPSIS\n       sfclfd2 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt=  nt=  isx=  isz=\n       size=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       int    size = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/jsun/Mclfd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfclfd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfdc1-Tuple{}","page":"Home","title":"Madagascar.sfclfdc1","text":"sfclfdc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfdc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfdc1. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfdc1(1)                   Madagascar Manuals                   sfclfdc1(1)\n\nNAME\n       sfclfdc1 - 1D 10th-order Lowrank Onestep FD coefficient\n\nSYNOPSIS\n       sfclfdc1  <  velf.rsf  >  outm.rsf  seed=time(NULL eps=1.e-4 npk=20 dt=\n       SIZE= mode=0 perc=50 cpxexp=true\n\nPARAMETERS\n       SIZE   =      stencil size\n       cpxexp =true      complex exponential\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       mode   =0      symbol\n       npk    =20      maximum rank\n       perc   =50      cutoff percentage\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mclfdc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfclfdc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfdc1-bak-Tuple{}","page":"Home","title":"Madagascar.sfclfdc1-bak","text":"sfclfdc1-bak(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfdc1-bak on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfdc1-bak. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfdc1-bak(1)               Madagascar Manuals               sfclfdc1-bak(1)\n\nNAME\n       sfclfdc1-bak - 1D 10th-order Lowrank Onestep FD coefficient\n\nSYNOPSIS\n       sfclfdc1-bak < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mclfdc1-bak.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfclfdc1-bak(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfdc1frac-Tuple{}","page":"Home","title":"Madagascar.sfclfdc1frac","text":"sfclfdc1frac(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfdc1frac on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfdc1frac. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfdc1frac(1)               Madagascar Manuals               sfclfdc1frac(1)\n\nNAME\n       sfclfdc1frac - 1D 10th-order Lowrank Onestep FD coefficient\n\nSYNOPSIS\n       sfclfdc1frac  < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n       SIZE= mode=0 perc=50 cpxexp=true\n\nPARAMETERS\n       SIZE   =      stencil size\n       cpxexp =true      complex exponential\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       mode   =0      symbol\n       npk    =20      maximum rank\n       perc   =50      cutoff percentage\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mclfdc1frac.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfclfdc1frac(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclfdc2-Tuple{}","page":"Home","title":"Madagascar.sfclfdc2","text":"sfclfdc2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclfdc2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclfdc2. See ?m8r for examples.\n\nRSF Documentation\n\nsfclfdc2(1)                   Madagascar Manuals                   sfclfdc2(1)\n\nNAME\n       sfclfdc2 - 2D nth-order Lowrank FD coefficient\n\nSYNOPSIS\n       sfclfdc2  <  velf.rsf  >  outm.rsf  seed=time(NULL eps=1.e-6 npk=50 dt=\n       size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\nSOURCE\n       user/jsun/Mclfdc2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfclfdc2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclip-Tuple{}","page":"Home","title":"Madagascar.sfclip","text":"sfclip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclip. See ?m8r for examples.\n\nRSF Documentation\n\nsfclip(1)                     Madagascar Manuals                     sfclip(1)\n\nNAME\n       sfclip - Clip the data.\n\nSYNOPSIS\n       sfclip < in.rsf > out.rsf clip= value=clip\n\nCOMMENTS\n       The output is clip if input > clip -clip if input < -clip input if |in‐\n       put| < clip\n\n       See also sfclip2.\n\n       September        2011        program        of        the        month:\n       http://ahay.org/blog/2011/09/03/program-of-the-month-sfclip/\n\nPARAMETERS\n       float  clip =      clip value\n       float  value =clip      replacement value\nUSED IN\n       cup/rna2d/real\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/generic/Mclip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfclip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclip2-Tuple{}","page":"Home","title":"Madagascar.sfclip2","text":"sfclip2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclip2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclip2. See ?m8r for examples.\n\nRSF Documentation\n\nsfclip2(1)                    Madagascar Manuals                    sfclip2(1)\n\nNAME\n       sfclip2 - One- or two-sided data clipping.\n\nSYNOPSIS\n       sfclip2 < in.rsf > out.rsf upper=+FLT_MAX lower=-FLT_MAX\n\nCOMMENTS\n       sfclip2 is a generalization of sfclip.\n\n       Clip  values above xu:         sfclip2 < in.rsf > out.rsf upper=xu Clip\n       values below xl:         sfclip2 < in.rsf > out.rsf lower=xl Clip  val‐\n       ues outside [xu,xl]:  sfclip2 < in.rsf > out.rsf upper=xu lower=xl\n\n       sfclip2 < in.rsf > out.rsf upper=x lower=-x\n\n       is equivalent to\n\n       sfclip < in.rsf > out.rsf clip=x\n\nPARAMETERS\n       float  lower =-FLT_MAX      lower clip value\n       float  upper =+FLT_MAX      upper clip value\nUSED IN\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/generic/Mclip2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfclip2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcloudbin3d-Tuple{}","page":"Home","title":"Madagascar.sfcloudbin3d","text":"sfcloudbin3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcloudbin3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcloudbin3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcloudbin3d(1)               Madagascar Manuals               sfcloudbin3d(1)\n\nNAME\n       sfcloudbin3d -\n\nSYNOPSIS\n       sfcloudbin3d < Fin.rsf > Fou.rsf verb=n\n\nCOMMENTS\n       point  cloud  binning  Paul  Sava Copyright (C) 2022 Colorado School of\n       Mines\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mcloudbin3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcloudbin3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcloudmerge3d-Tuple{}","page":"Home","title":"Madagascar.sfcloudmerge3d","text":"sfcloudmerge3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcloudmerge3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcloudmerge3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcloudmerge3d(1)             Madagascar Manuals             sfcloudmerge3d(1)\n\nNAME\n       sfcloudmerge3d -\n\nSYNOPSIS\n       sfcloudmerge3d all=Fcall.rsf > Fdall.rsf verb=n norm=y hashscale=2.0\n\nCOMMENTS\n       3D  CLoud  DATA  merge  Paul Sava Copyright (C) 2022 Colorado School of\n       Mines\n\nPARAMETERS\n       file   all =      auxiliary input file name\n       float  hashscale =2.0 ®\n       bool   norm =y [y/n]     fold normalization\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mcloudmerge3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcloudmerge3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcloudspray-Tuple{}","page":"Home","title":"Madagascar.sfcloudspray","text":"sfcloudspray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcloudspray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcloudspray. See ?m8r for examples.\n\nRSF Documentation\n\nsfcloudspray(1)               Madagascar Manuals               sfcloudspray(1)\n\nNAME\n       sfcloudspray -\n\nSYNOPSIS\n       sfcloudspray < Fin.rsf > Fou.rsf cc=Fcc.rsf verb=n axis=2\n\nCOMMENTS\n       point cloud spray Paul Sava Copyright (C) 2022 Colorado School of Mines\n\nPARAMETERS\n       int    axis =2      spray axis\n       file   cc =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mcloudspray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcloudspray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcloudwin3d-Tuple{}","page":"Home","title":"Madagascar.sfcloudwin3d","text":"sfcloudwin3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcloudwin3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcloudwin3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcloudwin3d(1)               Madagascar Manuals               sfcloudwin3d(1)\n\nNAME\n       sfcloudwin3d -\n\nSYNOPSIS\n       sfcloudwin3d < Fin.rsf > Fou.rsf oo=Fo.rsf verb=n fast=y apt=15.0\n\nCOMMENTS\n       3D  CLoud  WINdowing  Paul  Sava  Copyright (C) 2022 Colorado School of\n       Mines\n\nPARAMETERS\n       float  apt =15.0      aperture (deg)\n       bool   fast =y [y/n]     in-core windowing\n       file   oo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mcloudwin3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcloudwin3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclpf-Tuple{}","page":"Home","title":"Madagascar.sfclpf","text":"sfclpf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclpf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclpf. See ?m8r for examples.\n\nRSF Documentation\n\nsfclpf(1)                     Madagascar Manuals                     sfclpf(1)\n\nNAME\n       sfclpf - Local prediction filter for complex numbers (n-dimensional).\n\nSYNOPSIS\n       sfclpf < dat.rsf match=mat.rsf > flt.rsf pred=pre.rsf niter=100 verb=y\n\nPARAMETERS\n       file   match =      auxiliary input file name\n       int    niter =100      number of iterations\n       string pred =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity flag\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cup/rna3d/shot\n       cup/rna3d/sin\nSOURCE\n       user/fomels/Mclpf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfclpf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfclrmatrix-Tuple{}","page":"Home","title":"Madagascar.sfclrmatrix","text":"sfclrmatrix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfclrmatrix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfclrmatrix. See ?m8r for examples.\n\nRSF Documentation\n\nsfclrmatrix(1)                Madagascar Manuals                sfclrmatrix(1)\n\nNAME\n       sfclrmatrix - Lowrank matrix decomposition for a complex matrix\n\nSYNOPSIS\n       sfclrmatrix  name=mfile.rsf < in.rsf > out.rsf seed=time(NULL eps=1.e-4\n       npk=20\n\nPARAMETERS\n       eps    =1.e-4      tolerance\n       file   name =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/lexing/Mclrmatrix.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfclrmatrix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcltft-Tuple{}","page":"Home","title":"Madagascar.sfcltft","text":"sfcltft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcltft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcltft. See ?m8r for examples.\n\nRSF Documentation\n\nsfcltft(1)                    Madagascar Manuals                    sfcltft(1)\n\nNAME\n       sfcltft - Complex local time-frequency transform.\n\nSYNOPSIS\n       sfcltft  <  in.rsf  > out.rsf basis=basis.rsf inv=n verb=n dip=n time=n\n       decompose=n       rect=10       niter=100       np=       dp=       p0=\n       nw=kiss_fft_next_fast_size(n1) dw=1./(nw*d1) w0=-0.5/d1\n\nPARAMETERS\n       string basis =      auxiliary output file name\n       bool   decompose =n [y/n]     if y, output decomposition\n       bool   dip =n [y/n]     if y, do dip decomposition\n       float  dp =      slope step\n       float  dw =1./(nw*d1)      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    niter =100      number of inversion iterations\n       int    np =      number of slopes\n       int    nw =kiss_fft_next_fast_size(n1)      number of frequencies\n       float  p0 =      first slope\n       int    rect =10      smoothing radius (in time, samples)\n       bool   time =n [y/n]     if y, decompose in time\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =-0.5/d1      first frequency\nSOURCE\n       user/fomels/Mcltft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcltft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcltftfft-Tuple{}","page":"Home","title":"Madagascar.sfcltftfft","text":"sfcltftfft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcltftfft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcltftfft. See ?m8r for examples.\n\nRSF Documentation\n\nsfcltftfft(1)                 Madagascar Manuals                 sfcltftfft(1)\n\nNAME\n       sfcltftfft - Complex local time-frequency transform.\n\nSYNOPSIS\n       sfcltftfft < in.rsf > out.rsf basis=basis.rsf inv=n verb=n dip=n time=n\n       decompose=n       rect=10       niter=100       np=       dp=       p0=\n       nw=kiss_fft_next_fast_size(n1) dw=1./(nw*d1) w0=-0.5/d1\n\nPARAMETERS\n       string basis =      auxiliary output file name\n       bool   decompose =n [y/n]     if y, output decomposition\n       bool   dip =n [y/n]     if y, do dip decomposition\n       float  dp =      slope step\n       float  dw =1./(nw*d1)      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    niter =100      number of inversion iterations\n       int    np =      number of slopes\n       int    nw =kiss_fft_next_fast_size(n1)      number of frequencies\n       float  p0 =      first slope\n       int    rect =10      smoothing radius (in time, samples)\n       bool   time =n [y/n]     if y, decompose in time\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =-0.5/d1      first frequency\nSOURCE\n       user/fomels/Mcltftfft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcltftfft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmatmult-Tuple{}","page":"Home","title":"Madagascar.sfcmatmult","text":"sfcmatmult(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmatmult on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmatmult. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmatmult(1)                 Madagascar Manuals                 sfcmatmult(1)\n\nNAME\n       sfcmatmult - Simple matrix multiplication for complex matrices\n\nSYNOPSIS\n       sfcmatmult < in.rsf > out.rsf mat=mat.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   mat =      auxiliary input file name\nSOURCE\n       system/generic/Mcmatmult.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcmatmult(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmatmult2-Tuple{}","page":"Home","title":"Madagascar.sfcmatmult2","text":"sfcmatmult2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmatmult2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmatmult2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmatmult2(1)                Madagascar Manuals                sfcmatmult2(1)\n\nNAME\n       sfcmatmult2 - Multiplication of two complex matrices\n\nSYNOPSIS\n       sfcmatmult2 < in.rsf > out.rsf mat=mat.rsf\n\nPARAMETERS\n       file   mat =      auxiliary input file name\nSOURCE\n       system/generic/Mcmatmult2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcmatmult2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmatmult3-Tuple{}","page":"Home","title":"Madagascar.sfcmatmult3","text":"sfcmatmult3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmatmult3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmatmult3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmatmult3(1)                Madagascar Manuals                sfcmatmult3(1)\n\nNAME\n       sfcmatmult3 - Multiplication of two complex matrices for 3D data.\n\nSYNOPSIS\n       sfcmatmult3 < in.rsf > out.rsf mat=mat.rsf\n\nCOMMENTS\n       I(n1,n2,f)*I(n2,n3,f)=D(n1,n3,f)\n\nPARAMETERS\n       file   mat =      auxiliary input file name\nSOURCE\n       user/gchliu/Mcmatmult3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcmatmult3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmatrix-Tuple{}","page":"Home","title":"Madagascar.sfcmatrix","text":"sfcmatrix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmatrix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmatrix. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmatrix(1)                  Madagascar Manuals                  sfcmatrix(1)\n\nNAME\n       sfcmatrix - multiply, for complex Matrix\n\nSYNOPSIS\n       sfcmatrix < inA.rsf B=inB.rsf > outC.rsf\n\nPARAMETERS\n       file   B =      auxiliary input file name\nSOURCE\n       user/jsun/Mcmatrix.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcmatrix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmp2shot-Tuple{}","page":"Home","title":"Madagascar.sfcmp2shot","text":"sfcmp2shot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmp2shot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmp2shot. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmp2shot(1)                 Madagascar Manuals                 sfcmp2shot(1)\n\nNAME\n       sfcmp2shot - Convert CMPs to shots for regular 2-D geometry.\n\nSYNOPSIS\n       sfcmp2shot < in.rsf > out.rsf positive=y\n\nPARAMETERS\n       bool   positive =y [y/n]     initial offset orientation\nSOURCE\n       system/seismic/Mcmp2shot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcmp2shot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcmplx-Tuple{}","page":"Home","title":"Madagascar.sfcmplx","text":"sfcmplx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcmplx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcmplx. See ?m8r for examples.\n\nRSF Documentation\n\nsfcmplx(1)                    Madagascar Manuals                    sfcmplx(1)\n\nNAME\n       sfcmplx - Create a complex dataset from its real and imaginary parts.\n\nSYNOPSIS\n       sfcmplx < real.rsf > cmplx.rsf real.rsf imag.rsf\n\nCOMMENTS\n       There has to be only two input files specified and no additional param‐\n       eters.\n\nUSED IN\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n\nSOURCE\n       system/main/cmplx.c\n\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfcmplx\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcmplx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcoherence-Tuple{}","page":"Home","title":"Madagascar.sfcoherence","text":"sfcoherence(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcoherence on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcoherence. See ?m8r for examples.\n\nRSF Documentation\n\nsfcoherence(1)                Madagascar Manuals                sfcoherence(1)\n\nNAME\n       sfcoherence - 3D Coherence Cube, C1, C2, C3 in one\n\nSYNOPSIS\n       sfcoherence  < in.rsf > out.rsf idip=idip.rsf xdip=xdip.rsf ntw=5 nxw=5\n       nyw=5 twod=y verb=y op1=-2.0 dp1=0.5 np1=9 op2=-2.0 dp2=0.5 np2=9 mode=\n\nPARAMETERS\n       float  dp1 =0.5 ®\n       float  dp2 =0.5 ®\n       string idip =      inline dip (auxiliary output file name)\n       string mode =      coherence mode: c1, c2, c3\n       int    np1 =9      inline slope\n       int    np2 =9      xline slope\n       int    ntw =5      half window size for coherence\n       int    nxw =5      half window size for coherence\n       int    nyw =5      half window size for coherence\n       float  op1 =-2.0 ®\n       float  op2 =-2.0 ®\n       bool   twod =y [y/n]     y: only twod coherence\n       bool   verb =y [y/n]     verbosity\n       string xdip =      crossline dip (auxiliary output file name)\nSOURCE\n       user/chen/Mcoherence.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcoherence(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcohn-Tuple{}","page":"Home","title":"Madagascar.sfcohn","text":"sfcohn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcohn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcohn. See ?m8r for examples.\n\nRSF Documentation\n\nsfcohn(1)                     Madagascar Manuals                     sfcohn(1)\n\nNAME\n       sfcohn - Coherence calculations in the presence of structural dip\n\nSYNOPSIS\n       sfcohn < in.rsf > out.rsf idip=idip.rsf xdip=xdip.rsf ntw=5 nxw=5 nyw=5\n       twod=y verb=y op1=-2.0 dp1=0.5 np1=9 op2=-2.0 dp2=0.5 np2=9 mode=\n\nPARAMETERS\n       float  dp1 =0.5 ®\n       float  dp2 =0.5 ®\n       string idip =      inline dip (auxiliary output file name)\n       string mode =      coherence mode: c1, c2, c3\n       int    np1 =9      inline slope\n       int    np2 =9      xline slope\n       int    ntw =5      half window size for coherence\n       int    nxw =5      half window size for coherence\n       int    nyw =5      half window size for coherence\n       float  op1 =-2.0 ®\n       float  op2 =-2.0 ®\n       bool   twod =y [y/n]     y: only twod coherence\n       bool   verb =y [y/n]     verbosity\n       string xdip =      crossline dip (auxiliary output file name)\nSOURCE\n       user/pyang/Mcohn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcohn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcomblist-Tuple{}","page":"Home","title":"Madagascar.sfcomblist","text":"sfcomblist(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcomblist on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcomblist. See ?m8r for examples.\n\nRSF Documentation\n\nsfcomblist(1)                 Madagascar Manuals                 sfcomblist(1)\n\nNAME\n       sfcomblist - Create masks to remove combinations of k elements out of n\n\nSYNOPSIS\n       sfcomblist < in.rsf > out.rsf k=\n\nPARAMETERS\n       int    k =      combination of k elements\nSOURCE\n       user/browaeys/Mcomblist.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcomblist(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcomp-Tuple{}","page":"Home","title":"Madagascar.sfcomp","text":"sfcomp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcomp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcomp. See ?m8r for examples.\n\nRSF Documentation\n\nsfcomp(1)                     Madagascar Manuals                     sfcomp(1)\n\nNAME\n       sfcomp - Compare 2 data set\n\nSYNOPSIS\n       sfcomp < in.rsf > out.rsf ref=ref.rsf mode=0\n\nPARAMETERS\n       int    mode  =0       compare method:      0 - normalized xcorrelation;\n                   1 - mean square error\n       file   ref =      auxiliary input file name\nSOURCE\n       user/chen/Mcomp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcomp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcompare-Tuple{}","page":"Home","title":"Madagascar.sfcompare","text":"sfcompare(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcompare on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcompare. See ?m8r for examples.\n\nRSF Documentation\n\nsfcompare(1)                  Madagascar Manuals                  sfcompare(1)\n\nNAME\n       sfcompare - None\n\nSYNOPSIS\n       sfcompare\n\nSOURCE\n       trip/iwave/trace/main/compare.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcompare(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcompensate-Tuple{}","page":"Home","title":"Madagascar.sfcompensate","text":"sfcompensate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcompensate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcompensate. See ?m8r for examples.\n\nRSF Documentation\n\nsfcompensate(1)               Madagascar Manuals               sfcompensate(1)\n\nNAME\n       sfcompensate - Complex-valued compensation (between two wavefields)\n\nSYNOPSIS\n       sfcompensate < Fnum.rsf den=Fden.rsf > Fres.rsf verb=n cmplx=y perc=0.1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     use complex i/o\n       file   den =      auxiliary input file name\n       float  perc =0.1      precentage (of max) for protection when dividing\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcompensate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcompensate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcompensatexf-Tuple{}","page":"Home","title":"Madagascar.sfcompensatexf","text":"sfcompensatexf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcompensatexf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcompensatexf. See ?m8r for examples.\n\nRSF Documentation\n\nsfcompensatexf(1)             Madagascar Manuals             sfcompensatexf(1)\n\nNAME\n       sfcompensatexf - Complex-valued compensation (between two wavefields)\n\nSYNOPSIS\n       sfcompensatexf  <  Fnum.rsf  den=Fden.rsf  >  Fres.rsf  verb=n  cmplx=y\n       niter=1 perc=0.1 pad1=1\n\nPARAMETERS\n       bool   cmplx =y [y/n]     use complex i/o\n       file   den =      auxiliary input file name\n       int    niter =1      number of iterations\n       int    pad1 =1      padding factor on the first axis\n       float  perc =0.1      precentage (of max) for protection when dividing\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mcompensatexf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcompensatexf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconflict-Tuple{}","page":"Home","title":"Madagascar.sfconflict","text":"sfconflict(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconflict on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconflict. See ?m8r for examples.\n\nRSF Documentation\n\nsfconflict(1)                 Madagascar Manuals                 sfconflict(1)\n\nNAME\n       sfconflict - 2-D synthetic data of conflicting dips.\n\nSYNOPSIS\n       sfconflict > mod.rsf n1=150 n2=80\n\nPARAMETERS\n       int    n1 =150 ®\n       int    n2 =80 ®\nSOURCE\n       user/gee/Mconflict.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfconflict(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconjgrad-Tuple{}","page":"Home","title":"Madagascar.sfconjgrad","text":"sfconjgrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconjgrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconjgrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfconjgrad(1)                 Madagascar Manuals                 sfconjgrad(1)\n\nNAME\n       sfconjgrad - Generic conjugate-gradient solver for linear inversion\n\nSYNOPSIS\n       sfconjgrad   <   dat.rsf   mod0=mod.rsf   mwt=mwt.rsf   known=known.rsf\n       mod0=x0.rsf > to.rsf < from.rsf > out.rsf niter=1\n\nPARAMETERS\n       string known =      auxiliary input file name\n       string mod0 =      auxiliary input file name\n       string mwt =      auxiliary input file name\n       int    niter =1      number of iterations\nUSED IN\n       bei/vela/stack\nSOURCE\n       system/main/conjgrad.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfconjgrad\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfconjgrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconjgradmpi-Tuple{}","page":"Home","title":"Madagascar.sfconjgradmpi","text":"sfconjgradmpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconjgradmpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconjgradmpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfconjgradmpi(1)              Madagascar Manuals              sfconjgradmpi(1)\n\nNAME\n       sfconjgradmpi - Generic conjugate-gradient solver for linear inversion.\n\nSYNOPSIS\n       sfconjgradmpi mod=mod.rsf mwt=mwt.rsf x0=x0.rsf niter=1\n\nCOMMENTS\n       In  this version, the linear operator program uses --input and --output\n       instead of stdin and stdout.\n\nPARAMETERS\n       file   mod =      auxiliary input file name\n       string mwt =      auxiliary input file name\n       int    niter =1      number of iterations\n       string x0 =      auxiliary input file name\nSOURCE\n       system/main/conjgradmpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfconjgradmpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconstfdmig2-Tuple{}","page":"Home","title":"Madagascar.sfconstfdmig2","text":"sfconstfdmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconstfdmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconstfdmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsfconstfdmig2(1)              Madagascar Manuals              sfconstfdmig2(1)\n\nNAME\n       sfconstfdmig2  -  2-D  implicit finite-difference migration in constant\n       velocity.\n\nSYNOPSIS\n       sfconstfdmig2  <  data.rsf  >  imag.rsf   movie=movie.rsf   nz=2*(nw-1)\n       dz=1./(nz*dw) vel= hi=y sixth=1./12\n\nPARAMETERS\n       float  dz =1./(nz*dw)      vertical time sampling\n       bool   hi =y [y/n]     if y, use 45-degree; n, 15-degree\n       string movie =      auxiliary output file name\n       int    nz =2*(nw-1)      vertical time samples\n       float  sixth =1./12      one-sixth trick\n       float  vel =      constant velocity\nUSED IN\n       bei/fdm/kjartjac\nSOURCE\n       system/seismic/Mconstfdmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfconstfdmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconstperm-Tuple{}","page":"Home","title":"Madagascar.sfconstperm","text":"sfconstperm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconstperm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconstperm. See ?m8r for examples.\n\nRSF Documentation\n\nsfconstperm(1)                Madagascar Manuals                sfconstperm(1)\n\nNAME\n       sfconstperm - Constant-velocity prestack exploding reflector.\n\nSYNOPSIS\n       sfconstperm < data.rsf > image.rsf mig=n snap=0 nz= dz= nt= dt= nh= dh=\n       v=\n\nPARAMETERS\n       float  dh =      offset sampling (if modeling)\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nh =      offset samples (if modeling)\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    snap =0      interval for snapshots\n       float  v =      velocity\nSOURCE\n       user/fomels/Mconstperm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfconstperm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconstpermh-Tuple{}","page":"Home","title":"Madagascar.sfconstpermh","text":"sfconstpermh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconstpermh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconstpermh. See ?m8r for examples.\n\nRSF Documentation\n\nsfconstpermh(1)               Madagascar Manuals               sfconstpermh(1)\n\nNAME\n       sfconstpermh  -  Constant-velocity prestack exploding reflector in off‐\n       set.\n\nSYNOPSIS\n       sfconstpermh < data.rsf > image.rsf mig=n snap=0 nz= dz=  nt=  dt=  nh=\n       dh= v=\n\nPARAMETERS\n       float  dh =      offset sampling (if modeling)\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nh =      offset samples (if modeling)\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    snap =0      interval for snapshots\n       float  v =      velocity\nSOURCE\n       user/fomels/Mconstpermh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfconstpermh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconstpermh1-Tuple{}","page":"Home","title":"Madagascar.sfconstpermh1","text":"sfconstpermh1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconstpermh1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconstpermh1. See ?m8r for examples.\n\nRSF Documentation\n\nsfconstpermh1(1)              Madagascar Manuals              sfconstpermh1(1)\n\nNAME\n       sfconstpermh1  - Constant-velocity prestack exploding reflector in off‐\n       set.\n\nSYNOPSIS\n       sfconstpermh1 < data.rsf > image.rsf mig=n snap=0 nz= dz= nt=  dt=  nh=\n       dh= v=\n\nPARAMETERS\n       float  dh =      offset sampling (if modeling)\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nh =      offset samples (if modeling)\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    snap =0      interval for snapshots\n       float  v =      velocity\nSOURCE\n       user/fomels/Mconstpermh1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfconstpermh1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconstraint-Tuple{}","page":"Home","title":"Madagascar.sfconstraint","text":"sfconstraint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconstraint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconstraint. See ?m8r for examples.\n\nRSF Documentation\n\nsfconstraint(1)               Madagascar Manuals               sfconstraint(1)\n\nNAME\n       sfconstraint -\n\nSYNOPSIS\n       sfconstraint < logrefa.rsf > logref_co.rsf value= wind=\n\nCOMMENTS\n       Hard constraint 2D map\n\n       For  use  with  LSIM  if a specific alignment location is desired.  Use\n       with reference and real datasets and scale LSIM scan by output\n\nPARAMETERS\n       float  value =      Location of hard constraint\n       int    wind =      Number of samples of hard constraint\nSOURCE\n       user/sbader/Mconstraint.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfconstraint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcontour-Tuple{}","page":"Home","title":"Madagascar.sfcontour","text":"sfcontour(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcontour on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcontour. See ?m8r for examples.\n\nRSF Documentation\n\nsfcontour(1)                  Madagascar Manuals                  sfcontour(1)\n\nNAME\n       sfcontour - Contour plot.\n\nSYNOPSIS\n       sfcontour    <    in.rsf    c=    min1=o1   min2=o2   max1=o1+(n1-1)*d1\n       max2=o2+(n2-1)*d2 nc=50  dc=  c0=  transp=y  minval=  maxval=  allpos=y\n       cfile= barlabel= > plot.vpl\n\nCOMMENTS\n       Run \"sfdoc stdplot\" for more parameters.\n\n       December         2011        program        of        the        month:\n       http://ahay.org/blog/2011/12/03/programs-of-the-month-sfcontour/\n\nPARAMETERS\n       bool   allpos =y [y/n]     contour positive values only\n       string barlabel =      scale bar label\n       floats c =       [nc]\n       float  c0 =      first contour\n       string cfile =      contours in a file\n       float  dc =      contour increment\n       float  max1 =o1+(n1-1)*d1      maximum on 1st axis\n       float  max2 =o2+(n2-1)*d2      maximum on 2nd axis\n       float  maxval =      maximum value for scalebar (default  is  the  data\n              maximum)\n       float  min1 =o1      minimum on 1st axis\n       float  min2 =o2      minimum on 2nd axis\n       float  minval  =       minimum  value for scalebar (default is the data\n              minimum)\n       int    nc =50      number of contours\n       bool   transp =y [y/n]     if y, transpose the axes\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\nSOURCE\n       plot/main/contour.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcontour(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcontour3-Tuple{}","page":"Home","title":"Madagascar.sfcontour3","text":"sfcontour3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcontour3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcontour3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcontour3(1)                 Madagascar Manuals                 sfcontour3(1)\n\nNAME\n       sfcontour3 - Generate 3-D contour plot.\n\nSYNOPSIS\n       sfcontour3  <  in.rsf  c=  min1=o1  min2=o2  min3=o3  max1=o1+(n1-1)*d1\n       max2=o2+(n2-1)*d2 max3=o3+(n3-1)*d3 yreverse=y nc=50 dc= c0= point1=0.5\n       point2=0.5    frame1=0    frame2=n2-1    frame3=0    movie=0   dframe=1\n       n1pix=n1/point1+n3/(1.-point1)  n2pix=n2/point2+n3/(1.-point2)   flat=y\n       scalebar=n minval= maxval= barreverse=n cfile= > plot.vpl\n\nPARAMETERS\n       bool   barreverse  =n [y/n]     if y, go from small to large on the bar\n              scale\n       floats c =       [nc]\n       float  c0 =      first contour\n       string cfile =      contours in a file\n       float  dc =      contour increment\n       int    dframe =1      frame increment in a movie\n       bool   flat =y [y/n]     if n, display perspective view\n       int    frame1 =0 ®\n       int    frame2 =n2-1 ®\n       int    frame3 =0      frame numbers for cube faces\n       float  max1 =o1+(n1-1)*d1 ®\n       float  max2 =o2+(n2-1)*d2 ®\n       float  max3 =o3+(n3-1)*d3      data window to plot\n       float  maxval =      maximum value for scalebar (default  is  the  data\n              maximum)\n       float  min1 =o1 ®\n       float  min2 =o2 ®\n       float  min3 =o3 ®\n       float  minval  =       minimum  value for scalebar (default is the data\n              minimum)\n       int    movie =0      0: no movie, 1: movie over axis 1, 2: axis  2,  3:\n              axis 3\n       int    n1pix =n1/point1+n3/(1.-point1)      number of vertical pixels\n       int    n2pix =n2/point2+n3/(1.-point2)      number of horizontal pixels\n       int    nc =50      number of contours\n       float  point1 =0.5      fraction of the vertical axis for front face\n       float  point2 =0.5      fraction of the horizontal axis for front face\n       bool   scalebar =n [y/n]     if y, draw scalebar\n       bool   yreverse =y [y/n]     if y, reverse the first axis\nSOURCE\n       plot/main/contour3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcontour3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconv-Tuple{}","page":"Home","title":"Madagascar.sfconv","text":"sfconv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconv. See ?m8r for examples.\n\nRSF Documentation\n\nsfconv(1)                     Madagascar Manuals                     sfconv(1)\n\nNAME\n       sfconv - 1-D convolution.\n\nSYNOPSIS\n       sfconv < in.rsf > out.rsf filt=filt.rsf trans=n each=n adj=n lag=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   each =n [y/n]     if y, new filter for each trace\n       file   filt =      auxiliary input file name\n       int    lag =1      lag for internal convolution\n       bool   trans =n [y/n]     if y, transient convolution; if n, internal\nSOURCE\n       user/gee/Mconv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfconv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvert0eq-Tuple{}","page":"Home","title":"Madagascar.sfconvert0eq","text":"sfconvert0eq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvert0eq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvert0eq. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvert0eq(1)               Madagascar Manuals               sfconvert0eq(1)\n\nNAME\n       sfconvert0eq  -  Convert  equivalent Q value from reference layer to t0\n       location.\n\nSYNOPSIS\n       sfconvert0eq < inp.rsf > out.rsf repos=repos.rsf verb=n\n\nCOMMENTS\n       Ignore this step if selecting t0  as  the  reference  layer  in  module\n       \"sflcfs\".\n\nPARAMETERS\n       string repos  =       Position of reference point (auxiliary input file\n              name)\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mconvert0eq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfconvert0eq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconverted-Tuple{}","page":"Home","title":"Madagascar.sfconverted","text":"sfconverted(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconverted on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconverted. See ?m8r for examples.\n\nRSF Documentation\n\nsfconverted(1)                Madagascar Manuals                sfconverted(1)\n\nNAME\n       sfconverted - None\n\nSYNOPSIS\n       sfconverted     actual_weights=aw.rsf    weights=w1.rsf    Rps=Refl.rsf\n       NoisyRps=NoisyRps.rsf Wip=Winvpred.rsf phi= theta=\n\nPARAMETERS\n       file   NoisyRps =      auxiliary output file name\n       file   Rps =      auxiliary output file name\n       file   Wip =      auxiliary output file name\n       file   actual_weights =      auxiliary output file name\n       phi    =      command-line parameter\n       theta  =      command-line parameter\n       file   weights =      auxiliary output file name\nSOURCE\n       user/mehdi/Mconverted.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfconverted(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvf-Tuple{}","page":"Home","title":"Madagascar.sfconvf","text":"sfconvf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvf. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvf(1)                    Madagascar Manuals                    sfconvf(1)\n\nNAME\n       sfconvf - 1-D convolution, adjoint is the filter.\n\nSYNOPSIS\n       sfconvf < inp.rsf > out.rsf other=oth.rsf adj=n nf= lag=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    lag =1      lag for internal convolution\n       int    nf =      filter size\n       file   other =      auxiliary input file name\nSOURCE\n       user/gee/Mconvf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfconvf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvft-Tuple{}","page":"Home","title":"Madagascar.sfconvft","text":"sfconvft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvft. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvft(1)                   Madagascar Manuals                   sfconvft(1)\n\nNAME\n       sfconvft  -  Trace-by-trace  or data-by-trace convolution using Fourier\n       transform.\n\nSYNOPSIS\n       sfconvft < in.rsf other=other.rsf > conv.rsf axis=1\n\nPARAMETERS\n       int    axis =1      across which axis to convolve.\n       file   other =      auxiliary input file name\nSOURCE\n       user/saragiotis/Mconvft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfconvft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvkernel-Tuple{}","page":"Home","title":"Madagascar.sfconvkernel","text":"sfconvkernel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvkernel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvkernel. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvkernel(1)               Madagascar Manuals               sfconvkernel(1)\n\nNAME\n       sfconvkernel -\n\nSYNOPSIS\n       sfconvkernel  <  Fin.rsf  filter=Ffilter.rsf  >  Fout.rsf lag=Flag1.rsf\n       lag2=Flag2.rsf lag3=Flag3.rsf adj=n n=1\n\nCOMMENTS\n       Applies a 1,2, or 3D convolution kernel or its adjoint  The  filter  is\n       composed by n coefficients.\n\n       example: 2d laplacian\n\n       1 1 -4  1 1\n\n       filter:  1  1 -4 1 1 lag1 (vertical lag)  :  0  1  0  -1  0 lag2 (hori‐\n       zontal lag): -1  0  0   0  1\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   filter =      auxiliary input file name\n       file   lag =      auxiliary input file name\n       file   lag2 =      auxiliary input file name\n       file   lag3 =      auxiliary input file name\n       int    n                                                             =1\n                   ------------------------------------------------------------\nSOURCE\n       user/ediazp/Mconvkernel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfconvkernel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvolve-Tuple{}","page":"Home","title":"Madagascar.sfconvolve","text":"sfconvolve(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvolve on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvolve. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvolve(1)                 Madagascar Manuals                 sfconvolve(1)\n\nNAME\n       sfconvolve -\n\nSYNOPSIS\n       sfconvolve < _in.rsf > _out.rsf ker=_ker.rsf adj=n wrap=n\n\nCOMMENTS\n       convolve input 2D image by kernel\n\nPARAMETERS\n       bool   adj =n [y/n]     if y adjoint convolution, if n, convolution\n       string ker =      convolution kernel file (auxiliary input file name)\n       bool   wrap  =n  [y/n]     if  y,  perform  doughnut wrapping. if n, no\n              wrapping\nSOURCE\n       user/luke/Mconvolve.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfconvolve(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfconvolve2-Tuple{}","page":"Home","title":"Madagascar.sfconvolve2","text":"sfconvolve2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfconvolve2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfconvolve2. See ?m8r for examples.\n\nRSF Documentation\n\nsfconvolve2(1)                Madagascar Manuals                sfconvolve2(1)\n\nNAME\n       sfconvolve2 - 2D convolution with arbitrary filter\n\nSYNOPSIS\n       sfconvolve2 < Fx.rsf > Fy.rsf flt=Ff.rsf verb=n stat=y\n\nPARAMETERS\n       file   flt =      auxiliary input file name\n       bool   stat =y [y/n]     stationary operator\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009VTIModeSeparation/aniopsize\n       cwp/geo2009VTIModeSeparation/oporder\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\nSOURCE\n       user/jyan/Mconvolve2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfconvolve2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcorop-Tuple{}","page":"Home","title":"Madagascar.sfcorop","text":"sfcorop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcorop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcorop. See ?m8r for examples.\n\nRSF Documentation\n\nsfcorop(1)                    Madagascar Manuals                    sfcorop(1)\n\nNAME\n       sfcorop -\n\nSYNOPSIS\n       sfcorop opr=Fopr.rsf < Fcor.rsf > Fwfl.rsf verb=n adj=n ncor=100\n\nCOMMENTS\n       Correlation  operator  w/  adjoint wfl [file] : is taken from stdin opr\n       [file] : is taken from  \"opr\" Requires both files to have the same  di‐\n       mensions\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    ncor =100 ®\n       file   opr =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mcorop.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcorop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcorral-Tuple{}","page":"Home","title":"Madagascar.sfcorral","text":"sfcorral(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcorral on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcorral. See ?m8r for examples.\n\nRSF Documentation\n\nsfcorral(1)                   Madagascar Manuals                   sfcorral(1)\n\nNAME\n       sfcorral  -  Cross-correlate  every trace with every other in frequency\n       domain.\n\nSYNOPSIS\n       sfcorral < inp.rsf > out.rsf nlags=100\n\nPARAMETERS\n       int    nlags =100      number of lags\nSOURCE\n       user/rickettj/Mcorral.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcorral(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcorrectwave2-Tuple{}","page":"Home","title":"Madagascar.sfcorrectwave2","text":"sfcorrectwave2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcorrectwave2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcorrectwave2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcorrectwave2(1)             Madagascar Manuals             sfcorrectwave2(1)\n\nNAME\n       sfcorrectwave2 - Complex 2-D wave propagation using initial condition\n\nSYNOPSIS\n       sfcorrectwave2   <   Fi.rsf   >   Fo.rsf   snaps=Fs.rsf   left=left.rsf\n       right=right.rsf alpha=Fa.rsf beta=Fb.rsf verb=y  nt=  dt=  snap=0  cor‐\n       rect=n pad1=1 mode=\n\nPARAMETERS\n       file   alpha =      auxiliary input file name\n       file   beta =      auxiliary input file name\n       bool   correct =n [y/n]     jingwei's correction\n       float  dt = ®\n       file   left =      auxiliary input file name\n       string mode =      default mode is pspi\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/jsun/Mcorrectwave2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcorrectwave2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcorrft-Tuple{}","page":"Home","title":"Madagascar.sfcorrft","text":"sfcorrft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcorrft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcorrft. See ?m8r for examples.\n\nRSF Documentation\n\nsfcorrft(1)                   Madagascar Manuals                   sfcorrft(1)\n\nNAME\n       sfcorrft  -  Trace-by-trace  or data-by-trace correlation using Fourier\n       transform.\n\nSYNOPSIS\n       sfcorrft < in.rsf > corr.rsf other=other.rsf axis=1\n\nCOMMENTS\n       other can be a dataset with the same dimensions as in (except for axis)\n       or  a single trace.  If other is not specified, auto-correlation is as‐\n       sumed.\n\nPARAMETERS\n       int    axis =1      across which axis to correlate.\n       string other =      auxiliary input file name\nSOURCE\n       user/saragiotis/Mcorrft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcorrft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcortholr3-Tuple{}","page":"Home","title":"Madagascar.sfcortholr3","text":"sfcortholr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcortholr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcortholr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcortholr3(1)                Madagascar Manuals                sfcortholr3(1)\n\nNAME\n       sfcortholr3  - Lowrank decomposition for 3-D orthorhombic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfcortholr3  <  c11.rsf  seta1=seta1.rsf  fft=fft.rsf  left=left.rsf  >\n       right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      '0' means quasi-P (default),'1' means quasi-S, '2' means\n              quasi-S2\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   seta1 =      auxiliary input file name\n       tilt   =false ®\nSOURCE\n       user/jsun/Mcortholr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcortholr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcos2ang-Tuple{}","page":"Home","title":"Madagascar.sfcos2ang","text":"sfcos2ang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcos2ang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcos2ang. See ?m8r for examples.\n\nRSF Documentation\n\nsfcos2ang(1)                  Madagascar Manuals                  sfcos2ang(1)\n\nNAME\n       sfcos2ang - Inverse cos to angle transformation\n\nSYNOPSIS\n       sfcos2ang   <   Fstk.rsf   >   Fang.rsf   velocity=velocity.rsf   na=nt\n       da=90/(nt-1) a0=0. extend=4 top=n\n\nPARAMETERS\n       float  a0 =0.       angle origin\n       float  da =90/(nt-1)      angle sampling\n       int    extend =4      tmp extension\n       int    na =nt      number of angles\n       bool   top =n [y/n]     velocity scaling option\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mcos2ang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcos2ang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcosft-Tuple{}","page":"Home","title":"Madagascar.sfcosft","text":"sfcosft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcosft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcosft. See ?m8r for examples.\n\nRSF Documentation\n\nsfcosft(1)                    Madagascar Manuals                    sfcosft(1)\n\nNAME\n       sfcosft - Multi-dimensional cosine transform.\n\nSYNOPSIS\n       sfcosft < in.rsf > out.rsf sign#=0\n\nCOMMENTS\n       The  input  and  output are real and have the same dimensions.  Pad the\n       data if you need to suppress wrap-around effects.\n\nPARAMETERS\n       int    sign# =0      transform along #-th dimension        [+1  forward\n              or -1 backward]\nUSED IN\n       bei/dwnc/phasemod\n       bei/dwnc/sigmoid\n       bei/dwnc/vofz\nSOURCE\n       system/generic/Mcosft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcosft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcosftwave1-Tuple{}","page":"Home","title":"Madagascar.sfcosftwave1","text":"sfcosftwave1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcosftwave1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcosftwave1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcosftwave1(1)               Madagascar Manuals               sfcosftwave1(1)\n\nNAME\n       sfcosftwave1 - 1-D FFT wave extrapolation using Cosine FT\n\nSYNOPSIS\n       sfcosftwave1   <   inp.rsf   >   out.rsf   prop=prop.rsf  left=left.rsf\n       right=right.rsf nt= dt=\n\nPARAMETERS\n       float  dt = ®\n       file   left =      auxiliary input file name\n       int    nt = ®\n       file   prop =      auxiliary input file name\n       file   right =      auxiliary input file name\nSOURCE\n       user/fomels/Mcosftwave1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcosftwave1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcostaper-Tuple{}","page":"Home","title":"Madagascar.sfcostaper","text":"sfcostaper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcostaper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcostaper. See ?m8r for examples.\n\nRSF Documentation\n\nsfcostaper(1)                 Madagascar Manuals                 sfcostaper(1)\n\nNAME\n       sfcostaper - Cosine taper around the borders (N-D).\n\nSYNOPSIS\n       sfcostaper < in.rsf > out.rsf nw#=0\n\nCOMMENTS\n       April  2014  program of the month: http://ahay.org/blog/2014/04/02/pro‐\n       gram-of-the-month-sfcostaper/\n\nPARAMETERS\n       int    nw# =0      tapering on #-th axis\nSOURCE\n       system/generic/Mcostaper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcostaper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcovariance2d-Tuple{}","page":"Home","title":"Madagascar.sfcovariance2d","text":"sfcovariance2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcovariance2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcovariance2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcovariance2d(1)             Madagascar Manuals             sfcovariance2d(1)\n\nNAME\n       sfcovariance2d - determine covariance from 2d data of mean zero, output\n       is n1xn1 array\n\nSYNOPSIS\n       sfcovariance2d < in.rsf > out.rsf\n\nSOURCE\n       user/luke/Mcovariance2d.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfcovariance2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcp-Tuple{}","page":"Home","title":"Madagascar.sfcp","text":"sfcp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcp. See ?m8r for examples.\n\nRSF Documentation\n\nsfcp(1)                       Madagascar Manuals                       sfcp(1)\n\nNAME\n       sfcp - Copy or move a dataset.\n\nSYNOPSIS\n       sfcp < in.rsf > out.rsf in.rsf out.rsf\n\nCOMMENTS\n       sfcp - copy, sfmv - move.  Mimics standard Unix commands.\n\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/sact1\n\nSOURCE\n       system/main/cp.c\n\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfcp\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfcp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcpef-Tuple{}","page":"Home","title":"Madagascar.sfcpef","text":"sfcpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcpef. See ?m8r for examples.\n\nRSF Documentation\n\nsfcpef(1)                     Madagascar Manuals                     sfcpef(1)\n\nNAME\n       sfcpef - 1-D prediction-error filter estimation from complex data\n\nSYNOPSIS\n       sfcpef < in.rsf > out.rsf single=y nf=\n\nPARAMETERS\n       int    nf =      filter length\n       bool   single =y [y/n]     single channel or multichannel\nSOURCE\n       user/fomels/Mcpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcpef1-Tuple{}","page":"Home","title":"Madagascar.sfcpef1","text":"sfcpef1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcpef1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcpef1. See ?m8r for examples.\n\nRSF Documentation\n\nsfcpef1(1)                    Madagascar Manuals                    sfcpef1(1)\n\nNAME\n       sfcpef1 - Estimate complex PEF on the first axis.\n\nSYNOPSIS\n       sfcpef1 < in.rsf > out.rsf nf= niter=2*nf\n\nPARAMETERS\n       int    nf =      filter length\n       int    niter =2*nf      number of iterations\nSOURCE\n       user/gee/Mcpef1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcpef1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcplxatt-Tuple{}","page":"Home","title":"Madagascar.sfcplxatt","text":"sfcplxatt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcplxatt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcplxatt. See ?m8r for examples.\n\nRSF Documentation\n\nsfcplxatt(1)                  Madagascar Manuals                  sfcplxatt(1)\n\nNAME\n       sfcplxatt - Statistical attributes for circular data.\n\nSYNOPSIS\n       sfcplxatt < in.rsf > out.rsf\n\nSOURCE\n       user/browaeys/Mcplxatt.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcplxatt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcplxcoh-Tuple{}","page":"Home","title":"Madagascar.sfcplxcoh","text":"sfcplxcoh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcplxcoh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcplxcoh. See ?m8r for examples.\n\nRSF Documentation\n\nsfcplxcoh(1)                  Madagascar Manuals                  sfcplxcoh(1)\n\nNAME\n       sfcplxcoh - Coherency based on complex statistical correlation.\n\nSYNOPSIS\n       sfcplxcoh < in.rsf > out.rsf nw=\n\nPARAMETERS\n       int    nw =      half time-window size\nSOURCE\n       user/browaeys/Mcplxcoh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcplxcoh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcplxcor-Tuple{}","page":"Home","title":"Madagascar.sfcplxcor","text":"sfcplxcor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcplxcor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcplxcor. See ?m8r for examples.\n\nRSF Documentation\n\nsfcplxcor(1)                  Madagascar Manuals                  sfcplxcor(1)\n\nNAME\n       sfcplxcor - Statistical complex correlation for circular data.\n\nSYNOPSIS\n       sfcplxcor < in.rsf > out.rsf\n\nSOURCE\n       user/browaeys/Mcplxcor.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcplxcor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcplxloc-Tuple{}","page":"Home","title":"Madagascar.sfcplxloc","text":"sfcplxloc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcplxloc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcplxloc. See ?m8r for examples.\n\nRSF Documentation\n\nsfcplxloc(1)                  Madagascar Manuals                  sfcplxloc(1)\n\nNAME\n       sfcplxloc  -  Local  coherency  and dip based on trace-by-trace complex\n       statistical correlation.\n\nSYNOPSIS\n       sfcplxloc < in.rsf > out.rsf nw=\n\nPARAMETERS\n       int    nw =      half time-window size\nSOURCE\n       user/browaeys/Mcplxloc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcplxloc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcpxeikonal-Tuple{}","page":"Home","title":"Madagascar.sfcpxeikonal","text":"sfcpxeikonal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcpxeikonal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcpxeikonal. See ?m8r for examples.\n\nRSF Documentation\n\nsfcpxeikonal(1)               Madagascar Manuals               sfcpxeikonal(1)\n\nNAME\n       sfcpxeikonal - Iterative complex eikonal solver\n\nSYNOPSIS\n       sfcpxeikonal   <   in.rsf   >   out.rsf   vel=vel.rsf   witer=witer.rsf\n       dwiter=dwiter.rsf  dwsiter=dwsiter.rsf  rhsiter=rhsiter.rsf  upiter=up‐\n       iter.rsf   operiter=operiter.rsf  matriter=matriter.rsf  matiiter=mati‐\n       iter.rsf    x0iter=x0iter.rsf    liniter=liniter.rsf    titer=titer.rsf\n       wtiter=wtiter.rsf       gamiter=gamiter.rsf       preciter=preciter.rsf\n       maskr=maskr.rsf maski=maski.rsf ref=ref.rsf wght=wght.rsf cray=cray.rsf\n       velocity=y  verb=n  niter=1 cgiter=200 nstep=10 tol=1.e-8 wupg=y term=n\n       smooth=n repeat=1 reg=n eps=1.e-2  namda=0.1  alpha=1.  pvar=y  recom=y\n       rect#=(1,1,...) symm= prec= bound=\n\nPARAMETERS\n       float  alpha =1.       exponential scaling of preconditioning\n       string bound =      avoid overshoot when update (default add)\n       int    cgiter =200      number of conjugate gradient iterations\n       string cray =      auxiliary input file name\n       string dwiter =      auxiliary output file name\n       string dwsiter =      auxiliary output file name\n       float  eps =1.e-2      stable division of preconditioner\n       string gamiter =      auxiliary output file name\n       string liniter =      auxiliary output file name\n       string maski =      auxiliary input file name\n       string maskr =      auxiliary input file name\n       string matiiter =      auxiliary output file name\n       string matriter =      auxiliary output file name\n       float  namda =0.1      regularization parameter (Ticknov)\n       int    niter =1      number of iterations\n       int    nstep =10      number of linesearch\n       string operiter =      auxiliary output file name\n       string prec =      rhs preconditioning (default angle)\n       string preciter =      auxiliary output file name\n       bool   pvar  =y  [y/n]     allow  preconditioning to change over itera‐\n              tions\n       bool   recom =y [y/n]     recompute initial R according to w  estimated\n              from I\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       file   ref =      auxiliary input file name\n       bool   reg =n [y/n]     regularization (Ticknov)\n       int    repeat =1      number of smoothings\n       string rhsiter =      auxiliary output file name\n       bool   smooth =n [y/n]     smooth update after conjugate-gradient\n       string symm  =       right-hand side evaluation L_R*I or L_I*R (default\n              both)\n       bool   term =n [y/n]     early termination if line-search failure\n       string titer =      auxiliary output file name\n       float  tol =1.e-8      thresholding for gradient scaling\n       string upiter =      auxiliary output file name\n       string vel =      auxiliary input file name\n       bool   velocity =y [y/n]     if y, the input is velocity;  n,  slowness\n              squared\n       bool   verb =n [y/n]     verbosity flag\n       string wght =      auxiliary input file name\n       string witer =      auxiliary output file name\n       string wtiter =      auxiliary output file name\n       bool   wupg =y [y/n]     compute w for angle preconditioning\n       string x0iter =      auxiliary output file name\nSOURCE\n       user/llisiw/Mcpxeikonal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcpxeikonal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcqrtm-Tuple{}","page":"Home","title":"Madagascar.sfcqrtm","text":"sfcqrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcqrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcqrtm. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcr-Tuple{}","page":"Home","title":"Madagascar.sfcr","text":"sfcr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcr. See ?m8r for examples.\n\nRSF Documentation\n\nsfcr(1)                       Madagascar Manuals                       sfcr(1)\n\nNAME\n       sfcr - Column-row matrix decomposition\n\nSYNOPSIS\n       sfcr  <  row_in.rsf col_in=col_in.rsf > row_out.rsf col_out=col_out.rsf\n       niter=10 tol=0.0f prec=y\n\nPARAMETERS\n       file   col_in =      auxiliary input file name\n       file   col_out =      auxiliary output file name\n       int    niter =10      number of iterations\n       bool   prec =y [y/n]     If apply preconditioning\n       float  tol =0.0f      CG tolerance\nSOURCE\n       user/fomels/Mcr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfcr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcram2-Tuple{}","page":"Home","title":"Madagascar.sfcram2","text":"sfcram2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcram2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcram2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcram2(1)                    Madagascar Manuals                    sfcram2(1)\n\nNAME\n       sfcram2 - 2-D angle-domain Kirchhoff migration based on escape tables.\n\nSYNOPSIS\n       sfcram2  <  esct.rsf data=data.rsf vz=vz.rsf > oimag.rsf imap=oimap.rsf\n       smap=osmap.rsf dipagath=dimag.rsf  dipimap=dimap.rsf  dipsmap=dsmap.rsf\n       full=fimag.rsf  mute=n  sqsmb=n  oazmin=180.0 oazmax=180.0 dazmin=180.0\n       dazmax=180.0 ts=3 th=5 vconst=1.5 smax=10*fabsf (ds) hmax=20*fabsf (dh)\n\nPARAMETERS\n       string data =      Processed prestack data (auxiliary input file name)\n       float  dazmax =180.0      Maximum allowed dip angle  (abs.value)  at  z\n              max\n       float  dazmin  =180.0       Maximum  allowed dip angle (abs.value) at z\n              min\n       string dipagath =      Dip angle gathers (angle, z, x) (auxiliary  out‐\n              put file name)\n       string dipimap =      Dip gathers illumination (angle, z, x) (auxiliary\n              output file name)\n       string dipsmap =      Dip gathers semblance (angle,  z,  x)  (auxiliary\n              output file name)\n       string full =      Full image (scattering angle, dip angle, z, x) (aux‐\n              iliary output file name)\n       float  hmax =20*fabsf (dh)      Maximum allowed width of  the  receiver\n              ray branch\n       string imap  =      Scattering gathers illumination (angle, z, x) (aux‐\n              iliary output file name)\n       bool   mute =n [y/n]     y - mute signal in  constant  z  plane  before\n              stacking\n       float  oazmax =180.0      Maximum allowed scattering angle at z max\n       float  oazmin =180.0      Maximum allowed scattering angle at z min\n       string smap  =       Scattering gathers semblance (angle, z, x) (auxil‐\n              iary output file name)\n       float  smax =10*fabsf (ds)      Maximum allowed width of the  shot  ray\n              branch\n       bool   sqsmb =n [y/n]     y - output energy traces instead of semblance\n       int    th  =5       Tapering length at the edges of the receiver direc‐\n              tion\n       int    ts =3      Tapering length at the edges of the source direction\n       float  vconst =1.5      Constant velocity, if vz= is not used\n       string vz =      Velocity model for amplitude weights (auxiliary  input\n              file name)\nSOURCE\n       user/cram/Mcram2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcram2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcram3-Tuple{}","page":"Home","title":"Madagascar.sfcram3","text":"sfcram3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcram3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcram3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcram3(1)                    Madagascar Manuals                    sfcram3(1)\n\nNAME\n       sfcram3 - 3-D angle-domain Kirchhoff migration based on escape tables.\n\nSYNOPSIS\n       sfcram3  < esct.rsf data=data.rsf ddaemon=ddaemon.rsf survey=survey.rsf\n       vz=vz.rsf  >  imag.rsf  hits=hits.rsf  agath=oimag.rsf   imap=oimap.rsf\n       smap=osmap.rsf  dipagath=dimag.rsf  dipimap=dimap.rsf dipsmap=dsmap.rsf\n       amp=y  extrap=n  mute=n  outaz=y  inorm=n   oazmin=180.0   oazmax=180.0\n       dazmin=180.0 dazmax=180.0 dbx=10.0*dx dby=10.0*dy dxm=5.0*dx dym=5.0*dy\n       armin=0.01*dy*dx armax=100.0*dy*dx np=1 vconst=1.5 nc=0\n\nPARAMETERS\n       string agath =      Scattering angle gathers (angle, azimuth, z, x,  y)\n              (auxiliary output file name)\n       bool   amp =y [y/n]     n - do not apply amplitude correction weights\n       float  armax  =100.0*dy*dx       Maximum  allowed  area for an exit ray\n              branch\n       float  armin =0.01*dy*dx      Minimum allowed  area  for  an  exit  ray\n              branch\n       string data =      Processed prestack data (auxiliary input file name)\n       float  dazmax =180.0      Maximum allowed dip angle at z max\n       float  dazmin =180.0      Maximum allowed dip angle at z min\n       float  dbx =10.0*dx      Size of search bins in x\n       float  dby =10.0*dy      Size of search bins in y\n       string ddaemon  =       Daemon  for distributed data storage (auxiliary\n              input file name)\n       string dipagath =      Dip angle gathers  (angle,  azimuth,  z,  x,  y)\n              (auxiliary output file name)\n       string dipimap  =       Dip gathers illumination (angle, azimuth, z, x,\n              y) (auxiliary output file name)\n       string dipsmap =      Dip gathers energy  (angle,  azimuth,  z,  x,  y)\n              (auxiliary output file name)\n       float  dxm =5.0*dx      Taper length in x\n       float  dym =5.0*dy      Taper length in y\n       bool   extrap =n [y/n]     y - extrapolate migrated samples in gathers\n       string hits  =      Image illumination (z, x, y) (auxiliary output file\n              name)\n       string imap =      SCattering gathers illumination (angle, azimuth,  z,\n              x, y) (auxiliary output file name)\n       bool   inorm =n [y/n]     y - normalize gathers for illumination\n       bool   mute  =n  [y/n]     y  -  mute signal in constant z plane before\n              stacking\n       int    nc  =0       Number  of  threads  to   use   for   ray   tracing\n              (OMP_NUM_THREADS by default)\n       int    np  =1       number  of  image points to buffer before accessing\n              data\n       float  oazmax =180.0      Maximum allowed scattering angle at z max\n       float  oazmin =180.0      Maximum allowed scattering angle at z min\n       bool   outaz =y [y/n]     n - stack azimuth direction before output\n       string smap =      Scattering gathers energy (angle, azimuth, z, x,  y)\n              (auxiliary output file name)\n       string survey  =       Survey info for input data (auxiliary input file\n              name)\n       float  vconst =1.5      Constant velocity, if vz= is not used\n       string vz =      Velocity model for amplitude weights (auxiliary  input\n              file name)\nSOURCE\n       user/cram/Mcram3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcram3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcramdd-Tuple{}","page":"Home","title":"Madagascar.sfcramdd","text":"sfcramdd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcramdd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcramdd. See ?m8r for examples.\n\nRSF Documentation\n\nsfcramdd(1)                   Madagascar Manuals                   sfcramdd(1)\n\nNAME\n       sfcramdd  -  Daemon  for distributed storage of prestack data for angle\n       migration.\n\nSYNOPSIS\n       sfcramdd < in.rsf  >  out.rsf  data=data.rsf  port=18003  ith=0  inet=1\n       nthreads=2*ncpu timeout=10\n\nPARAMETERS\n       string data =      Grid of supercells of local escape solutions (auxil‐\n              iary input file name)\n       int    inet =1      Network interface index\n       int    ith =0      Make every ith process a daemon\n       int    nthreads =2*ncpu      Number of threads (connections) per daemon\n       int    port =18003      TCP port for listening\n       int    timeout =10      Inactivity time before shutdown (mins)\nSOURCE\n       user/cram/Mcramdd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcramdd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcrazgathc3-Tuple{}","page":"Home","title":"Madagascar.sfcrazgathc3","text":"sfcrazgathc3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcrazgathc3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcrazgathc3. See ?m8r for examples.\n\nRSF Documentation\n\nsfcrazgathc3(1)               Madagascar Manuals               sfcrazgathc3(1)\n\nNAME\n       sfcrazgathc3  - Collapse/stack (partially) azimuthal axis of 3-D angle-\n       domain migration angle gathers.\n\nSYNOPSIS\n       sfcrazgathc3 < gath.rsf > rgath.rsf verb=y norm=n nth=10 wd=5\n\nPARAMETERS\n       bool   norm =n [y/n]     y - normalize after stacking\n       int    nth =10      leave every nth azimuth\n       bool   verb =y [y/n]     verbosity flag\n       int    wd =5      half-width of stacking base (total base is 2*wd + 1)\nSOURCE\n       user/cram/Mcrazgathc3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfcrazgathc3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcreate-Tuple{}","page":"Home","title":"Madagascar.sfcreate","text":"sfcreate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcreate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcreate. See ?m8r for examples.\n\nRSF Documentation\n\nsfcreate(1)                   Madagascar Manuals                   sfcreate(1)\n\nNAME\n       sfcreate - Creates just the ascii header from parameters\n\nSYNOPSIS\n       sfcreate > out.rsf n#=\n\nCOMMENTS\n       Wrapper for sf_fileflush (creating RSF header from params)\n\nPARAMETERS\n       int    n# =      size of #-th axis\nSOURCE\n       user/ivlad/Mcreate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcreate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcrestack-Tuple{}","page":"Home","title":"Madagascar.sfcrestack","text":"sfcrestack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcrestack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcrestack. See ?m8r for examples.\n\nRSF Documentation\n\nsfcrestack(1)                 Madagascar Manuals                 sfcrestack(1)\n\nNAME\n       sfcrestack - Common Reflection Element (CRE) stacking\n\nSYNOPSIS\n       sfcrestack  <  in.rsf  timeCurves=timeCurves.rsf > out.rsf verb=0 aper‐\n       ture=1\n\nCOMMENTS\n       Programmer: Rodolfo A. C. Neves (Dirack) 06/10/2019\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       int    aperture =1      Stacking aperture, number of offsets to stack\n       file   timeCurves =      auxiliary input file name\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mcrestack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcrestack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcretrajec-Tuple{}","page":"Home","title":"Madagascar.sfcretrajec","text":"sfcretrajec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcretrajec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcretrajec. See ?m8r for examples.\n\nRSF Documentation\n\nsfcretrajec(1)                Madagascar Manuals                sfcretrajec(1)\n\nNAME\n       sfcretrajec  -  Calculate  CRE  trajectory  on CMP x Offset plane given\n       zero-offset CRS parameters (RN, RNIP, BETA)\n\nSYNOPSIS\n       sfcretrajec < in.rsf param=par.rsf > out.rsf nm0= om0= dm0=  nt0=  ot0=\n       dt0= verb=0\n\nCOMMENTS\n       Programmer: Rodolfo A. C. Neves (Dirack) 31/08/2019\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       float  dm0 =      Central CMPs sampling in parameters file (Km)\n       float  dt0 =      t0s sampling in parameters file (s)\n       int    nm0 =      Number of central CMPs in parameters file\n       int    nt0 =      Number of t0s in parameters file\n       float  om0 =      First central CMP coordinate in parameters file (Km)\n       float  ot0 =      First t0 coordinate in parameters file (s)\n       file   param =      auxiliary input file name\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mcretrajec.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcretrajec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcrssemb-Tuple{}","page":"Home","title":"Madagascar.sfcrssemb","text":"sfcrssemb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcrssemb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcrssemb. See ?m8r for examples.\n\nRSF Documentation\n\nsfcrssemb(1)                  Madagascar Manuals                  sfcrssemb(1)\n\nNAME\n       sfcrssemb - CRS-based semblance\n\nSYNOPSIS\n       sfcrssemb < inDags_.rsf dataSq=inDagsSq_.rsf > sembFile_.rsf xapp=1 di‐\n       papp=11 coher=11 scatnum=1 s1= s2=\n\nCOMMENTS\n       Several CIGs are used simultaneously. Dip-angle sections  corresponding\n       to  the same dip-angle compose a subvolume. The subvolume allows calcu‐\n       lating semblance in the  scattering-angle  direction  along  reflection\n       boundaries.\n\n       Input:  inDags_.rsf   - dip-angle gathers - stack in the scattering-an‐\n       gle direction InDagsSq_.rsf - stack of amplitude squares in  the  scat‐\n       tering-angle direction\n\n       Working  with just dip-angle gathers use default value of \"scatnum\" pa‐\n       rameter\n\n       Output: sembFile_.rsf - crs-based semblance file; has the  same  dimen‐\n       sions as the input files\n\nPARAMETERS\n       int    coher  =11      height of a vertical window for semblance calcu‐\n              lation\n       file   dataSq =      auxiliary input file name\n       int    dipapp =11      number of traces in  the  x-dip  direction  pro‐\n              cessed simultaneously\n       float  s1 = ®\n       float  s2 = ®\n       int    scatnum  =1      shows how many traces were stacked in the scat‐\n              tering angle direction;\n                     if the stack was normalized use the default value\n       int    xapp =1      number of CIGs in  the  inline-direction  processed\n              simultaneously\nSOURCE\n       user/aklokov/Mcrssemb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcrssemb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcrssemb3d-Tuple{}","page":"Home","title":"Madagascar.sfcrssemb3d","text":"sfcrssemb3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcrssemb3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcrssemb3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcrssemb3d(1)                Madagascar Manuals                sfcrssemb3d(1)\n\nNAME\n       sfcrssemb3d - CRS-based semblance for 3D\n\nSYNOPSIS\n       sfcrssemb3d  <  inDags_.rsf dataSq=inDagsSq_.rsf > sembFile_.rsf xapp=1\n       yapp=1 dipappx=11 dipappy=11 coher=11 scatnum=1\n\nCOMMENTS\n       Several CIGs are used simultaneously. Dip-angle sections  corresponding\n       to  the same dip-angle compose a subvolume. The subvolume allows calcu‐\n       lating semblance in the  scattering-angle  direction  along  reflection\n       boundaries.\n\n       Input:  inDags_.rsf   - 3D dip-angle gathers - stack in the scattering-\n       angle direction inDagsSq_.rsf - stack of amplitude squares in the scat‐\n       tering-angle direction\n\n       Working  with just dip-angle gathers use default value of \"scatnum\" pa‐\n       rameter\n\n       Output: sembFile_.rsf - crs-based semblance file; has the  same  dimen‐\n       sions as the input files\n\nPARAMETERS\n       int    coher  =11      height of a vertical window for semblance calcu‐\n              lation\n       file   dataSq =      auxiliary input file name\n       int    dipappx =11      number of traces in the  x-dip  direction  pro‐\n              cessed simultaneously\n       int    dipappy  =11       number  of traces in the y-dip direction pro‐\n              cessed simultaneously\n       int    scatnum =1      shows how many traces were stacked in the  scat‐\n              tering angle direction;\n                     if the stack was normalized use the default value\n       int    xapp  =1       number  of CIGs in the inline-direction processed\n              simultaneously\n       int    yapp =1      number of CIGs in the crossline-direction processed\n              simultaneously\nSOURCE\n       user/aklokov/Mcrssemb3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcrssemb3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcshifts2-Tuple{}","page":"Home","title":"Madagascar.sfcshifts2","text":"sfcshifts2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcshifts2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcshifts2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcshifts2(1)                 Madagascar Manuals                 sfcshifts2(1)\n\nNAME\n       sfcshifts2 - Generate shifts for 2-D regularized autoregression in com‐\n       plex domain. From (x,y,f) to (x,y,s,f)\n\nSYNOPSIS\n       sfcshifts2 < in.rsf > shifts.rsf ns1= ns2=\n\nPARAMETERS\n       int    ns1 =      number of shifts in first dim\n       int    ns2 =      number of shifts in second dim\nUSED IN\n       cup/rna3d/real\n       cup/rna3d/shot\n       cup/rna3d/sin\nSOURCE\n       user/gchliu/Mcshifts2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcshifts2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcsmooth-Tuple{}","page":"Home","title":"Madagascar.sfcsmooth","text":"sfcsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfcsmooth(1)                  Madagascar Manuals                  sfcsmooth(1)\n\nNAME\n       sfcsmooth - Multi-dimensional triangle smoothing for complex data.\n\nSYNOPSIS\n       sfcsmooth   <   in.rsf   >   out.rsf   repeat=1  adj=n  rect#=(1,1,...)\n       diff#=(n,n,...)\n\nCOMMENTS\n       January 2012 program of the month: http://ahay.org/blog/2012/01/01/pro‐\n       gram-of-the-month-sfsmooth/\n\nPARAMETERS\n       bool   adj =n [y/n]     run in the adjoint mode\n       bool   diff# =(n,n,...)  [y/n]     differentiation on #-th axis\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\nSOURCE\n       system/generic/Mcsmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcsp2d-Tuple{}","page":"Home","title":"Madagascar.sfcsp2d","text":"sfcsp2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcsp2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcsp2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcsp2d(1)                    Madagascar Manuals                    sfcsp2d(1)\n\nNAME\n       sfcsp2d - 2-D common scattering-point gathers mapping and its adjoint\n\nSYNOPSIS\n       sfcsp2d  < in.rsf > out.rsf ompchunk=1 ompnth=0 adj=y weight=n linear=n\n       v=2000. half=n verb=n nhe=nh  dhe=dh  he0=h0  nxs=nxm  dxs=dxm  xs0=xm0\n       nh=nhe       dh=dhe       h0=he0      nxm=nxs      dxm=dxs      xm0=xs0\n       apt=SF_MAX(fabsf(he0),fabsf(he0+(nhe-1)*dhe))\n\nCOMMENTS\n       The axes in the data space are {time,offset,cmp} The axes in the  image\n       space are {time,equiv_offset,csp}\n\nPARAMETERS\n       bool   adj =y [y/n]     yes: CSP mapping, no: CMP building\n       float  apt =SF_MAX(fabsf(he0),fabsf(he0+(nhe-1)*dhe))      aperture\n       float  dh =dhe ®\n       float  dhe =dh ®\n       float  dxm =dxs ®\n       float  dxs =dxm ®\n       float  h0 =he0 ®\n       bool   half =n [y/n]     half offset flag\n       float  he0 =h0 ®\n       bool   linear  =n  [y/n]     yes:  linear  interpolation,  no: nearest-\n              neighbor interpolation\n       int    nh =nhe ®\n       int    nhe =nh ®\n       int    nxm =nxs ®\n       int    nxs =nxm ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  v =2000.       velocity\n       bool   verb =n [y/n]     verbosity flag\n       bool   weight =n [y/n]     weighting flag\n       float  xm0 =xs0 ®\n       float  xs0 =xm0 ®\nSOURCE\n       user/seisinv/Mcsp2d.c\nVERSION\n       4.2-git Mcsp2d.c 744 2013-07-11 18:46:07Z Yujin Liu\n\nMadagascar                         JULY 2024                        sfcsp2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcsqrtf-Tuple{}","page":"Home","title":"Madagascar.sfcsqrtf","text":"sfcsqrtf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcsqrtf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcsqrtf. See ?m8r for examples.\n\nRSF Documentation\n\nsfcsqrtf(1)                   Madagascar Manuals                   sfcsqrtf(1)\n\nNAME\n       sfcsqrtf - Complex square root. Good example of I/O loop for applying a\n       function.\n\nSYNOPSIS\n       sfcsqrtf < in.rsf > out.rsf\n\nCOMMENTS\n       Realized after I wrote this program that the sqrt  function  in  sfmath\n       does  the same job, but keeping it around as a simple example of buffer\n       I/O.\n\nSOURCE\n       user/ivlad/Mcsqrtf.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfcsqrtf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcstack2d-Tuple{}","page":"Home","title":"Madagascar.sfcstack2d","text":"sfcstack2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcstack2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcstack2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfcstack2d(1)                 Madagascar Manuals                 sfcstack2d(1)\n\nNAME\n       sfcstack2d - Stack multi-shots images with complex values\n\nSYNOPSIS\n       sfcstack2d < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...\n\nSOURCE\n       user/jsun/Mcstack2d.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfcstack2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcsv2rsf-Tuple{}","page":"Home","title":"Madagascar.sfcsv2rsf","text":"sfcsv2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcsv2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcsv2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfcsv2rsf(1)                  Madagascar Manuals                  sfcsv2rsf(1)\n\nNAME\n       sfcsv2rsf  - Convert a delimited-text ASCII file to RSF binary floating\n       point or int.\n\nSYNOPSIS\n       sfcsv2rsf delimiter=, dtype=float verb=n debug=n trunc=n header=n o1=0.\n       o2=0. d1=1. d2=1. unit1=unknown unit2=unknown label1=unknown label2=un‐\n       known\n\nCOMMENTS\n       Zeros will be added if number of elements is not the same in each  row.\n       n1 and n2 are computed automatically. For consistency with sfdisfil and\n       sfmatmult, output is C-style order (row-first), i.e. rows in input file\n       become  dimension-1  columns  in  output. Output encoding is native. If\n       n2=1 in output, the second dimension will not be written to the header.\n\nPARAMETERS\n       float  d1 =1.  ®\n       float  d2 =1.  ®\n       bool   debug =n [y/n]     Extra verbosity for debugging\n       string delimiter =,      Separator between values in input file\n       string dtype =float      Input type\n       bool   header =n [y/n]     If the first line is a header\n       string label1 =unknown ®\n       string label2 =unknown ®\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       bool   trunc =n [y/n]     Truncate or add zeros if  nr  elems  in  rows\n              differs\n       string unit1 =unknown ®\n       string unit2 =unknown ®\n       bool   verb =n [y/n]     Whether to echo n1, n2, infill/truncation\nSOURCE\n       user/ivlad/Mcsv2rsf.py\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfcsv2rsf\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcsv2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfctf2dprec-Tuple{}","page":"Home","title":"Madagascar.sfctf2dprec","text":"sfctf2dprec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfctf2dprec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfctf2dprec. See ?m8r for examples.\n\nRSF Documentation\n\nsfctf2dprec(1)                Madagascar Manuals                sfctf2dprec(1)\n\nNAME\n       sfctf2dprec - TF Weights Preconditioner for Complex input as linear op‐\n       erator\n\nSYNOPSIS\n       sfctf2dprec < src.rsf > out.rsf w=w.rsf wf=wf.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   w =      auxiliary input file name\n       file   wf =      auxiliary input file name\nSOURCE\n       user/fomels/Mctf2dprec.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfctf2dprec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfctilr2-Tuple{}","page":"Home","title":"Madagascar.sfctilr2","text":"sfctilr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfctilr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfctilr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfctilr2(1)                   Madagascar Manuals                   sfctilr2(1)\n\nNAME\n       sfctilr2  -  Lowrank decomposition for 2-D anisotropic wave propagation\n       using exact phase velocity (2 step time marching).\n\nSYNOPSIS\n       sfctilr2  <  velz.rsf  fft=fft.rsf  left=left.rsf  >  right.rsf  type=1\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       type   =1      wave mode (1=p wave, 2=Sv wave)\nSOURCE\n       user/jsun/Mctilr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfctilr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfctscigadj-Tuple{}","page":"Home","title":"Madagascar.sfctscigadj","text":"sfctscigadj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfctscigadj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfctscigadj. See ?m8r for examples.\n\nRSF Documentation\n\nsfctscigadj(1)                Madagascar Manuals                sfctscigadj(1)\n\nNAME\n       sfctscigadj - Correcting time-shift gathers and its adjoint\n\nSYNOPSIS\n       sfctscigadj < Ftg.rsf Fdertau=Fdertau.rsf > Fcg.rsf Fder0=Fder0.rsf ve‐\n       locity=Fvel.rsf adj=y dt=0.001 pad=100\n\nPARAMETERS\n       file   Fder0 =      auxiliary output file name\n       file   Fdertau =      auxiliary input file name\n       bool   adj =y [y/n]\n       float  dt =0.001 ®\n       int    pad =100      files\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mctscigadj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfctscigadj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfctscigder-Tuple{}","page":"Home","title":"Madagascar.sfctscigder","text":"sfctscigder(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfctscigder on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfctscigder. See ?m8r for examples.\n\nRSF Documentation\n\nsfctscigder(1)                Madagascar Manuals                sfctscigder(1)\n\nNAME\n       sfctscigder - Get the derivative of time-shift gathers\n\nSYNOPSIS\n       sfctscigder < Ftg.rsf > Fder.rsf velocity=Fvel.rsf dt=0.001 pad=30\n\nPARAMETERS\n       float  dt =0.001 ®\n       int    pad =30 ®\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mctscigder.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfctscigder(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfctshift-Tuple{}","page":"Home","title":"Madagascar.sfctshift","text":"sfctshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfctshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfctshift. See ?m8r for examples.\n\nRSF Documentation\n\nsfctshift(1)                  Madagascar Manuals                  sfctshift(1)\n\nNAME\n       sfctshift - Correct time-shift gathers\n\nSYNOPSIS\n       sfctshift < tgather.rsf > cgather.rsf velocity=vel.rsf dt=0.001 pad=30\n\nPARAMETERS\n       float  dt =0.001 ®\n       int    pad =30 ®\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mctshift.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfctshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcube-Tuple{}","page":"Home","title":"Madagascar.sfcube","text":"sfcube(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcube on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcube. See ?m8r for examples.\n\nRSF Documentation\n\nsfcube(1)                     Madagascar Manuals                     sfcube(1)\n\nNAME\n       sfcube - Simple cube fault synthetic\n\nSYNOPSIS\n       sfcube > cube.rsf n=51 p=0.5 q=0.5\n\nPARAMETERS\n       int    n =51      cube dimensions\n       float  p =0.5      inline slope\n       float  q =0.5      crossline slope\nSOURCE\n       user/gee/Mcube.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcube(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcubeplot-Tuple{}","page":"Home","title":"Madagascar.sfcubeplot","text":"sfcubeplot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcubeplot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcubeplot. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcubesrc-Tuple{}","page":"Home","title":"Madagascar.sfcubesrc","text":"sfcubesrc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcubesrc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcubesrc. See ?m8r for examples.\n\nRSF Documentation\n\nsfcubesrc(1)                  Madagascar Manuals                  sfcubesrc(1)\n\nNAME\n       sfcubesrc - Simple 2-D wave propagation with multi-threaded fftw3\n\nSYNOPSIS\n       sfcubesrc < Fw.rsf > Fo.rsf ref=Fr.rsf\n\nPARAMETERS\n       file   ref =      auxiliary input file name\nSOURCE\n       user/jsun/Mcubesrc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfcubesrc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcurv-Tuple{}","page":"Home","title":"Madagascar.sfcurv","text":"sfcurv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcurv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcurv. See ?m8r for examples.\n\nRSF Documentation\n\nsfcurv(1)                     Madagascar Manuals                     sfcurv(1)\n\nNAME\n       sfcurv - Max/Min curvatures by azimuth curvature cube\n\nSYNOPSIS\n       sfcurv < in.rsf > out.rsf axis=2 mode=\n\nPARAMETERS\n       int    axis =2      azimuth dimension\n       string mode =      max/min/mean/gauss/mpo/mne/dip/strike\nSOURCE\n       user/chen/Mcurv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfcurv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcurv2-Tuple{}","page":"Home","title":"Madagascar.sfcurv2","text":"sfcurv2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcurv2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcurv2. See ?m8r for examples.\n\nRSF Documentation\n\nsfcurv2(1)                    Madagascar Manuals                    sfcurv2(1)\n\nNAME\n       sfcurv2 - Joint estimation of curvature and slope\n\nSYNOPSIS\n       sfcurv2 < in.rsf > out.rsf slope=slope.rsf niter=5 m=1 n=1 interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    niter =5      iterations\n       file   slope =      auxiliary output file name\nSOURCE\n       user/chen/Mcurv2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfcurv2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcurvature-Tuple{}","page":"Home","title":"Madagascar.sfcurvature","text":"sfcurvature(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcurvature on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcurvature. See ?m8r for examples.\n\nRSF Documentation\n\nsfcurvature(1)                Madagascar Manuals                sfcurvature(1)\n\nNAME\n       sfcurvature - Curvature\n\nSYNOPSIS\n       sfcurvature < hor.rsf > cur.rsf rotation=n scale=1.0 vscale=1.0 what=\n\nPARAMETERS\n       bool   rotation =n [y/n]     if y: rotation, if n: convergence\n       float  scale =1.0      scaling (from time to depth)\n       float  vscale =1.0      scaling (from time to depth)\n       string what =      what to compute\nSOURCE\n       user/parvaneh/Mcurvature.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfcurvature(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfcut-Tuple{}","page":"Home","title":"Madagascar.sfcut","text":"sfcut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfcut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfcut. See ?m8r for examples.\n\nRSF Documentation\n\nsfcut(1)                      Madagascar Manuals                      sfcut(1)\n\nNAME\n       sfcut - Zero a portion of the dataset.\n\nSYNOPSIS\n       sfcut  <  in.rsf  > out.rsf verb=n j#=(1,...) d#=(d1,d2,...) f#=(0,...)\n       min#=(o1,o2,,...) n#=(0,...) max#=(o1+(n1-1)*d1,o2+(n1-1)*d2,,...)\n\nCOMMENTS\n       Reverse of window.\n\nPARAMETERS\n       float  d# =(d1,d2,...)       sampling in #-th dimension\n       largeint\n              f# =(0,...)       window start in #-th dimension\n       int    j# =(1,...)       jump in #-th dimension\n       float  max# =(o1+(n1-1)*d1,o2+(n1-1)*d2,,...)       maximum in #-th di‐\n              mension\n       float  min# =(o1,o2,,...)       minimum in #-th dimension\n       int    n# =(0,...)       window size in #-th dimension\n       bool   verb =n [y/n]     Verbosity flag\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/circle\nSOURCE\n       system/main/cut.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfcut\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfcut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagap-Tuple{}","page":"Home","title":"Madagascar.sfdagap","text":"sfdagap(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagap on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagap. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagap(1)                    Madagascar Manuals                    sfdagap(1)\n\nNAME\n       sfdagap  -  Reflection event apex protector/removal for dip-angle gath‐\n       ers.\n\nSYNOPSIS\n       sfdagap  <  dagFile.rsf   dips=dipFile.rsf   >   taperFile.rsf   ddep=y\n       pwidth=10.f greyarea=10.f dz=20.f\n\nCOMMENTS\n       May be used for migration aperture optimization or for reflected energy\n       supression. For the last multiply the output on -1.\n\n       Input: dagFile.rsf - input dip-angle gathers; dipFile.rsf - dips esiti‐\n       mated in the image domain. The dips are in degree (!)\n\n       Output: taperFile.rsf - mask for input dip-angle gathers\n\nPARAMETERS\n       bool   ddep =y [y/n]     if y, taper depends on depth; if n, no\n       string dips  =       dips  esitimated  in  the image domain (in degree)\n              (auxiliary input file name)\n       float  dz =20.f      half of a migrated wave length\n       float  greyarea =10.f      width of event tail taper (in degree)\n       float  pwidth =10.f      protected width (in degree)\nSOURCE\n       user/aklokov/Mdagap.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdagap(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagap3-Tuple{}","page":"Home","title":"Madagascar.sfdagap3","text":"sfdagap3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagap3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagap3. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagap3(1)                   Madagascar Manuals                   sfdagap3(1)\n\nNAME\n       sfdagap3  - Reflection event apex protector/removal for dip-angle gath‐\n       ers.\n\nSYNOPSIS\n       sfdagap3  <  dagFile.rsf  dips=dipFile.rsf   >   taperFile.rsf   ddep=y\n       pwidth1=10.f pwidth2=10.f greyarea1=10.f greyarea2=10.f dz=20.f\n\nCOMMENTS\n       May be used for migration aperture optimization or for reflected energy\n       supression. For the last multiply the output on -1.\n\n       Input: dagFile.rsf - input dip-angle gathers; dipFile.rsf - dips esiti‐\n       mated in the image domain. The dips are in degree (!)\n\n       Output: taperFile.rsf - mask for input dip-angle gathers\n\nPARAMETERS\n       bool   ddep =y [y/n]     if y, taper depends on depth; if n, no\n       string dips  =       dips  esitimated  in  the image domain (in degree)\n              (auxiliary input file name)\n       float  dz =20.f      half of a migrated wave length\n       float  greyarea1 =10.f ®\n       float  greyarea2 =10.f      width of event tail taper (in degree)\n       float  pwidth1 =10.f ®\n       float  pwidth2 =10.f      protected width (in degree)\nSOURCE\n       user/luke/Mdagap3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdagap3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagap3a-Tuple{}","page":"Home","title":"Madagascar.sfdagap3a","text":"sfdagap3a(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagap3a on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagap3a. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagap3a(1)                  Madagascar Manuals                  sfdagap3a(1)\n\nNAME\n       sfdagap3a - Reflection event apex protector/removal for dip-angle gath‐\n       ers.\n\nSYNOPSIS\n       sfdagap3a  <  dagFile.rsf  dips=dipFile.rsf  >  taperFile.rsf  rms=rms‐\n       File.rsf   ddep=y  pwidth1=10.f  pwidth2=10.f  drms=y  fudge=10.f  gre‐\n       yarea1=10.f greyarea2=10.f dz=20.f\n\nCOMMENTS\n       May be used for migration aperture optimization or for reflected energy\n       supression. For the last multiply the output on -1.\n\n       Input: dagFile.rsf - input dip-angle gathers; dipFile.rsf - dips esiti‐\n       mated in the image domain. The dips are in degree  (!)   rmsFile.rsf  -\n       input rms;\n\n       Output: taperFile.rsf - mask for input dip-angle gathers\n\nPARAMETERS\n       bool   ddep =y [y/n]     if y, taper depends on depth; if n, no\n       string dips  =       dips  esitimated  in  the image domain (in degree)\n              (auxiliary input file name)\n       bool   drms =y [y/n]     if y, taper depends on rms; if n, no\n       float  dz =20.f      half of a migrated wave length\n       float  fudge =10.f      Fudge Factor\n       float  greyarea1 =10.f ®\n       float  greyarea2 =10.f      width of event tail taper (in degree)\n       float  pwidth1 =10.f ®\n       float  pwidth2 =10.f      protected width (in degree)\n       string rms =      RMS input for  tapering  variation  (auxiliary  input\n              file name)\nSOURCE\n       user/luke/Mdagap3a.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdagap3a(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagap3e-Tuple{}","page":"Home","title":"Madagascar.sfdagap3e","text":"sfdagap3e(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagap3e on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagap3e. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagap3e(1)                  Madagascar Manuals                  sfdagap3e(1)\n\nNAME\n       sfdagap3e - Reflection event apex protector/removal for dip-angle gath‐\n       ers.\n\nSYNOPSIS\n       sfdagap3e  <  dagFile.rsf  dips=dipFile.rsf  >   taperFile.rsf   ddep=y\n       pwidth1=10.f pwidth2=10.f greyarea1=10.f greyarea2=10.f dz=20.f\n\nCOMMENTS\n       May be used for migration aperture optimization or for reflected energy\n       supression. For the last multiply the output on -1.\n\n       Input: dagFile.rsf - input dip-angle gathers; dipFile.rsf - dips esiti‐\n       mated in the image domain. The dips are in degree (!)\n\n       Output: taperFile.rsf - mask for input dip-angle gathers\n\nPARAMETERS\n       bool   ddep =y [y/n]     if y, taper depends on depth; if n, no\n       string dips  =       dips  esitimated  in  the image domain (in degree)\n              (auxiliary input file name)\n       float  dz =20.f      half of a migrated wave length\n       float  greyarea1 =10.f ®\n       float  greyarea2 =10.f      width of event tail taper (in degree)\n       float  pwidth1 =10.f ®\n       float  pwidth2 =10.f      protected width (in degree)\nSOURCE\n       user/luke/Mdagap3e.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdagap3e(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagapex-Tuple{}","page":"Home","title":"Madagascar.sfdagapex","text":"sfdagapex(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagapex on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagapex. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagapex(1)                  Madagascar Manuals                  sfdagapex(1)\n\nNAME\n       sfdagapex - None\n\nSYNOPSIS\n       sfdagapex  <  gathers_in.rsf  dip=dips_in.rsf  >  fresnel_out.rsf mask=\n       gray=\n\nPARAMETERS\n       string dip =      Image Dips (deg)(auxiliary input file name)\n       float  gray = ®\n       float  mask = ®\nSOURCE\n       user/luke/Mdagapex.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdagapex(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdagtaper-Tuple{}","page":"Home","title":"Madagascar.sfdagtaper","text":"sfdagtaper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdagtaper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdagtaper. See ?m8r for examples.\n\nRSF Documentation\n\nsfdagtaper(1)                 Madagascar Manuals                 sfdagtaper(1)\n\nNAME\n       sfdagtaper - Edge tapering for dip-angle gathers\n\nSYNOPSIS\n       sfdagtaper < dataFile.rsf > outFile.rsf len=5.f\n\nPARAMETERS\n       float  len =5.f      length of the taper function (in degree)\nSOURCE\n       user/aklokov/Mdagtaper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdagtaper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdatasucjb2rsf2d-Tuple{}","page":"Home","title":"Madagascar.sfdatasucjb2rsf2d","text":"sfdatasucjb2rsf2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdatasucjb2rsf2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdatasucjb2rsf2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfdatasucjb2rsf2d(1)          Madagascar Manuals          sfdatasucjb2rsf2d(1)\n\nNAME\n       sfdatasucjb2rsf2d - Convert 2D cjb-SU data to RSF format.\n\nSYNOPSIS\n       sfdatasucjb2rsf2d > Fo.rsf fn=\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       string fn =      setup I/O files\nSOURCE\n       user/chengjb/Mdatasucjb2rsf2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfdatasucjb2rsf2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdatshift-Tuple{}","page":"Home","title":"Madagascar.sfdatshift","text":"sfdatshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdatshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdatshift. See ?m8r for examples.\n\nRSF Documentation\n\nsfdatshift(1)                 Madagascar Manuals                 sfdatshift(1)\n\nNAME\n       sfdatshift  - Calculate datum shift from elevation profile for 2-D shot\n       gathers\n\nSYNOPSIS\n       sfdatshift < in.rsf > out.rsf elev=elev.rsf v0=\n\nPARAMETERS\n       string elev =      auxiliary input file name\n       float  v0 = ®\nSOURCE\n       user/bash/Mdatshift.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdatshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdatstretch-Tuple{}","page":"Home","title":"Madagascar.sfdatstretch","text":"sfdatstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdatstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdatstretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdbfmig-Tuple{}","page":"Home","title":"Madagascar.sfdbfmig","text":"sfdbfmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdbfmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdbfmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfdbfmig(1)                   Madagascar Manuals                   sfdbfmig(1)\n\nNAME\n       sfdbfmig -\n\nSYNOPSIS\n       sfdbfmig < piFile.rsf escx=xEscFile.rsf esct=tEscFile.rsf > resFile.rsf\n       ppn=pNum ppo=pStart ppd=pStep izn=zNum ixn=xNum  izo=zStart  ixo=xStart\n       izd=zStep ixd=xStep sn=1 so=0.f sd=1.f isAA=y dx=xStep dt=0.008f xlim=2\n       * xStep xapert=xNum * xStep pj=1\n\nPARAMETERS\n       float  dt =0.008f      time-range for point detection\n       float  dx =xStep      x-range for point detection\n       string esct =      escape-time file (auxiliary input file name)\n       string escx =      escape-positions file (auxiliary input file name)\n       bool   isAA =y [y/n]     if y, apply anti-aliasing\n       float  ixd =xStep      step in positions (in meters)\n       int    ixn =xNum      number of imaged positions\n       float  ixo =xStart      first imaged position (in meters)\n       float  izd =zStep      step in depth (in meters)\n       int    izn =zNum      number of imaged depth samples\n       float  izo =zStart      first imaged depth (in meters)\n       int    pj =1      jump in points\n       float  ppd =pStep      step in processed partial images\n       int    ppn =pNum      number of processed partial images\n       float  ppo =pStart      first processed partial image\n       float  sd =1.f      step in scattering-angles\n       int    sn =1      number of scattering-angles\n       float  so =0.f      first scattering-angle\n       float  xapert =xNum * xStep      migration aperture size\n       float  xlim =2 * xStep      maximum distance between depth-line points\nSOURCE\n       user/aklokov/Mdbfmig.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdbfmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdblendseis-Tuple{}","page":"Home","title":"Madagascar.sfdblendseis","text":"sfdblendseis(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdblendseis on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdblendseis. See ?m8r for examples.\n\nRSF Documentation\n\nsfdblendseis(1)               Madagascar Manuals               sfdblendseis(1)\n\nNAME\n       sfdblendseis  - Blending, or Deblending using seislet domain threshold‐\n       ing.\n\nSYNOPSIS\n       sfdblendseis  <  in.rsf  >  out.rsf  shottime=shottime.rsf  dip=dip.rsf\n       init=init.rsf  niter=30 thr=10 lambda=0.5 eps=0.01 order=1 verb=0 mode=\n       type= thrtype=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string init =      auxiliary input file name\n       float  lambda =0.5      update step size\n       string mode =      [b-blending,d-deblending] function mode, the default\n              is d\n       int    niter =30      number of iterations\n       int    order =1      accuracy order for seislet transform\n       file   shottime =      auxiliary input file name\n       float  thr =10      threshold value (coefficients preserved in percent‐\n              age)\n       string thrtype =      [soft,hard] thresholding  type,  the  default  is\n              soft\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       int    verb =0      output verbosity information\nSOURCE\n       user/chenyk/Mdblendseis.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdblendseis(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdbmerge-Tuple{}","page":"Home","title":"Madagascar.sfdbmerge","text":"sfdbmerge(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdbmerge on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdbmerge. See ?m8r for examples.\n\nRSF Documentation\n\nsfdbmerge(1)                  Madagascar Manuals                  sfdbmerge(1)\n\nNAME\n       sfdbmerge -\n\nSYNOPSIS\n       sfdbmerge\n\nCOMMENTS\n       A  program that can be used to merge separate SCons databases together.\n       Typically used when an SConstruct is split into multiple  pieces  (e.g.\n       on a cluster).\n\n       args: outdb - path of the output database\n\n       strings - names of the databases to merge together\n\nSOURCE\n       user/cwp/Mdbmerge.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdbmerge(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdd-Tuple{}","page":"Home","title":"Madagascar.sfdd","text":"sfdd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdd. See ?m8r for examples.\n\nRSF Documentation\n\nsfdd(1)                       Madagascar Manuals                       sfdd(1)\n\nNAME\n       sfdd - Convert between different formats.\n\nSYNOPSIS\n       sfdd  <  in.rsf > out.rsf trunc=n line=8 strip=0 ibm=n form= type= for‐\n       mat=\n\nPARAMETERS\n       string form =      ascii, native, xdr\n       string format =      Element format (for conversion to ASCII)\n       bool   ibm =n [y/n]     Special case - assume integers actually  repre‐\n              sent IBM floats\n       int    line  =8       Number  of  numbers  per  line (for conversion to\n              ASCII)\n       int    strip =0      If strip characters from format at the end of  the\n              line\n       bool   trunc  =n [y/n]     Truncate or round to nearest when converting\n              from float to int/short\n       string type =      int, float, complex, short, long\nUSED IN\n       bei/dpmv/krchdmo\n       bei/dwnc/vofz\n       bei/fld/cube\n       bei/fld/shotmovie\n       bei/fld/yc\n       bei/ft1/brad\n       bei/ft1/plane4\n       bei/krch/wgkirch\n       bei/sg/denmark\n       bei/sg/meander\n       bei/sg/toldi\n       bei/vela/stretch\n       bei/vela/vscan\n       bei/wvs/head\n       bei/wvs/vscan\n       chen/test/wavmod\n       chen/test/xtime\n       cup/rna2d/real\n       cup/rna2d/simple\n       cup/rna3d/real\n       cup/rna3d/shot\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       27 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagas‐\n       car/html/sfdd.html\nSOURCE\n       system/main/dd.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfdd\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfdd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdealias-Tuple{}","page":"Home","title":"Madagascar.sfdealias","text":"sfdealias(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdealias on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdealias. See ?m8r for examples.\n\nRSF Documentation\n\nsfdealias(1)                  Madagascar Manuals                  sfdealias(1)\n\nNAME\n       sfdealias - 3-D trace interpolation to a denser grid using PWD.\n\nSYNOPSIS\n       sfdealias < in.rsf > out.rsf dip=dip.rsf both=n eps=0.01 order=1\n\nCOMMENTS\n       It may be necessary to bandpass the data before and after dealiasing to\n       ensure that  the  temporal  spectrum  is  banded.  Rule  of  thumb:  if\n       max(jx,jy)=N, the temporal bandwidth should be 1/N of Nyquist.\n\nPARAMETERS\n       bool   both =n [y/n]     if use left and right slopes\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\nSOURCE\n       user/pwd/Mdealias.c\nVERSION\n       4.2-git Mdealias2.c 1713 2006-03-03 08:21:29Z fomels\n\nMadagascar                         JULY 2024                      sfdealias(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdealias2-Tuple{}","page":"Home","title":"Madagascar.sfdealias2","text":"sfdealias2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdealias2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdealias2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdealias2(1)                 Madagascar Manuals                 sfdealias2(1)\n\nNAME\n       sfdealias2  -  2-D  (inline) trace interpolation to a denser grid using\n       PWD.\n\nSYNOPSIS\n       sfdealias2 < in.rsf > out.rsf dip=dip.rsf both=n eps=0.01 order=1\n\nCOMMENTS\n       It may be necessary to bandpass the data before and after dealiasing to\n       ensure  that  the  temporal  spectrum  is  banded.  Rule  of  thumb: if\n       max(jx,jy)=N, the temporal bandwidth should be 1/N of Nyquist.\n\nPARAMETERS\n       bool   both =n [y/n]     if use left and right slopes\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\nSOURCE\n       user/pwd/Mdealias2.c\nVERSION\n       4.2-git Mdealias2.c 1713 2006-03-03 08:21:29Z fomels\n\nMadagascar                         JULY 2024                     sfdealias2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdeblur-Tuple{}","page":"Home","title":"Madagascar.sfdeblur","text":"sfdeblur(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdeblur on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdeblur. See ?m8r for examples.\n\nRSF Documentation\n\nsfdeblur(1)                   Madagascar Manuals                   sfdeblur(1)\n\nNAME\n       sfdeblur - Non-stationary debluring by inversion\n\nSYNOPSIS\n       sfdeblur  <  in.rsf  >  out.rsf rect=rect.rsf niter=100 nliter=1 verb=n\n       eps=0.\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       int    niter =100      number of iterations\n       int    nliter =1      number of nonlinear iterations\n       file   rect =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mdeblur.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdeblur(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdeburst-Tuple{}","page":"Home","title":"Madagascar.sfdeburst","text":"sfdeburst(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdeburst on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdeburst. See ?m8r for examples.\n\nRSF Documentation\n\nsfdeburst(1)                  Madagascar Manuals                  sfdeburst(1)\n\nNAME\n       sfdeburst - Remove bursty noise by IRLS.\n\nSYNOPSIS\n       sfdeburst < in.rsf > out.rsf niter=10 eps=1. norm=\n\nPARAMETERS\n       float  eps =1.       regularization parameter\n       int    niter =10      number of iterations\n       string norm =      norm to use in IRLS (cauchy,l1)\nSOURCE\n       user/gee/Mdeburst.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdeburst(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdecibel-Tuple{}","page":"Home","title":"Madagascar.sfdecibel","text":"sfdecibel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdecibel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdecibel. See ?m8r for examples.\n\nRSF Documentation\n\nsfdecibel(1)                  Madagascar Manuals                  sfdecibel(1)\n\nNAME\n       sfdecibel - Decibel\n\nSYNOPSIS\n       sfdecibel < Fin.rsf > Fou.rsf verb=n aref=1.0 inv=n\n\nPARAMETERS\n       float  aref =1.0      reference amplitude\n       bool   inv =n [y/n]     inverse transform\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mdecibel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdecibel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdecon-Tuple{}","page":"Home","title":"Madagascar.sfdecon","text":"sfdecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdecon. See ?m8r for examples.\n\nRSF Documentation\n\nsfdecon(1)                    Madagascar Manuals                    sfdecon(1)\n\nNAME\n       sfdecon - Deconvolution (N-dimensional).\n\nSYNOPSIS\n       sfdecon < in.rsf > out.rsf filt=filt.rsf predictive=n rect1=0 lag=\n\nCOMMENTS\n       Uses the helix and patching technology.\n\nPARAMETERS\n       file   filt =      auxiliary input file name\n       string lag = ®\n       bool   predictive =n [y/n]     if y, do predictive deconvolution\n       int    rect1 =0      smoothing in the first axis\nSOURCE\n       user/gee/Mdecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdensity-Tuple{}","page":"Home","title":"Madagascar.sfdensity","text":"sfdensity(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdensity on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdensity. See ?m8r for examples.\n\nRSF Documentation\n\nsfdensity(1)                  Madagascar Manuals                  sfdensity(1)\n\nNAME\n       sfdensity - Compute density\n\nSYNOPSIS\n       sfdensity  <  Fin.rsf inY=FinY.rsf inZ=FinZ.rsf inW=FinW.rsf > Fout.rsf\n       verb=n n1=20 n2=20 n3=20 n4=20\n\nPARAMETERS\n       file   inW =      auxiliary input file name\n       file   inY =      auxiliary input file name\n       file   inZ =      auxiliary input file name\n       int    n1 =20      verbosity flag\n       int    n2 =20      verbosity flag\n       int    n3 =20      verbosity flag\n       int    n4 =20      verbosity flag\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jyan/Mdensity.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdensity(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdepth2time-Tuple{}","page":"Home","title":"Madagascar.sfdepth2time","text":"sfdepth2time(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdepth2time on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdepth2time. See ?m8r for examples.\n\nRSF Documentation\n\nsfdepth2time(1)               Madagascar Manuals               sfdepth2time(1)\n\nNAME\n       sfdepth2time - Conversion from depth to time in a V(z) medium.\n\nSYNOPSIS\n       sfdepth2time  <  in.rsf  velocity=velocity.rsf  >  out.rsf  nt= dt= t0=\n       slow=n eps=0.01\n\nCOMMENTS\n       Transforms function of z to function of\n\n       tau = Integral[2/v[x,n],{n,0,z}]\n\nPARAMETERS\n       float  dt =      Time sampling (default is d1)\n       float  eps =0.01      smoothness parameter\n       int    nt =      Number of points in time (default is n1)\n       bool   slow =n [y/n]     y: slowness, n: velocity\n       float  t0 =      Time origin (default is 0)\n       file   velocity =      auxiliary input file name\nUSED IN\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       system/seismic/Mdepth2time.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdepth2time(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfderiv-Tuple{}","page":"Home","title":"Madagascar.sfderiv","text":"sfderiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfderiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfderiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfderiv(1)                    Madagascar Manuals                    sfderiv(1)\n\nNAME\n       sfderiv - First derivative with a maximally linear FIR differentiator.\n\nSYNOPSIS\n       sfderiv < in.rsf > out.rsf order=6 scale=n\n\nCOMMENTS\n       May 2012 program of the month: http://ahay.org/blog/2012/05/01/program-\n       of-the-month-sfderiv/\n\nPARAMETERS\n       int    order =6      filter order\n       bool   scale =n [y/n]     if scale by 1/dx\nSOURCE\n       system/generic/Mderiv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfderiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfderiv3-Tuple{}","page":"Home","title":"Madagascar.sfderiv3","text":"sfderiv3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfderiv3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfderiv3. See ?m8r for examples.\n\nRSF Documentation\n\nsfderiv3(1)                   Madagascar Manuals                   sfderiv3(1)\n\nNAME\n       sfderiv3 - Second order derivative along axis\n\nSYNOPSIS\n       sfderiv3 < in.rsf > out.rsf axis=1 operator=2\n\nCOMMENTS\n       int axis=[1] axis to differentiate\n\n       int operator=[2] 1 backward, 2 centered, 3 forward\n\nPARAMETERS\n       int    axis =1 ®\n       int    operator =2 ®\nSOURCE\n       user/ediazp/Mderiv3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfderiv3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdespike-Tuple{}","page":"Home","title":"Madagascar.sfdespike","text":"sfdespike(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdespike on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdespike. See ?m8r for examples.\n\nRSF Documentation\n\nsfdespike(1)                  Madagascar Manuals                  sfdespike(1)\n\nNAME\n       sfdespike - Remove spikes in by sliding 1-D medians.\n\nSYNOPSIS\n       sfdespike < in.rsf > out.rsf wide=7\n\nPARAMETERS\n       int    wide =7      sliding window width\nSOURCE\n       user/gee/Mdespike.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdespike(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdespike1-ed-Tuple{}","page":"Home","title":"Madagascar.sfdespike1-ed","text":"sfdespike1-ed(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdespike1-ed on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdespike1-ed. See ?m8r for examples.\n\nRSF Documentation\n\nsfdespike1-ed(1)              Madagascar Manuals              sfdespike1-ed(1)\n\nNAME\n       sfdespike1-ed - Despike filter:\n\nSYNOPSIS\n       sfdespike1-ed < in.rsf > out.rsf window=20 sigma=3.0\n\nCOMMENTS\n       move outliers values to the tolerance parameter. The mean is calculated\n       with moving windows\n\n       Example:\n\n       if (a>3sigma) a=3sigma\n\n       outlier * *              ^ *    *            | *      *            |  *\n       *          * ****          * * * * *  *****\n\nPARAMETERS\n       float  sigma =3.0 ®\n       int    window =20 ®\nSOURCE\n       user/ediazp/Mdespike1-ed.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfdespike1-ed(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdespike2-Tuple{}","page":"Home","title":"Madagascar.sfdespike2","text":"sfdespike2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdespike2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdespike2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdespike2(1)                 Madagascar Manuals                 sfdespike2(1)\n\nNAME\n       sfdespike2 - Remove spikes in by sliding 2-D medians.\n\nSYNOPSIS\n       sfdespike2 < in.rsf > out.rsf wide1=5 wide2=5\n\nPARAMETERS\n       int    wide1 =5 ®\n       int    wide2 =5      sliding window width\nSOURCE\n       user/gee/Mdespike2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdespike2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdespike2-ed-Tuple{}","page":"Home","title":"Madagascar.sfdespike2-ed","text":"sfdespike2-ed(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdespike2-ed on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdespike2-ed. See ?m8r for examples.\n\nRSF Documentation\n\nsfdespike2-ed(1)              Madagascar Manuals              sfdespike2-ed(1)\n\nNAME\n       sfdespike2-ed - Despike filter:\n\nSYNOPSIS\n       sfdespike2-ed < in.rsf > out.rsf window=20 sigma=3.0\n\nCOMMENTS\n       move outliers values to the tolerance parameter.\n\n       Example:\n\n       if (a>3sigma) a=3sigma\n\n       outlier  *  *              ^ *    *            | *      *           | *\n       *          * ****          * * * * *  *****\n\nPARAMETERS\n       float  sigma =3.0 ®\n       int    window =20 ®\nSOURCE\n       user/ediazp/Mdespike2-ed.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfdespike2-ed(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdespike3-Tuple{}","page":"Home","title":"Madagascar.sfdespike3","text":"sfdespike3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdespike3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdespike3. See ?m8r for examples.\n\nRSF Documentation\n\nsfdespike3(1)                 Madagascar Manuals                 sfdespike3(1)\n\nNAME\n       sfdespike3 - Remove spikes in by sliding 3-D medians.\n\nSYNOPSIS\n       sfdespike3 < in.rsf > out.rsf wide1=5 wide2=5 wide3=5\n\nPARAMETERS\n       int    wide1 =5 ®\n       int    wide2 =5 ®\n       int    wide3 =5      sliding window width\nSOURCE\n       user/gee/Mdespike3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdespike3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiff-Tuple{}","page":"Home","title":"Madagascar.sfdiff","text":"sfdiff(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiff on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiff. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiff(1)                     Madagascar Manuals                     sfdiff(1)\n\nNAME\n       sfdiff  -  Compare  the  difference  of two rsf data sets with the same\n       size.\n\nSYNOPSIS\n       sfdiff < inp1.rsf match=inp2.rsf > dif.rsf\n\nPARAMETERS\n       file   match =      auxiliary input file name\nSOURCE\n       user/chenyk/Mdiff.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdiff(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiffcxx-Tuple{}","page":"Home","title":"Madagascar.sfdiffcxx","text":"sfdiffcxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiffcxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiffcxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiffcxx(1)                  Madagascar Manuals                  sfdiffcxx(1)\n\nNAME\n       sfdiffcxx  -  Compare the difference of two rsf data sets with the same\n       size.\n\nSYNOPSIS\n       sfdiffcxx < inp1.rsf match=inp2.rsf > dif.rsf\n\nPARAMETERS\n       file   match =      auxiliary input file name\nSOURCE\n       user/chenyk/Mdiffcxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdiffcxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdifference-Tuple{}","page":"Home","title":"Madagascar.sfdifference","text":"sfdifference(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdifference on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdifference. See ?m8r for examples.\n\nRSF Documentation\n\nsfdifference(1)               Madagascar Manuals               sfdifference(1)\n\nNAME\n       sfdifference - Difference profile of two data\n\nSYNOPSIS\n       sfdifference < in.rsf > out.rsf subtracter=sub.rsf\n\nPARAMETERS\n       file   subtracter =      auxiliary input file name\nSOURCE\n       user/yliu/Mdifference.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdifference(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdifferr-Tuple{}","page":"Home","title":"Madagascar.sfdifferr","text":"sfdifferr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdifferr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdifferr. See ?m8r for examples.\n\nRSF Documentation\n\nsfdifferr(1)                  Madagascar Manuals                  sfdifferr(1)\n\nNAME\n       sfdifferr - Error by substituting numerical solution into equation\n\nSYNOPSIS\n       sfdifferr    <   in.rsf   >   out.rsf   slow=slow.rsf   slowz=slowz.rsf\n       slowx=slowx.rsf err_cutoff=0.2 iq=2\n\nPARAMETERS\n       float  err_cutoff =0.2 ®\n       int    iq =2      switch for escape variable 0=x, 1=a, 2=t, 3=z\n       file   slow =      auxiliary input file name\n       file   slowx =      auxiliary input file name\n       file   slowz =      auxiliary input file name\nSOURCE\n       user/browaeys/Mdifferr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdifferr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiffoc-Tuple{}","page":"Home","title":"Madagascar.sfdiffoc","text":"sfdiffoc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiffoc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiffoc. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiffoc(1)                   Madagascar Manuals                   sfdiffoc(1)\n\nNAME\n       sfdiffoc - Diffraction focusing test.\n\nSYNOPSIS\n       sfdiffoc     <     inp.rsf    >    out.rsf    v0=SF_EPS    v=    pad=nt\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) extend=4\n\nPARAMETERS\n       int    extend =4      trace extension\n       int    pad =nt      padding for stretch\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2)      padding for FFT\n       float  v =      final velocity\n       float  v0 =SF_EPS      initial velocity\nSOURCE\n       system/seismic/Mdiffoc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdiffoc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiffraction-Tuple{}","page":"Home","title":"Madagascar.sfdiffraction","text":"sfdiffraction(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiffraction on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiffraction. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiffraction(1)              Madagascar Manuals              sfdiffraction(1)\n\nNAME\n       sfdiffraction - Generate diffractions in zero-offset data.\n\nSYNOPSIS\n       sfdiffraction   <  w1.rsf  w2=w2.rsf  w12=w12.rsf  spikes=spikes.rsf  >\n       data.rsf freq=0.2/dt\n\nPARAMETERS\n       float  freq =0.2/dt      peak frequency for Ricker wavelet\n       file   spikes =      auxiliary input file name\n       file   w12 =      auxiliary input file name\n       file   w2 =      auxiliary input file name\nSOURCE\n       system/seismic/Mdiffraction.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfdiffraction(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiffuse2-Tuple{}","page":"Home","title":"Madagascar.sfdiffuse2","text":"sfdiffuse2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiffuse2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiffuse2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiffuse2(1)                 Madagascar Manuals                 sfdiffuse2(1)\n\nNAME\n       sfdiffuse2 - Diffusion by regularized inversion.\n\nSYNOPSIS\n       sfdiffuse2 < in.rsf > out.rsf niter=10 repeat=1 eps=1.\n\nPARAMETERS\n       float  eps =1.       regularization parameter\n       int    niter =10      number of conjugate-gradient iterations\n       int    repeat =1      number of smoothing iterations\nSOURCE\n       user/dmerzlikin/Mdiffuse2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdiffuse2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiiradon2-Tuple{}","page":"Home","title":"Madagascar.sfdiiradon2","text":"sfdiiradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiiradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiiradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiiradon2(1)                Madagascar Manuals                sfdiiradon2(1)\n\nNAME\n       sfdiiradon2  -  direct 2to2 hyper Radon transform (double integral, ex‐\n       act)\n\nSYNOPSIS\n       sfdiiradon2 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp=\n\nPARAMETERS\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mdiiradon2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdiiradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdijkstra-Tuple{}","page":"Home","title":"Madagascar.sfdijkstra","text":"sfdijkstra(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdijkstra on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdijkstra. See ?m8r for examples.\n\nRSF Documentation\n\nsfdijkstra(1)                 Madagascar Manuals                 sfdijkstra(1)\n\nNAME\n       sfdijkstra - Dijkstra shortest-path algorithm in 2-D\n\nSYNOPSIS\n       sfdijkstra < cost.rsf > out.rsf fin1= fin2= paths= ref1=0 ref2=0 nf=0\n\nPARAMETERS\n       ints   fin1 =       [nf]\n       ints   fin2 =      final points [nf]\n       int    nf =0      number of final points\n       strings\n              paths =       [nf]\n       int    ref1 =0 ®\n       int    ref2 =0      source point\nSOURCE\n       user/pwd/Mdijkstra.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdijkstra(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdimag-Tuple{}","page":"Home","title":"Madagascar.sfdimag","text":"sfdimag(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdimag on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdimag. See ?m8r for examples.\n\nRSF Documentation\n\nsfdimag(1)                    Madagascar Manuals                    sfdimag(1)\n\nNAME\n       sfdimag - Diffraction imaging in the plane-wave domain.\n\nSYNOPSIS\n       sfdimag  <  cmp.rsf  >  scan.rsf  semblance=n nb=2 v0= dv= nv= extend=4\n       mute=12 str=0. x0=\n\nPARAMETERS\n       float  dv = ®\n       int    extend =4      trace extension\n       int    mute =12      mute zone\n       int    nb =2      semblance averaging\n       int    nv = ®\n       bool   semblance =n [y/n]     if y, compute semblance; if n, stack\n       float  str =0.       maximum stretch allowed\n       float  v0 = ®\n       float  x0 = ®\nSOURCE\n       system/seismic/Mdimag.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdimag(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdip-Tuple{}","page":"Home","title":"Madagascar.sfdip","text":"sfdip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdip. See ?m8r for examples.\n\nRSF Documentation\n\nsfdip(1)                      Madagascar Manuals                      sfdip(1)\n\nNAME\n       sfdip - 3-D dip estimation by plane wave destruction.\n\nSYNOPSIS\n       sfdip  <  in.rsf  > out.rsf mask=mask.rsf idip=idip0.rsf xdip=xdip0.rsf\n       both=n n4=2 niter=5 liter=20 rect1=1 rect2=1 rect3=1  p0=0.  q0=0.  or‐\n       der=1   nj1=1   nj2=1   drift=n   verb=n   pmin=-FLT_MAX  pmax=+FLT_MAX\n       qmin=-FLT_MAX qmax=+FLT_MAX eps=0.0f\n\nCOMMENTS\n       The output is dimensionless (stepout in time measured in time samples).\n\n       June 2012 program of  the  month:  http://ahay.org/blog/2012/06/02/pro‐\n       gram-of-the-month-sfdip/\n\nPARAMETERS\n       bool   both =n [y/n]     if y, compute both left and right predictions\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    niter =5      number of iterations\n       int    nj1 =1      in-line antialiasing\n       int    nj2 =1      cross-line antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial in-line dip\n       float  pmax =+FLT_MAX      maximum inline dip\n       float  pmin =-FLT_MAX      minimum inline dip\n       float  q0 =0.       initial cross-line dip\n       float  qmax =+FLT_MAX      maximum cross-line dip\n       float  qmin =-FLT_MAX      minimum cross-line dip\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       int    rect3 =1      dip smoothness on 3rd axis\n       bool   verb =n [y/n]     verbosity flag\n       string xdip =      initial cross-line dip (auxiliary input file name)\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2009TTIModeSeparation/marmousi2\nSOURCE\n       user/pwd/Mdip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdip2-Tuple{}","page":"Home","title":"Madagascar.sfdip2","text":"sfdip2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdip2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdip2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdip2(1)                     Madagascar Manuals                     sfdip2(1)\n\nNAME\n       sfdip2 - 2-D dip estimation by plane wave destruction.\n\nSYNOPSIS\n       sfdip2 < in.rsf > out.rsf mask=mask.rsf idip=idip0.rsf niter=5 liter=20\n       rect1=1  rect2=1  p0=0.  order=1  nj1=1  drift=n  verb=n  pmin=-FLT_MAX\n       pmax=+FLT_MAX eps=0.0f\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    niter =5      number of iterations\n       int    nj1 =1      antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial dip\n       float  pmax =+FLT_MAX      maximum dip\n       float  pmin =-FLT_MAX      minimum dip\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mdip2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdip2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdip_fb-Tuple{}","page":"Home","title":"Madagascar.sfdip_fb","text":"sfdip_fb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdip_fb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdip_fb. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipfb(1)                   Madagascar Manuals                   sfdipfb(1)\n\nNAME\n       sfdip_fb  -  3-D  dip estimation by plane wave destruction with forward\n       and backward space derivative calculation.\n\nSYNOPSIS\n       sfdip_fb < in.rsf > out.rsf mask=mask.rsf idip=idip0.rsf xdip=xdip0.rsf\n       both=n  n4=2  niter=5  liter=20 rect1=1 rect2=1 rect3=1 p0=0. q0=0. or‐\n       der=1  nj1=1   nj2=1   drift=n   verb=n   pmin=-FLT_MAX   pmax=+FLT_MAX\n       qmin=-FLT_MAX qmax=+FLT_MAX eps=0.0f\n\nCOMMENTS\n       The output is dimensionless (stepout in time measured in time samples).\n\n       June  2012  program  of the month: http://ahay.org/blog/2012/06/02/pro‐\n       gram-of-the-month-sfdip/\n\nPARAMETERS\n       bool   both =n [y/n]     if y, compute both left and right predictions\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    niter =5      number of iterations\n       int    nj1 =1      in-line antialiasing\n       int    nj2 =1      cross-line antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial in-line dip\n       float  pmax =+FLT_MAX      maximum inline dip\n       float  pmin =-FLT_MAX      minimum inline dip\n       float  q0 =0.       initial cross-line dip\n       float  qmax =+FLT_MAX      maximum cross-line dip\n       float  qmin =-FLT_MAX      minimum cross-line dip\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       int    rect3 =1      dip smoothness on 3rd axuis\n       bool   verb =n [y/n]     verbosity flag\n       string xdip =      initial cross-line dip (auxiliary input file name)\nSOURCE\n       user/chenyk/Mdip_fb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdip_fb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiparti-Tuple{}","page":"Home","title":"Madagascar.sfdiparti","text":"sfdiparti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiparti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiparti. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiparti(1)                  Madagascar Manuals                  sfdiparti(1)\n\nNAME\n       sfdiparti - diparti\n\nSYNOPSIS\n       sfdiparti  < piFile.rsf vel=velFile.rsf > resFile.rsf semb=sembFile.rsf\n       apert=1000 sembWindow=11 gamma=1.f ppn=dipNum_  ppo=dipStart_  ppd=dip‐\n       Step_ itn=tNum_ ixn=xNum_ ito=tStart_ ixo=xStart_ itd=tStep_ ixd=xStep_\n\nPARAMETERS\n       float  apert =1000      diffraction summation aperture\n       float  gamma =1.f      velocity-model-accuracy parameter\n       float  itd =tStep_      step in time (in ms)\n       int    itn =tNum_      number of imaged depth samples\n       float  ito =tStart_      first imaged time (in ms)\n       float  ixd =xStep_      step in positions (in m)\n       int    ixn =xNum_      number of imaged positions\n       float  ixo =xStart_      first imaged position (in m)\n       float  ppd =dipStep_      step in processed partial images\n       int    ppn =dipNum_      number of processed partial images\n       float  ppo =dipStart_      first processed partial image\n       string semb  =       output file containing semblance (auxiliary output\n              file name)\n       int    sembWindow =11      vertical window  for  semblance  calculation\n              (in samples)\n       string vel =      velocity model file (velocity in km/s) (auxiliary in‐\n              put file name)\nSOURCE\n       user/aklokov/Mdiparti.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdiparti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiparti3-Tuple{}","page":"Home","title":"Madagascar.sfdiparti3","text":"sfdiparti3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiparti3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiparti3. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiparti3(1)                 Madagascar Manuals                 sfdiparti3(1)\n\nNAME\n       sfdiparti3 - diparti\n\nSYNOPSIS\n       sfdiparti3 < piFile.rsf vel=velFile.rsf > resFile.rsf semb=sembFile.rsf\n       apert=1000   sembWindow=11   gamma=1.f   xppn=dipNum_    xppo=dipStart_\n       xppd=dipStep_  yppn=sdipNum_  yppo=sdipStart_  yppd=sdipStep_ itn=tNum_\n       ixn=xNum_  iyn=yNum_  ito=tStart_  ixo=xStart_  iyo=yStart_  itd=tStep_\n       ixd=xStep_ iyd=yStep_\n\nPARAMETERS\n       float  apert =1000      diffraction summation aperture\n       float  gamma =1.f      velocity-model-accuracy parameter\n       float  itd =tStep_      step in time (in ms)\n       int    itn =tNum_      number of imaged depth samples\n       float  ito =tStart_      first imaged time (in ms)\n       float  ixd =xStep_      step in positions (in m)\n       int    ixn =xNum_      number of imaged positions\n       float  ixo =xStart_      first imaged position (in m)\n       float  iyd =yStep_      step in positions (in m)\n       int    iyn =yNum_      number of imaged positions\n       float  iyo =yStart_      first imaged position (in m)\n       string semb  =       output file containing semblance (auxiliary output\n              file name)\n       int    sembWindow =11      vertical window  for  semblance  calculation\n              (in samples)\n       string vel =      velocity model file (velocity in km/s) (auxiliary in‐\n              put file name)\n       float  xppd =dipStep_      step in processed partial images\n       int    xppn =dipNum_      number of processed partial images\n       float  xppo =dipStart_      first processed partial image\n       float  yppd =sdipStep_      step in processed partial images\n       int    yppn =sdipNum_      number of processed partial images\n       float  yppo =sdipStart_      first processed partial image\nSOURCE\n       user/aklokov/Mdiparti3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdiparti3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipcoh-Tuple{}","page":"Home","title":"Madagascar.sfdipcoh","text":"sfdipcoh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipcoh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipcoh. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipcoh(1)                   Madagascar Manuals                   sfdipcoh(1)\n\nNAME\n       sfdipcoh - 3D Coherence cube\n\nSYNOPSIS\n       sfdipcoh  <  in.rsf  >  out.rsf dip1=dip1.rsf dip2=dip2.rsf nw=5 twod=y\n       verb=y lag1=3 lag2=3\n\nPARAMETERS\n       string dip1 =      auxiliary input file name\n       file   dip2 =      auxiliary input file name\n       int    lag1 =3      maximal time lag on 2nd axis\n       int    lag2 =3      maximal time lag on 3rd axis\n       int    nw =5      half window size for coherence\n       bool   twod =y [y/n]     y: only twod coherence\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chen/Mdipcoh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdipcoh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipfilter-Tuple{}","page":"Home","title":"Madagascar.sfdipfilter","text":"sfdipfilter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipfilter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipfilter. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipfilter(1)                Madagascar Manuals                sfdipfilter(1)\n\nNAME\n       sfdipfilter - Filter data based on dip in 2-D or 3-D.\n\nSYNOPSIS\n       sfdipfilter  < in.rsf > out.rsf dim=2 angle=n v=-1. ang1=-50. ang2=-45.\n       ang3=45. ang4=50. v1=0. v2=0.1 v3=99999. v4=999999. pass=y\n\nCOMMENTS\n       February        2014        program        of        the         month:\n       http://ahay.org/blog/2014/02/06/program-of-the-month-sfdipfilter/\n\nPARAMETERS\n       float  ang1 =-50.  ®\n       float  ang2 =-45.  ®\n       float  ang3 =45.  ®\n       float  ang4 =50.       Angle gate (in degrees)\n       bool   angle =n [y/n]     Filter based on angle (or velocity)\n       int    dim =2 [2,3]     Dimensionality: filter 2-D planes or 3-D cubes\n       bool   pass =y [y/n]     Pass or reject band\n       float  v  =-1.       constant velocity (if angle-y)         The default\n              is d(frequency)/d(wavenumber)\n       float  v1 =0.  ®\n       float  v2 =0.1 ®\n       float  v3 =99999.  ®\n       float  v4 =999999.       Velocity gate\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Mdipfilter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdipfilter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipflt-Tuple{}","page":"Home","title":"Madagascar.sfdipflt","text":"sfdipflt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipflt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipflt. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipflt(1)                   Madagascar Manuals                   sfdipflt(1)\n\nNAME\n       sfdipflt - 2D dip filter\n\nSYNOPSIS\n       sfdipflt < in.rsf > out.rsf dip=dip.rsf nf=1 interp= filt=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       string filt =      filter type: [median],mean\n       string interp =      interpolation method: [nearest],linear\n       int    nf =1      filter length\nSOURCE\n       user/chen/Mdipflt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdipflt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiphase-Tuple{}","page":"Home","title":"Madagascar.sfdiphase","text":"sfdiphase(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiphase on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiphase. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiphase(1)                  Madagascar Manuals                  sfdiphase(1)\n\nNAME\n       sfdiphase - Derivative of local frequency.\n\nSYNOPSIS\n       sfdiphase  <  df.rsf  sig=in.rsf  >  out.rsf verb=n niter=100 order=100\n       ref=1. hertz=n rect#=(1,1,...)\n\nPARAMETERS\n       bool   hertz =n [y/n]     if y, convert output to Hertz\n       int    niter =100      number of iterations\n       int    order =100      Hilbert transformer order\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       file   sig =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fomels/Mdiphase.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdiphase(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipl-Tuple{}","page":"Home","title":"Madagascar.sfdipl","text":"sfdipl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipl. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipl(1)                     Madagascar Manuals                     sfdipl(1)\n\nNAME\n       sfdipl - large dip calculation via PWD\n\nSYNOPSIS\n       sfdipl  < in.rsf > out.rsf m=1 n=1 rect1=0 rect2=0 niter=5 liter=20 ra‐\n       dius=1.0 eta=0.5 dip0=0.0 verb=n slope=n interp=\n\nPARAMETERS\n       float  dip0 =0.0      starting dip\n       float  eta =0.5      steps for iteration\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    liter =20      number of linear iterations\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    niter =5      number of iterations\n       float  radius =1.0      interpolating radius for opwd\n       int    rect1 =0      dip smoothness on 1st axis\n       int    rect2 =0      dip smoothness on 2nd axis\n       bool   slope =n [y/n]     slope (y) or dip (n) estimation\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chenyk/Mdipl.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdipl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiplet-Tuple{}","page":"Home","title":"Madagascar.sfdiplet","text":"sfdiplet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiplet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiplet. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiplet(1)                   Madagascar Manuals                   sfdiplet(1)\n\nNAME\n       sfdiplet - 2-D Seislet frame\n\nSYNOPSIS\n       sfdiplet  <  in.rsf > out.rsf dips=dip.rsf mask=mask.rsf inv=n eps=0.01\n       verb=y twhole=y decomp=n ncycle=0 niter=1 perc=50.0 order=1 type=\n\nPARAMETERS\n       bool   decomp =n [y/n]     do decomposition\n       file   dips =      auxiliary input file name\n       float  eps =0.01      regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       string mask =      (optional) data  mask  file  (auxiliary  input  file\n              name)\n       int    ncycle =0      number of iterations\n       int    niter =1      number of Bregman iterations\n       int    order =1      accuracy order\n       float  perc =50.0      percentage for sharpening\n       bool   twhole  =y  [y/n]     threshold  flag, if y, whole model, other‐\n              wise, each component\n       string type =      wavelet type (haar,linear,biorthogonal), default  is\n              linear\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mdiplet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdiplet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipln-Tuple{}","page":"Home","title":"Madagascar.sfdipln","text":"sfdipln(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipln on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipln. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipln(1)                    Madagascar Manuals                    sfdipln(1)\n\nNAME\n       sfdipln - large dip calculation via non-stationary regularization\n\nSYNOPSIS\n       sfdipln  < in.rsf > out.rsf m=1 n=1 niter=5 liter=20 radius=1.0 eta=0.5\n       dip0=0.0 verb=n slope=n eps=0.0f rect#= shift#= interp=\n\nPARAMETERS\n       float  dip0 =0.0      starting dip\n       float  eps =0.0f      regularization\n       float  eta =0.5      steps for iteration\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    liter =20      number of linear iterations\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    niter =5      number of iterations\n       float  radius =1.0      interpolating radius for opwd\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       bool   slope =n [y/n]     slope (y) or dip (n) estimation\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chenyk/Mdipln.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdipln(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipn-Tuple{}","page":"Home","title":"Madagascar.sfdipn","text":"sfdipn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipn. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipn(1)                     Madagascar Manuals                     sfdipn(1)\n\nNAME\n       sfdipn  - 3-D robust dip estimation by plane wave destruction with non-\n       stationary smoothing.\n\nSYNOPSIS\n       sfdipn < in.rsf > out.rsf mask=mask.rsf  idip=idip0.rsf  xdip=xdip0.rsf\n       both=n  n4=2  niter=5  liter=20 p0=0. q0=0. order=1 nj1=1 nj2=1 drift=n\n       verb=n pmin=-FLT_MAX pmax=+FLT_MAX qmin=-FLT_MAX qmax=+FLT_MAX eps=0.0f\n       rect#= shift#=\n\nCOMMENTS\n       The output is dimensionless (stepout in time measured in time samples).\n       also see sfdip\n\nPARAMETERS\n       bool   both =n [y/n]     if y, compute both left and right predictions\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    niter =5      number of iterations\n       int    nj1 =1      in-line antialiasing\n       int    nj2 =1      cross-line antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial in-line dip\n       float  pmax =+FLT_MAX      maximum inline dip\n       float  pmin =-FLT_MAX      minimum inline dip\n       float  q0 =0.       initial cross-line dip\n       float  qmax =+FLT_MAX      maximum cross-line dip\n       float  qmin =-FLT_MAX      minimum cross-line dip\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\n       bool   verb =n [y/n]     verbosity flag\n       string xdip =      initial cross-line dip (auxiliary input file name)\nSOURCE\n       user/chenyk/Mdipn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdipn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdipn_fb-Tuple{}","page":"Home","title":"Madagascar.sfdipn_fb","text":"sfdipn_fb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdipn_fb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdipn_fb. See ?m8r for examples.\n\nRSF Documentation\n\nsfdipnfb(1)                  Madagascar Manuals                  sfdipnfb(1)\n\nNAME\n       sfdipn_fb  -  3-D  robust dip estimation by plane wave destruction with\n       non-stationary smoothing and forward-backward space derivative calcula‐\n       tion.\n\nSYNOPSIS\n       sfdipn_fb    <    in.rsf   >   out.rsf   mask=mask.rsf   idip=idip0.rsf\n       xdip=xdip0.rsf both=n n4=2 niter=5 liter=20 p0=0. q0=0.  order=1  nj1=1\n       nj2=1   drift=n   verb=n   pmin=-FLT_MAX   pmax=+FLT_MAX  qmin=-FLT_MAX\n       qmax=+FLT_MAX eps=0.0f rect#= shift#=\n\nCOMMENTS\n       The output is dimensionless (stepout in time measured in time samples).\n       also see sfdip\n\nPARAMETERS\n       bool   both =n [y/n]     if y, compute both left and right predictions\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    niter =5      number of iterations\n       int    nj1 =1      in-line antialiasing\n       int    nj2 =1      cross-line antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial in-line dip\n       float  pmax =+FLT_MAX      maximum inline dip\n       float  pmin =-FLT_MAX      minimum inline dip\n       float  q0 =0.       initial cross-line dip\n       float  qmax =+FLT_MAX      maximum cross-line dip\n       float  qmin =-FLT_MAX      minimum cross-line dip\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       bool   verb =n [y/n]     verbosity flag\n       string xdip =      initial cross-line dip (auxiliary input file name)\nSOURCE\n       user/chenyk/Mdipn_fb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdipn_fb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdips-Tuple{}","page":"Home","title":"Madagascar.sfdips","text":"sfdips(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdips on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdips. See ?m8r for examples.\n\nRSF Documentation\n\nsfdips(1)                     Madagascar Manuals                     sfdips(1)\n\nNAME\n       sfdips  -  Estimate a number of constant dips using plane-wave destruc‐\n       tion.\n\nSYNOPSIS\n       sfdips < in.rsf > out.rsf dips= nd= order=1 nj=1 verb=n niter=10\n\nPARAMETERS\n       floats dips =      initial dips [nd]\n       int    nd =      number of dips\n       int    niter =10      number of iterations\n       int    nj =1      antialiasing\n       int    order =1 [1,2,3]   accuracy order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mdips.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdips(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiptaper-Tuple{}","page":"Home","title":"Madagascar.sfdiptaper","text":"sfdiptaper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiptaper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiptaper. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiptaper(1)                 Madagascar Manuals                 sfdiptaper(1)\n\nNAME\n       sfdiptaper  - Aperture optimization for migrated gathers in the dip-an‐\n       gle domain.\n\nSYNOPSIS\n       sfdiptaper < dipFile.rsf > taperFile.rsf dz=20.f greyarea=10.f\n\nCOMMENTS\n       Estimates a constructive imaging part of a reflection event in the dip-\n       angle  domain.   Basing on the estimation defines a stacking weight for\n       every migrated sample.\n\n       Input: dipFile.rsf - dips esitimated  in  constant-dip  subimages.  The\n       dips  are  in  degree  (!).  A positive dip corresponds to an ascending\n       boundary, a negative dip - to a descending  boundary.   A  constant-dip\n       subimage  consists  of migrated traces correspondig to the same dip-an‐\n       gle.\n\n       Output: taperFile.rsf - optimal weights for the migrated samples\n\nPARAMETERS\n       float  dz =20.f      half of a migrated wave length\n       float  greyarea =10.f      width of event tail taper (in degree)\nSOURCE\n       user/aklokov/Mdiptaper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdiptaper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiradon2-Tuple{}","page":"Home","title":"Madagascar.sfdiradon2","text":"sfdiradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiradon2(1)                 Madagascar Manuals                 sfdiradon2(1)\n\nNAME\n       sfdiradon2  - direct 2to2 hyper Radon transform (single integral, near‐\n       est point interpolation)\n\nSYNOPSIS\n       sfdiradon2 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp=\n\nPARAMETERS\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mdiradon2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdiradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiradon3-Tuple{}","page":"Home","title":"Madagascar.sfdiradon3","text":"sfdiradon3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiradon3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiradon3. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiradon3(1)                 Madagascar Manuals                 sfdiradon3(1)\n\nNAME\n       sfdiradon3 - direct 3to3 reflection/diffraction Radon transform\n\nSYNOPSIS\n       sfdiradon3  <  input.rsf > output.rsf fi= ntau= np= nq= tau0= dtau= p0=\n       dp= q0= dq=\n\nPARAMETERS\n       dp     = ®\n       dq     = ®\n       dtau   = ®\n       fi     = ®\n       np     = ®\n       nq     = ®\n       ntau   = ®\n       p0     = ®\n       q0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mdiradon3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdiradon3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiradon32-Tuple{}","page":"Home","title":"Madagascar.sfdiradon32","text":"sfdiradon32(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiradon32 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiradon32. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiradon32(1)                Madagascar Manuals                sfdiradon32(1)\n\nNAME\n       sfdiradon32 - direct azimuthally isotropic 3to2 hyper Radon transform\n\nSYNOPSIS\n       sfdiradon32 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp=\n\nPARAMETERS\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mdiradon32.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdiradon32(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiradon34-Tuple{}","page":"Home","title":"Madagascar.sfdiradon34","text":"sfdiradon34(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiradon34 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiradon34. See ?m8r for examples.\n\nRSF Documentation\n\nsfdiradon34(1)                Madagascar Manuals                sfdiradon34(1)\n\nNAME\n       sfdiradon34  - direct azimuthally anisotropic 3to4 full Radon transform\n       (double integral, nearest point interpolation)\n\nSYNOPSIS\n       sfdiradon34 < input.rsf > output.rsf fi= ntau= np= nq= ns= tau0=  dtau=\n       p0= dp= q0= dq= s0= ds=\n\nPARAMETERS\n       dp     = ®\n       dq     = ®\n       ds     = ®\n       dtau   = ®\n       fi     = ®\n       np     = ®\n       nq     = ®\n       ns     = ®\n       ntau   = ®\n       p0     = ®\n       q0     = ®\n       s0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mdiradon34.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdiradon34(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdisfil-Tuple{}","page":"Home","title":"Madagascar.sfdisfil","text":"sfdisfil(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdisfil on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdisfil. See ?m8r for examples.\n\nRSF Documentation\n\nsfdisfil(1)                   Madagascar Manuals                   sfdisfil(1)\n\nNAME\n       sfdisfil - Print out data values.\n\nSYNOPSIS\n       sfdisfil < in.rsf number=y col=0 format= header= trailer=\n\nCOMMENTS\n       Alternatively, use sfdd and convert to ASCII form.\n\nPARAMETERS\n       int    col =0      Number of columns.\n                     The default depends on the data type:\n                     10 for int and char,\n                     5 for float,\n                     3 for complex\n       string format =      Format for numbers (printf-style).\n                     The default depends on the data type:\n                     \"%4d \" for int and char,\n                     \"%13.4g\" for float,\n                     \"%10.4g,%10.4gi\" for complex\n       string header =      Optional header string to output before data\n       bool   number =y [y/n]     If number the elements\n       string trailer =      Optional trailer string to output after data\nSOURCE\n       system/main/disfil.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfdisfil\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdisfil(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdispelem-Tuple{}","page":"Home","title":"Madagascar.sfdispelem","text":"sfdispelem(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdispelem on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdispelem. See ?m8r for examples.\n\nRSF Documentation\n\nsfdispelem(1)                 Madagascar Manuals                 sfdispelem(1)\n\nNAME\n       sfdispelem - Display element of rsf files.\n\nSYNOPSIS\n       sfdispelem < in.rsf > out.rsf i1= i2=\n\nPARAMETERS\n       int    i1 =      get the index of first axis\n       int    i2 =      get the index of second axis\nSOURCE\n       user/chenyk/Mdispelem.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdispelem(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdistance-Tuple{}","page":"Home","title":"Madagascar.sfdistance","text":"sfdistance(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdistance on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdistance. See ?m8r for examples.\n\nRSF Documentation\n\nsfdistance(1)                 Madagascar Manuals                 sfdistance(1)\n\nNAME\n       sfdistance  -  Computing  distance  function  by  fast marching eikonal\n       solver (3-D).\n\nSYNOPSIS\n       sfdistance < points.rsf > dist.rsf velocity=vel.rsf n1=  n2=  n3=1  d1=\n       d2= d3=d2 o1=0. o2=0. o3=0. order=2 vel=y\n\nPARAMETERS\n       float  d1 = ®\n       float  d2 = ®\n       float  d3 =d2      sampling\n       int    n1 = ®\n       int    n2 = ®\n       int    n3 =1      dimensions\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       float  o3 =0.       origin\n       int    order =2 [1,2]     Accuracy order\n       bool   vel  =y  [y/n]     if  y,  the  input  is  velocity; n, slowness\n              squared\n       string velocity =      auxiliary input file name\nSOURCE\n       user/fomels/Mdistance.c\nVERSION\n       4.2-git Meikonal.c 825 2004-10-07 08:11:17Z fomels\n\nMadagascar                         JULY 2024                     sfdistance(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdistmap-Tuple{}","page":"Home","title":"Madagascar.sfdistmap","text":"sfdistmap(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdistmap on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdistmap. See ?m8r for examples.\n\nRSF Documentation\n\nsfdistmap(1)                  Madagascar Manuals                  sfdistmap(1)\n\nNAME\n       sfdistmap -\n\nSYNOPSIS\n       sfdistmap < Fin.rsf > Fout.rsf verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jyan/Mdistmap.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdistmap(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdistpaint-Tuple{}","page":"Home","title":"Madagascar.sfdistpaint","text":"sfdistpaint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdistpaint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdistpaint. See ?m8r for examples.\n\nRSF Documentation\n\nsfdistpaint(1)                Madagascar Manuals                sfdistpaint(1)\n\nNAME\n       sfdistpaint - Geologic distance painting by plane-wave construction.\n\nSYNOPSIS\n       sfdistpaint  <  dip.rsf  >  out.rsf  seed=seed.rsf  flt=flt.rsf  verb=n\n       eps=0.01 i0=0 order=1 faultscale=100.\n\nPARAMETERS\n       float  eps =0.01      regularization\n       float  faultscale =100.       Fault attribute  scaling  factor  (0.0  ~\n              factor)\n       string flt =      auxiliary input file name\n       int    i0 =0      reference trace\n       int    order =1      accuracy order\n       string seed =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mdistpaint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdistpaint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdistpaint3D-Tuple{}","page":"Home","title":"Madagascar.sfdistpaint3D","text":"sfdistpaint3D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdistpaint3D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdistpaint3D. See ?m8r for examples.\n\nRSF Documentation\n\nsfdistpaint3D(1)              Madagascar Manuals              sfdistpaint3D(1)\n\nNAME\n       sfdistpaint3D - 3-D painting by plane-wave construction.\n\nSYNOPSIS\n       sfdistpaint3D   <   dip.rsf   >   out.rsf   seed=seed.rsf   flt=flt.rsf\n       cost=cost.rsf verb=n eps=0.01 ref2=0 ref3=0 order=1 faultscale=100.\n\nPARAMETERS\n       file   cost =      auxiliary input file name\n       float  eps =0.01      regularization\n       float  faultscale =100.       Fault attribute  scaling  factor  (0.0  ~\n              factor)\n       file   flt =      auxiliary input file name\n       int    order =1      accuracy order\n       int    ref2 =0 ®\n       int    ref3 =0      reference trace\n       file   seed =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mdistpaint3D.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfdistpaint3D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfditime2d-Tuple{}","page":"Home","title":"Madagascar.sfditime2d","text":"sfditime2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfditime2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfditime2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfditime2d(1)                 Madagascar Manuals                 sfditime2d(1)\n\nNAME\n       sfditime2d  -  2D Hybrid Radon transform for diffraction imaging in the\n       time dip-angle domain\n\nSYNOPSIS\n       sfditime2d <  in.rsf  >  out.rsf  dweight=fileDweight.rsf  reflMod=fil‐\n       eRefl.rsf  verb=n adj=n isAA=n liter=100 niter=0 eps=0. verb=n invMod=2\n       dip0n= dip0d= dip0o= xin= xid= xio= dipn= dipo= dipd=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  dip0d =      dip0 sampling (if adj=y)\n       int    dip0n =      number of dip0 values (if adj=y)\n       float  dip0o =      dip0 origin (if adj=y)\n       float  dipd =      offset sampling\n       int    dipn =      number of offsets\n       float  dipo =      offset origin\n       string dweight =      input file containing data weights (auxiliary in‐\n              put file name)\n       float  eps =0.       regularization parameter\n       int    invMod =2      number of nonlinear iterations (for inversion)\n       bool   isAA =n [y/n]     if y, apply anti-aliasing\n       int    liter =100      number of linear iterations (for inversion)\n       int    niter =0      number of nonlinear iterations (for inversion)\n       file   reflMod =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\n       float  xid =      xi sampling (if adj=y)\n       int    xin =      number of xi values (if adj=y)\n       float  xio =      xi origin (if adj=y)\nSOURCE\n       user/aklokov/Mditime2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfditime2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfditime3d-Tuple{}","page":"Home","title":"Madagascar.sfditime3d","text":"sfditime3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfditime3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfditime3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfditime3d(1)                 Madagascar Manuals                 sfditime3d(1)\n\nNAME\n       sfditime3d  -  3D Hybrid Radon transform for diffraction imaging in the\n       time dip-angle domain\n\nSYNOPSIS\n       sfditime3d <  in.rsf  >  out.rsf  dweight=fileDweight.rsf  reflMod=fil‐\n       eRefl.rsf  verb=n adj=n isAA=n liter=100 niter=0 eps=0. verb=n invMod=2\n       dip0n= dip0d= dip0o= sdip0n= sdip0d= sdip0o= xin= xid= xio= sxin= sxid=\n       sxio= dipn= dipo= dipd= sdipn= sdipo= sdipd=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  dip0d =      dip0 sampling (if adj=y)\n       int    dip0n =      number of dip0 values (if adj=y)\n       float  dip0o =      dip0 origin (if adj=y)\n       float  dipd =      dip sampling in x-direction\n       int    dipn =      number of dips in x-direction\n       float  dipo =      dip origin in x-direction\n       string dweight =      input file containing data weights (auxiliary in‐\n              put file name)\n       float  eps =0.       regularization parameter\n       int    invMod =2      number of nonlinear iterations (for inversion)\n       bool   isAA =n [y/n]     if y, apply anti-aliasing\n       int    liter =100      number of linear iterations (for inversion)\n       int    niter =0      number of nonlinear iterations (for inversion)\n       file   reflMod =      auxiliary output file name\n       float  sdip0d =      sdip0 sampling (if adj=y)\n       int    sdip0n =      number of sdip0 values (if adj=y)\n       float  sdip0o =      sdip0 origin (if adj=y)\n       float  sdipd =      dip sampling in y-direction\n       int    sdipn =      number of dips in y-direction\n       float  sdipo =      dip origin in y-direction\n       float  sxid =      xi sampling (if adj=y)\n       int    sxin =      number of xi values (if adj=y)\n       float  sxio =      xi origin (if adj=y)\n       bool   verb =n [y/n]     verbosity flag\n       float  xid =      xi sampling (if adj=y)\n       int    xin =      number of xi values (if adj=y)\n       float  xio =      xi origin (if adj=y)\nSOURCE\n       user/aklokov/Mditime3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfditime3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdiv-Tuple{}","page":"Home","title":"Madagascar.sfdiv","text":"sfdiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdiv. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdivn-Tuple{}","page":"Home","title":"Madagascar.sfdivn","text":"sfdivn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdivn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdivn. See ?m8r for examples.\n\nRSF Documentation\n\nsfdivn(1)                     Madagascar Manuals                     sfdivn(1)\n\nNAME\n       sfdivn - Smooth division.\n\nSYNOPSIS\n       sfdivn  <  fnum.rsf  den=fden.rsf  > frat.rsf niter=100 verb=y eps=0.0f\n       rect#=(1,1,...)\n\nCOMMENTS\n       December        2015        program        of        the         month:\n       http://ahay.org/blog/2015/12/22/program-of-the-month-sfdivn/\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mdivn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdivn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdivn2d-Tuple{}","page":"Home","title":"Madagascar.sfdivn2d","text":"sfdivn2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdivn2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdivn2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfdivn2d(1)                   Madagascar Manuals                   sfdivn2d(1)\n\nNAME\n       sfdivn2d - 2D divn\n\nSYNOPSIS\n       sfdivn2d  <  inp.rsf  den=den.rsf  >  out.rsf rect1=1 rect2=1 niter=100\n       verb=n\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing radius\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/chen/Mdivn2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdivn2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdivnls-Tuple{}","page":"Home","title":"Madagascar.sfdivnls","text":"sfdivnls(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdivnls on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdivnls. See ?m8r for examples.\n\nRSF Documentation\n\nsfdivnls(1)                   Madagascar Manuals                   sfdivnls(1)\n\nNAME\n       sfdivnls - 2D divn by stationary LS\n\nSYNOPSIS\n       sfdivnls  < inp.rsf den=den.rsf > out.rsf rect1=0 rect2=0 rect3=0 tls=n\n       angle=n\n\nPARAMETERS\n       bool   angle =n [y/n]     angle or slope\n       file   den =      auxiliary input file name\n       int    rect1 =0 ®\n       int    rect2 =0 ®\n       int    rect3 =0      smoothing radius\n       bool   tls =n [y/n]     total least squares\nSOURCE\n       user/chen/Mdivnls.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdivnls(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdivnp-Tuple{}","page":"Home","title":"Madagascar.sfdivnp","text":"sfdivnp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdivnp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdivnp. See ?m8r for examples.\n\nRSF Documentation\n\nsfdivnp(1)                    Madagascar Manuals                    sfdivnp(1)\n\nNAME\n       sfdivnp - OpenMP Parallelized  Smooth division.\n\nSYNOPSIS\n       sfdivnp  <  fnum.rsf  den=fden.rsf > frat.rsf niter=100 verb=y eps=0.0f\n       rect#=(1,1,...)\n\nCOMMENTS\nPARAMETERS\n       file   den =      auxiliary input file name\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/luke/Mdivnp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdivnp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdix-Tuple{}","page":"Home","title":"Madagascar.sfdix","text":"sfdix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdix. See ?m8r for examples.\n\nRSF Documentation\n\nsfdix(1)                      Madagascar Manuals                      sfdix(1)\n\nNAME\n       sfdix  - Convert RMS to interval velocity using LS and shaping regular‐\n       ization.\n\nSYNOPSIS\n       sfdix  <  vrms.rsf  >   vint.rsf   weight=weight.rsf   vrmsout=vout.rsf\n       niter=100 rect#=(1,1,...)\n\nPARAMETERS\n       int    niter =100      maximum number of iterations\n       string rect# =(1,1,...)       smoothing radius on #-th axis\n       string vrmsout =      optionally, output predicted vrms (auxiliary out‐\n              put file name)\n       string weight =      auxiliary input file name\nUSED IN\n       bei/vela/vscan\nSOURCE\n       user/fomels/Mdix.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdixshape-Tuple{}","page":"Home","title":"Madagascar.sfdixshape","text":"sfdixshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdixshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdixshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfdixshape(1)                 Madagascar Manuals                 sfdixshape(1)\n\nNAME\n       sfdixshape - Convert RMS to interval velocity using LS and shaping reg‐\n       ularization.\n\nSYNOPSIS\n       sfdixshape  <  vrms.rsf  >   vint.rsf   weight=weight.rsf   dip=dip.rsf\n       prior=prior.rsf   vrmsout=vout.rsf   rect1=3   rect2=3  lam=1.  order=1\n       niter=100 rect1= rect2= ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  lam =1.       operator scaling for inversion\n       int    niter =100      maximum number of iterations\n       int    order =1      accuracy order\n       string prior =      prior velocity model (auxiliary input file name)\n       int    rect1 =3 ®\n       int    rect2 =3      smoothing radius\n       string vrmsout =      optionally, output predicted vrms (auxiliary out‐\n              put file name)\n       file   weight =      auxiliary input file name\nSOURCE\n       user/pwd/Mdixshape.c\nVERSION\n       4.2-git Mdix.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                     sfdixshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdlct-Tuple{}","page":"Home","title":"Madagascar.sfdlct","text":"sfdlct(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdlct on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdlct. See ?m8r for examples.\n\nRSF Documentation\n\nsfdlct(1)                     Madagascar Manuals                     sfdlct(1)\n\nNAME\n       sfdlct - discrete linear chirp transfrom (DLCT)\n\nSYNOPSIS\n       sfdlct < in.rsf > out.rsf inv=n verb=n C=0.005 L=\n\nPARAMETERS\n       float  C =0.005      C=2*Lambda/L, unit slice\n       int    L = ®\n       bool   inv =n [y/n]     if y, do inverse transform (Here adjoint is the\n              same as inverse!)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pyang/Mdlct.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdlct(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdmeig-Tuple{}","page":"Home","title":"Madagascar.sfdmeig","text":"sfdmeig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdmeig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdmeig. See ?m8r for examples.\n\nRSF Documentation\n\nsfdmeig(1)                    Madagascar Manuals                    sfdmeig(1)\n\nNAME\n       sfdmeig - Find eigenvalues and eigenvectors of an spd matrix.\n\nSYNOPSIS\n       sfdmeig < mat.rsf eval=evals.rsf > evecs.rsf\n\nPARAMETERS\n       file   eval =      auxiliary output file name\nSOURCE\n       user/mccowan/Mdmeig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdmeig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdmigda-Tuple{}","page":"Home","title":"Madagascar.sfdmigda","text":"sfdmigda(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdmigda on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdmigda. See ?m8r for examples.\n\nRSF Documentation\n\nsfdmigda(1)                   Madagascar Manuals                   sfdmigda(1)\n\nNAME\n       sfdmigda - 2D depth scattering-angle Kirchhoff migration\n\nSYNOPSIS\n       sfdmigda < dataFile.rsf vel=velFile.rsf > imageFile.rsf dag=dagFile.rsf\n       cig=acigFile.rsf mcig=mcigFile.rsf esct=tEscFile.rsf  escx=xEscFile.rsf\n       axis2label=0  isAA=y  izn=dp.zNum ixn=dp.xNum iyn=rp.is3D ? vp.yNum : 1\n       izo=dp.zStart  ixo=dp.xStart  iyo=dp.yStart  izd=dp.zStep  ixd=dp.xStep\n       iyd=dp.yStep  dipn=161 dipo=-80.f dipd=1.f iscatn=1 iscato=0.f iscatd=2\n       * gp.dipStep ttd=0.002f ttn=(int) floor(0.001 * 0.5 * maxTime /  ttStep\n       +  1) ttrayd=gp.dipStep / 2.f ttrayo=minttRay ttrayn=(int) floor((maxt‐\n       tRay - minttRay) / ttRayStep + 1)\n\nPARAMETERS\n       int    axis2label =0      0 - shot; 1 - cmp; 2 - receiver\n       string cig =      output file containing CIGs in  the  scattering-angle\n              domain (auxiliary output file name)\n       string dag  =       output file containing CIGs in the dip-angle domain\n              (auxiliary output file name)\n       float  dipd =1.f      step in dip-angle\n       int    dipn =161      number of dip-angles\n       float  dipo =-80.f      first dip-angle\n       string esct =      output file containing escqpe times (auxiliary  out‐\n              put file name)\n       string escx  =       output file containing escape positions (auxiliary\n              output file name)\n       bool   isAA =y [y/n]     if y, apply anti-aliasing\n       float  iscatd =2 * gp.dipStep      scattering-angle increment  (in  de‐\n              gree)\n       int    iscatn =1      number of scattering-angles\n       float  iscato =0.f      first scattering-angle (in degree)\n       float  ixd =dp.xStep      step in inlines (in meters)\n       int    ixn =dp.xNum      number of imaged inlines\n       float  ixo =dp.xStart      first imaged inline (in meters)\n       float  iyd =dp.yStep      step in crosslines (in meters)\n       int    iyn =rp.is3D ? vp.yNum : 1      number of imaged crosslines\n       float  iyo =dp.yStart      first imaged crossline (in meters)\n       float  izd =dp.zStep      step in depth (in meters)\n       int    izn =dp.zNum      number of imaged depth samples\n       float  izo =dp.zStart      first imaged depth (in meters)\n       string mcig  =      output file containing multi-CIGs (in the dip-angle\n              and the scattering-angle  domain  both  (auxiliary  output  file\n              name)\n       float  ttd =0.002f      travel-times increment\n       int    ttn   =(int)   floor(0.001  *  0.5  *  maxTime  /  ttStep  +  1)\n                   travel-times number\n       float  ttrayd =gp.dipStep / 2.f      travel-times rays increment\n       int    ttrayn =(int) floor((maxttRay  -  minttRay)  /  ttRayStep  +  1)\n                   travel-times rays number\n       float  ttrayo =minttRay      travel-times rays start\n       string vel  =      velocity model file (velocity in m/s) (auxiliary in‐\n              put file name)\nSOURCE\n       user/aklokov/Mdmigda.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdmigda(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdmo-Tuple{}","page":"Home","title":"Madagascar.sfdmo","text":"sfdmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfdmo(1)                      Madagascar Manuals                      sfdmo(1)\n\nNAME\n       sfdmo - Kirchhoff DMO with antialiasing by reparameterization.\n\nSYNOPSIS\n       sfdmo  < in.rsf > out.rsf mint=2 n=32 adj=y inv=n type=1 h= half=y vel‐\n       half=0.75\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       float  h = ®\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       bool   inv =n [y/n]     inversion flag\n       int    mint =2      starting time sample\n       int    n =32      number of offset samples\n       int    type =1      type of amplitude (0,1,2,3)\n       float  velhalf =0.75      half-velocity\nUSED IN\n       bei/dpmv/krchdmo\n       bei/dpmv/matt\nSOURCE\n       system/seismic/Mdmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdoc-Tuple{}","page":"Home","title":"Madagascar.sfdoc","text":"sfdoc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdoc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdoc. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdoeps-Tuple{}","page":"Home","title":"Madagascar.sfdoeps","text":"sfdoeps(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdoeps on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdoeps. See ?m8r for examples.\n\nRSF Documentation\n\nsfdoeps(1)                    Madagascar Manuals                    sfdoeps(1)\n\nNAME\n       sfdoeps - 2D dip-oriented edge-preserving smoothing (DOEPS).\n\nSYNOPSIS\n       sfdoeps < in.rsf > out.rsf dip=dip.rsf nfw= nw= boundary=y verb=n\n\nPARAMETERS\n       bool   boundary =y [y/n]     if y, boundary is data, whereas zero\n       file   dip =      auxiliary input file name\n       int    nfw =      filter-window length (positive and odd integer)\n       int    nw =      data-window length (positive and odd integer)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mdoeps.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdoeps(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdomf-Tuple{}","page":"Home","title":"Madagascar.sfdomf","text":"sfdomf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdomf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdomf. See ?m8r for examples.\n\nRSF Documentation\n\nsfdomf(1)                     Madagascar Manuals                     sfdomf(1)\n\nNAME\n       sfdomf - 2D dip-oriented median/mean filter (DOMF).\n\nSYNOPSIS\n       sfdomf < in.rsf > out.rsf dip=dip.rsf nw= boundary=y stack=n verb=n\n\nPARAMETERS\n       bool   boundary =y [y/n]     if y, boundary is data, whereas zero\n       file   dip =      auxiliary input file name\n       int    nw =      data-window length (positive and odd integer)\n       bool   stack =n [y/n]     if y, mean filter, whereas median filter\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mdomf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdomf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdominantf-Tuple{}","page":"Home","title":"Madagascar.sfdominantf","text":"sfdominantf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdominantf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdominantf. See ?m8r for examples.\n\nRSF Documentation\n\nsfdominantf(1)                Madagascar Manuals                sfdominantf(1)\n\nNAME\n       sfdominantf   -  Calculate  dominant  frequency  of  amplitude  spectra\n       dataset.\n\nSYNOPSIS\n       sfdominantf < in.rsf\n\nSOURCE\n       user/yliu/Mdominantf.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdominantf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdonf-Tuple{}","page":"Home","title":"Madagascar.sfdonf","text":"sfdonf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdonf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdonf. See ?m8r for examples.\n\nRSF Documentation\n\nsfdonf(1)                     Madagascar Manuals                     sfdonf(1)\n\nNAME\n       sfdonf - 2D dip-oriented nonlocal (bilateral) smoothing.\n\nSYNOPSIS\n       sfdonf  <  in.rsf  > out.rsf dip=dip.rsf nfw= nw= boundary=y verb=n bx=\n       gauss=n repeat=1 ax=\n\nPARAMETERS\n       float  ax =      Gaussian weight for the range distance\n       bool   boundary =y [y/n]     if y, boundary is data, whereas zero\n       float  bx =      exponential weight for the domain distance  (different\n              if gaussian)\n       file   dip =      auxiliary input file name\n       bool   gauss  =n  [y/n]     if  y,  Gaussian  weight,  whereas Triangle\n              weight\n       int    nfw =      filter-window length (positive and odd integer)\n       int    nw =      data-window length (positive and odd integer)\n       int    repeat =1      repeat filtering several times\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mdonf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdonf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdonut-Tuple{}","page":"Home","title":"Madagascar.sfdonut","text":"sfdonut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdonut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdonut. See ?m8r for examples.\n\nRSF Documentation\n\nsfdonut(1)                    Madagascar Manuals                    sfdonut(1)\n\nNAME\n       sfdonut - Donut filter\n\nSYNOPSIS\n       sfdonut data=data.rsf < hole.rsf > filt.rsf adj=n na=\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   data =      auxiliary input file name\n       int    na = ®\nSOURCE\n       user/fomels/Mdonut.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdonut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdots-Tuple{}","page":"Home","title":"Madagascar.sfdots","text":"sfdots(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdots on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdots. See ?m8r for examples.\n\nRSF Documentation\n\nsfdots(1)                     Madagascar Manuals                     sfdots(1)\n\nNAME\n       sfdots - Plot signal with lollipops.\n\nSYNOPSIS\n       sfdots  <  in.rsf  labels= dots=(n1 <= 130)? 1: 0 seemean=(bool) (n2 <=\n       30) strings=(bool) (n1 <= 400) connect=1 corners= silk=n gaineach=y la‐\n       belsz=8  yreverse=n constsep=n seedead=n transp=n xxscale=1. yyscale=1.\n       clip=-1.  overlap=0.9   screenratio=VP_SCREEN_RATIO   screenht=VP_STAN‐\n       DARD_HEIGHT  screenwd=screenhigh / screenratio radius=dd1/3 font=-1 la‐\n       bel1= unit1= title= > plot.vpl\n\nCOMMENTS\n       The axis is displayed only if label1= is present in the input  file  or\n       the command line.\n\nPARAMETERS\n       float  clip =-1.       data clip\n       int    connect =1      connection type: 1 - diagonal, 2 - bar, 4 - only\n              for non-zero data\n       bool   constsep =n [y/n]     if y, use constant trace separation\n       int    corners =      number of polygon corners (default is 6)\n       int    dots =(n1 <= 130)? 1: 0      type of dots: 1 - baloon,  0  -  no\n              dots, 2 - only for non-zero data\n       int    font =-1      font to use in text\n       bool   gaineach =y [y/n]     if y, gain each trace independently\n       string label1 =      label for the axis\n       strings\n              labels =      trace labels [n2]\n       int    labelsz =8      label size\n       float  overlap =0.9      trace overlap\n       float  radius =dd1/3      dot radius\n       float  screenht =VP_STANDARD_HEIGHT      screen height\n       float  screenratio =VP_SCREEN_RATIO      screen aspect ratio\n       float  screenwd =screenhigh / screenratio      screen width\n       bool   seedead =n [y/n]     if y, show zero traces\n       bool   seemean =(bool) (n2 <= 30) [y/n]     if y, draw axis lines\n       bool   silk =n [y/n]     if y, silky plot\n       bool   strings =(bool) (n1 <= 400) [y/n]     if y, draw strings\n       string title =      plot title\n       bool   transp =n [y/n]     if y, transpose the axis\n       string unit1 =      unit for the axis\n       float  xxscale =1.       x scaling\n       bool   yreverse =n [y/n]     if y, reverse y axis\n       float  yyscale =1.       y scaling\nUSED IN\n       bei/conj/causint\n       bei/dwnc/sigmoid\n       bei/ft1/autocor\n       bei/krch/sep73\n       bei/trimo/all\n       bei/trimo/mig\n       bei/trimo/mod\n       bei/trimo/veltran\n       bei/vela/stack\n       bei/vela/strat\n       bei/vela/vscan\nSOURCE\n       plot/main/dots.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdots(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdottest-Tuple{}","page":"Home","title":"Madagascar.sfdottest","text":"sfdottest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdottest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdottest. See ?m8r for examples.\n\nRSF Documentation\n\nsfdottest(1)                  Madagascar Manuals                  sfdottest(1)\n\nNAME\n       sfdottest - Generic dot-product test for linear operators with adjoints\n\nSYNOPSIS\n       sfdottest mod=mod.rsf dat=dat.rsf > pip.rsf\n\nPARAMETERS\n       file   dat =      auxiliary input file name\n       file   mod =      auxiliary input file name\nSOURCE\n       system/main/dottest.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfdottest\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdottest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdottestmpi-Tuple{}","page":"Home","title":"Madagascar.sfdottestmpi","text":"sfdottestmpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdottestmpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdottestmpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfdottestmpi(1)               Madagascar Manuals               sfdottestmpi(1)\n\nNAME\n       sfdottestmpi  -  Generic dot-product test for linear operators with ad‐\n       joints\n\nSYNOPSIS\n       sfdottestmpi mod=mod.rsf dat=dat.rsf\n\nCOMMENTS\n       In this version, the linear operator program uses --input and  --output\n       instead of stdin and stdout.\n\nPARAMETERS\n       file   dat =      auxiliary input file name\n       file   mod =      auxiliary input file name\nSOURCE\n       system/main/dottestmpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdottestmpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdowmf-Tuple{}","page":"Home","title":"Madagascar.sfdowmf","text":"sfdowmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdowmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdowmf. See ?m8r for examples.\n\nRSF Documentation\n\nsfdowmf(1)                    Madagascar Manuals                    sfdowmf(1)\n\nNAME\n       sfdowmf - 2D dip-oriented weighted median filter (DOWMF).\n\nSYNOPSIS\n       sfdowmf  <  in.rsf  >  out.rsf dip=dip.rsf nw= rect=nw boundary=y var=n\n       verb=n\n\nPARAMETERS\n       bool   boundary =y [y/n]     if y, boundary is data, whereas zero\n       file   dip =      auxiliary input file name\n       int    nw =      data-window length (positive and odd integer)\n       int    rect =nw      Correlation window\n       bool   var =n [y/n]     if y,  variance  weights,  whereas  correlation\n              weights\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mdowmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdowmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdpeiko-Tuple{}","page":"Home","title":"Madagascar.sfdpeiko","text":"sfdpeiko(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdpeiko on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdpeiko. See ?m8r for examples.\n\nRSF Documentation\n\nsfdpeiko(1)                   Madagascar Manuals                   sfdpeiko(1)\n\nNAME\n       sfdpeiko - 2-D eikonal solver based on dynamic programming.\n\nSYNOPSIS\n       sfdpeiko < vel.rsf > ttime.rsf ishot=(n1-1)/2\n\nPARAMETERS\n       int    ishot =(n1-1)/2      shot location\nSOURCE\n       user/fomels/Mdpeiko.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfdpeiko(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdrayinte-Tuple{}","page":"Home","title":"Madagascar.sfdrayinte","text":"sfdrayinte(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdrayinte on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdrayinte. See ?m8r for examples.\n\nRSF Documentation\n\nsfdrayinte(1)                 Madagascar Manuals                 sfdrayinte(1)\n\nNAME\n       sfdrayinte - 2D Dynamic Ray Tracing\n\nSYNOPSIS\n       sfdrayinte   <   in.rsf   >   out.rsf  deriv=deriv.rsf  t0=0.  shift=1.\n       source=o[1]+(n[1]-1)/2*d[1]\n\nPARAMETERS\n       string deriv =      auxiliary input file name\n       float  shift =1.       complex source shift\n       float  source =o[1]+(n[1]-1)/2*d[1]      source location\n       float  t0 =0.       time origin at source\nSOURCE\n       user/llisiw/Mdrayinte.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdrayinte(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdrays-Tuple{}","page":"Home","title":"Madagascar.sfdrays","text":"sfdrays(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdrays on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdrays. See ?m8r for examples.\n\nRSF Documentation\n\nsfdrays(1)                    Madagascar Manuals                    sfdrays(1)\n\nNAME\n       sfdrays - 2D dynamic ray tracing by a Runge-Kutta integrator.\n\nSYNOPSIS\n       sfdrays  <  vel.rsf > gbeam.rsf shotfile=shots.rsf anglefile=angles.rsf\n       rays=rays.rsf dmat=dmat.rsf proj=proj.rsf mask=mask.rsf  vel=y  order=4\n       nt=  dt=  verb=y  shift=0.5  zshot=0.  yshot=o[1]+0.5*(n[1]-1)*d[1] nr=\n       a0=0. amax=360.\n\nCOMMENTS\n       Angle is 90 deg along y-axis and 180 deg along z-axis, clockwise.\n\nPARAMETERS\n       float  a0 =0.       minimum angle (if no anglefile)\n       float  amax =360.       maximum angle (if no anglefile)\n       string anglefile =      file with initial angles [nr,nshot]  (auxiliary\n              input file name)\n       string dmat =      auxiliary output file name\n       float  dt =      Sampling in time\n       string mask =      auxiliary output file name\n       int    nr =      number of angles (if no anglefile)\n       int    nt =      Number of time steps\n       int    order =4      Interpolation order\n       string proj =      auxiliary output file name\n       string rays =      auxiliary output file name\n       float  shift =0.5      Complex source shift\n       string shotfile  =       file  with  shot locations [zshot,yshot,nshot]\n              (auxiliary input file name)\n       bool   vel =y [y/n]     If y, input is velocity; if n, slowness\n       bool   verb =y [y/n]     Verbosity flag\n       float  yshot =o[1]+0.5*(n[1]-1)*d[1] ®\n       float  zshot =0.  ®\nSOURCE\n       user/llisiw/Mdrays.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdrays(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsmooth-Tuple{}","page":"Home","title":"Madagascar.sfdsmooth","text":"sfdsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsmooth(1)                  Madagascar Manuals                  sfdsmooth(1)\n\nNAME\n       sfdsmooth - Multi-dimensional triangle smoothing - derivative.\n\nSYNOPSIS\n       sfdsmooth < in.rsf > out.rsf ider=0 repeat=1 nderiv=6 rect#=(1,1,...)\n\nPARAMETERS\n       int    ider =0      direction of the derivative (0 means no derivative)\n       int    nderiv =6      derivative filter accuracy\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat smoothing several times\nSOURCE\n       system/generic/Mdsmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsr-Tuple{}","page":"Home","title":"Madagascar.sfdsr","text":"sfdsr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsr. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsr(1)                      Madagascar Manuals                      sfdsr(1)\n\nNAME\n       sfdsr  -  Prestack  2-D  VTI  v(z) modeling/migration by DSR with angle\n       gathers.\n\nSYNOPSIS\n       sfdsr < in.rsf >  out.rsf  velocity=vel.rsf  velz=velz.rsf  eta=eta.rsf\n       inv=n  eps=0.01  depth=n  na=1 da=90. nt= dt= t0=0. nh= dh= nz=nt dz=dt\n       vel= vz=v0 n=0.0 nw=nt2/2+1 rule= arule=\n\nPARAMETERS\n       string arule =      angle gather rule\n       float  da =90.       angle sampling (in degrees)\n       bool   depth =n [y/n]     if true, depth migration\n       float  dh =      Offset sampling (for modeling)\n       float  dt =      Sampling of time axis (for modeling)\n       float  dz =dt      Sampling of depth axis (for migration, if no  veloc‐\n              ity file)\n       float  eps =0.01      Stabilization parameter\n       string eta =      auxiliary input file name\n       bool   inv =n [y/n]     If y, modeling; If n, migration\n       float  n =0.0      Constant eta (if no velocity file)\n       int    na =1      number of angles\n       int    nh =      Number of offsets (for modeling)\n       int    nt =      Length of time axis (for modeling)\n       int    nw =nt2/2+1      Maximum number of frequencies\n       int    nz  =nt      Length of depth axis (for migration, if no velocity\n              file)\n       string rule =      phase-shift interpolation  rule  (simple,  midpoint,\n              linear, anisotropic, dti)\n       float  t0 =0.  ®\n       float  vel =      Constant velocity (if no velocity file)\n       string velocity  =       file with velocity (file with velocity (auxil‐\n              iary input file name))\n       string velz =      auxiliary input file name\n       float  vz =v0      Constant vertical velocity (if no velocity file)\nSOURCE\n       system/seismic/Mdsr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdsr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsr2-Tuple{}","page":"Home","title":"Madagascar.sfdsr2","text":"sfdsr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsr2(1)                     Madagascar Manuals                     sfdsr2(1)\n\nNAME\n       sfdsr2 - 2-D prestack modeling/migration with split-step DSR.\n\nSYNOPSIS\n       sfdsr2  <  in.rsf > out.rsf slowness=vel.rsf inv=n verb=n eps=0.01 nt=1\n       nr=1 dt=0.004 npad=0 nw= dw= w0=0.\n\nPARAMETERS\n       float  dt =0.004      time error\n       float  dw =      Frequency sampling (for modeling)\n       float  eps =0.01      stability parameter\n       bool   inv =n [y/n]     If y, modeling; if n, migration\n       int    npad =0      padding on offset wavenumber\n       int    nr =1      maximum number of references\n       int    nt =1      taper size\n       int    nw =      Length of frequency axis (for modeling)\n       file   slowness =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       Frequency origin (for modeling)\nSOURCE\n       system/seismic/Mdsr2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdsr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsreiko-Tuple{}","page":"Home","title":"Madagascar.sfdsreiko","text":"sfdsreiko(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsreiko on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsreiko. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsreiko(1)                  Madagascar Manuals                  sfdsreiko(1)\n\nNAME\n       sfdsreiko - Double square-root eikonal solver (2D)\n\nSYNOPSIS\n       sfdsreiko  <  in.rsf  >  out.rsf  mask=mask.rsf flag=flag.rsf alpha=al‐\n       pha.rsf velocity=y thres=5.e-5 tol=1.e-3 nloop=10 causal=y\n\nPARAMETERS\n       string alpha =      auxiliary output file name\n       bool   causal =y [y/n]     if y, neglect non-causal branches of DSR\n       string flag =      auxiliary output file name\n       string mask =      auxiliary input file name\n       int    nloop =10      number of bisection root-search\n       float  thres =5.e-5      threshold (percentage)\n       float  tol =1.e-3      tolerance for bisection root-search\n       bool   velocity =y [y/n]     if y, the input is velocity;  n,  slowness\n              squared\nSOURCE\n       user/llisiw/Mdsreiko.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdsreiko(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsreiko0-Tuple{}","page":"Home","title":"Madagascar.sfdsreiko0","text":"sfdsreiko0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsreiko0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsreiko0. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsreiko0(1)                 Madagascar Manuals                 sfdsreiko0(1)\n\nNAME\n       sfdsreiko0 - Double square-root eikonal solver (2D + explicit)\n\nSYNOPSIS\n       sfdsreiko0 < in.rsf > out.rsf velocity=y\n\nPARAMETERS\n       bool   velocity  =y  [y/n]     if y, the input is velocity; n, slowness\n              squared\nSOURCE\n       user/llisiw/Mdsreiko0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdsreiko0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsrtomo-Tuple{}","page":"Home","title":"Madagascar.sfdsrtomo","text":"sfdsrtomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsrtomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsrtomo. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsrtomo(1)                  Madagascar Manuals                  sfdsrtomo(1)\n\nNAME\n       sfdsrtomo - Prestack first-arrival traveltime tomography (DSR)\n\nSYNOPSIS\n       sfdsrtomo  < in.rsf > out.rsf grad=grad.rsf time=time.rsf flag=flag.rsf\n       mask=mask.rsf prec=prec.rsf reco=reco.rsf adj=n  velocity=y  velocity=y\n       shape=n scale=n scale0=0.5 verb=n niter=5 cgiter=10 liter=5 thres=5.e-5\n       tol=1.e-3 nloop=10 eps=0. causal=y rect#=(1,1,...) what=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag (for what=linear)\n       bool   causal =y [y/n]     if y, neglect non-causal branches of DSR\n       int    cgiter =10      number of conjugate-gradient iterations\n       float  eps =0.       regularization parameter\n       string flag =      auxiliary input file name\n       string grad =      auxiliary input file name\n       int    liter =5      number of line-search iterations\n       string mask =      auxiliary input file name\n       int    niter =5      number of inversion iterations\n       int    nloop =10      number of bisection root-search\n       string prec =      auxiliary input file name\n       string reco =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   scale =n [y/n]     if y, scale gradient before line-search\n       float  scale0 =0.5      gradient scale max ratio (if scale=y)\n       bool   shape =n [y/n]     shaping regularization (default no)\n       float  thres =5.e-5      threshold (percentage)\n       string time =      auxiliary input file name\n       float  tol =1.e-3      tolerance for bisection root-search\n       bool   velocity =y [y/n]     if y, the input is velocity; n,  slowness-\n              squared\n       bool   verb =n [y/n]     verbosity flag\n       string what =      what to compute (default tomography)\nSOURCE\n       user/llisiw/Mdsrtomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdsrtomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdsrtomo0-Tuple{}","page":"Home","title":"Madagascar.sfdsrtomo0","text":"sfdsrtomo0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdsrtomo0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdsrtomo0. See ?m8r for examples.\n\nRSF Documentation\n\nsfdsrtomo0(1)                 Madagascar Manuals                 sfdsrtomo0(1)\n\nNAME\n       sfdsrtomo0 - Prestack first-arrival traveltime tomography (DSR)\n\nSYNOPSIS\n       sfdsrtomo0 < in.rsf > out.rsf reco=reco.rsf mask=mask.rsf prec=prec.rsf\n       grad=grad.rsf  velocity=y  limit=n  shape=n  verb=n  niter=5  cgiter=10\n       thres=5.e-5 tol=1.e-3 nloop=10 eps=0. causal=y rect#=(1,1,...)\n\nPARAMETERS\n       bool   causal =y [y/n]     if y, neglect non-causal branches of DSR\n       int    cgiter =10      number of conjugate-gradient iterations\n       float  eps =0.       regularization parameter\n       string grad =      auxiliary output file name\n       bool   limit  =n [y/n]     if y, limit computation within receiver cov‐\n              erage\n       string mask =      auxiliary input file name\n       int    niter =5      number of inversion iterations\n       int    nloop =10      number of bisection root-search\n       string prec =      auxiliary input file name\n       string reco =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   shape =n [y/n]     shaping regularization (default no)\n       float  thres =5.e-5      threshold (percentage)\n       float  tol =1.e-3      tolerance for bisection root-search\n       bool   velocity =y [y/n]     if y, the input is velocity; n,  slowness-\n              squared\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/llisiw/Mdsrtomo0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdsrtomo0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-Tuple{}","page":"Home","title":"Madagascar.sfdtw","text":"sfdtw(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw(1)                      Madagascar Manuals                      sfdtw(1)\n\nNAME\n       sfdtw -\n\nSYNOPSIS\n       sfdtw  <  _in.rsf  ref=_ref.rsf  > _out.rsf error=_error.rsf accum=_ac‐\n       cum.rsf shifts=_shifts.rsf maxshift= exp=2 strain=1.0\n\nCOMMENTS\n       program calculates the shifts to warp a matching  trace  (input)  to  a\n       reference trace (ref=) of equal length and applies those shifts\n\nPARAMETERS\n       string accum  =       accumulation errors from forward and backtracking\n              (auxiliary output file name)\n       string error =      misfit error (auxiliary output file name)\n       float  exp =2      error exponent (g-f)^exp\n       int    maxshift = ®\n       string ref =      auxiliary input file name\n       string shifts =      output integer shifts as floats (auxiliary  output\n              file name)\n       float  strain =1.0      maximum strain\nSOURCE\n       user/luke/Mdtw.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdtw(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-accumulate-Tuple{}","page":"Home","title":"Madagascar.sfdtw-accumulate","text":"sfdtw-accumulate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-accumulate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-accumulate. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-accumulate(1)           Madagascar Manuals           sfdtw-accumulate(1)\n\nNAME\n       sfdtw-accumulate -\n\nSYNOPSIS\n       sfdtw-accumulate < _in.rsf > _out.rsf strain=1 dir=0\n\nCOMMENTS\n       accumulates  or smooths alignment errors in the forward direction, sub‐\n       ject to strain str=float is the maximum du/di\n\nPARAMETERS\n       int    dir =0      accumulation direction: 1 is forward,  -1  is  back‐\n              ward, 0 is both\n       float  strain =1      maximum strain\nSOURCE\n       user/luke/Mdtw-accumulate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfdtw-accumulate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-apply-Tuple{}","page":"Home","title":"Madagascar.sfdtw-apply","text":"sfdtw-apply(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-apply on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-apply. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-apply(1)                Madagascar Manuals                sfdtw-apply(1)\n\nNAME\n       sfdtw-apply -\n\nSYNOPSIS\n       sfdtw-apply < _in.rsf shifts=_shifts.rsf > _out.rsf\n\nCOMMENTS\n       program  applies  integer shifts (stored as floats!) to warp a matching\n       trace.  Can match 1d shifts to a 1,2, or 3d volume , or 2d shifts to  a\n       2, or 3 d volume, or 3d shifts to a 3d volume\n\nPARAMETERS\n       string shifts =      auxiliary input file name\nSOURCE\n       user/luke/Mdtw-apply.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdtw-apply(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-errors-Tuple{}","page":"Home","title":"Madagascar.sfdtw-errors","text":"sfdtw-errors(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-errors on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-errors. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-errors(1)               Madagascar Manuals               sfdtw-errors(1)\n\nNAME\n       sfdtw-errors -\n\nSYNOPSIS\n       sfdtw-errors < _in.rsf ref=_ref.rsf > _out.rsf maxshift= exp=2\n\nCOMMENTS\n       program  calculates the alignment errors between a reference and match‐\n       ing trace given a maximum  shift  (maxshift=)  and  an  error  exponent\n       (exp=)\n\nPARAMETERS\n       float  exp =2      error exponent (g-f)^exp\n       int    maxshift =      maximum shift\n       string ref =      auxiliary input file name\nSOURCE\n       user/luke/Mdtw-errors.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdtw-errors(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-flatten-Tuple{}","page":"Home","title":"Madagascar.sfdtw-flatten","text":"sfdtw-flatten(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-flatten on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-flatten. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-flatten(1)              Madagascar Manuals              sfdtw-flatten(1)\n\nNAME\n       sfdtw-flatten  - flattens a gather or similar object to its stack using\n       dtw,   optionally   writes   out   shifts,   currently   set   up   for\n       (time,gather,space) for 2d imaging\n\nSYNOPSIS\n       sfdtw-flatten  < _in.rsf > _out.rsf shifts=_shifts.rsf exp=2 strain=1.0\n       maxshift=\n\nPARAMETERS\n       float  exp =2      error exponent (g-f)^exp\n       int    maxshift = ®\n       string shifts =      output gather flattening shifts (auxiliary  output\n              file name)\n       float  strain =1.0      maximum strain\nSOURCE\n       user/luke/Mdtw-flatten.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfdtw-flatten(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-interp-Tuple{}","page":"Home","title":"Madagascar.sfdtw-interp","text":"sfdtw-interp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-interp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-interp. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-interp(1)               Madagascar Manuals               sfdtw-interp(1)\n\nNAME\n       sfdtw-interp -\n\nSYNOPSIS\n       sfdtw-interp   <   _in.rsf  loc=_loc.rsf  >  _out.rsf  maxshift=  exp=2\n       strain=1.0 n=\n\nCOMMENTS\n       program takes traces sampled at arbitrary locations along a 1d line and\n       outputs  regularly sampled line.  program assumes the locations are or‐\n       dered.\n\nPARAMETERS\n       float  exp =2      error exponent (g-f)^exp\n       string loc =      auxiliary input file name\n       int    maxshift =      maximum shift to be tested\n       int    n =      number of traces in output\n       float  strain =1.0      maximum strain for dtw\nSOURCE\n       user/luke/Mdtw-interp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdtw-interp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw-track-Tuple{}","page":"Home","title":"Madagascar.sfdtw-track","text":"sfdtw-track(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw-track on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw-track. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw-track(1)                Madagascar Manuals                sfdtw-track(1)\n\nNAME\n       sfdtw-track -\n\nSYNOPSIS\n       sfdtw-track < _in.rsf error=_miss.rsf > _out.rsf strain=1\n\nCOMMENTS\n       problem  finds  the optimal trajectory across accumulation errors using\n       backtracking.  takes the same strain strain= as the accumulation step.\n\nPARAMETERS\n       string error =      auxiliary input file name\n       float  strain =1      maximum strain\nSOURCE\n       user/luke/Mdtw-track.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfdtw-track(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdtw2-Tuple{}","page":"Home","title":"Madagascar.sfdtw2","text":"sfdtw2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdtw2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdtw2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdtw2(1)                     Madagascar Manuals                     sfdtw2(1)\n\nNAME\n       sfdtw2 -\n\nSYNOPSIS\n       sfdtw2    <    _in.rsf   ref=_ref.rsf   >   _out.rsf   accum=_accum.rsf\n       shifts=_shifts.rsf maxshift= exp=2 strain1=1.0 strain2=1.0 nalter=2\n\nCOMMENTS\n       program warps a 2D input image to a 2D reference image\n\nPARAMETERS\n       string accum =      optional output for accumulation errors  (auxiliary\n              output file name)\n       float  exp =2      error exponent (g-f)^exp\n       int    maxshift =      maximum shift to be tested\n       int    nalter =2      number of horizontal and vertical smoothings\n       string ref =      auxiliary input file name\n       string shifts  =      optional output for shifts (auxiliary output file\n              name)\n       float  strain1 =1.0      maximum strain in first axis\n       float  strain2 =1.0      maximum strain in  second  axis,  if  >  1  no\n              strain limit\nSOURCE\n       user/luke/Mdtw2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdtw2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfduffing-Tuple{}","page":"Home","title":"Madagascar.sfduffing","text":"sfduffing(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfduffing on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfduffing. See ?m8r for examples.\n\nRSF Documentation\n\nsfduffing(1)                  Madagascar Manuals                  sfduffing(1)\n\nNAME\n       sfduffing  -  Duffing  differential equation solved by 4th order Runge-\n       Kutta method.\n\nSYNOPSIS\n       sfduffing < in.rsf > out.rsf sfile=sfile.rsf gamma=0.75  omega=1  kxi=1\n       x0=0 y0=0 pow1=1 pow2=3 verb=n ricker=n\n\nCOMMENTS\n       Duffing equation: x'' + 0.5 x' - x + x^3 = gamma cos(omega t) + kxi in‐\n       put(t)\n\nPARAMETERS\n       float  gamma =0.75      strength of external force\n       float  kxi =1      adjustment for input signal\n       float  omega =1      angular frequence of external force\n       int    pow1 =1      power of first non-linear restitution term\n       int    pow2 =3      power of second non-linear restitution term\n       bool   ricker =n [y/n]     if y need extenal input for external force\n       string sfile =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =0      initial value of x0\n       float  y0 =0      initial value of y0\nSOURCE\n       user/yliu/Mduffing.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfduffing(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfduffing1-Tuple{}","page":"Home","title":"Madagascar.sfduffing1","text":"sfduffing1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfduffing1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfduffing1. See ?m8r for examples.\n\nRSF Documentation\n\nsfduffing1(1)                 Madagascar Manuals                 sfduffing1(1)\n\nNAME\n       sfduffing1  - 1D signal analysis by using Duffing differential equation\n       solved by 4th order Runge-Kutta method.\n\nSYNOPSIS\n       sfduffing1 < in.rsf  >  out.rsf  restor=restor.rsf  gamma=0.75  omega=1\n       kxi=1 x0=0 y0=0 pow1=1 pow2=3 phi=0. verb=n cosine=y\n\nCOMMENTS\n       Duffing   equation:  x''/(omega^2)+0.5  x'/omega-x+x^3=gamma  cos(omega\n       t+phi)+kxi R(t)\n\nPARAMETERS\n       bool   cosine =y [y/n]     if n need extenal input for periodic restor‐\n              ing force\n       float  gamma =0.75      strength of external force\n       float  kxi =1      adjustment for input signal\n       float  omega =1      angular frequence of external force\n       float  phi =0.       phase of cosine signal unit=pi\n       int    pow1 =1      power of first non-linear restitution term\n       int    pow2 =3      power of second non-linear restitution term\n       string restor =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =0      initial value of x0\n       float  y0 =0      initial value of y0\nSOURCE\n       user/yliu/Mduffing1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfduffing1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfduffing2-Tuple{}","page":"Home","title":"Madagascar.sfduffing2","text":"sfduffing2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfduffing2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfduffing2. See ?m8r for examples.\n\nRSF Documentation\n\nsfduffing2(1)                 Madagascar Manuals                 sfduffing2(1)\n\nNAME\n       sfduffing2  -  2D/3D  Velocity  analysis  by using Duffing differential\n       equation solved by 4th order Runge-Kutta method.\n\nSYNOPSIS\n       sfduffing2 < cmp.rsf >  outf.rsf  restor=restor.rsf  winsz=200  v0=1000\n       dv=20 vn=100 t0=o1 deltat0=dt t0n=n1 gamma=0.75 omega=1 kxi=1 x0=0 y0=0\n       pow1=1 pow2=3 phi=0. cosine=y delta=0.01 verb=n gx=2.0\n\nCOMMENTS\n       Duffing  equation:  x''/(omega^2)+0.5  x'/omega-x+x^3=gamma   cos(omega\n       t+phi)+kxi R(t)\n\nPARAMETERS\n       bool   cosine =y [y/n]     if n need extenal input for periodic restor‐\n              ing force\n       float  delta =0.01      The density of judgement grid\n       float  deltat0 =dt      step lenth for t0 scan\n       float  dv =20      step lenth for velocity scan\n       float  gamma =0.75      strength of external force\n       float  gx =2.0      Size of grid\n       float  kxi =1      adjustment for input signal\n       float  omega =1      angular frequence of external force\n       float  phi =0.       phase of cosine signal unit=pi\n       int    pow1 =1      power of first non-linear restitution term\n       int    pow2 =3      power of second non-linear restitution term\n       string restor =      auxiliary input file name\n       float  t0 =o1      t0 scan start point\n       int    t0n =n1      numbers of t0scan\n       float  v0 =1000      init Vel for velocity scan\n       bool   verb =n [y/n]     verbosity flag\n       int    vn =100      numbers of velscan\n       int    winsz =200      for each trace,the width of window. Unit:samples\n       float  x0 =0      initial value of x0\n       float  y0 =0      initial value of y0\nSOURCE\n       user/yliu/Mduffing2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfduffing2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfduwt-Tuple{}","page":"Home","title":"Madagascar.sfduwt","text":"sfduwt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfduwt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfduwt. See ?m8r for examples.\n\nRSF Documentation\n\nsfduwt(1)                     Madagascar Manuals                     sfduwt(1)\n\nNAME\n       sfduwt  -  1-D  digital  undecimated  (stationary) wavelet transform by\n       lifting scheme\n\nSYNOPSIS\n       sfduwt < in.rsf > out.rsf inv=n adj=n unit=n scale=max type=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    scale =max      decomposition scale\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\nSOURCE\n       user/yliu/Mduwt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfduwt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdvscan2d-Tuple{}","page":"Home","title":"Madagascar.sfdvscan2d","text":"sfdvscan2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdvscan2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdvscan2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfdvscan2d(1)                 Madagascar Manuals                 sfdvscan2d(1)\n\nNAME\n       sfdvscan2d - Diffraction velocity analysis\n\nSYNOPSIS\n       sfdvscan2d < dataFile_.rsf vel=velFile_.rsf > sembFile_.rsf gn=1 go=1.0\n       gd=1 coher=11 cigNum=1 dlim=fabs (dipStart_) isSemb=y\n\nCOMMENTS\n       Input: dataFile_.rsf - migrated dip-angle gathers\n\n       Output: sembFile_.rsf - semblance spectrum\n\nPARAMETERS\n       int    cigNum =1      height of a vertical window for semblance  calcu‐\n              lation\n       int    coher  =11      height of a vertical window for semblance calcu‐\n              lation\n       float  dlim =fabs (dipStart_)       defines  dip-angle-window  for  the\n              analysis\n       float  gd =1      increment of Vm/V parameter\n       int    gn =1      number of scanned Vm/V values\n       float  go =1.0      start of Vm/V parameter\n       bool   isSemb =y [y/n]     y - output is semblance; n - stack power\n       string vel =      velocity model file (velocity in km/s) (auxiliary in‐\n              put file name)\nSOURCE\n       user/aklokov/Mdvscan2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfdvscan2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdwt-Tuple{}","page":"Home","title":"Madagascar.sfdwt","text":"sfdwt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdwt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdwt. See ?m8r for examples.\n\nRSF Documentation\n\nsfdwt(1)                      Madagascar Manuals                      sfdwt(1)\n\nNAME\n       sfdwt - 1-D digital wavelet transform\n\nSYNOPSIS\n       sfdwt < in.rsf > out.rsf inv=n adj=n unit=n type=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   inv =n [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\nSOURCE\n       system/generic/Mdwt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfdwt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdwt2-Tuple{}","page":"Home","title":"Madagascar.sfdwt2","text":"sfdwt2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdwt2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdwt2. See ?m8r for examples.\n\nRSF Documentation\n\nsfdwt2(1)                     Madagascar Manuals                     sfdwt2(1)\n\nNAME\n       sfdwt2 - 1-D digital wavelet transform (another version)\n\nSYNOPSIS\n       sfdwt2 < in.rsf > out.rsf inv=n adj=n unit=n type=\n\nCOMMENTS\n       Forward  transform  (adj=y  inv=y)    m=T[d]  Adjoint  transform (adj=y\n       inv=n)   m=T^(-1)'[d] Inverse transform (adj=n inv=y/n) d=T^(-1)[m]\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   inv =n [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\nSOURCE\n       user/yliu/Mdwt2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfdwt2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdwt97-Tuple{}","page":"Home","title":"Madagascar.sfdwt97","text":"sfdwt97(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdwt97 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdwt97. See ?m8r for examples.\n\nRSF Documentation\n\nsfdwt97(1)                    Madagascar Manuals                    sfdwt97(1)\n\nNAME\n       sfdwt97 - 1-D CDF 9/7 biorthogonal digital wavelet transform\n\nSYNOPSIS\n       sfdwt97 < in.rsf > out.rsf inv=n adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   inv =n [y/n]     if y, do inverse transform\nSOURCE\n       user/yliu/Mdwt97.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfdwt97(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdwtdenoise-Tuple{}","page":"Home","title":"Madagascar.sfdwtdenoise","text":"sfdwtdenoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdwtdenoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdwtdenoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfdwtdenoise(1)               Madagascar Manuals               sfdwtdenoise(1)\n\nNAME\n       sfdwtdenoise - 2D Digital Wavelet Transoform Denoising\n\nSYNOPSIS\n       sfdwtdenoise < in.rsf > out.rsf pclip=99. type=\n\nPARAMETERS\n       float  pclip =99.       data clip percentile (default is 99)\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\nSOURCE\n       user/chenyk/Mdwtdenoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfdwtdenoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfdzest2d-Tuple{}","page":"Home","title":"Madagascar.sfdzest2d","text":"sfdzest2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfdzest2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfdzest2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfdzest2d(1)                  Madagascar Manuals                  sfdzest2d(1)\n\nNAME\n       sfdzest2d - Estimation of depth-delay of common-image gathers\n\nSYNOPSIS\n       sfdzest2d  Fp=Fp.rsf  <  Fnp.rsf > Fs.rsf adj=n inv=n shape=n niter=100\n       eps1=0. rect1=3 rect2=3 seed=0 eps2=1e3\n\nPARAMETERS\n       file   Fp =      auxiliary input file name\n       bool   adj =n [y/n]     if adj=y, adjoint operator\n       float  eps1 =0.       shaping regularization parameter\n       float  eps2 =1e3      regularization parameter in model constraint\n       bool   inv =n [y/n]     if inv=y, perform inversion\n       int    niter =100      number of iterations\n       int    rect1 =3      shaping smoothing parameter in 1st axis\n       int    rect2 =3      shaping smoothing parameter in 2nd axis\n       int    seed =0      index of reference trace\n       bool   shape =n [y/n]     if shape=y, use projection method\nSOURCE\n       user/zhiguang/Mdzest2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfdzest2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeacd2d-Tuple{}","page":"Home","title":"Madagascar.sfeacd2d","text":"sfeacd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeacd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeacd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeacd2d(1)                   Madagascar Manuals                   sfeacd2d(1)\n\nNAME\n       sfeacd2d - Extended time-domain acoustic FD modeling\n\nSYNOPSIS\n       sfeacd2d < Fw.rsf > Fo.rsf vel=Fv.rsf ref=Fr.rsf verb=n\n\nPARAMETERS\n       file   ref =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     setup I/O files\nSOURCE\n       user/hpcss/Meacd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfeacd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfederiv-Tuple{}","page":"Home","title":"Madagascar.sfederiv","text":"sfederiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfederiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfederiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfederiv(1)                   Madagascar Manuals                   sfederiv(1)\n\nNAME\n       sfederiv -\n\nSYNOPSIS\n       sfederiv  ccc=Fccc.rsf  < Fspk.rsf zdel=Fzdel.rsf xdel=Fxdel.rsf verb=n\n       stat=y\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   stat =y [y/n]     stationary operator\n       bool   verb =n [y/n]     verbosity flag\n       file   xdel =      auxiliary output file name\n       file   zdel =      auxiliary output file name\nSOURCE\n       user/jyan/Mederiv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfederiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfederiv2d-Tuple{}","page":"Home","title":"Madagascar.sfederiv2d","text":"sfederiv2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfederiv2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfederiv2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfederiv2d(1)                 Madagascar Manuals                 sfederiv2d(1)\n\nNAME\n       sfederiv2d -\n\nSYNOPSIS\n       sfederiv2d ccc=Fccc.rsf < Fspk.rsf zdel=Fzdel.rsf xdel=Fxdel.rsf verb=n\n       stat=y sig=1.5 order=8 domain= tapertype=\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       string domain = ®\n       int    order =8      order\n       float  sig =1.5      sigma\n       bool   stat =y [y/n]     stationary operator\n       string tapertype = ®\n       bool   verb =n [y/n]     verbosity flag\n       file   xdel =      auxiliary output file name\n       file   zdel =      auxiliary output file name\nUSED IN\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/operator\n       cwp/geo2009VTIModeSeparation/aniopsize\n       cwp/geo2009VTIModeSeparation/oporder\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\nSOURCE\n       user/jyan/Mederiv2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfederiv2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfederiv3d-Tuple{}","page":"Home","title":"Madagascar.sfederiv3d","text":"sfederiv3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfederiv3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfederiv3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfederiv3d(1)                 Madagascar Manuals                 sfederiv3d(1)\n\nNAME\n       sfederiv3d -\n\nSYNOPSIS\n       sfederiv3d   ccc=Fccc.rsf   <  Fspk.rsf  zdel=Fzdel.rsf  xdel=Fxdel.rsf\n       ydel=Fydel.rsf verb=n stat=y domain=\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       string domain = ®\n       bool   stat =y [y/n]     stationary operator\n       bool   verb =n [y/n]     verbosity flag\n       file   xdel =      auxiliary output file name\n       file   ydel =      auxiliary output file name\n       file   zdel =      auxiliary output file name\nUSED IN\n       cwp/geo2009TTIModeSeparation/tti3\nSOURCE\n       user/jyan/Mederiv3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfederiv3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfederiv3dfilters-Tuple{}","page":"Home","title":"Madagascar.sfederiv3dfilters","text":"sfederiv3dfilters(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfederiv3dfilters on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfederiv3dfilters. See ?m8r for examples.\n\nRSF Documentation\n\nsfederiv3dfilters(1)          Madagascar Manuals          sfederiv3dfilters(1)\n\nNAME\n       sfederiv3dfilters -\n\nSYNOPSIS\n       sfederiv3dfilters     ccc=Fccc.rsf    <    Fspk.rsf    pzdel=Fpzdel.rsf\n       pxdel=Fpxdel.rsf pydel=Fpydel.rsf hzdel=Fhzdel.rsf hxdel=Fhxdel.rsf hy‐\n       del=Fhydel.rsf   vzdel=Fvzdel.rsf   vxdel=Fvxdel.rsf   vydel=Fvydel.rsf\n       verb=n stat=y domain=\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       string domain = ®\n       file   hxdel =      auxiliary output file name\n       file   hydel =      auxiliary output file name\n       file   hzdel =      auxiliary output file name\n       file   pxdel =      auxiliary output file name\n       file   pydel =      auxiliary output file name\n       file   pzdel =      auxiliary output file name\n       bool   stat =y [y/n]     stationary operator\n       bool   verb =n [y/n]     verbosity flag\n       file   vxdel =      auxiliary output file name\n       file   vydel =      auxiliary output file name\n       file   vzdel =      auxiliary output file name\nUSED IN\n       cwp/geo2009TTIModeSeparation/vti3\nSOURCE\n       user/jyan/Mederiv3dfilters.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfederiv3dfilters(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfefd3dmt-Tuple{}","page":"Home","title":"Madagascar.sfefd3dmt","text":"sfefd3dmt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfefd3dmt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfefd3dmt. See ?m8r for examples.\n\nRSF Documentation\n\nsfefd3dmt(1)                  Madagascar Manuals                  sfefd3dmt(1)\n\nNAME\n       sfefd3dmt  - 3D 8-th order elastic wave propagation with sponge ABC and\n       moment tensor source\n\nSYNOPSIS\n       sfefd3dmt < Fvp.rsf vs=Fvs.rsf  rho=Frho.rsf  >  Frvz.rsf  rvx=Frvx.rsf\n       rvy=Frvy.rsf  wavx=Fwavx.rsf  wavy=Fwavy.rsf  wavz=Fwavz.rsf  M= verb=n\n       ifwfd=n nb=30 nt= dt= fm=20.0 ft=0 jsnap=1  ct=0.01  sx=nxpad/2  sy=ny‐\n       pad/2 sz=nzpad/2 free=n\n\nCOMMENTS\n       By Yangkang Chen, 2020 Revised in July, 2021 Currently still in a draft\n       version\n\n       DEMO:                             https://github.com/chenyk1990/tutori‐\n       als/blob/main/demo/efd3dmt/SConstruct\n\nPARAMETERS\n       floats M =       [9]\n       float  ct =0.01      for absorbing boundary\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       bool   free =n [y/n]     if free surface\n       int    ft =0      first recorded time\n       bool   ifwfd =n [y/n]     if output wavefield\n       int    jsnap =1      interval for snapshots\n       int    nb =30      thickness of ABC layer\n       int    nt =      number of time steps\n       file   rho =      auxiliary input file name\n       file   rvx =      auxiliary output file name\n       file   rvy =      auxiliary output file name\n       int    sx =nxpad/2 ®\n       int    sy =nypad/2 ®\n       int    sz =nzpad/2 ®\n       bool   verb =n [y/n]     verbosity\n       file   vs =      auxiliary input file name\n       file   wavx =      auxiliary output file name\n       file   wavy =      auxiliary output file name\n       file   wavz =      auxiliary output file name\nSOURCE\n       user/chenyk/Mefd3dmt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfefd3dmt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeicold2d-Tuple{}","page":"Home","title":"Madagascar.sfeicold2d","text":"sfeicold2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeicold2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeicold2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeicold2d(1)                 Madagascar Manuals                 sfeicold2d(1)\n\nNAME\n       sfeicold2d - Extended IC 3D\n\nSYNOPSIS\n       sfeicold2d  <  Fs.rsf  ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n isreversed=n\n       nhz=0   nhx=0   nht=0    gaus=n    gsx=nhx*sf_d(ax)    gsz=nhz*sf_d(az)\n       gst=nht*sf_d(at)\n\nPARAMETERS\n       file   cc =      auxiliary input file name\n       bool   gaus =n [y/n]     Gaussian taper flag\n       float  gst =nht*sf_d(at) ®\n       float  gsx =nhx*sf_d(ax) ®\n       float  gsz =nhz*sf_d(az) ®\n       bool   isreversed =n [y/n]     reversed rec wfld?\n       int    nht =0 ®\n       int    nhx =0 ®\n       int    nhz =0 ®\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Meicold2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfeicold2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeicop2d-Tuple{}","page":"Home","title":"Madagascar.sfeicop2d","text":"sfeicop2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeicop2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeicop2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeicop2d(1)                  Madagascar Manuals                  sfeicop2d(1)\n\nNAME\n       sfeicop2d - Extended IC 2D\n\nSYNOPSIS\n       sfeicop2d  opr=Fopr.rsf cip=Fcip.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n\n       wflcausal=n     oprcausal=n     nhz=0      nhx=0      nht=0      gaus=n\n       gsx=0.25*sf_n(ahx)*sf_d(ahx)               gsz=0.25*sf_n(ahz)*sf_d(ahz)\n       gst=0.25*sf_n(aht)*sf_d(aht)\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   cip =      auxiliary input file name\n       bool   gaus =n [y/n]     Gaussian taper\n       float  gst =0.25*sf_n(aht)*sf_d(aht) ®\n       float  gsx =0.25*sf_n(ahx)*sf_d(ahx) ®\n       float  gsz =0.25*sf_n(ahz)*sf_d(ahz) ®\n       int    nht =0      t lags\n       int    nhx =0      x lags\n       int    nhz =0      z lags\n       file   opr =      auxiliary input file name\n       bool   oprcausal =n [y/n]     causal opr?\n       bool   verb =n [y/n]     verbosity flag\n       bool   wflcausal =n [y/n]     causal wfl?\nSOURCE\n       user/psava/Meicop2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfeicop2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeicop3d-Tuple{}","page":"Home","title":"Madagascar.sfeicop3d","text":"sfeicop3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeicop3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeicop3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeicop3d(1)                  Madagascar Manuals                  sfeicop3d(1)\n\nNAME\n       sfeicop3d - Extended IC 2D\n\nSYNOPSIS\n       sfeicop3d  opr=Fopr.rsf cip=Fcip.rsf < Fimg.rsf > Fwfl.rsf verb=n adj=n\n       wflcausal=n   oprcausal=n    nhz=0    nhx=0    nhy=0    nht=0    gaus=n\n       gsx=0.25*sf_n(ahx)*sf_d(ahx)               gsy=0.25*sf_n(ahy)*sf_d(ahy)\n       gsz=0.25*sf_n(ahz)*sf_d(ahz) gst=0.25*sf_n(aht)*sf_d(aht)\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   cip =      auxiliary input file name\n       bool   gaus =n [y/n]     Gaussian taper\n       float  gst =0.25*sf_n(aht)*sf_d(aht) ®\n       float  gsx =0.25*sf_n(ahx)*sf_d(ahx) ®\n       float  gsy =0.25*sf_n(ahy)*sf_d(ahy) ®\n       float  gsz =0.25*sf_n(ahz)*sf_d(ahz) ®\n       int    nht =0      t lags\n       int    nhx =0      x lags\n       int    nhy =0      y lags\n       int    nhz =0      z lags\n       file   opr =      auxiliary input file name\n       bool   oprcausal =n [y/n]     causal opr?\n       bool   verb =n [y/n]     verbosity flag\n       bool   wflcausal =n [y/n]     causal wfl?\nSOURCE\n       user/psava/Meicop3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfeicop3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikEta-Tuple{}","page":"Home","title":"Madagascar.sfeikEta","text":"sfeikEta(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikEta on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikEta. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikEta(1)                   Madagascar Manuals                   sfeikEta(1)\n\nNAME\n       sfeikEta - Eta differential eikonal solver (3-D).\n\nSYNOPSIS\n       sfeikEta < btime.rsf > time.rsf shotfile=shots.rsf btime=y order=2 sor‐\n       der=2  eta=0.0  br1=d1  br2=d2  br3=d3   plane1=n   plane2=n   plane3=n\n       b1=plane[2]? n1: (int) (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5)\n       b3=plane[0]? n3: (int) (br3/d3+0.5) zshot=0. yshot=o2  +  0.5*(n2-1)*d2\n       xshot=o3 + 0.5*(n3-1)*d3\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       bool   btime =y [y/n]     if y, the input is background time; n, Veloc‐\n              ity\n       float  eta =0.0      The value of the constant eta\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       int    sorder =2 [1,2,3]   Accuracy order of the source perturbation\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/tariq/MeikEta.c\nVERSION\n       4.2-git Meikds.c 4136 2009-02-07 17:20:32Z sfomel\n\nMadagascar                         JULY 2024                       sfeikEta(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikds-Tuple{}","page":"Home","title":"Madagascar.sfeikds","text":"sfeikds(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikds on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikds. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikds(1)                    Madagascar Manuals                    sfeikds(1)\n\nNAME\n       sfeikds - Source differntial eikonal solver (3-D).\n\nSYNOPSIS\n       sfeikds  < btime.rsf > time.rsf shotfile=shots.rsf btime=y order=2 sor‐\n       der=2  dl=0.0  br1=d1  br2=d2   br3=d3   plane1=n   plane2=n   plane3=n\n       b1=plane[2]? n1: (int) (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5)\n       b3=plane[0]? n3: (int) (br3/d3+0.5) zshot=0. yshot=o2  +  0.5*(n2-1)*d2\n       xshot=o3 + 0.5*(n3-1)*d3\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       bool   btime =y [y/n]     if y, the input is background time; n, Veloc‐\n              ity\n       float  dl =0.0      The value of the shift in the y direction\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       int    sorder =2 [1,2,3]   Accuracy order of the source perturbation\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/tariq/Meikds.c\nVERSION\n       4.2-git Meikds.c 4136 2009-02-07 17:20:32Z sfomel\n\nMadagascar                         JULY 2024                        sfeikds(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikfswp-Tuple{}","page":"Home","title":"Madagascar.sfeikfswp","text":"sfeikfswp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikfswp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikfswp. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikfswp(1)                  Madagascar Manuals                  sfeikfswp(1)\n\nNAME\n       sfeikfswp - Fast sweeping eikonal solver (2-D/3-D).\n\nSYNOPSIS\n       sfeikfswp  <  vel.rsf  >  time.rsf  vel=y  niter=2  zshot=0. yshot=o2 +\n       0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3 shotfile= horizon=\n\nPARAMETERS\n       string horizon =      File with a reflection interface\n       int    niter =2      number of sweeping iterations\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3)\n       bool   vel =y [y/n]     if y, the input is velocity; n - slowness\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/bash/Meikfswp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfeikfswp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikods-Tuple{}","page":"Home","title":"Madagascar.sfeikods","text":"sfeikods(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikods on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikods. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikods(1)                   Madagascar Manuals                   sfeikods(1)\n\nNAME\n       sfeikods - Fast marching with source perturbation.\n\nSYNOPSIS\n       sfeikods   <   vel.rsf   >  time.rsf  shotfile=shots.rsf  tdl1=tdl1.rsf\n       tds1=tds1.rsf tdl2=tdl2.rsf tds2=tds2.rsf vel=y order=2 sweep=n  br1=d1\n       br2=d2   br3=d3  plane1=n  plane2=n  plane3=n  b1=plane[2]?  n1:  (int)\n       (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int)\n       (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3\n       l=1\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3 =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity  box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3  =d3      Constant-velocity box around the source (in physi‐\n              cal dimensions)\n       int    l =1      source perturbation direction\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       bool   sweep  =n  [y/n]     if  y,  use  fast  sweeping instead of fast\n              marching\n       string tdl1 =      auxiliary output file name\n       string tdl2 =      auxiliary output file name\n       string tds1 =      auxiliary output file name\n       string tds2 =      auxiliary output file name\n       bool   vel =y [y/n]     if  y,  the  input  is  velocity;  n,  slowness\n              squared\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/llisiw/Meikods.c\nVERSION\n       4.2-git Meikonal.c 7107 2011-04-10 02:04:14Z ivlad\n\nMadagascar                         JULY 2024                       sfeikods(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikonal-Tuple{}","page":"Home","title":"Madagascar.sfeikonal","text":"sfeikonal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikonal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikonal. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikonal(1)                  Madagascar Manuals                  sfeikonal(1)\n\nNAME\n       sfeikonal - Fast marching eikonal solver (3-D).\n\nSYNOPSIS\n       sfeikonal < vel.rsf > time.rsf shotfile=shots.rsf vel=y order=2 sweep=n\n       br1=d1 br2=d2 br3=d3 plane1=n plane2=n plane3=n b1=plane[2]? n1:  (int)\n       (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int)\n       (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3\n\nCOMMENTS\n       June 2014 program of  the  month:  http://ahay.org/blog/2014/06/11/pro‐\n       gram-of-the-month-sfeikonal/\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile  =       File  with shot locations (n2=number of shots,\n              n1=3) (auxiliary input file name)\n       bool   sweep =n [y/n]     if y,  use  fast  sweeping  instead  of  fast\n              marching\n       bool   vel  =y  [y/n]     if  y,  the  input  is  velocity; n, slowness\n              squared\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\nSOURCE\n       user/fomels/Meikonal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfeikonal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikonal_rtp-Tuple{}","page":"Home","title":"Madagascar.sfeikonal_rtp","text":"sfeikonal_rtp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikonal_rtp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikonal_rtp. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikonalrtp(1)              Madagascar Manuals              sfeikonalrtp(1)\n\nNAME\n       sfeikonal_rtp - Fast marching eikonal solver (3-D) in spherical coordi‐\n       nates.\n\nSYNOPSIS\n       sfeikonal_rtp < vel.rsf > time.rsf  shotfile=shots.rsf  time2=time2.rsf\n       vel=y  order=2  sweep=n br1=d1 br2=d2 br3=d3 plane1=n plane2=n plane3=n\n       b1=plane[2]? n1: (int) (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5)\n       b3=plane[0]?  n3:  (int) (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2\n       xshot=o3 + 0.5*(n3-1)*d3\n\nCOMMENTS\n       Also         see         sfeikonal         (cartesian          version)\n       http://ahay.org/blog/2014/06/11/program-of-the-month-sfeikonal/\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile  =       File  with shot locations (n2=number of shots,\n              n1=3) (auxiliary input file name)\n       bool   sweep =n [y/n]     if y,  use  fast  sweeping  instead  of  fast\n              marching\n       file   time2 =      auxiliary output file name\n       bool   vel  =y  [y/n]     if  y,  the  input  is  velocity; n, slowness\n              squared\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/chenyk/Meikonal_rtp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfeikonal_rtp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikonal_surf-Tuple{}","page":"Home","title":"Madagascar.sfeikonal_surf","text":"sfeikonal_surf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikonal_surf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikonal_surf. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikonalsurf(1)             Madagascar Manuals             sfeikonalsurf(1)\n\nNAME\n       sfeikonal_surf  -  Fast  marching  eikonal  solver (3-D) and record the\n       traveltimes on the surface.\n\nSYNOPSIS\n       sfeikonal_surf < vel.rsf > time.rsf  shotfile=shots.rsf  vel=y  order=2\n       sweep=n  br1=d1  br2=d2  br3=d3 plane1=n plane2=n plane3=n b1=plane[2]?\n       n1: (int) (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]?\n       n3:  (int)  (br3/d3+0.5)  zshot=0.  yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 +\n       0.5*(n3-1)*d3\n\nCOMMENTS\n       It supports massive 3D ray tracing for ML purposes.\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3 =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity  box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3  =d3      Constant-velocity box around the source (in physi‐\n              cal dimensions)\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       bool   sweep  =n  [y/n]     if  y,  use  fast  sweeping instead of fast\n              marching\n       bool   vel =y [y/n]     if  y,  the  input  is  velocity;  n,  slowness\n              squared\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/chenyk/Meikonal_surf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfeikonal_surf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikonal_surf_dv1d-Tuple{}","page":"Home","title":"Madagascar.sfeikonal_surf_dv1d","text":"sfeikonal_surf_dv1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikonal_surf_dv1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikonal_surf_dv1d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikonalsurfdv1d(1)        Madagascar Manuals        sfeikonalsurfdv1d(1)\n\nNAME\n       sfeikonal_surf_dv1d - Fast marching eikonal solver (3-D) and record the\n       traveltimes on the surface.\n\nSYNOPSIS\n       sfeikonal_surf_dv1d  <   vel.rsf   >   time.rsf   dv=deltav.rsf   shot‐\n       file=shots.rsf  vel=y  order=2  sweep=n  br1=d1  br2=d2 br3=d3 plane1=n\n       plane2=n plane3=n b1=plane[2]? n1: (int) (br1/d1+0.5) b2=plane[1]?  n2:\n       (int)   (br2/d2+0.5)   b3=plane[0]?  n3:  (int)  (br3/d3+0.5)  zshot=0.\n       yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3\n\nCOMMENTS\n       It supports massive 3D ray tracing with different 1D velocity perturba‐\n       tion  for  estimating  both event location and velocity structure using\n       ML.\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3 =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity  box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3  =d3      Constant-velocity box around the source (in physi‐\n              cal dimensions)\n       file   dv =      auxiliary input file name\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       bool   sweep  =n  [y/n]     if  y,  use  fast  sweeping instead of fast\n              marching\n       bool   vel =y [y/n]     if  y,  the  input  is  velocity;  n,  slowness\n              squared\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/chenyk/Meikonal_surf_dv1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024            sfeikonal_surf_dv1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikonalvti-Tuple{}","page":"Home","title":"Madagascar.sfeikonalvti","text":"sfeikonalvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikonalvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikonalvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikonalvti(1)               Madagascar Manuals               sfeikonalvti(1)\n\nNAME\n       sfeikonalvti - Fast marching eikonal solver in VTI media.\n\nSYNOPSIS\n       sfeikonalvti  <  vzf.rsf  >  time.rsf  shotfile=shots.rsf vel=y order=2\n       br1=d1 br2=d2 br3=d3 plane1=n plane2=n plane3=n b1=plane[2]? n1:  (int)\n       (br1/d1+0.5) b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int)\n       (br3/d3+0.5) zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3\n       vx= eta=\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3  =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3 =d3      Constant-velocity box around the source (in  physi‐\n              cal dimensions)\n       string eta = ®\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile  =       File  with shot locations (n2=number of shots,\n              n1=3) (auxiliary input file name)\n       bool   vel =y [y/n]     if  y,  the  input  is  velocity;  n,  slowness\n              squared\n       string vx = ®\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/fomels/Meikonalvti.c\nVERSION\n       4.2-git Meikonal.c 1507 2005-10-22 04:01:28Z savap\n\nMadagascar                         JULY 2024                   sfeikonalvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeikvti-Tuple{}","page":"Home","title":"Madagascar.sfeikvti","text":"sfeikvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeikvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeikvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfeikvti(1)                   Madagascar Manuals                   sfeikvti(1)\n\nNAME\n       sfeikvti - VTI eikonal solver (3-D).\n\nSYNOPSIS\n       sfeikvti  <  bv.rsf > time.rsf shotfile=shots.rsf order=2 br1=d1 br2=d2\n       br3=d3 plane1=n plane2=n plane3=n b1=plane[2]? n1:  (int)  (br1/d1+0.5)\n       b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int) (br3/d3+0.5)\n       zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3 vv= eta=\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3 =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity  box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3  =d3      Constant-velocity box around the source (in physi‐\n              cal dimensions)\n       string eta = ®\n       int    order =2 [1,2]     Accuracy order\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       string vv = ®\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/tariq/Meikvti.c\nVERSION\n       4.2-git Meikvti.c 4136 2009-02-07 17:20:32Z sfomel\n\nMadagascar                         JULY 2024                       sfeikvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfemd-Tuple{}","page":"Home","title":"Madagascar.sfemd","text":"sfemd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfemd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfemd. See ?m8r for examples.\n\nRSF Documentation\n\nsfemd(1)                      Madagascar Manuals                      sfemd(1)\n\nNAME\n       sfemd - Empirical Mode Decomposition\n\nSYNOPSIS\n       sfemd  <  inp.rsf  > outp.rsf threshold=DEFAULT_THRESHOLD tolerance=DE‐\n       FAULT_TOLERANCE miter=MAX_ITERATIONS mimf=0\n\nPARAMETERS\n       int    mimf =0      Maximum number of IMFs, the default is as  many  as\n              possible.\n       int    miter  =MAX_ITERATIONS       Maximum number of iterations during\n              sifting, the default is 1000.\n       float  threshold  =DEFAULT_THRESHOLD       Sifting  stoping  parameter:\n              threshold, the default is 0.05.\n       float  tolerance  =DEFAULT_TOLERANCE       Sifting  stoping  parameter:\n              tolerance, the default is 0.05.\nSOURCE\n       user/chenyk/Memd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfemd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfemfdm2d-Tuple{}","page":"Home","title":"Madagascar.sfemfdm2d","text":"sfemfdm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfemfdm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfemfdm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfemfdm2d(1)                  Madagascar Manuals                  sfemfdm2d(1)\n\nNAME\n       sfemfdm2d - 2D EM FD modeling\n\nSYNOPSIS\n       sfemfdm2d  < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf\n       mag=Fmag.rsf ele=Fele.rsf  cdt=Fcdt.rsf  verb=n  snap=n  free=n  expl=n\n       dabc=n   jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)  oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       file   cdt =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   ele =      auxiliary input file name\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   mag =      auxiliary input file name\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Memfdm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfemfdm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfemfdm2d_p-Tuple{}","page":"Home","title":"Madagascar.sfemfdm2d_p","text":"sfemfdm2d_p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfemfdm2d_p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfemfdm2d_p. See ?m8r for examples.\n\nRSF Documentation\n\nsfemfdm2dp(1)                Madagascar Manuals                sfemfdm2dp(1)\n\nNAME\n       sfemfdm2d_p - 2D EM FD modeling\n\nSYNOPSIS\n       sfemfdm2d_p   <   Fwav.rsf  sou=Fsou.rsf  rec=Frec.rsf  wfl=Fwfl.rsf  >\n       Fdat.rsf mag=Fmag.rsf ele=Fele.rsf cdt=Fcdt.rsf  verb=n  snap=n  free=n\n       expl=n  dabc=n  jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       file   cdt =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   ele =      auxiliary input file name\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   mag =      auxiliary input file name\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/ditthara/Memfdm2d_p.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfemfdm2d_p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfemfdm3d-Tuple{}","page":"Home","title":"Madagascar.sfemfdm3d","text":"sfemfdm3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfemfdm3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfemfdm3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfemfdm3d(1)                  Madagascar Manuals                  sfemfdm3d(1)\n\nNAME\n       sfemfdm3d - 3D Electromagnetic time-domain FD modeling\n\nSYNOPSIS\n       sfemfdm3d  < Fwav.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf\n       mag=Fmag.rsf ele=Fele.rsf  cdt=Fcdt.rsf  verb=n  snap=n  free=n  expl=n\n       dabc=n   jdata=1   jsnap=nt   nqz=sf_n(az)   nqx=sf_n(ax)  nqy=sf_n(ay)\n       oqz=sf_o(az)  oqx=sf_o(ax)   oqy=sf_o(ay)   dqz=sf_d(az)   dqx=sf_d(ax)\n       dqy=sf_d(ay) nb=2\n\nCOMMENTS\n       4th order in space, 2nd order in time. Absorbing boundary conditions.\n\nPARAMETERS\n       file   cdt =      auxiliary input file name\n       bool   dabc =n [y/n]     Absorbing BC\n       float  dqx =sf_d(ax)      Saved wfld window dx\n       float  dqy =sf_d(ay)      Saved wfld window dy\n       float  dqz =sf_d(az)      Saved wfld window dz\n       file   ele =      auxiliary input file name\n       bool   expl =n [y/n]     Multiple sources, one wvlt\n       bool   free =n [y/n]     Free surface flag\n       int    jdata =1      # of t steps at which to save receiver data\n       int    jsnap =nt      # of t steps at which to save wavefield\n       file   mag =      auxiliary input file name\n       int    nb =2      boundary padding in grid points\n       int    nqx =sf_n(ax)      Saved wfld window nx\n       int    nqy =sf_n(ay)      Saved wfld window ny\n       int    nqz =sf_n(az)      Saved wfld window nz\n       float  oqx =sf_o(ax)      Saved wfld window ox\n       float  oqy =sf_o(ay)      Saved wfld window oy\n       float  oqz =sf_o(az)      Saved wfld window oz\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     Wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/ditthara/Memfdm3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfemfdm3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfencode-Tuple{}","page":"Home","title":"Madagascar.sfencode","text":"sfencode(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfencode on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfencode. See ?m8r for examples.\n\nRSF Documentation\n\nsfencode(1)                   Madagascar Manuals                   sfencode(1)\n\nNAME\n       sfencode - shot encoding with arbitrary delays\n\nSYNOPSIS\n       sfencode < Fi.rsf del=Fd.rsf > Fo.rsf ompchunk=1 ompnth=0 verb=n\n\nPARAMETERS\n       file   del =      auxiliary input file name\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mencode.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfencode(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfenergy-Tuple{}","page":"Home","title":"Madagascar.sfenergy","text":"sfenergy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfenergy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfenergy. See ?m8r for examples.\n\nRSF Documentation\n\nsfenergy(1)                   Madagascar Manuals                   sfenergy(1)\n\nNAME\n       sfenergy -\n\nSYNOPSIS\n       sfenergy < input.rsf > log_eo.rsf wind=\n\nCOMMENTS\n       Estimate energy of input\n\n       E(t) = its_{k=(t-rac{R}{2})}^{(t+rac{R}{2})}A(k)^2\n\nPARAMETERS\n       int    wind =      Rolling window size\nSOURCE\n       user/sbader/Menergy.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfenergy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeno2-Tuple{}","page":"Home","title":"Madagascar.sfeno2","text":"sfeno2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeno2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeno2. See ?m8r for examples.\n\nRSF Documentation\n\nsfeno2(1)                     Madagascar Manuals                     sfeno2(1)\n\nNAME\n       sfeno2  -  Convert  velocity to slowness and compute gradient using ENO\n       interpolation\n\nSYNOPSIS\n       sfeno2 < vel.rsf > out.rsf order=3 is_inverse=1\n\nPARAMETERS\n       bool   is_inverse =1 [y/n]     make vel to slowness\n       int    order =3      interpolation order\nSOURCE\n       user/fomels/Meno2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfeno2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfenoint2-Tuple{}","page":"Home","title":"Madagascar.sfenoint2","text":"sfenoint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfenoint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfenoint2. See ?m8r for examples.\n\nRSF Documentation\n\nsfenoint2(1)                  Madagascar Manuals                  sfenoint2(1)\n\nNAME\n       sfenoint2 - ENO interpolation in 2-D slices.\n\nSYNOPSIS\n       sfenoint2 < in.rsf > out.rsf head=head.rsf xkey= ykey= interp=2\n\nPARAMETERS\n       file   head =      auxiliary input file name\n       int    interp =2      interpolation order\n       int    xkey =      x key number\n       int    ykey =      y key number\nSOURCE\n       system/generic/Menoint2.c\nVERSION\n       4.2-git Mbin.c 847 2004-10-27 20:33:16Z fomels\n\nMadagascar                         JULY 2024                      sfenoint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfenvelope-Tuple{}","page":"Home","title":"Madagascar.sfenvelope","text":"sfenvelope(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfenvelope on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfenvelope. See ?m8r for examples.\n\nRSF Documentation\n\nsfenvelope(1)                 Madagascar Manuals                 sfenvelope(1)\n\nNAME\n       sfenvelope - None\n\nSYNOPSIS\n       sfenvelope < in.rsf > out.rsf order=100 ref=1. hilb=n phase=90.\n\nPARAMETERS\n       bool   hilb =n [y/n]     if y, compute Hilbert transform\n       int    order =100      Hilbert transformer order\n       float  phase =90.       phase shift (in degrees) to use with hilb=y\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\nUSED IN\n       cup/rna2d/real\nSOURCE\n       system/seismic/Menvelope.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfenvelope(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepfad-Tuple{}","page":"Home","title":"Madagascar.sfepfad","text":"sfepfad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepfad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepfad. See ?m8r for examples.\n\nRSF Documentation\n\nsfepfad(1)                    Madagascar Manuals                    sfepfad(1)\n\nNAME\n       sfepfad - ADaptive Eage Preserving Filter\n\nSYNOPSIS\n       sfepfad < in.rsf > out.rsf rect1=0 rect2=0 rect3=0\n\nPARAMETERS\n       int    rect1 =0 ®\n       int    rect2 =0 ®\n       int    rect3 =0      smoothing half window on the #-th dimension\nSOURCE\n       user/chen/Mepfad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfepfad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepfbe-Tuple{}","page":"Home","title":"Madagascar.sfepfbe","text":"sfepfbe(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepfbe on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepfbe. See ?m8r for examples.\n\nRSF Documentation\n\nsfepfbe(1)                    Madagascar Manuals                    sfepfbe(1)\n\nNAME\n       sfepfbe - Bi-Exponential Edge Preserving Smoothing\n\nSYNOPSIS\n       sfepfbe < in.rsf > out.rsf twod=n sigma=1.0 lamda=0.8 kernel=\n\nPARAMETERS\n       string kernel =      similarity: gaussian\n       float  lamda =0.8      lamda\n       float  sigma =1.0      normalizing parameter\n       bool   twod =n [y/n]     y, 2D smoothing\nSOURCE\n       user/chen/Mepfbe.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfepfbe(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepfbil-Tuple{}","page":"Home","title":"Madagascar.sfepfbil","text":"sfepfbil(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepfbil on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepfbil. See ?m8r for examples.\n\nRSF Documentation\n\nsfepfbil(1)                   Madagascar Manuals                   sfepfbil(1)\n\nNAME\n       sfepfbil - Bilateral filter\n\nSYNOPSIS\n       sfepfbil < in.rsf > out.rsf twod=n sigmar=1.0 sigmad=1.0\n\nPARAMETERS\n       float  sigmad =1.0      sigma for domain filter\n       float  sigmar =1.0      sigma for range filter\n       bool   twod =n [y/n]     y, 2D smoothing\nSOURCE\n       user/chen/Mepfbil.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfepfbil(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepfws-Tuple{}","page":"Home","title":"Madagascar.sfepfws","text":"sfepfws(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepfws on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepfws. See ?m8r for examples.\n\nRSF Documentation\n\nsfepfws(1)                    Madagascar Manuals                    sfepfws(1)\n\nNAME\n       sfepfws - Edge preserving (smoothing) filter by window selection\n\nSYNOPSIS\n       sfepfws < in.rsf > out.rsf nfw=5 order=nfw-1 filter=\n\nPARAMETERS\n       string filter =      filter: mean,median,poly,fir\n       int    nfw =5      window size\n       int    order  =nfw-1      filter order (<= nfw, only for polynomial and\n              fir filters)\nSOURCE\n       user/chen/Mepfws.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfepfws(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepisort-Tuple{}","page":"Home","title":"Madagascar.sfepisort","text":"sfepisort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepisort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepisort. See ?m8r for examples.\n\nRSF Documentation\n\nsfepisort(1)                  Madagascar Manuals                  sfepisort(1)\n\nNAME\n       sfepisort  -  Sort microseismic surface array recording traces by their\n       distances or azimuths to a given epicenter.\n\nSYNOPSIS\n       sfepisort   <    in.rsf    x=x_file.rsf    y=y_file.rsf    >    out.rsf\n       dist=dist_file.rsf theta=theta_file.rsf epi_x= epi_y= sort=\n\nPARAMETERS\n       file   dist =      auxiliary output file name\n       float  epi_x =      referenced epicenter coordinate x.\n       float  epi_y =      referenced epicenter coordinate y.\n       string sort =      sort distance[d] (default) or angle[a]\n       file   theta =      auxiliary output file name\n       file   x =      auxiliary input file name\n       file   y =      auxiliary input file name\nSOURCE\n       user/yunzhi/Mepisort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfepisort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepot-Tuple{}","page":"Home","title":"Madagascar.sfepot","text":"sfepot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepot. See ?m8r for examples.\n\nRSF Documentation\n\nsfepot(1)                     Madagascar Manuals                     sfepot(1)\n\nNAME\n       sfepot - compute quasi-static electric potential\n\nSYNOPSIS\n       sfepot  <  Feso.rsf > Fepo.rsf con=Fcon.rsf verb=n cbnd=y csrf=n meth=0\n       nit=100000\n\nPARAMETERS\n       bool   cbnd =y [y/n]     conductive boundary\n       file   con =      auxiliary input file name\n       bool   csrf =n [y/n]     conductive surface\n       int    meth =0      method flag\n       int    nit =100000      Jacobi iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mepot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfepot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfepsf-Tuple{}","page":"Home","title":"Madagascar.sfepsf","text":"sfepsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfepsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfepsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfepsf(1)                     Madagascar Manuals                     sfepsf(1)\n\nNAME\n       sfepsf - 1-D and 2-D edge-preserving smoothing (EPS) filter.\n\nSYNOPSIS\n       sfepsf  <  in.rsf  >  out.rsf  nfw1=  nfw2=1 boundary=n verb=n weight=n\n       sigma=3. type=\n\nCOMMENTS\n       1D filter (nfw2=1); 2D filter (otherwise)\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw1 =      filter-window length in n1 direction  (positive  and\n              odd integer)\n       int    nfw2 =1      filter-window length in n2 direction (default=1, 1D\n              case)\n       float  sigma =3.       Gaussian weight radius (only for stack)\n       string type =      [stack,median] filter choice, the default  is  stack\n              (mean)\n       bool   verb =n [y/n]     verbosity flag\n       bool   weight =n [y/n]     Gaussian weight flag (only for stack)\nSOURCE\n       user/yliu/Mepsf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfepsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfequal-Tuple{}","page":"Home","title":"Madagascar.sfequal","text":"sfequal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfequal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfequal. See ?m8r for examples.\n\nRSF Documentation\n\nsfequal(1)                    Madagascar Manuals                    sfequal(1)\n\nNAME\n       sfequal - Image enhancement by histogram equalization.\n\nSYNOPSIS\n       sfequal < in.rsf > out.rsf\n\nSOURCE\n       system/generic/Mequal.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfequal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sferf-Tuple{}","page":"Home","title":"Madagascar.sferf","text":"sferf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sferf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sferf. See ?m8r for examples.\n\nRSF Documentation\n\nsferf(1)                      Madagascar Manuals                      sferf(1)\n\nNAME\n       sferf - Bandpass filtering using erf function.\n\nSYNOPSIS\n       sferf < in.rsf > out.rsf flo=-1. fhi=-1. rect=1 spline=n der=n\n\nPARAMETERS\n       bool   der =n [y/n]     compute derivative\n       float  fhi =-1.       high frequency in band\n       float  flo =-1.       low frequency in band\n       float  rect =1      filter sharpness\n       bool   spline =n [y/n]     if use B-spline erf\nSOURCE\n       user/fomels/Merf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sferf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescbsc3-Tuple{}","page":"Home","title":"Madagascar.sfescbsc3","text":"sfescbsc3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescbsc3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescbsc3. See ?m8r for examples.\n\nRSF Documentation\n\nsfescbsc3(1)                  Madagascar Manuals                  sfescbsc3(1)\n\nNAME\n       sfescbsc3 - Prepare supercells for stitching escape tables in 3-D.\n\nSYNOPSIS\n       sfescbsc3  < adom.rsf > out.rsf vspl=vspline.rsf verb=n nz= oz= dz= nx=\n       ox= dx= ny= oy= dy= na= nb= df=0.1 nc=0 parab=y md=dz\n\nPARAMETERS\n       float  df =0.1      < Maximum distance to travel per step (fraction  of\n              the cell size) >\n       float  dx =      Sampling of x axis\n       float  dy =      Sampling of y axis\n       float  dz =      Sampling of z axis\n       float  md =dz      Half-width of a supercell\n       int    na =      Number of samples in azimuth dimension\n       int    nb =      Number of samples in inclination dimension\n       int    nc   =0        Number   of   threads  to  use  for  ray  tracing\n              (OMP_NUM_THREADS by default)\n       int    nx =      Number of samples in x axis\n       int    ny =      Number of samples in y axis\n       int    nz =      Number of samples in z axis\n       float  ox =      Beginning of x axis\n       float  oy =      Beginning of y axis\n       float  oz =      Beginning of z axis\n       bool   parab =y [y/n]     y - use parabolic approximation of  trajecto‐\n              ries, n - straight line\n       bool   verb =n [y/n]     verbosity flag\n       string vspl  =       Spline  coefficients for velocity model (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescbsc3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfescbsc3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescdiff-Tuple{}","page":"Home","title":"Madagascar.sfescdiff","text":"sfescdiff(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescdiff on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescdiff. See ?m8r for examples.\n\nRSF Documentation\n\nsfescdiff(1)                  Madagascar Manuals                  sfescdiff(1)\n\nNAME\n       sfescdiff  - Compute distance and traveltime difference between two es‐\n       cape tables.\n\nSYNOPSIS\n       sfescdiff   <   esct0.rsf   >   out.rsf   esct=esct1.rsf   maxd=SF_HUGE\n       maxt=SF_HUGE mask=SF_HUGE\n\nPARAMETERS\n       string esct  =       Second  set of escape tables (auxiliary input file\n              name)\n       float  mask =SF_HUGE      Mask for values above maxd= and maxt= thresh‐\n              olds\n       float  maxd =SF_HUGE      Maximum allowed distance\n       float  maxt =SF_HUGE      Maximum allowed time\nSOURCE\n       user/cram/Mescdiff.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfescdiff(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescfgrid2-Tuple{}","page":"Home","title":"Madagascar.sfescfgrid2","text":"sfescfgrid2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescfgrid2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescfgrid2. See ?m8r for examples.\n\nRSF Documentation\n\nsfescfgrid2(1)                Madagascar Manuals                sfescfgrid2(1)\n\nNAME\n       sfescfgrid2  -  Solution  of escape equations by Gauss-Seidel solver on\n       full grid for 2-D (an)isotropic media.\n\nSYNOPSIS\n       sfescfgrid2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 mdist=SF_HUGE\n       thresh=1e-6  morder=ESC2_MORDER  niter=nx  atraced=n  mtraced=n  cmix=n\n       tracebc=y verb=n\n\nPARAMETERS\n       bool   atraced =n [y/n]     true - output map of all traced points\n       bool   cmix =n [y/n]     true - check for color mixing\n       float  mdist =SF_HUGE      Maximum distance between points in F-D sten‐\n              cil\n       int    morder =ESC2_MORDER      Maximum order in F-D stencil\n       bool   mtraced  =n [y/n]     true - output map of points traced because\n              of mdist criterion\n       int    na =360      Number of phase angles\n       int    niter =nx      Maximum number of Gauss-Seidel iterations\n       float  thresh =1e-6      Convergence threshold\n       bool   tracebc =y [y/n]     n - do not trace B.C. points\n       bool   verb =n [y/n]     verbosity flag\n       string vspl =      Spline coefficients for  velocity  model  (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescfgrid2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfescfgrid2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescnband2-Tuple{}","page":"Home","title":"Madagascar.sfescnband2","text":"sfescnband2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescnband2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescnband2. See ?m8r for examples.\n\nRSF Documentation\n\nsfescnband2(1)                Madagascar Manuals                sfescnband2(1)\n\nNAME\n       sfescnband2 - Solution of escape equations by hybrid solver with narrow\n       band for 2-D (an)isotropic media.\n\nSYNOPSIS\n       sfescnband2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 mdist=SF_HUGE\n       morder=ESC2_MORDER atraced=n mtraced=n cmix=y tracebc=y verb=n\n\nPARAMETERS\n       bool   atraced =n [y/n]     true - output map of all traced points\n       bool   cmix =y [y/n]     true - check for color mixing\n       float  mdist =SF_HUGE      Maximum distance between points in F-D sten‐\n              cil\n       int    morder =ESC2_MORDER      Maximum order in F-D stencil\n       bool   mtraced =n [y/n]     true - output map of points traced  because\n              of mdist criterion\n       int    na =360      Number of phase angles\n       bool   tracebc =y [y/n]     n - do not trace B.C. points\n       bool   verb =n [y/n]     verbosity flag\n       string vspl  =       Spline  coefficients for velocity model (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescnband2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfescnband2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescrt2-Tuple{}","page":"Home","title":"Madagascar.sfescrt2","text":"sfescrt2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescrt2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescrt2. See ?m8r for examples.\n\nRSF Documentation\n\nsfescrt2(1)                   Madagascar Manuals                   sfescrt2(1)\n\nNAME\n       sfescrt2 - Escape tables by ray tracing with escape equations in 2-D.\n\nSYNOPSIS\n       sfescrt2  <  spdom.rsf  > out.rsf traj=traj.rsf vspl=vspline.rsf na=360\n       df=0.25 md=SF_HUGE aper=SF_HUGE nc=0 parab=y verb=n nt=1001 dt=0.001\n\nPARAMETERS\n       float  aper =SF_HUGE      Maximum aperture in x and y  directions  from\n              current point (default - up to model boundaries)\n       float  df =0.25      < Maximum distance to travel per step (fraction of\n              the cell size) >\n       float  dt =0.001      Time sampling\n       float  md =SF_HUGE      Maximum distance for a ray to travel (default -\n              up to model boundaries)\n       int    na =360      Number of phase angles\n       int    nc   =0        Number   of   threads  to  use  for  ray  tracing\n              (OMP_NUM_THREADS by default)\n       int    nt =1001      Number of time samples for each trajectory\n       bool   parab =y [y/n]     y - use parabolic approximation of  trajecto‐\n              ries, n - straight line\n       string traj =      Trajectory output (auxiliary output file name)\n       bool   verb =n [y/n]     verbosity flag\n       string vspl  =       Spline  coefficients for velocity model (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescrt2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfescrt2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescrt3-Tuple{}","page":"Home","title":"Madagascar.sfescrt3","text":"sfescrt3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescrt3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescrt3. See ?m8r for examples.\n\nRSF Documentation\n\nsfescrt3(1)                   Madagascar Manuals                   sfescrt3(1)\n\nNAME\n       sfescrt3 - Escape tables by ray tracing with escape equations in 3-D.\n\nSYNOPSIS\n       sfescrt3  <  spdom.rsf  > out.rsf traj=traj.rsf vspl=vspline.rsf na=360\n       nb=180 df=0.1  md=SF_HUGE  aper=SF_HUGE  nc=0  parab=y  verb=n  nt=1001\n       dt=0.001\n\nPARAMETERS\n       float  aper  =SF_HUGE       Maximum aperture in x and y directions from\n              current point (default - up to model boundaries)\n       float  df =0.1      < Maximum distance to travel per step (fraction  of\n              the cell size) >\n       float  dt =0.001      Time sampling\n       float  md =SF_HUGE      Maximum distance for a ray to travel (default -\n              up to model boundaries)\n       int    na =360      Number of azimuth phase angles\n       int    nb =180      Number of inclination phase angles\n       int    nc  =0       Number  of  threads  to   use   for   ray   tracing\n              (OMP_NUM_THREADS by default)\n       int    nt =1001      Number of time samples for each trajectory\n       bool   parab  =y [y/n]     y - use parabolic approximation of trajecto‐\n              ries, n - straight line\n       string traj =      Trajectory output (auxiliary output file name)\n       bool   verb =n [y/n]     verbosity flag\n       string vspl =      Spline coefficients for  velocity  model  (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescrt3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfescrt3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescscd3-Tuple{}","page":"Home","title":"Madagascar.sfescscd3","text":"sfescscd3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescscd3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescscd3. See ?m8r for examples.\n\nRSF Documentation\n\nsfescscd3(1)                  Madagascar Manuals                  sfescscd3(1)\n\nNAME\n       sfescscd3 - Daemon for distributed computation of stitched escape solu‐\n       tions in supercells in 3-D.\n\nSYNOPSIS\n       sfescscd3 < in.rsf > out.rsf scgrid=scgrid.rsf nab=1  port=29542  ith=0\n       inet=1 ma=20 mb=20 nthreads=2*ncpu timeout=10 tdelay=0\n\nPARAMETERS\n       int    inet =1      Network interface index\n       int    ith =0      Make every ith process a daemon\n       int    ma =20      How many azimuth angles to expect per request\n       int    mb =20      How many inclination angles to expect per request\n       int    nab  =1      Number of angular blocks to keep in memory per dae‐\n              mon\n       int    nthreads =2*ncpu      Number of threads (connections) per daemon\n       int    port =29542      TCP port for listening\n       string scgrid =      Grid of supercells of local escape solutions (aux‐\n              iliary input file name)\n       int    tdelay  =0       Time  delay  before  accessing  data, tdel*icpu\n              (secs)\n       int    timeout =10      Inactivity time before shutdown (mins)\nSOURCE\n       user/cram/Mescscd3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfescscd3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfescst3-Tuple{}","page":"Home","title":"Madagascar.sfescst3","text":"sfescst3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfescst3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfescst3. See ?m8r for examples.\n\nRSF Documentation\n\nsfescst3(1)                   Madagascar Manuals                   sfescst3(1)\n\nNAME\n       sfescst3 - Escape tables by stitching of escape solutions in supercells\n       in 3-D.\n\nSYNOPSIS\n       sfescst3 < spdom.rsf > out.rsf vspl=vspline.rsf  scgrid=scgrid.rsf  sc‐\n       daemon=scdaemon.rsf   na=360  nb=180  mp=1  nc=0  aper=SF_HUGE  parab=y\n       mmaped=y rfail=y verb=n morder=1 inet=1 tdel=0\n\nPARAMETERS\n       float  aper =SF_HUGE      Maximum aperture in x and y  directions  from\n              current point (default - up to grid boundaries)\n       int    inet =1      Network interface index\n       bool   mmaped =y [y/n]     n - do not use memory mapping for local data\n              access\n       int    morder =1      Order of interpolation accuracy  in  the  angular\n              domain (1-3)\n       int    mp =1      Bufferization factor for multicore processing (number\n              of points in buffer = mp*nc)\n       int    na =360      Number of azimuth phase angles\n       int    nb =180      Number of inclination phase angles\n       int    nc  =0       Number  of  threads  to   use   for   ray   tracing\n              (OMP_NUM_THREADS by default)\n       bool   parab  =y [y/n]     y - use parabolic approximation of trajecto‐\n              ries, n - straight line\n       bool   rfail =y [y/n]     n - do not quit if remote  processing  fails,\n              try local processing\n       string scdaemon  =       Daemon  for distributed computation (auxiliary\n              input file name)\n       string scgrid =      Grid of supercells of local escape solutions (aux‐\n              iliary input file name)\n       int    tdel =0      Optional delay time before connecting (seconds)\n       bool   verb =n [y/n]     verbosity flag\n       string vspl  =       Spline  coefficients for velocity model (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mescst3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfescst3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfesctbl2-Tuple{}","page":"Home","title":"Madagascar.sfesctbl2","text":"sfesctbl2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfesctbl2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfesctbl2. See ?m8r for examples.\n\nRSF Documentation\n\nsfesctbl2(1)                  Madagascar Manuals                  sfesctbl2(1)\n\nNAME\n       sfesctbl2 - Esctape tables from solution of escape equations by the hy‐\n       brid solver with narrow band.\n\nSYNOPSIS\n       sfesctbl2 < in.rsf > out.rsf verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cram/Mesctbl2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfesctbl2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfesou-Tuple{}","page":"Home","title":"Madagascar.sfesou","text":"sfesou(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfesou on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfesou. See ?m8r for examples.\n\nRSF Documentation\n\nsfesou(1)                     Madagascar Manuals                     sfesou(1)\n\nNAME\n       sfesou - source for quasistatic electric potential\n\nSYNOPSIS\n       sfesou < Fpre.rsf > Feso.rsf ske=Fske.rsf qke=Fqke.rsf verb=n zbnd=n\n\nPARAMETERS\n       file   qke =      auxiliary input file name\n       file   ske =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       bool   zbnd =n [y/n]     boundary flag\nSOURCE\n       user/psava/Mesou.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfesou(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewdlr3-Tuple{}","page":"Home","title":"Madagascar.sfewdlr3","text":"sfewdlr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewdlr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewdlr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfewdlr3(1)                   Madagascar Manuals                   sfewdlr3(1)\n\nNAME\n       sfewdlr3 - None\n\nSYNOPSIS\n       sfewdlr3  <  c11.rsf  c14=c14.rsf  theta=q1.rsf  verb=false  tilt=false\n       tric=false seed=time(NULL  eps=1.e-6  npk=20  nb=0  dt=1.e-3  tau=1.e-1\n       mode=0 jump=1\n\nPARAMETERS\n       file   c14 =      auxiliary input file name\n       dt     =1.e-3      time step size\n       eps    =1.e-6      tolerance\n       jump   =1      jump step for reduced lowrank decomposition\n       mode   =0       wavefield  decomposition  mode  (0->slow  S, 1->fast S,\n              2->P)\n       nb     =0      boundary padding\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       tau    =1.e-1      smoothing radius\n       file   theta =      auxiliary input file name\n       tilt   =false      tilting of TTI\n       tric   =false      triclinic anisotropy\n       verb   =false      verbosity flag\nSOURCE\n       user/jsun/Mewdlr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfewdlr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewdlr3d-Tuple{}","page":"Home","title":"Madagascar.sfewdlr3d","text":"sfewdlr3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewdlr3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewdlr3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfewdlr3d(1)                  Madagascar Manuals                  sfewdlr3d(1)\n\nNAME\n       sfewdlr3d  -  3D  elastic  recursive  integral time extrapolation using\n       KISS-FFT\n\nSYNOPSIS\n       sfewdlr3d < Finp.rsf rnk=Frnk.rsf lft=Flft.rsf rht=Frht.rsf >  Fout.rsf\n       verb=n\n\nCOMMENTS\n       sou  wavelet   (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt) sou geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       file   lft =      auxiliary input file name\n       file   rht =      auxiliary input file name\n       file   rnk =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jsun/Mewdlr3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewdlr3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewedc3d-Tuple{}","page":"Home","title":"Madagascar.sfewedc3d","text":"sfewedc3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewedc3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewedc3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfewedc3d(1)                  Madagascar Manuals                  sfewedc3d(1)\n\nNAME\n       sfewedc3d  - 3D elastic recursive integral time extrapolation of decom‐\n       posed wave modes using shared-memory parallel FFT  (decoupled  formula‐\n       tion)\n\nSYNOPSIS\n       sfewedc3d  < Fwav.rsf > Fdat.rsf sou=Fsou.rsf rec=Frec.rsf ccc=Fccc.rsf\n       rkp=Frkp.rsf  ltp=Fltp.rsf   rtp=Frtp.rsf   wfp=Fwfp.rsf   rks=Frks.rsf\n       lts=Flts.rsf  rts=Frts.rsf  wfs=Fwfs.rsf  verb=n  snap=n  free=n back=n\n       esou=n dabc=n nbell=NOP jdata=1  jsnap=nt  nb=NOP  cb=1.f  nqz=sf_n(az)\n       nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou  wavelet   (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt) sou geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       float  cb =1.f ®\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       bool   esou =n [y/n]     explosive force source\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   ltp =      auxiliary input file name\n       file   lts =      auxiliary input file name\n       int    nb =NOP ®\n       int    nbell =NOP      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       file   rkp =      auxiliary input file name\n       file   rks =      auxiliary input file name\n       file   rtp =      auxiliary input file name\n       file   rts =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfp =      auxiliary output file name\n       file   wfs =      auxiliary output file name\nSOURCE\n       user/jsun/Mewedc3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewedc3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewedc3dgrad-Tuple{}","page":"Home","title":"Madagascar.sfewedc3dgrad","text":"sfewedc3dgrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewedc3dgrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewedc3dgrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfewedc3dgrad(1)              Madagascar Manuals              sfewedc3dgrad(1)\n\nNAME\n       sfewedc3dgrad - 3D elastic recursive integral time extrapolation of de‐\n       composed wave modes using KISS-FFT\n\nSYNOPSIS\n       sfewedc3dgrad  <  Fwav.rsf   >   Fdat.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       ccc=Fccc.rsf   rkp=Frkp.rsf   ltp=Fltp.rsf   rtp=Frtp.rsf  wfp=Fwfp.rsf\n       rks=Frks.rsf  lts=Flts.rsf  rts=Frts.rsf  wfs=Fwfs.rsf  verb=n   snap=n\n       free=n  back=n  esou=n  nbell=NOP  jdata=1 jsnap=nt nb=NOP nqz=sf_n(az)\n       nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou wavelet  (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt)  sou  geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       file   ccc =      auxiliary input file name\n       bool   esou =n [y/n]     explosive force source\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   ltp =      auxiliary input file name\n       file   lts =      auxiliary input file name\n       int    nb =NOP ®\n       int    nbell =NOP      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       file   rkp =      auxiliary input file name\n       file   rks =      auxiliary input file name\n       file   rtp =      auxiliary input file name\n       file   rts =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfp =      auxiliary output file name\n       file   wfs =      auxiliary output file name\nSOURCE\n       user/jsun/Mewedc3dgrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfewedc3dgrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewedc3p-Tuple{}","page":"Home","title":"Madagascar.sfewedc3p","text":"sfewedc3p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewedc3p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewedc3p. See ?m8r for examples.\n\nRSF Documentation\n\nsfewedc3p(1)                  Madagascar Manuals                  sfewedc3p(1)\n\nNAME\n       sfewedc3p - None\n\nSYNOPSIS\n       sfewedc3p  <  c11.rsf  c14=c14.rsf  theta=q1.rsf  verb=false tilt=false\n       tric=false seed=time(NULL eps=1.e-6 npk=20 nb=0 dt=1.e-3\n\nPARAMETERS\n       file   c14 =      auxiliary input file name\n       dt     =1.e-3      time step size\n       eps    =1.e-6      tolerance\n       nb     =0      boundary padding\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   theta =      auxiliary input file name\n       tilt   =false      tilting of TTI\n       tric   =false      triclinic anisotropy\n       verb   =false      verbosity flag\nSOURCE\n       user/jsun/Mewedc3p.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewedc3p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewedc3s-Tuple{}","page":"Home","title":"Madagascar.sfewedc3s","text":"sfewedc3s(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewedc3s on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewedc3s. See ?m8r for examples.\n\nRSF Documentation\n\nsfewedc3s(1)                  Madagascar Manuals                  sfewedc3s(1)\n\nNAME\n       sfewedc3s - None\n\nSYNOPSIS\n       sfewedc3s  <  c11.rsf  c14=c14.rsf  theta=q1.rsf  verb=false tilt=false\n       tric=false seed=time(NULL eps=1.e-6 npk=20 nb=0 dt=1.e-3\n\nPARAMETERS\n       file   c14 =      auxiliary input file name\n       dt     =1.e-3      time step size\n       eps    =1.e-6      tolerance\n       nb     =0      boundary padding\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   theta =      auxiliary input file name\n       tilt   =false      tilting of TTI\n       tric   =false      triclinic anisotropy\n       verb   =false      verbosity flag\nSOURCE\n       user/jsun/Mewedc3s.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewedc3s(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd2d-Tuple{}","page":"Home","title":"Madagascar.sfewefd2d","text":"sfewefd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd2d(1)                  Madagascar Manuals                  sfewefd2d(1)\n\nNAME\n       sfewefd2d - 2D elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd2d    <    Fwav.rsf   ccc=Fccc.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n\n       opot=n  nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mewefd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewefd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd2d_gpu-Tuple{}","page":"Home","title":"Madagascar.sfewefd2d_gpu","text":"sfewefd2d_gpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd2d_gpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd2d_gpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd2dgpu(1)              Madagascar Manuals              sfewefd2dgpu(1)\n\nNAME\n       sfewefd2d_gpu - 2D elastic time-domain FD modeling with GPU\n\nSYNOPSIS\n       sfewefd2d_gpu   <   Fwav.rsf   ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n\n       gpu=0 nbell=5 jdata=1 jsnap=nt\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    gpu =0      ID of the GPU to be used\n       int    jdata =1      extract receiver data every jdata time steps\n       int    jsnap =nt      save wavefield every jsnap time steps\n       int    nbell =5      bell size\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/rweiss/Mewefd2d_gpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfewefd2d_gpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd2d_gpu_dev-Tuple{}","page":"Home","title":"Madagascar.sfewefd2d_gpu_dev","text":"sfewefd2d_gpu_dev(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd2d_gpu_dev on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd2d_gpu_dev. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd2dgpudev(1)          Madagascar Manuals          sfewefd2dgpudev(1)\n\nNAME\n       sfewefd2d_gpu_dev  -  2D elastic time-domain FD modeling with GPU (with\n       experimental functionalities)\n\nSYNOPSIS\n       sfewefd2d_gpu_dev <  Fwav.rsf  ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf  wfl=Fwfl.rsf  >  Fdat.rsf  um=Fum.rsf  uo=Fuo.rsf  verb=n\n       snap=n free=n ssou=n dabc=n wavSrc=y gpu=0 nbell=5 jdata=1 jsnap=nt\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    gpu =0      ID of the GPU to be used\n       int    jdata =1      extract receiver data every jdata time steps\n       int    jsnap =nt      save wavefield every jsnap time steps\n       int    nbell =5      bell size\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       file   um =      auxiliary input file name\n       file   uo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       bool   wavSrc =y [y/n]     if yes, look for a source  wavelet.  if  no,\n              look for initial displacement fields (uo and um)\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/rweiss/Mewefd2d_gpu_dev.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfewefd2d_gpu_dev(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd2d_omp-Tuple{}","page":"Home","title":"Madagascar.sfewefd2d_omp","text":"sfewefd2d_omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd2d_omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd2d_omp. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd2domp(1)              Madagascar Manuals              sfewefd2domp(1)\n\nNAME\n       sfewefd2d_omp - 2D elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd2d_omp   <   Fwav.rsf   ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf > Fdat.rsf wfl=Fwfl.rsf verb=n snap=n free=n ssou=n dabc=n\n       opot=n  nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jeff/Mewefd2d_omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfewefd2d_omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd2dtti-Tuple{}","page":"Home","title":"Madagascar.sfewefd2dtti","text":"sfewefd2dtti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd2dtti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd2dtti. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd2dtti(1)               Madagascar Manuals               sfewefd2dtti(1)\n\nNAME\n       sfewefd2dtti - elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd2dtti   <   Fwav.rsf   ccc=Fccc.rsf   sou=Fsou.rsf  rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf ompchunk=1 ompnth=0 verb=n  snap=n\n       free=n ssou=n opot=n nbell=1 jdata=1 jsnap=nt nq1=sf_n(az) nq2=sf_n(ax)\n       oq1=sf_o(az) oq2=sf_o(ax)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =1      bell size\n       int    nq1 =sf_n(az) ®\n       int    nq2 =sf_n(ax) ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       bool   opot =n [y/n]     output potential\n       float  oq1 =sf_o(az) ®\n       float  oq2 =sf_o(ax) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\nSOURCE\n       user/jyan/Mewefd2dtti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfewefd2dtti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3d-Tuple{}","page":"Home","title":"Madagascar.sfewefd3d","text":"sfewefd3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3d(1)                  Madagascar Manuals                  sfewefd3d(1)\n\nNAME\n       sfewefd3d - 3D elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd3d    <    Fwav.rsf   ccc=Fccc.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n\n       opot=n  nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mewefd3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewefd3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3d_gpu_mpi-Tuple{}","page":"Home","title":"Madagascar.sfewefd3d_gpu_mpi","text":"sfewefd3d_gpu_mpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3d_gpu_mpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3d_gpu_mpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3dgpumpi(1)          Madagascar Manuals          sfewefd3dgpumpi(1)\n\nNAME\n       sfewefd3d_gpu_mpi  -  3D  elastic time-domain FD modeling with multiple\n       GPUs coordinated via MPI\n\nSYNOPSIS\n       sfewefd3d_gpu_mpi wav=Fwav.rsf ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n\n       interp=y ngpu=1 nbell=5 jdata=1 jsnap=nt\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       bool   interp =y [y/n]     perform linear interpolation on receiver lo‐\n              cations\n       int    jdata =1      extract receiver data every jdata time steps\n       int    jsnap =nt      save wavefield every jsnap time steps\n       int    nbell =5      bell size\n       int    ngpu  =1      Number of GPUs in each node, must be set to lowest\n              common number of GPUs\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wav =      auxiliary input file name\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/rweiss/Mewefd3d_gpu_mpi.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfewefd3d_gpu_mpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3d_gpu_p2p-Tuple{}","page":"Home","title":"Madagascar.sfewefd3d_gpu_p2p","text":"sfewefd3d_gpu_p2p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3d_gpu_p2p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3d_gpu_p2p. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3dgpup2p(1)          Madagascar Manuals          sfewefd3dgpup2p(1)\n\nNAME\n       sfewefd3d_gpu_p2p  -  3D  elastic time-domain FD modeling with GPU (For\n       use in single node with one or more GPUs)\n\nSYNOPSIS\n       sfewefd3d_gpu_p2p <  Fwav.rsf  ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf ngpu=1 verb=n snap=n free=n ssou=n\n       dabc=n interp=y nbell=5 jdata=1 jsnap=nt\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       bool   interp =y [y/n]     perform  linear  interpolation  on  receiver\n              data\n       int    jdata =1      extract receiver data every jdata time steps\n       int    jsnap =nt      save wavefield every jsnap time steps\n       int    nbell =5      bell size\n       int    ngpu =1      how many local GPUs to use\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/rweiss/Mewefd3d_gpu_p2p.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfewefd3d_gpu_p2p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3d_multiNode-Tuple{}","page":"Home","title":"Madagascar.sfewefd3d_multiNode","text":"sfewefd3d_multiNode(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3d_multiNode on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3d_multiNode. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3dmultiNode(1)        Madagascar Manuals        sfewefd3dmultiNode(1)\n\nNAME\n       sfewefd3d_multiNode  - 3D elastic time-domain FD modeling with multiple\n       GPUs coordinated via MPI and p2p\n\nSYNOPSIS\n       sfewefd3d_multiNode wav=Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf\n       rec=Frec.rsf  wfl=Fwfl.rsf  >  Fdat.rsf  um=Fum.rsf  uo=Fuo.rsf  verb=n\n       snap=n free=n ssou=n dabc=n interp=y wavSrc=y  ngpu=1  nbell=5  jdata=1\n       jsnap=nt\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       bool   interp =y [y/n]     perform linear interpolation on receiver lo‐\n              cations\n       int    jdata =1      extract receiver data every jdata time steps\n       int    jsnap =nt      save wavefield every jsnap time steps\n       int    nbell =5      bell size\n       int    ngpu =1      Number of GPUs in each node, must be set to  lowest\n              common number of GPUs\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       file   um =      auxiliary input file name\n       file   uo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wav =      auxiliary input file name\n       bool   wavSrc  =y  [y/n]     if  yes, look for a source wavelet. if no,\n              look for initial displacement fields (uo and um)\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/rweiss/Mewefd3d_multiNode.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024            sfewefd3d_multiNode(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3d_omp-Tuple{}","page":"Home","title":"Madagascar.sfewefd3d_omp","text":"sfewefd3d_omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3d_omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3d_omp. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3domp(1)              Madagascar Manuals              sfewefd3domp(1)\n\nNAME\n       sfewefd3d_omp - 3D elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd3d_omp   <   Fwav.rsf   ccc=Fccc.rsf  den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n\n       opot=n  nbell=5 jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jeff/Mewefd3d_omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfewefd3d_omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefd3dtti-Tuple{}","page":"Home","title":"Madagascar.sfewefd3dtti","text":"sfewefd3dtti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefd3dtti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefd3dtti. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefd3dtti(1)               Madagascar Manuals               sfewefd3dtti(1)\n\nNAME\n       sfewefd3dtti - 3D elastic time-domain FD modeling\n\nSYNOPSIS\n       sfewefd3dtti   <   Fwav.rsf   ccc=Fccc.rsf   den=Fden.rsf  sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=n dabc=n\n       nbell=1   jdata=1   jsnap=nt   nqz=sf_n(az)  nqx=sf_n(ax)  nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nPARAMETERS\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nbell =1      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   ssou =n [y/n]     stress source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nUSED IN\n       cwp/geo2009TTIModeSeparation/tti3\nSOURCE\n       user/jyan/Mewefd3dtti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfewefd3dtti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewefdm-Tuple{}","page":"Home","title":"Madagascar.sfewefdm","text":"sfewefdm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewefdm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewefdm. See ?m8r for examples.\n\nRSF Documentation\n\nsfewefdm(1)                   Madagascar Manuals                   sfewefdm(1)\n\nNAME\n       sfewefdm  -  Elastic  time-domain FD modeling, automatically determines\n       whether or not to use 3D or 2D, supports different types of elastic.\n\nSYNOPSIS\n       sfewefdm < Fwav.rsf ccc=Fccc.rsf den=Fden.rsf sou=Fsou.rsf rec=Frec.rsf\n       wfl=Fwfl.rsf  >  Fdat.rsf  srctype=0 ani=-1 verb=y snap=n free=n dabc=y\n       abcone=n debug=y cfl=y opot=n  nqz=sf_n(az)  nqx=sf_n(ax)  oqz=sf_o(az)\n       oqx=sf_o(ax)  nqy=sf_n(ay) oqy=sf_o(ay) nbell=1 jdata=1 nb=100 jsnap=nt\n       fmax=\n\nCOMMENTS\n       Elastic wave equation finite difference modeling in both 2D and 3D, us‐\n       ing an explicit time-domain solver.\n\n       ***  Please  see  the  SConstruct in book/tutorial/ewe for a SConstruct\n       that demonstrates how to use predefined functions for using  this  pro‐\n       gram. ***\n\n       This  program  is designed to be as generic as possible, and allows you\n       to use files with arbitrary models, and arbitrary source  and  receiver\n       geometries.   Source  types are as generic as possible.  Supports arbi‐\n       trary types of anisotropy as well.\n\n       The downside to the generality, is that the program is not  as  perfor‐\n       mant  as dedicated solvers that are less flexible.  The program is par‐\n       allelized using OpenMP, so be sure to use a compatible compiler to take\n       advantage of the performance boost.  =========== Rotated Staggered grid\n       ==========================      Ux,Uz=====================Ux,Uz      ||\n       |               ||   ||                            ||  ||             |\n       || ||             tij          || ||- - - - - - |- - - -  -  -  -||  ||\n       Cij               ||      ||                |                 ||     ||\n       ||  ||             |               ||   Ux,Uz=====================Ux,Uz\n       ===========  OPTIONS  ======================================= ani - The\n       type of  anisotropy  for  this  simulation.   Valid  options:  For  2D:\n       ISO/HTI/VTI = 0 TTI = 1\n\n       For 3D: ISO/HTI/VTI = 0 TTI    = 1\n\n       VTI,  HTI,  and Isotropic media are special cases of ISO/HTI/VTI media.\n       TTI media can be represented using TTI media.\n\n       cfl   - Execute the CFL check.  If the CFL check fails,  then  it  will\n       cause the program to fail.  The CFL check will check both the stability\n       and accuracy conditions for both p-waves and s-waves. Depending on  the\n       type  of  anisotropy  that  you  specify,  the CFL condition will use a\n       safety factor (that you can override if necessary).\n\n       NOTE: the CFL condition will  return  both  minimum  and  maximum  con‐\n       straints  on the grid given your velocity model, desired frequency con‐\n       tent, and other parameters.  IT IS POSSIBLE TO HAVE NO STABLE, AND  AC‐\n       CURATE  SOLUTIONS FOR A GIVEN MODEL WITH GIVEN PARAMETERS. THE CFL CON‐\n       DITION WILL WARN YOU IF THIS IS THE CASE.\n\n       YOU MUST SPECIFY fmax Parameter as well!\n\n       ----- STABILITY ------ The stability condition is related to the  maxi‐\n       mum wave speed and minimum grid sampling as follows:\n\n       dt < min(dx,dy,dz) / (sqrt(2)*vmax)\n\n       Given  a  time  sampling  dt,  it  is possible to determine the minimum\n       dx,dy,dz for stability.  vmax is the MAXIMUM velocity for all waves  in\n       the model (usually P-wave velocity).\n\n       For elastic FD, the P-wave most greatly influences the stability, as it\n       moves fastest on the grid.\n\n       The stability condition gives us a LOWER bound on the grid sampling for\n       a given dt.\n\n       ------ ACCURACY ------- The accuracy condition is related to the number\n       of gridpoints per wavelength.  Thus,\n\n       safety*vmin / fmax > N * sqrt(dx^2+dy^2+dz^2)\n\n       where vmin is the minimum wave velocity in the model (usually  S-wave),\n       fmax  is some relative measure of the maximum frequency of your wavelet\n       (usually 1.5*peak for Ricker), N is the number of  points  desired  per\n       wavelength  (5), and safety is a safety factor that is dependent on the\n       type of anisotropy.\n\n       For elastic FD, the S-wave most greatly impacts the accuracy of the so‐\n       lution, as the S-wave is typically much higher frequency and travels at\n       slower wave speeds, meaning shorter wavelengths.\n\n       The accuracy condition places an UPPER bound on the grid sampling.\n\n       ---- SAFETY FACTOR ----- The safety factor depends on the type  of  an‐\n       isotropy  specified, and attempts to place a lower bound on the slowest\n       S-wave velocity (guess):\n\n       ISO/HTI/VTI - (3/4) TTI    - (1/2)\n\n       You can also override the safety factor  using  the  safety  parameter.\n       safety-  Override the safety factor for the CFL condition.  This should\n       be a floating point (0-1.0).  fmax  - An estimate of the  highest  fre‐\n       quency content in your wavelet (for Ricker use 1.5*peak)\n\n       fsrf   -  Use  a  free surface at the top boundary (z=0).  WARNING: The\n       free surface condition appears to introduce  numerical  artifacts  into\n       the simulation.  USE AT YOUR OWN RISK.\n\n       snap   - Save snapshots of the wavefield every n iterations of the mod‐\n       eling program.\n\n       jsnap - Number of iterations between snapshots of the wavefield.\n       i.e.  jsnap=10, means save a snapshot every 10 iterations.           If\n       you had 1000 total iterations, then you would have 100 snapshots total.\n                The default, will output no snapshots.\n\n       jdata  -  Number  of time imterations between exporting the data at the\n       receivers.           i.e. jdata=1, means save a snapshot  every  itera‐\n       tion, which should be the default.           This can be used to change\n       the sampling of the data to something different from the  wavelet/wave‐\n       field.\n\n       verb   -  Print useful information debug - Print debugging information.\n       This is more detailed than verbose.\n\n       srctype - An integer which determines where the source wavelet  is  in‐\n       jected in the simulation.  Valid options are: 0 - Acceleration source 1\n       - Displacement source 2 - Stress source 3 - Tensor source  The  default\n       option  is 2: Acceleration source.  For Stress, Displacement and Accel‐\n       eration sources, your wavelet needs to have only 3 components  (z,x,y).\n       For a Tensor source, you must specify wavelet components for all 3 (2D)\n       or 6 (3D) tensor components in the following order: 2D: tzz,  txx,  tzx\n       3D: tzz, txx, tyy, tyz, tzx, txy\n\n       Hint:   To  inject  an acoustic source, use a stress source, with equal\n       components on all three components.\n\n       dabc  - Use a sponge layer to attenuate waves off the edge of the grid.\n       Use  this in combination with the nb parameter.  abcone- In addition to\n       the sponge layer, using a severe ramp at the very edge of the  expanded\n       sponge  layer  to severely attenuate zero-incidence waves at the bound‐\n       aries.  It's not clear if this condition actually affects most computa‐\n       tions.   opot   -  True:  output is second spatial derivative of poten‐\n       tials; False: output wavefield.  nbell - Size of gaussian used to  lin‐\n       early  interpolate  curves.   A value of 5 seems to work well.  nb    -\n       Not listed, but is an important parameter.  Allows you to  control  the\n       size  of the sponge layer for the absorbing boundary condition.  If you\n       are getting reflections off the sides, with dabc=y, then make this num‐\n       ber larger (int).  This pads the grid by this amount on all sides.  For\n       example: |--------------------------| |            ramp layer     |  |r\n       |--------------------|    |   |a   |          nb           |r  |  |m  |\n       |~~~~~~~~|    |a | |p |      |  MODEL |    |m | |  |  nb  |  SPACE | nb\n       |p  |  |   |       |~~~~~~~~|     |   |  |  |         nb         |  | |\n       |--------------------|     |    |            ramp     layer           |\n       |--------------------------| nqz, nqx, oqz, oqx, nqy, oqy, - Allows you\n       to set the parameters for the axes.  Leave as defaults.\n\n       =============BOUNDARY CONDITIONS ========================\n\n       This code enforces a fixed reflecting boundary condition at the edge of\n       the  computational domain.  The absorbing sponge is used IN ADDITION to\n       this condition.\n\n       =============FILE DESCRIPTIONS   ========================\n\n       Fdat.rsf - An RSF file containing your data in  the  following  format:\n       axis  1  -  source  location axis 2 - wavefield component (z,x,y) order\n       axis 3 - Time\n\n       Fwav.rsf - An RSF file containing your wavelet information.  For  elas‐\n       tic  modeling,  the  wavelet needs to have 3 samples on N1 one for each\n       component Z-X-Y (or just Z-X for 2D).  The second  axis  describes  the\n       component  as  a function of time.  The sampling interval, origin time,\n       and number of time samples will be used as the defaults for the  model‐\n       ing  code.              i.e. your wavelet needs to have the same length\n       and parameters that you want to model with!           Ex:           1st\n       axis     index         Z component  0     0 0 0 0 0 0 0 0 1 2 3 2 1 0 0\n       0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0           X  component   1\n       0 0 0 0 0 0 0 0 1 2 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n       0         Y component  2     0 0 0 0 0 0 0 0 1 2 3 2 1 0 0 0 0 0 0 0  0\n       0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0                         2nd axis NOTE:\n       For tensor sources, you must have an appropriate number of  components.\n       See srctype for more information.\n\n       cccc   -  An  N+1 dimensional RSF file that contains the values for the\n       stiffness coefficients to be used as the model for the  modeling  code.\n       So, for 2D, this would be a 3D array of values concatenated together in\n       the order as described in the  anisotropy  section.   Each  coefficient\n       file  contains  the value of that coefficient for every point in space.\n       The axes for this file are: Axis 1: Z; Axis 2: X; Axis 3: Y;\n\n       The stiffness tensor coefficients are  defined  uniformly  as  follows,\n       where --x---y---z--(y)-----(y) describes how the coefficients depend on\n       space.  |C11 C12 C13  C14  C15  C16|  |     C22  C23  C24  C25  C26|  |\n       C33  C34 C35 C36| |            C44 C45 C46| |                C55 C56| |\n       C66|\n\n       The tensor is assumed to be symmetric.\n\n       Order of the coefficients in the N+1 dimensional file...  (First  coef‐\n       ficient is the first 2D array in the 3D array).  2D Anisotropy Modes:\n\n       ISO/HTI/VTI:  C11,  C33,  C55,  C13 \"TTI:\" C11, C13, C15, C33, C35, C55\n       ***TTI basically allows access to all coefs in 2D, but  is  not  really\n       triclinic                                                         media\n       ------------------------------------------------------------ (First co‐\n       efficient is the first 3D array in the 4D array).  3D Anisotropy Modes:\n\n       ISO/HTI/VTI: C11, C22, C33, C44, C55, C66, C12, C13, C23 TTI: C11, C12,\n       C13, C14, C15, C16, C22, C23, C24, C25, C26, C33, C34, C35,  C36,  C44,\n       C45, C46, C55, C56, C66\n\n       den       - An N dimensional RSF file that contains the valuese for the\n       density to be used for the model.  For 2D, this would be a 2D array.\n\n       sou, rec -The source and receiver RSF files respectively.  The 1st axis\n       contains  the locations for the points like so: [x,y,z] The second axis\n       is a concatenated list of all points in the list.  So, for an array  of\n       receivers,   it  would  look  like:  [x1,y1,z1]  [x2,y2,z2]  [x3,y3,z3]\n       [x4,y4,z4]\n\n       wfl     - The name of the file to  save  the  wavefield  snapshots  to.\n       This  will  be  an N+2 dimensional file.  The file will be organized as\n       follows: 1-2(3) axes, spatial coordinates 3(4) axis,  wavefield  compo‐\n       nents,  in  the  Z,X,(Y)  order  4(5)  axis, time, sequential snapshots\n       ***The parentheses indicate what the axes will be for 3D models.\n\n       dat     - The name of the file to save the receiver data to.  The  data\n       has the format of:            spatial coordinates, then the data compo‐\n       nents of the elastic wavefield in the              same  order  as  the\n       wavefield.  Lastly, time.\n\n       ========== USEFUL COMMANDS  =============================\n\n       To  view  the  wavefield  snapshots (2D case): sfwindow < Fwfl.rsf n3=1\n       f3=0 | sfgrey gainpanel=a pclip=100 | sfpen\n\n       To view the data (2D case): sfwindow <  Fdat.rsf  n3=1  f3=0  |  sfgrey\n       gainpanel=a pclip=100 | sfpen\n\n       ========== TROUBLESHOOTING ===============================\n\n       If you aren't getting output, or your output is full of Nans, make sure\n       that you have the proper dimensions for your wavelet  files,  and  that\n       your input files make sense.\n\n       Make  sure your source and receiver points are located inside the model\n       space, otherwise you will get all NaNs and the simulation will run for‐\n       ever.\n\n       ======= TIPS ========\n\n       If the simulation seems to slow down as it's running, its a pretty good\n       indication that the simulation has become unstable and  is  overflowing\n       with NaNs.\n\n       Modified by Yuting Duan, Colorado School of Mines,2013-10-22.\n\nPARAMETERS\n       bool   abcone =n [y/n]     use sharp brake at end of boundary layer\n       int    ani =-1      Anisotropy type, see comments\n       file   ccc =      auxiliary input file name\n       bool   cfl  =y  [y/n]     use  CFL check, will cause program to fail if\n              not satisfied\n       bool   dabc =y [y/n]     use sponge absorbing BC\n       bool   debug =y [y/n]     print debugging info\n       file   den =      auxiliary input file name\n       float  fmax = ®\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nb =100      padding size for absorbing boundary\n       int    nbell =1      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       int    srctype =0      source type, see comments\n       bool   verb =y [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/cwp/Mewefdm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfewefdm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeweks3d-Tuple{}","page":"Home","title":"Madagascar.sfeweks3d","text":"sfeweks3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeweks3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeweks3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfeweks3d(1)                  Madagascar Manuals                  sfeweks3d(1)\n\nNAME\n       sfeweks3d  -  3D elastic time-domain pseudo-spectral (k-space) modeling\n       using shared-memory parallel FFT\n\nSYNOPSIS\n       sfeweks3d   <   Fwav.rsf   ccc=Fccc.rsf    den=Fden.rsf    sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=0 dabc=n\n       opot=n  back=n   kspace=n   nbell=5   jdata=1   jsnap=nt   nqz=sf_n(az)\n       nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou  wavelet   (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt) sou geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       bool   kspace =n [y/n]     k-space method (ps) flag\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials -> 1*scalar, 3*vector poten‐\n              tials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       int    ssou  =0      0 -> acceleration source; 1 -> stress source; 2 ->\n              displacement source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jsun/Meweks3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfeweks3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfeweks3dsecd-Tuple{}","page":"Home","title":"Madagascar.sfeweks3dsecd","text":"sfeweks3dsecd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfeweks3dsecd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfeweks3dsecd. See ?m8r for examples.\n\nRSF Documentation\n\nsfeweks3dsecd(1)              Madagascar Manuals              sfeweks3dsecd(1)\n\nNAME\n       sfeweks3dsecd - 3D elastic time-domain pseudo-spectral (k-space) model‐\n       ing using shared-memory parallel FFT (second-order equation)\n\nSYNOPSIS\n       sfeweks3dsecd  <  Fwav.rsf   ccc=Fccc.rsf   den=Fden.rsf   sou=Fsou.rsf\n       rec=Frec.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n ssou=0 dabc=n\n       opot=n back=n kspace=n secd=n  nbell=5  jdata=1  jsnap=nt  nqz=sf_n(az)\n       nqx=sf_n(ax) nqy=sf_n(ay) oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou  wavelet   (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt) sou geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       bool   kspace =n [y/n]     k-space method (ps) flag\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials -> 1*scalar, 3*vector poten‐\n              tials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   secd =n [y/n]     second order weq flag\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       int    ssou  =0      0 -> acceleration source; 1 -> stress source; 2 ->\n              displacement source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jsun/Meweks3dsecd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfeweks3dsecd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewelr3-Tuple{}","page":"Home","title":"Madagascar.sfewelr3","text":"sfewelr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewelr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewelr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfewelr3(1)                   Madagascar Manuals                   sfewelr3(1)\n\nNAME\n       sfewelr3 - None\n\nSYNOPSIS\n       sfewelr3  <  c11.rsf  c14=c14.rsf  theta=q1.rsf  verb=false  tilt=false\n       tric=false tstp=false pseu=false seed=time(NULL mode=0 jump=1 eps=1.e-6\n       npk=20 nb=0 dt=1.e-3\n\nPARAMETERS\n       file   c14 =      auxiliary input file name\n       dt     =1.e-3      time step size\n       eps    =1.e-6      tolerance\n       jump   =1      jump step for reduced lowrank decomposition\n       mode   =0      mode of decomposition: 0->mixed, 1->p, 2->s\n       nb     =0      boundary padding\n       npk    =20      maximum rank\n       pseu   =false      pseudo-spectral propagator\n       seed   =time(NULL ®\n       file   theta =      auxiliary input file name\n       tilt   =false      tilting of TTI\n       tric   =false      triclinic anisotropy\n       tstp   =false      twostep propagator\n       verb   =false      verbosity flag\nSOURCE\n       user/jsun/Mewelr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfewelr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewelr3d-Tuple{}","page":"Home","title":"Madagascar.sfewelr3d","text":"sfewelr3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewelr3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewelr3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfewelr3d(1)                  Madagascar Manuals                  sfewelr3d(1)\n\nNAME\n       sfewelr3d  -  3D  elastic  recursive  integral time extrapolation using\n       shared-memory parallel FFT\n\nSYNOPSIS\n       sfewelr3d   <   Fwav.rsf   ccc=Fccc.rsf    sou=Fsou.rsf    rec=Frec.rsf\n       rnk=Frnk.rsf  lft=Flft.rsf  rht=Frht.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n\n       snap=n free=n back=n esou=n  tstp=n  dabc=n  nbell=5  jdata=1  jsnap=nt\n       nb=NOP   cb=1.f  nqz=sf_n(az)  nqx=sf_n(ax)  nqy=sf_n(ay)  oqz=sf_o(az)\n       oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou wavelet  (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt)  sou  geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       float  cb =1.f ®\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       bool   esou =n [y/n]     explosive force source\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   lft =      auxiliary input file name\n       int    nb =NOP ®\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       file   rht =      auxiliary input file name\n       file   rnk =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   tstp =n [y/n]     two-step propagator\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jsun/Mewelr3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfewelr3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewelr3dgrad-Tuple{}","page":"Home","title":"Madagascar.sfewelr3dgrad","text":"sfewelr3dgrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewelr3dgrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewelr3dgrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfewelr3dgrad(1)              Madagascar Manuals              sfewelr3dgrad(1)\n\nNAME\n       sfewelr3dgrad  - 3D elastic recursive integral time extrapolation using\n       shared-memory parallel FFT (with gradient term)\n\nSYNOPSIS\n       sfewelr3dgrad  <  Fwav.rsf   ccc=Fccc.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       rnk=Frnk.rsf  lft=Flft.rsf  rht=Frht.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n\n       snap=n free=n back=n esou=n tstp=n dabc=n  nbell=NOP  jdata=1  jsnap=nt\n       nb=NOP   cb=1.f  nqz=sf_n(az)  nqx=sf_n(ax)  nqy=sf_n(ay)  oqz=sf_o(az)\n       oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou wavelet  (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt)  sou  geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       float  cb =1.f ®\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       bool   esou =n [y/n]     explosive force source\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   lft =      auxiliary input file name\n       int    nb =NOP ®\n       int    nbell =NOP      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       file   rht =      auxiliary input file name\n       file   rnk =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   tstp =n [y/n]     two-step propagator\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jsun/Mewelr3dgrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfewelr3dgrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfewelr3grad-Tuple{}","page":"Home","title":"Madagascar.sfewelr3grad","text":"sfewelr3grad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfewelr3grad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfewelr3grad. See ?m8r for examples.\n\nRSF Documentation\n\nsfewelr3grad(1)               Madagascar Manuals               sfewelr3grad(1)\n\nNAME\n       sfewelr3grad - None\n\nSYNOPSIS\n       sfewelr3grad   <   c11.rsf  c14=c14.rsf  theta=q1.rsf  C11dx=fC11dx.rsf\n       C12dy=fC12dy.rsf  C13dz=fC13dz.rsf  verb=false  tilt=false   tric=false\n       grad=false seed=time(NULL mode=0 jump=1 eps=1.e-6 npk=20 nb=0 dt=1.e-3\n\nPARAMETERS\n       file   C11dx =      auxiliary output file name\n       file   C12dy =      auxiliary output file name\n       file   C13dz =      auxiliary output file name\n       file   c14 =      auxiliary input file name\n       dt     =1.e-3      time step size\n       eps    =1.e-6      tolerance\n       grad   =false      include gradient term\n       jump   =1      jump step for reduced lowrank decomposition\n       mode   =0      mode of decomposition: 0->mixed, 1->p, 2->s\n       nb     =0      boundary padding\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   theta =      auxiliary input file name\n       tilt   =false      tilting of TTI\n       tric   =false      triclinic anisotropy\n       verb   =false      verbosity flag\nSOURCE\n       user/jsun/Mewelr3grad.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfewelr3grad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexcitationic-Tuple{}","page":"Home","title":"Madagascar.sfexcitationic","text":"sfexcitationic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexcitationic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexcitationic. See ?m8r for examples.\n\nRSF Documentation\n\nsfexcitationic(1)             Madagascar Manuals             sfexcitationic(1)\n\nNAME\n       sfexcitationic - Demo for excitation imaging condition\n\nSYNOPSIS\n       sfexcitationic  <  Fv.rsf  > Fout.rsf nb=20 nt= dt= fm=20.0 kt=300 jsx=\n       jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=y ns=1 ng=nx\n\nCOMMENTS\n       Note that excitation imaging condition has some multipathing artifacts.\n       The significance of this imaging condition is the cheap computation and\n       low memory requirement. (1) Cheap computation: only 2 times of  simula‐\n       tion,  one  for  source wavefield the other for receiver wavefield, are\n       needed for single shot imaging before stacking. (2) Low memory request:\n       this imaging condition only asks for the excitation time and the ampli‐\n       tude. Therefore, it differs from  cross-correlation  imaging  condition\n       which  needs  storing  or reconstructing the source wavefield to cross-\n       correlate with receiver wavefield at each time step.\n\nPARAMETERS\n       bool   csdgather =y [y/n]\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =300      output wavefield at time kt\n       int    nb =20      thickness of sponge ABC\n       int    ng =nx      number of receivers\n       int    ns =1      number of shots\n       int    nt =      number of time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\nSOURCE\n       user/pyang/Mexcitationic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfexcitationic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexgr-Tuple{}","page":"Home","title":"Madagascar.sfexgr","text":"sfexgr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexgr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexgr. See ?m8r for examples.\n\nRSF Documentation\n\nsfexgr(1)                     Madagascar Manuals                     sfexgr(1)\n\nNAME\n       sfexgr - Exact group velocity in VTI media\n\nSYNOPSIS\n       sfexgr > out.rsf aq=14.47 bq=2.28 cq=9.57 dq=4.51\n\nPARAMETERS\n       float  aq =14.47 ®\n       float  bq =2.28 ®\n       float  cq =9.57 ®\n       float  dq =4.51 ®\nSOURCE\n       user/fomels/Mexgr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfexgr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexpand-Tuple{}","page":"Home","title":"Madagascar.sfexpand","text":"sfexpand(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexpand on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexpand. See ?m8r for examples.\n\nRSF Documentation\n\nsfexpand(1)                   Madagascar Manuals                   sfexpand(1)\n\nNAME\n       sfexpand - Expand 2D data\n\nSYNOPSIS\n       sfexpand > out.rsf < in.rsf left=0.5*nx right=0.5*nx top=0 bottom=0\n\nPARAMETERS\n       int    bottom =0 ®\n       int    left =0.5*nx ®\n       int    right =0.5*nx ®\n       int    top =0 ®\nSOURCE\n       user/fangg/Mexpand.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfexpand(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexpd-Tuple{}","page":"Home","title":"Madagascar.sfexpd","text":"sfexpd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexpd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexpd. See ?m8r for examples.\n\nRSF Documentation\n\nsfexpd(1)                     Madagascar Manuals                     sfexpd(1)\n\nNAME\n       sfexpd - Expand 2D data corret version with true spatial cooridinates\n\nSYNOPSIS\n       sfexpd > out.rsf < in.rsf left=0.5*nx right=0.5*nx top=0 bottom=0\n\nPARAMETERS\n       int    bottom =0 ®\n       int    left =0.5*nx ®\n       int    right =0.5*nx ®\n       int    top =0 ®\nSOURCE\n       user/chenyk/Mexpd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfexpd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexpl1-Tuple{}","page":"Home","title":"Madagascar.sfexpl1","text":"sfexpl1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexpl1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexpl1. See ?m8r for examples.\n\nRSF Documentation\n\nsfexpl1(1)                    Madagascar Manuals                    sfexpl1(1)\n\nNAME\n       sfexpl1 - 1-D anisotropic diffusion by explicit cascade.\n\nSYNOPSIS\n       sfexpl1 < in.rsf > out.rsf cycle=1 rect1= pclip=50.\n\nPARAMETERS\n       int    cycle =1      number of cycles\n       float  pclip =50.       percentage clip for the gradient\n       int    rect1 =      smoothing radius\nSOURCE\n       system/generic/Mexpl1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfexpl1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexpl2-Tuple{}","page":"Home","title":"Madagascar.sfexpl2","text":"sfexpl2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexpl2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexpl2. See ?m8r for examples.\n\nRSF Documentation\n\nsfexpl2(1)                    Madagascar Manuals                    sfexpl2(1)\n\nNAME\n       sfexpl2 - 2-D anisotropic diffusion by box cascade.\n\nSYNOPSIS\n       sfexpl2 < in.rsf > out.rsf cycle=1 rect= pclip=50.\n\nPARAMETERS\n       int    cycle =1      number of cycles\n       float  pclip =50.       percentage clip for the gradient\n       int    rect =      vertical smoothing\nSOURCE\n       system/generic/Mexpl2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfexpl2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexplanesignoi-Tuple{}","page":"Home","title":"Madagascar.sfexplanesignoi","text":"sfexplanesignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexplanesignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexplanesignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsfexplanesignoi(1)            Madagascar Manuals            sfexplanesignoi(1)\n\nNAME\n       sfexplanesignoi - Signal and noise separation using both frequency com‐\n       ponents and dips.\n\nSYNOPSIS\n       sfexplanesignoi < in.rsf freq=freq.rsf  ndip=ndip.rsf  sdip=sdip.rsf  >\n       out.rsf niter=50 eps=1. verb=n order=1 nj1=1 nj2=1 drift=n\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       float  eps =1.       regularization parameter\n       file   freq =      auxiliary input file name\n       file   ndip =      auxiliary input file name\n       int    niter =50      maximum number of iterations\n       int    nj1 =1      antialiasing for first dip\n       int    nj2 =1      antialiasing for second dip\n       int    order =1 [1,2,3]   accuracy order\n       file   sdip =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mexplanesignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfexplanesignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfexpsignoi-Tuple{}","page":"Home","title":"Madagascar.sfexpsignoi","text":"sfexpsignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfexpsignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfexpsignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsfexpsignoi(1)                Madagascar Manuals                sfexpsignoi(1)\n\nNAME\n       sfexpsignoi - Signal and noise separation using frequency components.\n\nSYNOPSIS\n       sfexpsignoi < in.rsf freq=freq.rsf > out.rsf niter=50 eps=1. verb=n\n\nPARAMETERS\n       float  eps =1.       regularization parameter\n       file   freq =      auxiliary input file name\n       int    niter =50      maximum number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mexpsignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfexpsignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfextend-Tuple{}","page":"Home","title":"Madagascar.sfextend","text":"sfextend(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfextend on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfextend. See ?m8r for examples.\n\nRSF Documentation\n\nsfextend(1)                   Madagascar Manuals                   sfextend(1)\n\nNAME\n       sfextend -\n\nSYNOPSIS\n       sfextend < loga.rsf > log_eo.rsf < refa.rsf switch= val= reflog=\n\nCOMMENTS\n       Dataset padding/clipping\n\n       Built  for  log data manipulation - Before and after LSIM alignments to\n       deal with edge-effects  and  extraneous  values  introduced  from  LSIM\n       shifting\n\nPARAMETERS\n       string reflog =      Reference log (switch=3)\n       int    switch  =       (0  = Two-sided axis extension by first and last\n              non-zero sample in dataset); (2 = Two-sided axis reduction);  (3\n              = Matches starting value and number of samples between input and\n              reference well log); (else = pad data to dataset size  by  first\n              and last nonzero sample); (4 = Testing)\n       int    val =      Sample manipulation (switch=0/2)\nSOURCE\n       user/sbader/Mextend.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfextend(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfextend1-Tuple{}","page":"Home","title":"Madagascar.sfextend1","text":"sfextend1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfextend1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfextend1. See ?m8r for examples.\n\nRSF Documentation\n\nsfextend1(1)                  Madagascar Manuals                  sfextend1(1)\n\nNAME\n       sfextend1 -\n\nSYNOPSIS\n       sfextend1 < loga.rsf > log_eo.rsf num=\n\nCOMMENTS\n       Dataset padding - maintains dataset dims.\n\n       Pads  dataset by first and last nonzero sample. This helps reduce arti‐\n       facts introduced by PP well log interpolation.\n\nPARAMETERS\n       int    num =      Number of samples\nSOURCE\n       user/sbader/Mextend1.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfextend1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfextract-Tuple{}","page":"Home","title":"Madagascar.sfextract","text":"sfextract(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfextract on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfextract. See ?m8r for examples.\n\nRSF Documentation\n\nsfextract(1)                  Madagascar Manuals                  sfextract(1)\n\nNAME\n       sfextract - Forward interpolation in 2-D slices.\n\nSYNOPSIS\n       sfextract < in.rsf > out.rsf head=head.rsf xkey=0 ykey=1 interp=2\n\nPARAMETERS\n       file   head =      auxiliary input file name\n       int    interp  =2  [1,2]     interpolation method, 1: nearest neighbor,\n              2: bi-linear\n       int    xkey =0      x key number\n       int    ykey =1      y key number\nSOURCE\n       system/generic/Mextract.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfextract(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffactorm-Tuple{}","page":"Home","title":"Madagascar.sffactorm","text":"sffactorm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffactorm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffactorm. See ?m8r for examples.\n\nRSF Documentation\n\nsffactorm(1)                  Madagascar Manuals                  sffactorm(1)\n\nNAME\n       sffactorm - Plane-wave destruction with 3-D plane-wave filter.\n\nSYNOPSIS\n       sffactorm  <  in.rsf  >  out.rsf  dip=dip.rsf eps=0.001 nt= nx= npx=100\n       npy=100 niter=10\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.001 ®\n       int    niter =10      number of iterations\n       int    npx =100 ®\n       int    npy =100      np = npx *npy;\n       int    nt = ®\n       int    nx = ®\nSOURCE\n       user/gee/Mfactorm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffactorm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffactorn-Tuple{}","page":"Home","title":"Madagascar.sffactorn","text":"sffactorn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffactorn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffactorn. See ?m8r for examples.\n\nRSF Documentation\n\nsffactorn(1)                  Madagascar Manuals                  sffactorn(1)\n\nNAME\n       sffactorn - Missing data interpolation with 3-D plane-wave filter.\n\nSYNOPSIS\n       sffactorn  <  in.rsf  > out.rsf dip=dip.rsf mask=mask.rsf eps=0.001 nt=\n       nx= npx=100 npy=100 niter=10 miter=10\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.001 ®\n       file   mask =      auxiliary input file name\n       int    miter =10      number of interpolation iterations\n       int    niter =10      number of factorization iterations\n       int    npx =100 ®\n       int    npy =100 ®\n       int    nt = ®\n       int    nx = ®\nSOURCE\n       user/gee/Mfactorn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffactorn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffacttieikonal-Tuple{}","page":"Home","title":"Madagascar.sffacttieikonal","text":"sffacttieikonal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffacttieikonal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffacttieikonal. See ?m8r for examples.\n\nRSF Documentation\n\nsffacttieikonal(1)            Madagascar Manuals            sffacttieikonal(1)\n\nNAME\n       sffacttieikonal - Fast sweeping factored TTI eikonal solver (2D)\n\nSYNOPSIS\n       sffacttieikonal  <  vzf.rsf  >  time.rsf  niter=4 nfpi=3 fac=1 optloc=n\n       zshot=0. yshot=o2 + 0.5*(n2-1)*d2 epsilon= delta= theta= shotfile=\n\nPARAMETERS\n       string delta = ®\n       string epsilon = ®\n       int    fac =1      Type of factorization:  (0)Additive,  (1)Multiplica‐\n              tive\n       int    nfpi =3      number of fixed-point iterations\n       int    niter =4      number of sweeping iterations\n       bool   optloc  =n  [y/n]     Selects  optimal  location for homogeneous\n              medium parameter\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3)\n       string theta = ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/uwaheed/Mfacttieikonal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sffacttieikonal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffagrad-Tuple{}","page":"Home","title":"Madagascar.sffagrad","text":"sffagrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffagrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffagrad. See ?m8r for examples.\n\nRSF Documentation\n\nsffagrad(1)                   Madagascar Manuals                   sffagrad(1)\n\nNAME\n       sffagrad - Calculating frequency attenuation gradient.\n\nSYNOPSIS\n       sffagrad < in.rsf > out.rsf grad=y lperc=65. hperc=85. freq= type=\n\nPARAMETERS\n       float  freq  =      Frequency corresponding to energy ratio, valid when\n              type=ratio\n       bool   grad =y [y/n]     If y, output attenuation gradient; if n,  out‐\n              put absorption factor\n       float  hperc =85.       High percentage of total energy\n       float  lperc =65.       Low percentage of total energy\n       string type =      [low,full,ratio,attenuation] attribute type, the de‐\n              fault is attenuation\nSOURCE\n       user/yliu/Mfagrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffagrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffastft-Tuple{}","page":"Home","title":"Madagascar.sffastft","text":"sffastft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffastft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffastft. See ?m8r for examples.\n\nRSF Documentation\n\nsffastft(1)                   Madagascar Manuals                   sffastft(1)\n\nNAME\n       sffastft - Fast Fourier Transform.\n\nSYNOPSIS\n       sffastft < in.rsf > out.rsf inv=n\n\nPARAMETERS\n       bool   inv =n [y/n]     if y, perform inverse transform\nSOURCE\n       user/mccowan/Mfastft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffastft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffastpwd-Tuple{}","page":"Home","title":"Madagascar.sffastpwd","text":"sffastpwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffastpwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffastpwd. See ?m8r for examples.\n\nRSF Documentation\n\nsffastpwd(1)                  Madagascar Manuals                  sffastpwd(1)\n\nNAME\n       sffastpwd - 2-D dip estimation using analytical equation.\n\nSYNOPSIS\n       sffastpwd < inp.rsf > out.rsf rect1=1 rect2=1 niter=100 verb=y eps=0.0f\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing radius\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chen/Mfastpwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffastpwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffatomo-Tuple{}","page":"Home","title":"Madagascar.sffatomo","text":"sffatomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffatomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffatomo. See ?m8r for examples.\n\nRSF Documentation\n\nsffatomo(1)                   Madagascar Manuals                   sffatomo(1)\n\nNAME\n       sffatomo - First-arrival Traveltime Tomography\n\nSYNOPSIS\n       sffatomo   <   sinp.rsf  >  sout.rsf  time=time.rsf  shot=shot.rsf  re‐\n       ceiver=rece.rsf record=reco.rsf  topo=topo.rsf  gradient=grad.rsf  mis‐\n       norm=norm.rsf   adj=n   velocity=y  l1norm=n  verb=n  order=2  niter=10\n       stiter=200 eps=0. perc=90. nfreq=1 nmem=1 what=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag (for what=linear)\n       float  eps =0.       regularization parameter\n       string gradient =      auxiliary output file name\n       bool   l1norm =n [y/n]     norm for minimization (default L2 norm)\n       string misnorm =      auxiliary output file name\n       int    nfreq =1      l1-norm weighting nfreq\n       int    niter =10      number of slowness inversion iterations\n       int    nmem =1      l1-norm weighting nmem\n       int    order =2      fast marching accuracy order\n       float  perc =90.  ®\n       string receiver =      auxiliary input file name\n       string record =      auxiliary input file name\n       string shot =      auxiliary input file name\n       int    stiter =200      number of step iterations\n       string time =      auxiliary input file name\n       string topo =      auxiliary input file name\n       bool   velocity =y [y/n]     if y, the input is velocity;  n,  slowness\n              squared\n       bool   verb =n [y/n]     verbosity flag\n       string what =      what to compute (default tomography)\nSOURCE\n       user/llisiw/Mfatomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffatomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffatomoomp-Tuple{}","page":"Home","title":"Madagascar.sffatomoomp","text":"sffatomoomp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffatomoomp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffatomoomp. See ?m8r for examples.\n\nRSF Documentation\n\nsffatomoomp(1)                Madagascar Manuals                sffatomoomp(1)\n\nNAME\n       sffatomoomp - First-arrival Traveltime Tomography (OMP)\n\nSYNOPSIS\n       sffatomoomp   <   sinp.rsf   >   sout.rsf  shot=shot.rsf  recv=recv.rsf\n       reco=reco.rsf topo=topo.rsf prec=prec.rsf  grad=grad.rsf  rayd=rayd.rsf\n       time=time.rsf  misnorm=norm.rsf velocity=y shape=n verb=n order=2 seg=3\n       niter=1  stiter=100   nstep=10   eps=0.   weight=n   pow=2.   tol=1.e-6\n       rect#=(1,1,...) what=\n\nPARAMETERS\n       float  eps  =0.        regularization  parameter  (for both Ticknov and\n              Shaping)\n       string grad =      auxiliary output file name\n       string misnorm =      auxiliary output file name\n       int    niter =1      number of slowness inversion iterations\n       int    nstep =10      number of linesearch\n       int    order =2      fast marching accuracy order\n       float  pow =2.       power raised for data weighting\n       string prec =      auxiliary input file name\n       string rayd =      auxiliary output file name\n       string reco =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       string recv =      auxiliary input file name\n       int    seg =3      maximum number of segments of topography\n       bool   shape =n [y/n]     regularization (default Tikhnov)\n       string shot =      auxiliary input file name\n       int    stiter =100      number of inner CG iterations (for both Ticknov\n              and Shaping)\n       string time =      auxiliary output file name\n       float  tol =1.e-6      tolerance for shaping regularization\n       string topo =      auxiliary input file name\n       bool   velocity  =y  [y/n]     if y, the input is velocity; n, slowness\n              squared\n       bool   verb =n [y/n]     verbosity flag\n       bool   weight =n [y/n]     data weighting\n       string what =      what to compute (default tomography)\nSOURCE\n       user/llisiw/Mfatomoomp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffatomoomp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffault-Tuple{}","page":"Home","title":"Madagascar.sffault","text":"sffault(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffault on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffault. See ?m8r for examples.\n\nRSF Documentation\n\nsffault(1)                    Madagascar Manuals                    sffault(1)\n\nNAME\n       sffault - fault detection\n\nSYNOPSIS\n       sffault < in.rsf > out.rsf lamda=0.9 sigma=1.0\n\nPARAMETERS\n       float  lamda =0.9 ®\n       float  sigma =1.0 ®\nSOURCE\n       user/chen/Mfault.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffault(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffaultrbf1d-Tuple{}","page":"Home","title":"Madagascar.sffaultrbf1d","text":"sffaultrbf1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffaultrbf1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffaultrbf1d. See ?m8r for examples.\n\nRSF Documentation\n\nsffaultrbf1d(1)               Madagascar Manuals               sffaultrbf1d(1)\n\nNAME\n       sffaultrbf1d  - Compute RBF across fault using fault attribute computed\n       by Sobel filter.\n\nSYNOPSIS\n       sffaultrbf1d < in.rsf > out.rsf i0= scale=1.0 r0=1.0 useinput=y\n\nPARAMETERS\n       int    i0 =      Reference trace position.\n       float  r0 =1.0      Reference radial in RBF.\n       float  scale =1.0      Fault attribute scaling factor (0.0 ~ factor).\n       bool   useinput =y [y/n]     Flag: whether use the input  fault  attri‐\n              bute.\nSOURCE\n       user/yunzhi/Mfaultrbf1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffaultrbf1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbank1-Tuple{}","page":"Home","title":"Madagascar.sffbank1","text":"sffbank1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbank1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbank1. See ?m8r for examples.\n\nRSF Documentation\n\nsffbank1(1)                   Madagascar Manuals                   sffbank1(1)\n\nNAME\n       sffbank1 - 1d filter bank\n\nSYNOPSIS\n       sffbank1 < in.rsf > out.rsf m=1 n=1 interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\nSOURCE\n       user/chen/Mfbank1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffbank1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbank2-Tuple{}","page":"Home","title":"Madagascar.sffbank2","text":"sffbank2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbank2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbank2. See ?m8r for examples.\n\nRSF Documentation\n\nsffbank2(1)                   Madagascar Manuals                   sffbank2(1)\n\nNAME\n       sffbank2 - 2d filter bank\n\nSYNOPSIS\n       sffbank2 < in.rsf > out.rsf m=1 n=1 interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\nSOURCE\n       user/chen/Mfbank2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffbank2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbdip-Tuple{}","page":"Home","title":"Madagascar.sffbdip","text":"sffbdip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbdip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbdip. See ?m8r for examples.\n\nRSF Documentation\n\nsffbdip(1)                    Madagascar Manuals                    sffbdip(1)\n\nNAME\n       sffbdip - omnidirectional dip estimation\n\nSYNOPSIS\n       sffbdip  < in.rsf > out.rsf rect1=0 rect2=0 niter=5 liter=20 radius=1.0\n       eta=0.75 idip=0.0 verb=n\n\nPARAMETERS\n       float  eta =0.75      steps for iteration\n       float  idip =0.0      initial dip\n       int    liter =20      number of linear iterations\n       int    niter =5      number of iterations\n       float  radius =1.0      interpolating radius for opwd\n       int    rect1 =0      dip smoothness on 1st axis\n       int    rect2 =0      dip smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chen/Mfbdip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffbdip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbfreq-Tuple{}","page":"Home","title":"Madagascar.sffbfreq","text":"sffbfreq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbfreq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbfreq. See ?m8r for examples.\n\nRSF Documentation\n\nsffbfreq(1)                   Madagascar Manuals                   sffbfreq(1)\n\nNAME\n       sffbfreq - frequency response of linear phase filter bank\n\nSYNOPSIS\n       sffbfreq > out.rsf m=1 n=1 n1=50 nd=1 interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    n1 =50      samples in frequency domain is 2*n1+1\n       int    nd  =1       nd dimensional filter bank, nd should not be large,\n              or you will need to buy a new disk array\nSOURCE\n       user/chen/Mfbfreq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffbfreq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbgabor-Tuple{}","page":"Home","title":"Madagascar.sffbgabor","text":"sffbgabor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbgabor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbgabor. See ?m8r for examples.\n\nRSF Documentation\n\nsffbgabor(1)                  Madagascar Manuals                  sffbgabor(1)\n\nNAME\n       sffbgabor - Gabor transform by linear phase filter bank\n\nSYNOPSIS\n       sffbgabor < in.rsf > out.rsf sigma=1.0 nf=100\n\nPARAMETERS\n       int    nf =100      frequency samples [0, 0.5]\n       float  sigma =1.0      sigma\nSOURCE\n       user/chen/Mfbgabor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffbgabor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbpick-Tuple{}","page":"Home","title":"Madagascar.sffbpick","text":"sffbpick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbpick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbpick. See ?m8r for examples.\n\nRSF Documentation\n\nsffbpick(1)                   Madagascar Manuals                   sffbpick(1)\n\nNAME\n       sffbpick - First break picking from instantaneous traveltime attribute.\n\nSYNOPSIS\n       sffbpick < in.rsf > out.rsf type=\n\nPARAMETERS\n       string type  =       [traveltime,position] type, the default is travel‐\n              time\nSOURCE\n       user/yliu/Mfbpick.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffbpick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbpwd-Tuple{}","page":"Home","title":"Madagascar.sffbpwd","text":"sffbpwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbpwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbpwd. See ?m8r for examples.\n\nRSF Documentation\n\nsffbpwd(1)                    Madagascar Manuals                    sffbpwd(1)\n\nNAME\n       sffbpwd - omnidirectional plane-wave destruction\n\nSYNOPSIS\n       sffbpwd < in.rsf > out.rsf dip=fp.rsf radius=1.0\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  radius =1.0      interpolating radius for opwd\nSOURCE\n       user/chen/Mfbpwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffbpwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbrec-Tuple{}","page":"Home","title":"Madagascar.sffbrec","text":"sffbrec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbrec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbrec. See ?m8r for examples.\n\nRSF Documentation\n\nsffbrec(1)                    Madagascar Manuals                    sffbrec(1)\n\nNAME\n       sffbrec - Forward-backword exact reconstruction using boundary saving\n\nSYNOPSIS\n       sffbrec  < vinit.rsf > Fw1.rsf back=Fw2.rsf amp=1000 fm=10 dt= nt= ns=1\n       ng= jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=y ft=0\n       jt=1\n\nCOMMENTS\n       Note: It is used as a demonstration that we can reconstruct the modeled\n       wavefield exactly via boundary saving.\n\nPARAMETERS\n       float  amp =1000      maximum amplitude of ricker\n       file   back =      auxiliary output file name\n       bool   csdgather =y [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =10      dominant freq of ricker\n       int    ft =0      first recorded time\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    jt =1      time interval\n       int    ng =      total receivers in each shot\n       int    ns =1      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\nSOURCE\n       user/pyang/Mfbrec.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffbrec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffbrec2d-Tuple{}","page":"Home","title":"Madagascar.sffbrec2d","text":"sffbrec2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffbrec2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffbrec2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffbrec2d(1)                  Madagascar Manuals                  sffbrec2d(1)\n\nNAME\n       sffbrec2d - 2-D forward modeling to generate shot records\n\nSYNOPSIS\n       sffbrec2d  <  vinit.rsf > shots.rsf check1=check1.rsf check2=check2.rsf\n       kt=100 amp=1. fm=10 dt= nt= ns=  ng=  jsx=  jsz=0  jgx=1  jgz=0  sxbeg=\n       szbeg= gxbeg= gzbeg= csdgather=n\n\nCOMMENTS\n       Note:     Clayton-Enquist absorbing boundary condition is applied!\n\nPARAMETERS\n       float  amp =1.       maximum amplitude of ricker\n       file   check1 =      auxiliary output file name\n       file   check2 =      auxiliary output file name\n       bool   csdgather =n [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =10      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =100      check it at it=100\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\nSOURCE\n       user/pyang/Mfbrec2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffbrec2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffcoh1-Tuple{}","page":"Home","title":"Madagascar.sffcoh1","text":"sffcoh1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffcoh1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffcoh1. See ?m8r for examples.\n\nRSF Documentation\n\nsffcoh1(1)                    Madagascar Manuals                    sffcoh1(1)\n\nNAME\n       sffcoh1 - Fast C1 Coherence\n\nSYNOPSIS\n       sffcoh1  <  in.rsf  >  out.rsf idip=idip.rsf xdip=xdip.rsf ntw=5 twod=y\n       verb=y min1=-2 max1=2 min2=-2 max2=2\n\nPARAMETERS\n       string idip =      inline dip (auxiliary output file name)\n       int    max1 =2      inline slope\n       int    max2 =2      xline slope\n       int    min1 =-2 ®\n       int    min2 =-2 ®\n       int    ntw =5      half window size for coherence\n       bool   twod =y [y/n]     y: only twod coherence\n       bool   verb =y [y/n]     verbosity\n       string xdip =      crossline dip (auxiliary output file name)\nSOURCE\n       user/chen/Mfcoh1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffcoh1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffcoh2-Tuple{}","page":"Home","title":"Madagascar.sffcoh2","text":"sffcoh2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffcoh2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffcoh2. See ?m8r for examples.\n\nRSF Documentation\n\nsffcoh2(1)                    Madagascar Manuals                    sffcoh2(1)\n\nNAME\n       sffcoh2 - Fast C2 Coherence\n\nSYNOPSIS\n       sffcoh2  <  in.rsf  >  out.rsf  idip=idip.rsf ntw=5 nxw=5 twod=y verb=y\n       min1=-2 max1=2 min2=-2 max2=2\n\nPARAMETERS\n       string idip =      inline dip (auxiliary output file name)\n       int    max1 =2      inline slope\n       int    max2 =2      xline slope\n       int    min1 =-2 ®\n       int    min2 =-2 ®\n       int    ntw =5      half window size for time direction\n       int    nxw =5      half window size for x2\n       bool   twod =y [y/n]     y: only twod coherence\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chen/Mfcoh2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffcoh2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffd1-Tuple{}","page":"Home","title":"Madagascar.sffd1","text":"sffd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffd1. See ?m8r for examples.\n\nRSF Documentation\n\nsffd1(1)                      Madagascar Manuals                      sffd1(1)\n\nNAME\n       sffd1 - 1-D Optimized finite-difference wave extrapolation\n\nSYNOPSIS\n       sffd1 < in.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt= dt=\n\nPARAMETERS\n       float  dt = ®\n       int    isx =(int)(nx/2) ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mfd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sffd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffd1_5-Tuple{}","page":"Home","title":"Madagascar.sffd1_5","text":"sffd1_5(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffd1_5 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffd1_5. See ?m8r for examples.\n\nRSF Documentation\n\nsffd15(1)                    Madagascar Manuals                    sffd15(1)\n\nNAME\n       sffd1_5 - 1-D Optimized finite-difference wave extrapolation\n\nSYNOPSIS\n       sffd1_5 < in.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt= dt=\n\nPARAMETERS\n       float  dt = ®\n       int    isx =(int)(nx/2) ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mfd1_5.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffd1_5(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffd2_10-Tuple{}","page":"Home","title":"Madagascar.sffd2_10","text":"sffd2_10(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffd2_10 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffd2_10. See ?m8r for examples.\n\nRSF Documentation\n\nsffd210(1)                   Madagascar Manuals                   sffd210(1)\n\nNAME\n       sffd2_10 - 2-D Fourth-order Optimized Finite-difference wave extrapola‐\n       tion\n\nSYNOPSIS\n       sffd2_10 > out.rsf vel=vel.rsf < source.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mfd2_10.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffd2_10(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffd2bs-Tuple{}","page":"Home","title":"Madagascar.sffd2bs","text":"sffd2bs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffd2bs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffd2bs. See ?m8r for examples.\n\nRSF Documentation\n\nsffd2bs(1)                    Madagascar Manuals                    sffd2bs(1)\n\nNAME\n       sffd2bs - 2-D Fourth-order Finite-difference wave extrapolation\n\nSYNOPSIS\n       sffd2bs  >  out.rsf  vel=vel.rsf  <  source.rsf opt=y dt= nt= isx= isz=\n       nb=30 c=0.01\n\nPARAMETERS\n       float  c =0.01      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nb =30 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mfd2bs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffd2bs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffd2d-Tuple{}","page":"Home","title":"Madagascar.sffd2d","text":"sffd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffd2d(1)                     Madagascar Manuals                     sffd2d(1)\n\nNAME\n       sffd2d - 2-D Fourth-order Finite-difference wave extrapolation with ABC\n\nSYNOPSIS\n       sffd2d < Fw.rsf vel=Fv.rsf ref=Fr.rsf > Fo.rsf verb=0 nb=30 c=0.01\n\nPARAMETERS\n       float  c =0.01      decaying parameter\n       int    nb =30      boundary length\n       file   ref =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =0 [y/n]     setup I/O files\nSOURCE\n       user/jsun/Mfd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdac2d-Tuple{}","page":"Home","title":"Madagascar.sffdac2d","text":"sffdac2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdac2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdac2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffdac2d(1)                   Madagascar Manuals                   sffdac2d(1)\n\nNAME\n       sffdac2d - None\n\nSYNOPSIS\n       sffdac2d   slo=Fslo.rsf   glo=Fglo.rsf   vel=Fvel.rsf  wavelet=Fwav.rsf\n       frec=Frec.rsf verb=y npml= nthreads=\n\nPARAMETERS\n       file   frec =      auxiliary output file name\n       file   glo =      auxiliary input file name\n       npml   =      Grid points for PML\n       nthreads\n              =      Threads for OMP\n       file   slo =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       verb   =y ®\n       file   wavelet =      auxiliary input file name\nSOURCE\n       user/zdzhang/Mfdac2d.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffdac2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdb1-Tuple{}","page":"Home","title":"Madagascar.sffdb1","text":"sffdb1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdb1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdb1. See ?m8r for examples.\n\nRSF Documentation\n\nsffdb1(1)                     Madagascar Manuals                     sffdb1(1)\n\nNAME\n       sffdb1 - 1-D Finite-difference wave extrapolation\n\nSYNOPSIS\n       sffdb1 < in.rsf vel=vel.rsf > out.rsf dt= nt= nb=20 abc=0 order=2\n\nPARAMETERS\n       int    abc =0      absorbing boundary condition 1: cos 0: exp\n       float  dt = ®\n       int    nb =20 ®\n       int    nt = ®\n       int    order =2      FD order: 2,4\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mfdb1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffdb1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdct-Tuple{}","page":"Home","title":"Madagascar.sffdct","text":"sffdct(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdct on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdct. See ?m8r for examples.\n\nRSF Documentation\n\nsffdct(1)                     Madagascar Manuals                     sffdct(1)\n\nNAME\n       sffdct -\n\nSYNOPSIS\n       sffdct nbs=4 nba=8 ac=1 adj=n\n\nCOMMENTS\n       Madagascar wrapper to the Fast Discrete Curvelet Transform (FDCT)\n\n       Requirements:   -   Python   API  enable  in  Madagascar  -  PyCurveLab\n       (https://wave.eos.ubc.ca/Software/Licenced/)         -         CurveLab\n       (http://www.curvelet.org/)\n\nPARAMETERS\n       bool   ac =1 [y/n]     curvelets at finest scale\n       bool   adj =n [y/n]     adjoint transform\n       int    nba =8      number of angle at the 2nd coarsest scale\n       int    nbs =4      number of scale for the decomposition\nSOURCE\n       user/slim/Mfdct.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffdct(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdip-Tuple{}","page":"Home","title":"Madagascar.sffdip","text":"sffdip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdip. See ?m8r for examples.\n\nRSF Documentation\n\nsffdip(1)                     Madagascar Manuals                     sffdip(1)\n\nNAME\n       sffdip - 3D fast dip estimation by plane wave destruction\n\nSYNOPSIS\n       sffdip  <  in.rsf > out.rsf mask=mask.rsf n4=2 liter=20 rect1=1 rect2=1\n       rect3=1 verb=n\n\nPARAMETERS\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       int    rect3 =1      dip smoothness on 3rd axuis\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       user/pwd/Mfdip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffdip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdlsrtm-Tuple{}","page":"Home","title":"Madagascar.sffdlsrtm","text":"sffdlsrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdlsrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdlsrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsffdlsrtm(1)                  Madagascar Manuals                  sffdlsrtm(1)\n\nNAME\n       sffdlsrtm - Finite difference RTM as a linear operator\n\nSYNOPSIS\n       sffdlsrtm\n\nSOURCE\n       user/zhiguang/Mfdlsrtm.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffdlsrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffdtacc-Tuple{}","page":"Home","title":"Madagascar.sffdtacc","text":"sffdtacc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffdtacc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffdtacc. See ?m8r for examples.\n\nRSF Documentation\n\nsffdtacc(1)                   Madagascar Manuals                   sffdtacc(1)\n\nNAME\n       sffdtacc  -  2-D Fourth-order Finite-difference wave extrapolation with\n       timing option (no ABC)\n\nSYNOPSIS\n       sffdtacc < Fw.rsf vel=Fv.rsf ref=Fr.rsf > Fo.rsf verb=0 timer=0\n\nPARAMETERS\n       file   ref =      auxiliary input file name\n       bool   timer =0 [y/n]     setup I/O files\n       file   vel =      auxiliary input file name\n       bool   verb =0 [y/n]\nSOURCE\n       user/jsun/Mfdtacc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffdtacc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffedchain-Tuple{}","page":"Home","title":"Madagascar.sffedchain","text":"sffedchain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffedchain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffedchain. See ?m8r for examples.\n\nRSF Documentation\n\nsffedchain(1)                 Madagascar Manuals                 sffedchain(1)\n\nNAME\n       sffedchain - Fast explicit diffusion as a chain\n\nSYNOPSIS\n       sffedchain  <  inp.rsf  smooth=smo.rsf  w=wht.rsf > out.rsf nc=1 verb=y\n       niter=0 liter=50 rect=1\n\nPARAMETERS\n       int    liter =50      number of linear iterations\n       int    nc =1      number of components\n       int    niter =0      number of iterations\n       int    rect =1      smoothing in time\n       file   smooth =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\n       file   w =      auxiliary output file name\nSOURCE\n       user/fomels/Mfedchain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffedchain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffedchain1-Tuple{}","page":"Home","title":"Madagascar.sffedchain1","text":"sffedchain1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffedchain1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffedchain1. See ?m8r for examples.\n\nRSF Documentation\n\nsffedchain1(1)                Madagascar Manuals                sffedchain1(1)\n\nNAME\n       sffedchain1 - Fast explicit diffusion using chains - linear operator\n\nSYNOPSIS\n       sffedchain1 < inp.rsf weight=wht.rsf sig=sig.rsf > out.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   sig =      auxiliary input file name\n       file   weight =      auxiliary input file name\nSOURCE\n       user/fomels/Mfedchain1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffedchain1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffedchain2-Tuple{}","page":"Home","title":"Madagascar.sffedchain2","text":"sffedchain2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffedchain2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffedchain2. See ?m8r for examples.\n\nRSF Documentation\n\nsffedchain2(1)                Madagascar Manuals                sffedchain2(1)\n\nNAME\n       sffedchain2 - Fast explicit diffusion as a chain (2-D)\n\nSYNOPSIS\n       sffedchain2  <  inp.rsf  smooth=smo.rsf w=wht.rsf > out.rsf nc=1 rect=1\n       verb=y niter=0 liter=50\n\nPARAMETERS\n       int    liter =50      number of linear iterations\n       int    nc =1      number of components\n       int    niter =0      number of iterations\n       int    rect =1      smoothing radius\n       file   smooth =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\n       file   w =      auxiliary output file name\nSOURCE\n       user/fomels/Mfedchain2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffedchain2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffedchain21-Tuple{}","page":"Home","title":"Madagascar.sffedchain21","text":"sffedchain21(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffedchain21 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffedchain21. See ?m8r for examples.\n\nRSF Documentation\n\nsffedchain21(1)               Madagascar Manuals               sffedchain21(1)\n\nNAME\n       sffedchain21  -  Fast explicit diffusion using chains - linear operator\n       (2-D)\n\nSYNOPSIS\n       sffedchain21 < inp.rsf weight=wht.rsf sig=sig.rsf > out.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   sig =      auxiliary input file name\n       file   weight =      auxiliary input file name\nSOURCE\n       user/fomels/Mfedchain21.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffedchain21(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffermatrecursion-Tuple{}","page":"Home","title":"Madagascar.sffermatrecursion","text":"sffermatrecursion(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffermatrecursion on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffermatrecursion. See ?m8r for examples.\n\nRSF Documentation\n\nsffermatrecursion(1)          Madagascar Manuals          sffermatrecursion(1)\n\nNAME\n       sffermatrecursion  - 2D traveltime derivatives computation with the re‐\n       cursion from Fermat's principle (Sripanich and Fomel, 2017)\n\nSYNOPSIS\n       sffermatrecursion < refl.rsf slow=slow.rsf vnmosq=vnmo.rsf t0sum=t0.rsf\n       dip=dipf.rsf curv=curvf.rsf > vnmohet.rsf dipcurv=n order=3\n\nPARAMETERS\n       file   curv =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       bool   dipcurv =n [y/n]     if get dip/curvature from separate files\n       int    order =3      Interpolation order\n       file   slow =      auxiliary input file name\n       file   t0sum =      auxiliary input file name\n       file   vnmosq =      auxiliary input file name\nSOURCE\n       user/zone/Mfermatrecursion.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sffermatrecursion(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffern-Tuple{}","page":"Home","title":"Madagascar.sffern","text":"sffern(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffern on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffern. See ?m8r for examples.\n\nRSF Documentation\n\nsffern(1)                     Madagascar Manuals                     sffern(1)\n\nNAME\n       sffern - Generate fractal fern.\n\nSYNOPSIS\n       sffern > out.rsf n=1000 seed=time(NULL) angle=y\n\nPARAMETERS\n       bool   angle =y [y/n]     if y, use more angular fern\n       int    n =1000      number of points\n       int    seed =time(NULL)      random seed\nSOURCE\n       system/generic/Mfern.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffern(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffd0-Tuple{}","page":"Home","title":"Madagascar.sfffd0","text":"sfffd0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffd0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffd0. See ?m8r for examples.\n\nRSF Documentation\n\nsfffd0(1)                     Madagascar Manuals                     sfffd0(1)\n\nNAME\n       sfffd0 - 2-D FFD zero-offset migration: MPI + OMP\n\nSYNOPSIS\n       sfffd0  vel=vel.rsf  <  source.rsf  >  output.rsf opt=y jr=1 r0=0 jm=20\n       err=0.00001 alpha=-0.7 nbt=44  nbb=44  nbl=44  nbr=44  ct=0.01  cb=0.01\n       cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  err =0.00001 ®\n       float  factor =2.0/3.0      suppress HF parameter\n       int    jm =20 ®\n       int    jr =1 ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       bool   opt =y [y/n]\n       int    r0 =0 ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffd0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfffd0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffd1-Tuple{}","page":"Home","title":"Madagascar.sfffd1","text":"sfffd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfffd1(1)                     Madagascar Manuals                     sfffd1(1)\n\nNAME\n       sfffd1 - 1-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sfffd1 < in.rsf vel=vel.rsf > out.rsf opt=y dt= nt=\n\nPARAMETERS\n       float  dt = ®\n       int    nt = ®\n       bool   opt =y [y/n]\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfffd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffd2_den_omp-Tuple{}","page":"Home","title":"Madagascar.sfffd2_den_omp","text":"sfffd2_den_omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffd2_den_omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffd2_den_omp. See ?m8r for examples.\n\nRSF Documentation\n\nsfffd2denomp(1)             Madagascar Manuals             sfffd2denomp(1)\n\nNAME\n       sfffd2_den_omp - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sfffd2_den_omp   >   out.rsf   vel=vel.rsf   den=den.rsf  <  source.rsf\n       snaps=snaps.rsf dt= nt= isx= isz=  irz=isz  jm=20  ax=2.0  az=2.0  fac‐\n       tor=2.0/3.0  snap=y  nbt=0  nbb=0  nbl=0  nbr=0  sht=0  ct=0.01 cb=0.01\n       cl=0.01 cr=0.01\n\nPARAMETERS\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       file   den =      auxiliary input file name\n       float  dt = ®\n       float  factor =2.0/3.0      suppress HF parameter\n       int    irz =isz ®\n       int    isx = ®\n       int    isz = ®\n       int    jm =20 ®\n       int    nbb =0 ®\n       int    nbl =0 ®\n       int    nbr =0 ®\n       int    nbt =0 ®\n       int    nt = ®\n       int    sht =0 ®\n       bool   snap =y [y/n]     Output snapshots\n       file   snaps =      auxiliary output file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffd2_den_omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfffd2_den_omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffd2_ps-Tuple{}","page":"Home","title":"Madagascar.sfffd2_ps","text":"sfffd2_ps(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffd2_ps on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffd2_ps. See ?m8r for examples.\n\nRSF Documentation\n\nsfffd2ps(1)                  Madagascar Manuals                  sfffd2ps(1)\n\nNAME\n       sfffd2_ps  -  2-D  Fourier  finite-difference wave extrapolation, point\n       source\n\nSYNOPSIS\n       sfffd2_ps > out.rsf vel=vel.rsf < source.rsf opt=y dt=  nt=  isx=  isz=\n       nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01\n\nPARAMETERS\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffd2_ps.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfffd2_ps(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffd2dehf-Tuple{}","page":"Home","title":"Madagascar.sfffd2dehf","text":"sfffd2dehf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffd2dehf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffd2dehf. See ?m8r for examples.\n\nRSF Documentation\n\nsfffd2dehf(1)                 Madagascar Manuals                 sfffd2dehf(1)\n\nNAME\n       sfffd2dehf  -  2-D Fourier finite-difference wave extrapolation, smooth\n       point source, depress high frequency\n\nSYNOPSIS\n       sfffd2dehf > out.rsf vel=vel.rsf < source.rsf opt=y dt= nt=  isx=  isz=\n       nbt=44  nbb=44  nbl=44  nbr=44  ct=0.01  cb=0.01 cl=0.01 cr=0.01 ax=5.0\n       az=5.0 factor=5.0/6.0\n\nPARAMETERS\n       float  ax =5.0      suppress HF parameter\n       float  az =5.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  dt = ®\n       float  factor =5.0/6.0      suppress HF parameter\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffd2dehf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfffd2dehf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffdantti4b_smsr-Tuple{}","page":"Home","title":"Madagascar.sfffdantti4b_smsr","text":"sfffdantti4b_smsr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffdantti4b_smsr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffdantti4b_smsr. See ?m8r for examples.\n\nRSF Documentation\n\nsfffdantti4bsmsr(1)          Madagascar Manuals          sfffdantti4bsmsr(1)\n\nNAME\n       sfffdantti4b_smsr - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sfffdantti4b_smsr > out.rsf velx=velx.rsf velz=velz.rsf yita=yita.rsf <\n       source.rsf seta=seta.rsf opt=y dt= nt= isx= isz=0 err=0.0001 alpha=-0.7\n       nbt=126 nbb=126 nbl=128 nbr=128 ct=0.002 cb=0.002 cl=0.002 cr=0.002\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  cb =0.002      decaying parameter\n       float  cl =0.002      decaying parameter\n       float  cr =0.002      decaying parameter\n       float  ct =0.002      decaying parameter\n       float  dt = ®\n       float  err =0.0001 ®\n       int    isx = ®\n       int    isz =0 ®\n       int    nbb =126 ®\n       int    nbl =128 ®\n       int    nbr =128 ®\n       int    nbt =126 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   seta =      auxiliary input file name\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       file   yita =      auxiliary input file name\nSOURCE\n       user/songxl/Mffdantti4b_smsr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfffdantti4b_smsr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffdcos2b-Tuple{}","page":"Home","title":"Madagascar.sfffdcos2b","text":"sfffdcos2b(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffdcos2b on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffdcos2b. See ?m8r for examples.\n\nRSF Documentation\n\nsfffdcos2b(1)                 Madagascar Manuals                 sfffdcos2b(1)\n\nNAME\n       sfffdcos2b - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sfffdcos2b  >  out.rsf  vel=vel.rsf  <  source.rsf  opt=y dt= nt= nb=30\n       c=0.01\n\nPARAMETERS\n       float  c =0.01      decaying parameter\n       float  dt = ®\n       int    nb =30 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffdcos2b.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfffdcos2b(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffdrtm-Tuple{}","page":"Home","title":"Madagascar.sfffdrtm","text":"sfffdrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffdrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffdrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfffdrtm(1)                   Madagascar Manuals                   sfffdrtm(1)\n\nNAME\n       sfffdrtm - 2-D FFD RTM: MPI + OMP\n\nSYNOPSIS\n       sfffdrtm  geo=geo.rsf  vel=vel.rsf source=source.rsf opt=y dt= nt= isz=\n       irz=isz jr=1 jm=20 nr=  err=0.00001  alpha=-0.7  nbt=44  nbb=44  nbl=44\n       nbr=44  ct=0.01  cb=0.01  cl=0.01  cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0\n       sht=0 tskip=0\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  dt = ®\n       float  err =0.00001 ®\n       float  factor =2.0/3.0      suppress HF parameter\n       file   geo =      auxiliary input file name\n       int    irz =isz      if (!sf_getint(\"r0\",&r0)) r0=0;\n       int    isz = ®\n       int    jm =20 ®\n       int    jr =1 ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       int    nr =      streamer total length\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       int    sht =0      Time shift parameter\n       file   source =      auxiliary input file name\n       int    tskip =0      Time shift parameter\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffdrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfffdrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffdrtms-Tuple{}","page":"Home","title":"Madagascar.sfffdrtms","text":"sfffdrtms(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffdrtms on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffdrtms. See ?m8r for examples.\n\nRSF Documentation\n\nsfffdrtms(1)                  Madagascar Manuals                  sfffdrtms(1)\n\nNAME\n       sfffdrtms - 2-D FFD isotropic RTM: MPI + OMP\n\nSYNOPSIS\n       sfffdrtms  geo=geo.rsf vel=vel.rsf source=source.rsf opt=y dt= nt= isz=\n       irz=isz jr=1 jm=20 nr= nbt=44  nbb=44  nbl=44  nbr=44  ct=0.01  cb=0.01\n       cl=0.01 cr=0.01 sht=0 tskip=0 left=2400 right=800\n\nPARAMETERS\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  dt =      time step size\n       file   geo =      auxiliary input file name\n       int    irz =isz      receiver depth\n       int    isz =      source depth\n       int    jm =20      snap sampling\n       int    jr =1      receiver sampling\n       int    left =2400      left\n       int    nbb =44      boundary nodes\n       int    nbl =44      boundary nodes\n       int    nbr =44      boundary nodes\n       int    nbt =44      boundary nodes\n       int    nr =      streamer total length\n       int    nt =      total time length\n       bool   opt =y [y/n]     optimal padding\n       int    right =800      right\n       int    sht =0      Time shift parameter\n       file   source =      auxiliary input file name\n       int    tskip =0      Time shift parameter\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mffdrtms.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfffdrtms(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffdtti2-Tuple{}","page":"Home","title":"Madagascar.sfffdtti2","text":"sfffdtti2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffdtti2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffdtti2. See ?m8r for examples.\n\nRSF Documentation\n\nsfffdtti2(1)                  Madagascar Manuals                  sfffdtti2(1)\n\nNAME\n       sfffdtti2 - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sfffdtti2   >   out.rsf  velx=velx.rsf  velz=velz.rsf  yita=yita.rsf  <\n       source.rsf seta=seta.rsf opt=y dt= nt= isx= isz=0 err=0.0001 alpha=-0.7\n       nbt=126  nbb=126  nbl=128  nbr=128  ct=0.002 cb=0.002 cl=0.002 cr=0.002\n       pad1=1 cmplx=y cmplx=y cmplx=n\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  cb =0.002      decaying parameter\n       float  cl =0.002      decaying parameter\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cr =0.002      decaying parameter\n       float  ct =0.002      decaying parameter\n       float  dt = ®\n       float  err =0.0001 ®\n       int    isx = ®\n       int    isz =0 ®\n       int    nbb =126 ®\n       int    nbl =128 ®\n       int    nbr =128 ®\n       int    nbt =126 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       int    pad1 =1      padding factor on the first axis\n       file   seta =      auxiliary input file name\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       file   yita =      auxiliary input file name\nSOURCE\n       user/songxl/Mffdtti2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfffdtti2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffft-Tuple{}","page":"Home","title":"Madagascar.sffft","text":"sffft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffft. See ?m8r for examples.\n\nRSF Documentation\n\nsffft(1)                      Madagascar Manuals                      sffft(1)\n\nNAME\n       sffft - Fourier transform as a linear operator\n\nSYNOPSIS\n       sffft\n\nSOURCE\n       user/fomels/Mfft.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sffft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffft1-Tuple{}","page":"Home","title":"Madagascar.sffft1","text":"sffft1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffft1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffft1. See ?m8r for examples.\n\nRSF Documentation\n\nsffft1(1)                     Madagascar Manuals                     sffft1(1)\n\nNAME\n       sffft1 - Fast Fourier Transform along the first axis.\n\nSYNOPSIS\n       sffft1  <  Fin.rsf  >  Fou.rsf ot=Fot.rsf verb=n inv=n sym=n opt=y mem‐\n       size=1000.0\n\nPARAMETERS\n       bool   inv =n [y/n]     y, inverse transform\n       float  memsize =1000.0 ®\n       bool   opt =y [y/n]     y, determine optimal size for efficiency\n       string ot =      auxiliary input file name\n       bool   sym =n [y/n]     y, symmetric scaling for Hermitian FFT\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       bei/fdm/kjartjac\n       bei/ft1/autocor\n       bei/ft1/ft2d\n       bei/ft1/plane4\n       chen/test/fpca\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Mfft1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffft1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffft2-Tuple{}","page":"Home","title":"Madagascar.sffft2","text":"sffft2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffft2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffft2. See ?m8r for examples.\n\nRSF Documentation\n\nsffft2(1)                     Madagascar Manuals                     sffft2(1)\n\nNAME\n       sffft2 - Test 2-D Fourier transform.\n\nSYNOPSIS\n       sffft2 < freq.rsf > space.rsf inv=n n1= n2= cmplx=n pad1=1\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       bool   inv =n [y/n]     inverse flag\n       int    n1 = ®\n       int    n2 = ®\n       int    pad1 =1      padding factor on the first axis\nSOURCE\n       user/fomels/Mfft2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffft2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffft3-Tuple{}","page":"Home","title":"Madagascar.sffft3","text":"sffft3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffft3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffft3. See ?m8r for examples.\n\nRSF Documentation\n\nsffft3(1)                     Madagascar Manuals                     sffft3(1)\n\nNAME\n       sffft3 - FFT transform on extra axis.\n\nSYNOPSIS\n       sffft3 < in.rsf > out.rsf inv=n sym=n sign=inv? 1: 0 opt=y axis=2 pad=2\n\nCOMMENTS\n       Input and output are complex data. The input is padded by factor pad.\n\n       July  2012  program  of the month: http://ahay.org/blog/2012/07/02/pro‐\n       gram-of-the-month-sffft3/\n\nPARAMETERS\n       int    axis =2      Axis to transform\n       bool   inv =n [y/n]     if y, perform inverse transform\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       int    pad =2      padding factor\n       int    sign =inv? 1: 0      transform sign (0 or 1)\n       bool   sym =n [y/n]     if y, apply symmetric scaling to make  the  FFT\n              operator Hermitian\nUSED IN\n       bei/ft1/brad\n       bei/ft1/ft2d\n       bei/ft1/plane4\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Mfft3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffft3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffft3d-Tuple{}","page":"Home","title":"Madagascar.sffft3d","text":"sffft3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffft3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffft3d. See ?m8r for examples.\n\nRSF Documentation\n\nsffft3d(1)                    Madagascar Manuals                    sffft3d(1)\n\nNAME\n       sffft3d - 3D FFT with centering and Hermitian scaling\n\nSYNOPSIS\n       sffft3d < Fi.rsf > Fo.rsf ompchunk=1 verb=n inv=n cnt=n axis=0\n\nPARAMETERS\n       int    axis =0      FFT axis or axes\n       bool   cnt =n [y/n]     centering\n       bool   inv =n [y/n]     forward/inverse\n       int    ompchunk =1      OpenMP data chunk size\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mfft3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffft3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexp0-Tuple{}","page":"Home","title":"Madagascar.sffftexp0","text":"sffftexp0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexp0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexp0. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexp0(1)                  Madagascar Manuals                  sffftexp0(1)\n\nNAME\n       sffftexp0  - 2-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration\n\nSYNOPSIS\n       sffftexp0  <  data.rsf  >   image.rsf   snaps=snaps.rsf   left=left.rsf\n       right=right.rsf  mig=n  cmplx=n  pad1=1  trm=n  nz= dz= nt= dt= t0=0.0f\n       snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       float  t0 =0.0f      time origin (if modeling)\n       bool   trm =n [y/n]     time-reversal imaging\nSOURCE\n       user/fomels/Mfftexp0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffftexp0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexp0a-Tuple{}","page":"Home","title":"Madagascar.sffftexp0a","text":"sffftexp0a(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexp0a on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexp0a. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexp0a(1)                 Madagascar Manuals                 sffftexp0a(1)\n\nNAME\n       sffftexp0a  - Two-step Lowrank 2-D zero-offset exploding reflector mod‐\n       eling/migration with adjoint\n\nSYNOPSIS\n       sffftexp0a  <  data.rsf  >  image.rsf   snaps=snaps.rsf   left=left.rsf\n       right=right.rsf adj=n cmplx=n pad1=1 nz= dz= nt= dt= t0=0.0f snap=0\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       float  t0 =0.0f      time origin (if modeling)\nSOURCE\n       user/fomels/Mfftexp0a.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffftexp0a(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexp0test-Tuple{}","page":"Home","title":"Madagascar.sffftexp0test","text":"sffftexp0test(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexp0test on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexp0test. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexp0test(1)              Madagascar Manuals              sffftexp0test(1)\n\nNAME\n       sffftexp0test  -  2-D  FFT-based zero-offset exploding reflector model‐\n       ing/migration (outputs time volume; can be used to generate movies)\n\nSYNOPSIS\n       sffftexp0test movie=movie.rsf  <  data.rsf  >  image.rsf  left=left.rsf\n       right=right.rsf mig=n cmplx=n pad1=1 nz= dz= nt= dt= jt=1\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       int    jt =1      time interval\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       file   movie =      auxiliary output file name\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\nSOURCE\n       user/jsun/Mfftexp0test.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffftexp0test(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexp1-Tuple{}","page":"Home","title":"Madagascar.sffftexp1","text":"sffftexp1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexp1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexp1. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexp1(1)                  Madagascar Manuals                  sffftexp1(1)\n\nNAME\n       sffftexp1  - 2-D FFT-based prestack exploding reflector modeling/migra‐\n       tion\n\nSYNOPSIS\n       sffftexp1 < data.rsf > image.rsf  left=left.rsf  right=right.rsf  mig=n\n       snap=0 nz= dz= nt= dt= nh= dh= cmplx=n sub=y\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dh =      offset sampling (if modeling)\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nh =      offset samples (if modeling)\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       bool   sub =y [y/n]     if -1 is included in the matrix\nSOURCE\n       user/fomels/Mfftexp1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffftexp1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexp3-Tuple{}","page":"Home","title":"Madagascar.sffftexp3","text":"sffftexp3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexp3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexp3. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexp3(1)                  Madagascar Manuals                  sffftexp3(1)\n\nNAME\n       sffftexp3  - 3-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration\n\nSYNOPSIS\n       sffftexp3 < data.rsf > image.rsf  left=left.rsf  right=right.rsf  mig=n\n       ompchunk=1 nz= dz= nt= dt=\n\nPARAMETERS\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    ompchunk =1      OpenMP data chunk size\n       file   right =      auxiliary input file name\nSOURCE\n       user/fomels/Mfftexp3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffftexp3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftexpa-Tuple{}","page":"Home","title":"Madagascar.sffftexpa","text":"sffftexpa(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftexpa on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftexpa. See ?m8r for examples.\n\nRSF Documentation\n\nsffftexpa(1)                  Madagascar Manuals                  sffftexpa(1)\n\nNAME\n       sffftexpa  - 2-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration with adjoint\n\nSYNOPSIS\n       sffftexpa  <  data.rsf  >   image.rsf   snaps=snaps.rsf   left=left.rsf\n       right=right.rsf adj=n cmplx=n pad1=1 nz= dz= nt= dt= t0=0.0f snap=0\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       float  t0 =0.0f      time origin (if modeling)\nSOURCE\n       user/fomels/Mfftexpa.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffftexpa(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftfwi_sparse_2d-Tuple{}","page":"Home","title":"Madagascar.sffftfwi_sparse_2d","text":"sffftfwi_sparse_2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftfwi_sparse_2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftfwi_sparse_2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffftfwisparse2d(1)         Madagascar Manuals         sffftfwisparse2d(1)\n\nNAME\n       sffftfwi_sparse_2d  -  2D frequency domain full waveform inversion with\n       sparsity regularization.\n\nSYNOPSIS\n       sffftfwi_sparse_2d   <   in.rsf   >    out.rsf    receiver=receiver.rsf\n       source=source.rsf   record=record.rsf  dip=dip.rsf  vout=vout.rsf  mis‐\n       fit=misfit.rsf sparsity=y niter=10 npml=20 par=1 pclip=8. uts=0  order=\n       type=\n\nPARAMETERS\n       string dip =      auxiliary input file name\n       string misfit =      auxiliary output file name\n       int    niter =10      number of iteration\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       int    par =1      seislet transform accuracy order\n       float  pclip =8.       soft thresholding parameter\n       string receiver =      auxiliary input file name\n       string record =      auxiliary input file name\n       string source =      auxiliary input file name\n       bool   sparsity  =y  [y/n]     if  true, sparsity constriant; if false,\n              normal FWI\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       int    uts =0 ®\n       string vout =      auxiliary output file name\nSOURCE\n       user/zhiguang/Mfftfwi_sparse_2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sffftfwi_sparse_2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftone-Tuple{}","page":"Home","title":"Madagascar.sffftone","text":"sffftone(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftone on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftone. See ?m8r for examples.\n\nRSF Documentation\n\nsffftone(1)                   Madagascar Manuals                   sffftone(1)\n\nNAME\n       sffftone - Test 1-D Fourier transform.\n\nSYNOPSIS\n       sffftone < freq.rsf > space.rsf inv=n n1=\n\nPARAMETERS\n       bool   inv =n [y/n]     inverse flag\n       int    n1 =      dimension (for inv=y)\nSOURCE\n       user/fomels/Mfftone.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffftone(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfffttest-Tuple{}","page":"Home","title":"Madagascar.sfffttest","text":"sfffttest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfffttest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfffttest. See ?m8r for examples.\n\nRSF Documentation\n\nsfffttest(1)                  Madagascar Manuals                  sfffttest(1)\n\nNAME\n       sfffttest - Test 3-D Fourier transform.\n\nSYNOPSIS\n       sfffttest < freq.rsf > space.rsf inv=n n1= n2= n3= cmplx=n pad1=1\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       bool   inv =n [y/n]     inverse flag\n       int    n1 = ®\n       int    n2 = ®\n       int    n3 = ®\n       int    pad1 =1      padding factor on the first axis\nSOURCE\n       user/fomels/Mffttest.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfffttest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave1-Tuple{}","page":"Home","title":"Madagascar.sffftwave1","text":"sffftwave1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave1. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave1(1)                 Madagascar Manuals                 sffftwave1(1)\n\nNAME\n       sffftwave1 - 1-D FFT wave extrapolation\n\nSYNOPSIS\n       sffftwave1  <  inp.rsf  > out.rsf prop=prop.rsf right=right.rsf nt= dt=\n       sub=y step=y nsps=n\n\nPARAMETERS\n       float  dt = ®\n       bool   nsps =n [y/n]     if using NSPS\n       int    nt = ®\n       file   prop =      auxiliary input file name\n       string right =      auxiliary input file name\n       bool   step =y [y/n]     if two-step propagation\n       bool   sub =y [y/n]     if -1 is included in the matrix\nSOURCE\n       user/fomels/Mfftwave1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffftwave1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave1dd-Tuple{}","page":"Home","title":"Madagascar.sffftwave1dd","text":"sffftwave1dd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave1dd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave1dd. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave1dd(1)               Madagascar Manuals               sffftwave1dd(1)\n\nNAME\n       sffftwave1dd - 1-D lowrank FFT wave extrapolation using real to complex\n       to real fft (with wavelet injection)\n\nSYNOPSIS\n       sffftwave1dd   <   Fw.rsf   >    Fo.rsf    refl=Fr.rsf    left=left.rsf\n       right=right.rsf\n\nPARAMETERS\n       file   left =      auxiliary input file name\n       file   refl =      auxiliary input file name\n       file   right =      auxiliary input file name\nSOURCE\n       user/jsun/Mfftwave1dd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffftwave1dd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave2-Tuple{}","page":"Home","title":"Madagascar.sffftwave2","text":"sffftwave2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave2. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave2(1)                 Madagascar Manuals                 sffftwave2(1)\n\nNAME\n       sffftwave2 - Simple 2-D wave propagation\n\nSYNOPSIS\n       sffftwave2  <  Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf verb=n snap=0 cmplx=n pad1=1\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fomels/Mfftwave2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffftwave2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave2omp-Tuple{}","page":"Home","title":"Madagascar.sffftwave2omp","text":"sffftwave2omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave2omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave2omp. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave2omp(1)              Madagascar Manuals              sffftwave2omp(1)\n\nNAME\n       sffftwave2omp  -  Simple 2-D wave propagation with multi-threaded Kiss-\n       FFT\n\nSYNOPSIS\n       sffftwave2omp   <   Fw.rsf   >   Fo.rsf   ref=Fr.rsf    snaps=snaps.rsf\n       left=left.rsf right=right.rsf verb=n abc=n nbt= nbb=nbt nbl=nbt nbr=nbt\n       ct= cb=ct cl=ct cr=ct snap=0 pad1=1\n\nPARAMETERS\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       float  cr =ct ®\n       float  ct = ®\n       file   left =      auxiliary input file name\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mfftwave2omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffftwave2omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave2p-Tuple{}","page":"Home","title":"Madagascar.sffftwave2p","text":"sffftwave2p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave2p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave2p. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave2p(1)                Madagascar Manuals                sffftwave2p(1)\n\nNAME\n       sffftwave2p - Simple 2-D wave propagation with multi-threaded fftw3\n\nSYNOPSIS\n       sffftwave2p  < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf verb=n abc=n nbt= nbb=nbt  nbl=nbt  nbr=nbt  ct=  cb=ct\n       cl=ct cr=ct snap=0 cmplx=n pad1=1\n\nPARAMETERS\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cr =ct ®\n       float  ct = ®\n       file   left =      auxiliary input file name\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mfftwave2p.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffftwave2p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave2taper-Tuple{}","page":"Home","title":"Madagascar.sffftwave2taper","text":"sffftwave2taper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave2taper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave2taper. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave2taper(1)            Madagascar Manuals            sffftwave2taper(1)\n\nNAME\n       sffftwave2taper - Simple 2-D wave propagation with multi-threaded fftw3\n\nSYNOPSIS\n       sffftwave2taper   <   Fw.rsf   >   Fo.rsf   ref=Fr.rsf  snaps=snaps.rsf\n       left=left.rsf right=right.rsf verb=n cmplx=n pad1=1 taper=0 thresh=0.92\n       snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       int    taper =0      tapering in the frequency domain\n       float  thresh =0.92      tapering threshold\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mfftwave2taper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sffftwave2taper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave3-Tuple{}","page":"Home","title":"Madagascar.sffftwave3","text":"sffftwave3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave3. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave3(1)                 Madagascar Manuals                 sffftwave3(1)\n\nNAME\n       sffftwave3 - Simple 3-D wave propagation\n\nSYNOPSIS\n       sffftwave3  <  Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf verb=y cmplx=n pad1=1 snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mfftwave3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffftwave3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave3omp-Tuple{}","page":"Home","title":"Madagascar.sffftwave3omp","text":"sffftwave3omp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave3omp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave3omp. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave3omp(1)              Madagascar Manuals              sffftwave3omp(1)\n\nNAME\n       sffftwave3omp  -  Simple 3-D wave propagation with multi-threaded kiss-\n       fft\n\nSYNOPSIS\n       sffftwave3omp   <   Fw.rsf   >   Fo.rsf   ref=Fr.rsf    snaps=snaps.rsf\n       left=left.rsf right=right.rsf verb=y cmplx=n pad1=1 snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/jsun/Mfftwave3omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffftwave3omp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftwave3p-Tuple{}","page":"Home","title":"Madagascar.sffftwave3p","text":"sffftwave3p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftwave3p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftwave3p. See ?m8r for examples.\n\nRSF Documentation\n\nsffftwave3p(1)                Madagascar Manuals                sffftwave3p(1)\n\nNAME\n       sffftwave3p - Simple 3-D wave propagation with multi-threaded fftw3\n\nSYNOPSIS\n       sffftwave3p  < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf verb=y cmplx=n pad1=1 snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/jsun/Mfftwave3p.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffftwave3p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffftxcor-Tuple{}","page":"Home","title":"Madagascar.sffftxcor","text":"sffftxcor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffftxcor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffftxcor. See ?m8r for examples.\n\nRSF Documentation\n\nsffftxcor(1)                  Madagascar Manuals                  sffftxcor(1)\n\nNAME\n       sffftxcor -\n\nSYNOPSIS\n       sffftxcor < Fa.rsf ref=Fb.rsf > Fc.rsf verb=n nt=1 ot=0.0 dt=1.0\n\nCOMMENTS\n       Fourier  domain cross-correlation Paul Sava Copyright (C) 2022 Colorado\n       School of Mines\n\nPARAMETERS\n       float  dt =1.0 ®\n       int    nt =1 ®\n       float  ot =0.0 ®\n       file   ref =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mfftxcor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffftxcor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffiglist-Tuple{}","page":"Home","title":"Madagascar.sffiglist","text":"sffiglist(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffiglist on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffiglist. See ?m8r for examples.\n\nRSF Documentation\n\nsffiglist(1)                  Madagascar Manuals                  sffiglist(1)\n\nNAME\n       sffiglist - Compare Vplot files in Fig and Lock directories\n\nSYNOPSIS\n       sffiglist figdir= lockdir= list= show= rsftest=n copy=n\n\nCOMMENTS\n       Parameter figdir is path to Fig directory, default is ./Fig.  Parameter\n       lockdir  is  path  to  Lock  directory:   If   figdir   is   in   $RSF‐\n       SRC/book/[book]/[chapter]/[section],  then  default  lockdir  is  $RSF‐\n       FIGS/[book]/[chapter]/[section].    If   figdir   is   not   in   $RSF‐\n       SRC/book/[book]/[chapter]/[section],  then  default lockdir is $RSFALT‐\n       FIGS/[book]/[chapter]/[section].\n\n       Parameter list controls files to list, default is all.  Parameter  show\n       controls files to flip with sfpen, default is none.\n\n       list|show  =  none     No  files, print only summary.  list|show = diff\n       Files that are different, determined by sfvplotdiff.  list|show =  miss\n       Files missing from figdir or lockdir, and different files.  list|show =\n       all     All files.\n\n       File list codes:\n\n       space   indicates files that are the same.   -      indicates  file  in\n       lockdir  that  is  missing  from figdir.  +     indicates extra file in\n       figdir that is missing from lockdir.  number  is return code from  sfv‐\n       plotdiff indicating different files.\n\nPARAMETERS\n       bool   copy =n [y/n]     copy different figs from figdir to lockdir?\n       string figdir =      fig directory, default = ./Fig\n       string list =      how much to list [none,diff,miss,all], default = all\n       string lockdir  =       lock  directory,  default = lock counterpart of\n              figdir\n       bool   rsftest =n [y/n]     write .rsftest file?\n       string show =      how much to  show  [none,diff,miss,all],  default  =\n              none\nSOURCE\n       user/jennings/Mfiglist.py\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sffiglist\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffiglist(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffiledims-Tuple{}","page":"Home","title":"Madagascar.sffiledims","text":"sffiledims(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffiledims on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffiledims. See ?m8r for examples.\n\nRSF Documentation\n\nsffiledims(1)                 Madagascar Manuals                 sffiledims(1)\n\nNAME\n       sffiledims - Computes number of dimensions and their values\n\nSYNOPSIS\n       sffiledims < in.rsf large=n parform=y\n\nCOMMENTS\n       Wrapper for sf_filedims.\n\nPARAMETERS\n       bool   large =n [y/n]     if y, file with large dimensions.\n       bool   parform  =y  [y/n]     If  y,  print  out parameter=value. If n,\n              print out value.\nSOURCE\n       user/ivlad/Mfiledims.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffiledims(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffileflush-Tuple{}","page":"Home","title":"Madagascar.sffileflush","text":"sffileflush(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffileflush on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffileflush. See ?m8r for examples.\n\nRSF Documentation\n\nsffileflush(1)                Madagascar Manuals                sffileflush(1)\n\nNAME\n       sffileflush - Creates just the ascii header from parameters\n\nSYNOPSIS\n       sffileflush < in.rsf > out.rsf\n\nCOMMENTS\n       Wrapper for sf_fileflush (copy RSF header of a file to another)\n\nSOURCE\n       user/ivlad/Mfileflush.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffileflush(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffileheader-Tuple{}","page":"Home","title":"Madagascar.sffileheader","text":"sffileheader(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffileheader on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffileheader. See ?m8r for examples.\n\nRSF Documentation\n\nsffileheader(1)               Madagascar Manuals               sffileheader(1)\n\nNAME\n       sffileheader - dumps header information to the standard output.\n\nSYNOPSIS\n       sffileheader < in.rsf large=n parform=y all=n\n\nCOMMENTS\n       Extended sffiledims.\n\nPARAMETERS\n       bool   all  =n [y/n]     If y, print all values, icluding singleton di‐\n              mensions.\n                     If n, drop trailing singleteon dimensions.\n       bool   large =n [y/n]     if y, file with large dimensions.\n       bool   parform =y [y/n]     If y,  print  out  parameter=value.  If  n,\n              print out value.\nSOURCE\n       user/slim/Mfileheader.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffileheader(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffincon-Tuple{}","page":"Home","title":"Madagascar.sffincon","text":"sffincon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffincon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffincon. See ?m8r for examples.\n\nRSF Documentation\n\nsffincon(1)                   Madagascar Manuals                   sffincon(1)\n\nNAME\n       sffincon - Offset continuation by finite differences\n\nSYNOPSIS\n       sffincon < input.rsf > output.rsf nh= dh= h0= all=n\n\nPARAMETERS\n       bool   all =n [y/n]     if y, output all offsets\n       float  dh =      Offset step size\n       float  h0 =      Initial offset\n       int    nh =      Number of steps in offset\nSOURCE\n       system/seismic/Mfincon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffincon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindintval-Tuple{}","page":"Home","title":"Madagascar.sffindintval","text":"sffindintval(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindintval on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindintval. See ?m8r for examples.\n\nRSF Documentation\n\nsffindintval(1)               Madagascar Manuals               sffindintval(1)\n\nNAME\n       sffindintval - Find a certain integer value position in an array [n1]\n\nSYNOPSIS\n       sffindintval < in.rsf > out.rsf val= val2=val type=\n\nPARAMETERS\n       string type =      type of comparison eq (=) leq (<=) geq(>=)\n       int    val = ®\n       int    val2 =val ®\nSOURCE\n       user/lcasasan/Mfindintval.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffindintval(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindmax-Tuple{}","page":"Home","title":"Madagascar.sffindmax","text":"sffindmax(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindmax on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindmax. See ?m8r for examples.\n\nRSF Documentation\n\nsffindmax(1)                  Madagascar Manuals                  sffindmax(1)\n\nNAME\n       sffindmax -\n\nSYNOPSIS\n       sffindmax < Fin.rsf > Fou.rsf verb=n\n\nCOMMENTS\n       find max value in a file\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mfindmax.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffindmax(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindmax1-Tuple{}","page":"Home","title":"Madagascar.sffindmax1","text":"sffindmax1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindmax1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindmax1. See ?m8r for examples.\n\nRSF Documentation\n\nsffindmax1(1)                 Madagascar Manuals                 sffindmax1(1)\n\nNAME\n       sffindmax1  - Find max value and its sampled position along fast dimen‐\n       sion\n\nSYNOPSIS\n       sffindmax1 < in.rsf > out.rsf max_val=max_val.rsf shift=0 verb=n\n\nPARAMETERS\n       string max_val =      auxiliary output file name\n       int    shift =0      shift\n       bool   verb =n [y/n]\nSOURCE\n       user/lcasasan/Mfindmax1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffindmax1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindmaximum-Tuple{}","page":"Home","title":"Madagascar.sffindmaximum","text":"sffindmaximum(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindmaximum on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindmaximum. See ?m8r for examples.\n\nRSF Documentation\n\nsffindmaximum(1)              Madagascar Manuals              sffindmaximum(1)\n\nNAME\n       sffindmaximum - None\n\nSYNOPSIS\n       sffindmaximum < in.rsf > out.rsf\n\nSOURCE\n       user/zdzhang/Mfindmaximum.f90\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffindmaximum(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindmin2-Tuple{}","page":"Home","title":"Madagascar.sffindmin2","text":"sffindmin2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindmin2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindmin2. See ?m8r for examples.\n\nRSF Documentation\n\nsffindmin2(1)                 Madagascar Manuals                 sffindmin2(1)\n\nNAME\n       sffindmin2 - Find minimum in 2-D\n\nSYNOPSIS\n       sffindmin2 < inp.rsf > out.rsf gate1=3 gate2=3\n\nPARAMETERS\n       int    gate1 =3 ®\n       int    gate2 =3      picking gate\nSOURCE\n       user/fomels/Mfindmin2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffindmin2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindmo-Tuple{}","page":"Home","title":"Madagascar.sffindmo","text":"sffindmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindmo. See ?m8r for examples.\n\nRSF Documentation\n\nsffindmo(1)                   Madagascar Manuals                   sffindmo(1)\n\nNAME\n       sffindmo  -  DMO without stacking by finite-difference offset continua‐\n       tion.\n\nSYNOPSIS\n       sffindmo < cmp.rsf > stk.rsf\n\nSOURCE\n       system/seismic/Mfindmo.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffindmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindrefmax1-Tuple{}","page":"Home","title":"Madagascar.sffindrefmax1","text":"sffindrefmax1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindrefmax1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindrefmax1. See ?m8r for examples.\n\nRSF Documentation\n\nsffindrefmax1(1)              Madagascar Manuals              sffindrefmax1(1)\n\nNAME\n       sffindrefmax1  - Find the sampled position of max value after reference\n       point along fast dimension.\n\nSYNOPSIS\n       sffindrefmax1 < inp.rsf > out.rsf max_val=max_val.rsf zeropo=zeropo.rsf\n       verb=n\n\nPARAMETERS\n       string max_val =      auxiliary output file name\n       bool   verb =n [y/n]\n       string zeropo =      auxiliary input file name\nSOURCE\n       user/yliu/Mfindrefmax1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffindrefmax1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindwellcoord-Tuple{}","page":"Home","title":"Madagascar.sffindwellcoord","text":"sffindwellcoord(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindwellcoord on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindwellcoord. See ?m8r for examples.\n\nRSF Documentation\n\nsffindwellcoord(1)            Madagascar Manuals            sffindwellcoord(1)\n\nNAME\n       sffindwellcoord - Find well location by using well coordinates.\n\nSYNOPSIS\n       sffindwellcoord xcoord=xcoord.rsf ycoord=ycoord.rsf wellx= welly=\n\nPARAMETERS\n       float  wellx =      X coordinate for well\n       float  welly =      Y coordinate for well\n       file   xcoord =      auxiliary input file name\n       file   ycoord =      auxiliary input file name\nSOURCE\n       user/yliu/Mfindwellcoord.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sffindwellcoord(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffindzeroendt-Tuple{}","page":"Home","title":"Madagascar.sffindzeroendt","text":"sffindzeroendt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffindzeroendt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffindzeroendt. See ?m8r for examples.\n\nRSF Documentation\n\nsffindzeroendt(1)             Madagascar Manuals             sffindzeroendt(1)\n\nNAME\n       sffindzeroendt  -  Find the position of first non-zero value along time\n       axis.\n\nSYNOPSIS\n       sffindzeroendt < inp.rsf > out.rsf verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mfindzeroendt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sffindzeroendt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffinstack-Tuple{}","page":"Home","title":"Madagascar.sffinstack","text":"sffinstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffinstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffinstack. See ?m8r for examples.\n\nRSF Documentation\n\nsffinstack(1)                 Madagascar Manuals                 sffinstack(1)\n\nNAME\n       sffinstack - DMO and stack by finite-difference offset continuation.\n\nSYNOPSIS\n       sffinstack < cmp.rsf > stk.rsf\n\nSOURCE\n       system/seismic/Mfinstack.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffinstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffint-Tuple{}","page":"Home","title":"Madagascar.sffint","text":"sffint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffint. See ?m8r for examples.\n\nRSF Documentation\n\nsffint(1)                     Madagascar Manuals                     sffint(1)\n\nNAME\n       sffint - Forward interpolation (1-D).\n\nSYNOPSIS\n       sffint  <  in.rsf  >  out.rsf warp=warp.rsf adj=n der=n n1= d1=1. o1=0.\n       eps=0.01\n\nCOMMENTS\n       adj=0: data(t) and warp(s) and outputs interp(s)=data(warp(s)).\n\n       adj=1: interp(s) -> data(t)\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  d1 =1.  ®\n       bool   der =n [y/n]     derivative flag\n       float  eps =0.01      stretch regularization\n       int    n1 = ®\n       float  o1 =0.  ®\n       file   warp =      auxiliary input file name\nSOURCE\n       user/tharit/Mfint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffir-Tuple{}","page":"Home","title":"Madagascar.sffir","text":"sffir(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffir on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffir. See ?m8r for examples.\n\nRSF Documentation\n\nsffir(1)                      Madagascar Manuals                      sffir(1)\n\nNAME\n       sffir - FIR filter\n\nSYNOPSIS\n       sffir < in.rsf > out.rsf fir=fir.rsf axis=1\n\nPARAMETERS\n       int    axis =1      apply fir filter on which dimension\n       file   fir =      auxiliary input file name\nSOURCE\n       user/chen/Mfir.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sffir(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffitcrs-Tuple{}","page":"Home","title":"Madagascar.sffitcrs","text":"sffitcrs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffitcrs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffitcrs. See ?m8r for examples.\n\nRSF Documentation\n\nsffitcrs(1)                   Madagascar Manuals                   sffitcrs(1)\n\nNAME\n       sffitcrs -\n\nSYNOPSIS\n       sffitcrs < in.rsf > out_tcrs_params.rsf tcrs=\n\nCOMMENTS\n       Input:  T[m][h][t]  and its sf-file  m[], Nm h[], Nh Output: a(3) three\n       CRS parameters: a(0) m + a(1)m^2 + a(2) h^2\n\n       H_11 = 2 Nx Sum(m^2) H_12 = 2 Nx Sum(m^4) H_13 = 2 Sum(x^2) Sum(m)\n\n       H_22 = 2 Nx Sum(m^4) H_23 = 2 Sum(x^2) Sum(m^2)\n\n       H_33 = 2 Nm Sum(x^2)\n\n       da = - grad H^{-1}\n\nPARAMETERS\n       string tcrs = ®\nSOURCE\n       user/roman/Mfitcrs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffitcrs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffitcrspicks-Tuple{}","page":"Home","title":"Madagascar.sffitcrspicks","text":"sffitcrspicks(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffitcrspicks on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffitcrspicks. See ?m8r for examples.\n\nRSF Documentation\n\nsffitcrspicks(1)              Madagascar Manuals              sffitcrspicks(1)\n\nNAME\n       sffitcrspicks -\n\nSYNOPSIS\n       sffitcrspicks < in.rsf > out_tcrs.rsf crsparams= mask=\n\nCOMMENTS\n       Compute fitting of Non-hyperbolic CRS to first-arrivals T[m][h].\n\n       Input:  T[m][h]  arrivals  and  in its sf-file  m[], Nm h[], Nh Output:\n       tcrs=filname - t[m][h] crs surface prints  three  CRS  parameters  a[3]\n       where: t[m][h] = a(0) m + a(1)m^2 + a(2) h^2\n\nPARAMETERS\n       string crsparams = ®\n       string mask = ®\nSOURCE\n       user/roman/Mfitcrspicks.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffitcrspicks(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffitnonhcrspicks-Tuple{}","page":"Home","title":"Madagascar.sffitnonhcrspicks","text":"sffitnonhcrspicks(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffitnonhcrspicks on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffitnonhcrspicks. See ?m8r for examples.\n\nRSF Documentation\n\nsffitnonhcrspicks(1)          Madagascar Manuals          sffitnonhcrspicks(1)\n\nNAME\n       sffitnonhcrspicks -\n\nSYNOPSIS\n       sffitnonhcrspicks < in.rsf > out_tcrs.rsf A1= A2= B=\n\nCOMMENTS\n       Compute fitting of Non-hyperbolic CRS to first-arrivals T[m][h].\n\n       Input: T[m][h] arrivals and in its sf-file  m[], Nm h[], Nh\n\n       parameters:\n\n       A1 A2 B\n\n       FF = F(t0,t02,A1,A2,m-h)*F(t0,t02,A1,A2,m+h);\n\n       t2 = 0.5 * (F(t0, t02, A1, A2, m) + (2*B+A1*A1-A2)*h*h + sqrt(FF) );\n\n       Output:  tcrs=filname - t[m][h] crs surface prints three CRS parameters\n       a[3] where: t[m][h] = a(0) m + a(1)m^2 + a(2) h^2\n\nPARAMETERS\n       float  A1 = ®\n       float  A2 = ®\n       float  B =      memory allocations\nSOURCE\n       user/roman/Mfitnonhcrspicks.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sffitnonhcrspicks(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffkamo-Tuple{}","page":"Home","title":"Madagascar.sffkamo","text":"sffkamo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffkamo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffkamo. See ?m8r for examples.\n\nRSF Documentation\n\nsffkamo(1)                    Madagascar Manuals                    sffkamo(1)\n\nNAME\n       sffkamo  -  Computes  Azimuth  Move-Out  (AMO) operator in the f-k log-\n       stretch domain\n\nSYNOPSIS\n       sffkamo < in.rsf > out.rsf h1= h2= f1= f2= maxe=10.\n\nPARAMETERS\n       float  f1 =      input azimuth in degrees\n       float  f2 =      output azimuth in degrees\n       float  h1 =      input offset\n       float  h2 =      output offset\n       float  maxe =10.       stability constraint\nSOURCE\n       system/seismic/Mfkamo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffkamo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffkdmo-Tuple{}","page":"Home","title":"Madagascar.sffkdmo","text":"sffkdmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffkdmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffkdmo. See ?m8r for examples.\n\nRSF Documentation\n\nsffkdmo(1)                    Madagascar Manuals                    sffkdmo(1)\n\nNAME\n       sffkdmo - Offset continuation by log-stretch F-K operator.\n\nSYNOPSIS\n       sffkdmo < in.rsf > out.rsf h= nh=1 h0=0.\n\nPARAMETERS\n       float  h =      final offset\n       float  h0 =0.       initial offset\n       int    nh =1      number of offset steps\nSOURCE\n       system/seismic/Mfkdmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffkdmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffkgdmo-Tuple{}","page":"Home","title":"Madagascar.sffkgdmo","text":"sffkgdmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffkgdmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffkgdmo. See ?m8r for examples.\n\nRSF Documentation\n\nsffkgdmo(1)                   Madagascar Manuals                   sffkgdmo(1)\n\nNAME\n       sffkgdmo - FK-domain Gardner's DMO for regularly sampled 2-D data\n\nSYNOPSIS\n       sffkgdmo < in.rsf > out.rsf inv=y shot=n eps=0.01 nb=85 db=1 xi=1\n\nCOMMENTS\n       The input/ouput is (offset,logstretch frequency, midpoint/shot wavenum‐\n       ber).\n\nPARAMETERS\n       float  db =1      angle increment\n       float  eps =0.01      stretch regularization\n       bool   inv =y [y/n]     inversion flag\n       int    nb =85      number of angles\n       bool   shot =n [y/n]     if shot gathers instead of midpoint gathers\n       float  xi =1      continuation paremeter\nSOURCE\n       system/seismic/Mfkgdmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffkgdmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffkoclet-Tuple{}","page":"Home","title":"Madagascar.sffkoclet","text":"sffkoclet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffkoclet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffkoclet. See ?m8r for examples.\n\nRSF Documentation\n\nsffkoclet(1)                  Madagascar Manuals                  sffkoclet(1)\n\nNAME\n       sffkoclet - 1-D seislet transform using omega-wavenumber offset contin‐\n       uation\n\nSYNOPSIS\n       sffkoclet < in.rsf > out.rsf inv=n adj=n dwt=n verb=y eps=0.01 type=\n\nCOMMENTS\n       Forward transform  (adj=n  inv=y/n)  m=T[d]  Inverse  transform  (adj=y\n       inv=y)   d=T^(-1)[d] Adjoint transform (adj=y inv=n)   d=T'[d]\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   dwt =n [y/n]     if y, do wavelet transform\n       float  eps =0.01      regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mfkoclet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffkoclet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffkoclet3-Tuple{}","page":"Home","title":"Madagascar.sffkoclet3","text":"sffkoclet3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffkoclet3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffkoclet3. See ?m8r for examples.\n\nRSF Documentation\n\nsffkoclet3(1)                 Madagascar Manuals                 sffkoclet3(1)\n\nNAME\n       sffkoclet3  -  2-D seislet transform using frequency-wavenumber offset-\n       azimuth continuation\n\nSYNOPSIS\n       sffkoclet3 < in.rsf > out.rsf inv=n adj=n dwt=n amp=n  verb=y  eps=0.01\n       maxe=10. dir= type=\n\nCOMMENTS\n       Forward  transform  (adj=n  inv=y/n)  m=T[d]  Inverse  transform (adj=y\n       inv=y)   d=T^(-1)[d] Adjoint transform (adj=y inv=n)   d=T'[d]\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       bool   amp =n [y/n]     if y, true amplitudes continuation\n       string dir =      [azimuth,offset,both] direction, the default is  both\n              directions\n       bool   dwt =n [y/n]     if y, do wavelet transform\n       float  eps =0.01      regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       float  maxe =10.       stability constraint\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mfkoclet3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffkoclet3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfflatlinpiwrapper-Tuple{}","page":"Home","title":"Madagascar.sfflatlinpiwrapper","text":"sfflatlinpiwrapper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfflatlinpiwrapper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfflatlinpiwrapper. See ?m8r for examples.\n\nRSF Documentation\n\nsfflatlinpiwrapper(1)         Madagascar Manuals         sfflatlinpiwrapper(1)\n\nNAME\n       sfflatlinpiwrapper  -  pi operator building wrapping test function flat\n       gaussian weighting smoothing after pi\n\nSYNOPSIS\n       sfflatlinpiwrapper < inp.rsf > out.rsf  velocity=vel.rsf  hd=y  domod=y\n       sw=0 adj=n sm=y v_1= v_2= v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001\n       pad=nt repeat=1 v0= rect#=(1,1,...) diff#=(n,n,...)\n\nPARAMETERS\n       bool   adj =n [y/n]     if perform derivative filtering\n       bool   diff# =(n,n,...)  [y/n]     differentiation on #-th axis\n       bool   domod =y [y/n]     if y, apply half-derivative filter\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       bool   hd =y [y/n]\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\n       bool   sm =y [y/n]     if y, do adjoint integration\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       float  v0 =      constant velocity (if no velocity=)\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       string velocity =      velocity file (auxiliary input file name)\nSOURCE\n       user/dmerzlikin/Mflatlinpiwrapper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sfflatlinpiwrapper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfflatlinpiwrapper2d-Tuple{}","page":"Home","title":"Madagascar.sfflatlinpiwrapper2d","text":"sfflatlinpiwrapper2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfflatlinpiwrapper2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfflatlinpiwrapper2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfflatlinpiwrapper2d(1)       Madagascar Manuals       sfflatlinpiwrapper2d(1)\n\nNAME\n       sfflatlinpiwrapper2d - pi operator building wrapping test function flat\n       gaussian weighting smoothing after pi\n\nSYNOPSIS\n       sfflatlinpiwrapper2d < inp.rsf > out.rsf vel=vel.rsf  offset=offset.rsf\n       adj=n  normalize=y  nh=  antialias=1.0  apt=nx angle=90.0 half=y verb=y\n       rho=1.-1./nt dh= h0= sm=y v_1= v_2= v_3= v_4=  passthr=0.001  eps=0.001\n       epst2=0.001 pad=nt repeat=1 domod=y rect#=(1,1,...) diff#=(n,n,...)\n\nPARAMETERS\n       bool   adj =n [y/n]     kirchhoff parameters\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       float  dh =      offset sampling (for modeling)\n       bool   diff# =(n,n,...)  [y/n]     differentiation on #-th axis\n       bool   domod =y [y/n]\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if y, do adjoint integration\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mflatlinpiwrapper2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024           sfflatlinpiwrapper2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffocus-Tuple{}","page":"Home","title":"Madagascar.sffocus","text":"sffocus(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffocus on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffocus. See ?m8r for examples.\n\nRSF Documentation\n\nsffocus(1)                    Madagascar Manuals                    sffocus(1)\n\nNAME\n       sffocus - Focusing indicator.\n\nSYNOPSIS\n       sffocus < in.rsf > out.rsf dim= niter=100 verb=y rect#=(1,1,...)\n\nPARAMETERS\n       int    dim =      dimensionality\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]\nSOURCE\n       user/fomels/Mfocus.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffocus(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffold-Tuple{}","page":"Home","title":"Madagascar.sffold","text":"sffold(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffold on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffold. See ?m8r for examples.\n\nRSF Documentation\n\nsffold(1)                     Madagascar Manuals                     sffold(1)\n\nNAME\n       sffold - Make a seismic foldplot/stacking chart.\n\nSYNOPSIS\n       sffold < in.rsf > out.rsf verbose=1 o1= o2= o3= n1= n2= n3= d1= d2= d3=\n       label1= label2= label3=\n\nCOMMENTS\n       This is a general 3D histogram program implemented to  create  foldplot\n       or  stacking charts on a 3d project from trace headers.  Axis1, 2 and 3\n       define the bins for the output  fold  map.   These  are  usually  (off‐\n       set,xline,iline),  but  you might want to compute some other histogram.\n       This can be done by selecting other segy headers using label1, 2 and 3.\n\n       See also fold= option in sfbin for creating 2D histograms.\n\n       EXAMPLES:\n\n       To make a stacking chart  movie  showing  fold(xline,offset)  for  each\n       iline from a 3D segyfile:\n\n       sfsegyread    tfile=tteapot.rsf    hfile=teapot.asc    bfile=teapot.bin\n       tape=npr3_field.sgy > teapot.rsf\n\n       #  read  the  tfile,  which  contains  the   segy   trace   headers   <\n       teapot_hdr.rsf sffold verbose=1        o1=0 n1=96  d1=200 label1=offset\n       o2=1  n2=188  d2=1    label2=xline   o3=1  n3=345  d3=1    label3=iline\n       >foldplot.rsf <foldplot.rsf sfgrey title=foldplot pclip=100 | sfpen\n\n       # transpose this data to plot foldmaps for each offset window:\n\n       <   foldplot.rsf   sftransp   plane=13            |  sftransp  plane=12\n       | sfgrey title=foldplot_off gainpanel=all | sfpen\n\nPARAMETERS\n       float  d1 =      Delta label1 - usually delta offset\n       float  d2 =      Delta label2 - usually delta xline\n       float  d3 =      Delta label3 - usually delta iline\n       string label1 =      header for axis1 - usually offset\n       string label2 =      header for axis2 - usually xline or cdp\n       string label3 =      header for axis3 - usually iline\n       int    n1 =      Number label1 - usually number offset\n       int    n2 =      Number label2 - usually number xline\n       int    n3 =      Number label3 - usually number iline\n       float  o1 =      Minimum label1 - usually min offset\n       float  o2 =      Minimum label2 - usually min xline\n       float  o3 =      Minimum label3 - usually min iline\n       int    verbose =1      0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/alaska/foldplot\n       data/bpstatics94/firstlook\nSOURCE\n       system/seismic/Mfold.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffold(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffoldmap3D-Tuple{}","page":"Home","title":"Madagascar.sffoldmap3D","text":"sffoldmap3D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffoldmap3D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffoldmap3D. See ?m8r for examples.\n\nRSF Documentation\n\nsffoldmap3D(1)                Madagascar Manuals                sffoldmap3D(1)\n\nNAME\n       sffoldmap3D -\n\nSYNOPSIS\n       sffoldmap3D < fIn.rsf > Fou.rsf verb=n topo= topoWl=\n\nCOMMENTS\n       Create  a foldmap from multiple orbit swaths Created by: Dylan Hickson,\n       Colorado School of Mines Created on: Mar 9, 2022\n\nPARAMETERS\n       string topo = ®\n       string topoWl = ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mfoldmap3D.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffoldmap3D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffourbreg2-Tuple{}","page":"Home","title":"Madagascar.sffourbreg2","text":"sffourbreg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffourbreg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffourbreg2. See ?m8r for examples.\n\nRSF Documentation\n\nsffourbreg2(1)                Madagascar Manuals                sffourbreg2(1)\n\nNAME\n       sffourbreg2  -  Missing data interpolation in 2-D using Fourier Bregman\n       shaping iteration.\n\nSYNOPSIS\n       sffourbreg2 < in.rsf > out.rsf  mask=mask.rsf  res=res.rsf  ref=ref.rsf\n       niter=20 verb=n error=n perc=99. fact=0.5\n\nPARAMETERS\n       bool   error =n [y/n]     error verbosity flag\n       float  fact =0.5      factor for soft-thresholding\n       string mask =      auxiliary input file name\n       int    niter =20      number of iterations\n       float  perc =99.       percentage for soft-thresholding\n       file   ref =      auxiliary input file name\n       string res =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mfourbreg2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffourbreg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffourmis2-Tuple{}","page":"Home","title":"Madagascar.sffourmis2","text":"sffourmis2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffourmis2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffourmis2. See ?m8r for examples.\n\nRSF Documentation\n\nsffourmis2(1)                 Madagascar Manuals                 sffourmis2(1)\n\nNAME\n       sffourmis2  - Missing data interpolation in 2-D using Fourier transform\n       and compressive sensing.\n\nSYNOPSIS\n       sffourmis2 < in.rsf >  out.rsf  mask=mask.rsf  res=res.rsf  ref=ref.rsf\n       niter=20 verb=n error=n cut=n f0=0. k0=0. parf=0. parw=0. orderf=1. or‐\n       derw=1. perc=99. ordert=1. ordert=1. oper=\n\nPARAMETERS\n       bool   cut =n [y/n]     cutting verbosity flag, the  default  is  soft-\n              thresholding\n       bool   error =n [y/n]     error verbosity flag\n       float  f0 =0.       initial cutting frequency\n       float  k0 =0.       initial cutting wavenumber\n       string mask =      auxiliary input file name\n       int    niter =20      number of iterations\n       string oper  =      [shaping,pocs,bregman] method, the default is shap‐\n              ing\n       float  orderf =1.       Curve order for frequency  window,  default  is\n              linear\n       float  ordert =1.       Curve order for thresholding parameter, default\n              is linear\n       float  orderw =1.       Curve order for frequency  window,  default  is\n              linear\n       float  parf =0.       Ajustable parameter for frequency window, default\n              is fixed window\n       float  parw =0.       Ajustable parameter for  wavenumber  window,  de‐\n              fault is fixed window\n       float  perc =99.       percentage for soft-thresholding\n       file   ref =      auxiliary input file name\n       string res =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mfourmis2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffourmis2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffourvc-Tuple{}","page":"Home","title":"Madagascar.sffourvc","text":"sffourvc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffourvc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffourvc. See ?m8r for examples.\n\nRSF Documentation\n\nsffourvc(1)                   Madagascar Manuals                   sffourvc(1)\n\nNAME\n       sffourvc - Prestack velocity continuation.\n\nSYNOPSIS\n       sffourvc      <      in.rsf      >      out.rsf     eps=0.01     pad=n1\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) verb=n nv= dv= extend=4 v0=\n\nPARAMETERS\n       float  dv =      velocity step size\n       float  eps =0.01      regularization\n       int    extend =4      trace extension\n       int    nv =      velocity steps\n       int    pad =n1      padding for stretch\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2)      padding for FFT\n       float  v0 =      starting velocity\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mfourvc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffourvc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffourvc0-Tuple{}","page":"Home","title":"Madagascar.sffourvc0","text":"sffourvc0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffourvc0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffourvc0. See ?m8r for examples.\n\nRSF Documentation\n\nsffourvc0(1)                  Madagascar Manuals                  sffourvc0(1)\n\nNAME\n       sffourvc0 - Velocity continuation after NMO.\n\nSYNOPSIS\n       sffourvc0      <      in.rsf      >     out.rsf     eps=0.01     pad=n1\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) verb=n nv= dv= extend=4\n\nPARAMETERS\n       float  dv = ®\n       float  eps =0.01 ®\n       int    extend =4      trace extension\n       int    nv = ®\n       int    pad =n1 ®\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2) ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mfourvc0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffourvc0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffourvc2-Tuple{}","page":"Home","title":"Madagascar.sffourvc2","text":"sffourvc2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffourvc2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffourvc2. See ?m8r for examples.\n\nRSF Documentation\n\nsffourvc2(1)                  Madagascar Manuals                  sffourvc2(1)\n\nNAME\n       sffourvc2 - Velocity continuation with semblance computation.\n\nSYNOPSIS\n       sffourvc2     <    in.rsf    >    out.rsf    nb=2    eps=0.01    pad=n1\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) nv= dv= semblance=y extend=4\n\nPARAMETERS\n       float  dv = ®\n       float  eps =0.01 ®\n       int    extend =4      trace extension\n       int    nb =2 ®\n       int    nv = ®\n       int    pad =n1 ®\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2) ®\n       bool   semblance =y [y/n]     if y, compute semblance; if n, stack\nSOURCE\n       system/seismic/Mfourvc2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffourvc2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffowler-Tuple{}","page":"Home","title":"Madagascar.sffowler","text":"sffowler(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffowler on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffowler. See ?m8r for examples.\n\nRSF Documentation\n\nsffowler(1)                   Madagascar Manuals                   sffowler(1)\n\nNAME\n       sffowler - 2-D velocity-domain imaging (Fowler DMO + Stolt migration).\n\nSYNOPSIS\n       sffowler < inp.rsf > out.rsf eps=0.01\n\nCOMMENTS\n       Input: 2-D cosft of constant-velocity stacks (v,w,k).\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\nSOURCE\n       system/seismic/Mfowler.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffowler(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffowler1-Tuple{}","page":"Home","title":"Madagascar.sffowler1","text":"sffowler1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffowler1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffowler1. See ?m8r for examples.\n\nRSF Documentation\n\nsffowler1(1)                  Madagascar Manuals                  sffowler1(1)\n\nNAME\n       sffowler1 - 2-D velocity-domain DMO (Fowler DMO).\n\nSYNOPSIS\n       sffowler1 < inp.rsf > out.rsf eps=0.01\n\nCOMMENTS\n       Input: 2-D cosft of constant-velocity stacks (v,w,k).\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\nSOURCE\n       system/seismic/Mfowler1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffowler1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffowler2-Tuple{}","page":"Home","title":"Madagascar.sffowler2","text":"sffowler2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffowler2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffowler2. See ?m8r for examples.\n\nRSF Documentation\n\nsffowler2(1)                  Madagascar Manuals                  sffowler2(1)\n\nNAME\n       sffowler2 - 2-D ensemble of Stolt migrations.\n\nSYNOPSIS\n       sffowler2 < inp.rsf > out.rsf eps=0.01\n\nCOMMENTS\n       Input: 2-D cosft of constant-velocity stacks (w,v,k).\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\nSOURCE\n       system/seismic/Mfowler2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffowler2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffpca-Tuple{}","page":"Home","title":"Madagascar.sffpca","text":"sffpca(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffpca on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffpca. See ?m8r for examples.\n\nRSF Documentation\n\nsffpca(1)                     Madagascar Manuals                     sffpca(1)\n\nNAME\n       sffpca - Fast PCA by iterative algorithm\n\nSYNOPSIS\n       sffpca < pin.rsf > pout.rsf nc=1 niter=1 seed=2012\n\nPARAMETERS\n       int    nc =1      component number\n       int    niter =1      iterations for each component\n       int    seed =2012      seed for random number\nSOURCE\n       user/chen/Mfpca.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffpca(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffpocs2d-Tuple{}","page":"Home","title":"Madagascar.sffpocs2d","text":"sffpocs2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffpocs2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffpocs2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffpocs2d(1)                  Madagascar Manuals                  sffpocs2d(1)\n\nNAME\n       sffpocs2d - 2-D Two-step POCS interpolation using a general Lp-norm op‐\n       timization\n\nSYNOPSIS\n       sffpocs2d  <  Fin.rsf  mask=Fmask.rsf  >  Fout.rsf   verb=n   niter=100\n       tol=1.0e-6 pclip=99. p=0.35 mode=\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       int    niter =100      total number iterations\n       float  p =0.35      norm=p, where 0<p<=1\n       float  pclip =99.       starting data clip percentile (default is 99)\n       float  tol =1.0e-6      iteration tolerance\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mfpocs2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffpocs2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffpocs3d-Tuple{}","page":"Home","title":"Madagascar.sffpocs3d","text":"sffpocs3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffpocs3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffpocs3d. See ?m8r for examples.\n\nRSF Documentation\n\nsffpocs3d(1)                  Madagascar Manuals                  sffpocs3d(1)\n\nNAME\n       sffpocs3d - 3-D Two-step POCS interpolation using a general Lp-norm op‐\n       timization\n\nSYNOPSIS\n       sffpocs3d  <  Fin.rsf  mask=Fmask.rsf  >  Fout.rsf   verb=n   niter=100\n       tol=1.0e-6 pclip=99. p=0.35 mode=\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       int    niter =100      total number iterations\n       float  p =0.35      norm=p, where 0<p<=1\n       float  pclip =99.       starting data clip percentile (default is 99)\n       float  tol =1.0e-6      iteration tolerance\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mfpocs3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffpocs3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffpow-Tuple{}","page":"Home","title":"Madagascar.sffpow","text":"sffpow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffpow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffpow. See ?m8r for examples.\n\nRSF Documentation\n\nsffpow(1)                     Madagascar Manuals                     sffpow(1)\n\nNAME\n       sffpow - Time/frequency power estimation\n\nSYNOPSIS\n       sffpow   <   inp.rsf   >   out.rsf   beta=beta.rsf   niter=10   fmin=o1\n       fmax=o1+(n1-1)*d1 bmin=-1.0 bmax=1.0 nb=10 tol=SF_EPS verb=y time=n\n\nPARAMETERS\n       file   beta =      auxiliary output file name\n       float  bmax =1.0      maximum value of beta\n       float  bmin =-1.0      minimum value of beta\n       float  fmax =o1+(n1-1)*d1      maximum frequency\n       float  fmin =o1      minimum frequency\n       int    nb =10 ®\n       int    niter =10      number of Newton iterations\n       bool   time =n [y/n]     time axis\n       float  tol =SF_EPS      accuracy tolerance for beta\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mfpow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffpow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffraclr2-Tuple{}","page":"Home","title":"Madagascar.sffraclr2","text":"sffraclr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffraclr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffraclr2. See ?m8r for examples.\n\nRSF Documentation\n\nsffraclr2(1)                  Madagascar Manuals                  sffraclr2(1)\n\nNAME\n       sffraclr2  -  Complex  lowrank decomposition for 2-D viscoacoustic iso‐\n       tropic wave propagation.\n\nSYNOPSIS\n       sffraclr2   <   vel.rsf   fft=fft.rsf   left=left.rsf    >    right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20 dt= w0= rev=false mode=0 compen=false\n       taper=0.2 cutoff=250. vmax=6000. sign=0 avg=false  gamma=  abc=0  nbt=0\n       nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0\n\nPARAMETERS\n       abc    =0 ®\n       avg    =false      whether use average value of gamma\n       cb     =0.0 ®\n       cl     =0.0 ®\n       compen =false      compensate attenuation, only works if mode=0,1 (vis‐\n              coacoustic)\n       cr     =0.0 ®\n       ct     =0.0 ®\n       cutoff =250.       cutoff frequency\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       gamma  = ®\n       file   left =      auxiliary output file name\n       mode   =0      mode of propagation: 0 is viscoacoustic (default); 1  is\n              loss-dominated; 2 is dispersion dominated; 3 is acoustic\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       rev    =false      reverse propagation\n       seed   =time(NULL ®\n       sign   =0      sign of solution: 0 is positive, 1 is negative\n       taper  =0.2      taper ratio for tukey window\n       vmax   =6000.       maximum velocity\n       w0     =      reference frequency\nSOURCE\n       user/jsun/Mfraclr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffraclr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffraclr2test-Tuple{}","page":"Home","title":"Madagascar.sffraclr2test","text":"sffraclr2test(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffraclr2test on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffraclr2test. See ?m8r for examples.\n\nRSF Documentation\n\nsffraclr2test(1)              Madagascar Manuals              sffraclr2test(1)\n\nNAME\n       sffraclr2test - Complex lowrank decomposition for 2-D constant-Q visco-\n       acoustic wave equation. (Testing for exact disperison relation)\n\nSYNOPSIS\n       sffraclr2test  <  vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt= c0= w0= rev=false mode=0 sign=0 ap‐\n       prox=true\n\nPARAMETERS\n       approx =true      use Tieyuan's approximation\n       c0     =      reference velocity\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      mode of propagation: 0 is viscoacoustic (default); 1  is\n              loss-dominated; 2 is dispersion dominated; 3 is acoustic\n       npk    =20      maximum rank\n       rev    =false      reverse propagation\n       seed   =time(NULL ®\n       sign   =0      sign of solution: 0 is positive, 1 is negative\n       w0     =      reference frequency\nSOURCE\n       user/jsun/Mfraclr2test.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sffraclr2test(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfframe-Tuple{}","page":"Home","title":"Madagascar.sfframe","text":"sfframe(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfframe on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfframe. See ?m8r for examples.\n\nRSF Documentation\n\nsfframe(1)                    Madagascar Manuals                    sfframe(1)\n\nNAME\n       sfframe - Create a frame for binning.\n\nSYNOPSIS\n       sfframe < in.rsf > out.rsf xyz=xyzs.rsf base=0.\n\nPARAMETERS\n       float  base =0.       base to be subtracted from z\n       file   xyz =      auxiliary input file name\nSOURCE\n       user/gee/Mframe.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfframe(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffreqest-Tuple{}","page":"Home","title":"Madagascar.sffreqest","text":"sffreqest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffreqest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffreqest. See ?m8r for examples.\n\nRSF Documentation\n\nsffreqest(1)                  Madagascar Manuals                  sffreqest(1)\n\nNAME\n       sffreqest - Local frequency estimation\n\nSYNOPSIS\n       sffreqest < in.rsf > out.rsf niter=100 hertz=n rect1=1 rect2=1 ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       bool   hertz =n [y/n]     if y, convert output to Hertz\n       int    niter =100      number of iterations\nSOURCE\n       user/fomels/Mfreqest.c\nVERSION\n       4.2-git Menvelope.c 696 2004-07-06 23:17:31Z fomels\n\nMadagascar                         JULY 2024                      sffreqest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffreqint-Tuple{}","page":"Home","title":"Madagascar.sffreqint","text":"sffreqint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffreqint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffreqint. See ?m8r for examples.\n\nRSF Documentation\n\nsffreqint(1)                  Madagascar Manuals                  sffreqint(1)\n\nNAME\n       sffreqint - 1-D data regularization using freqlet transform\n\nSYNOPSIS\n       sffreqint  <  in.rsf  >  out.rsf freq=w.rsf coord=coord.rsf n1= d1= o1=\n       niter=10 ncycle=1 eps=1.0 inv=n perc=50.0 fact=0.5 type=\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       float  d1 =      output sampling\n       float  eps =1.0      regularization parameter\n       float  fact =0.5      factor for sharpening\n       file   freq =      auxiliary input file name\n       bool   inv =n [y/n]     inversion flag\n       int    n1 =      output samples\n       int    ncycle =1      number of IRLS iterations\n       int    niter =10      number of iterations for inversion\n       float  o1 =      output origin\n       float  perc =50.0      percentage for sharpening\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\nSOURCE\n       system/seismic/Mfreqint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffreqint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffreqlet-Tuple{}","page":"Home","title":"Madagascar.sffreqlet","text":"sffreqlet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffreqlet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffreqlet. See ?m8r for examples.\n\nRSF Documentation\n\nsffreqlet(1)                  Madagascar Manuals                  sffreqlet(1)\n\nNAME\n       sffreqlet - 1-D seislet frame\n\nSYNOPSIS\n       sffreqlet  < in.rsf > out.rsf freq=w.rsf inv=n verb=y decomp=n ncycle=0\n       niter=1 perc=50.0 type=\n\nPARAMETERS\n       bool   decomp =n [y/n]     do decomposition\n       file   freq =      auxiliary input file name\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    ncycle =0      number of iterations\n       int    niter =1      number of Bregman iterations\n       float  perc =50.0      percentage for sharpening\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mfreqlet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffreqlet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffreqreg-Tuple{}","page":"Home","title":"Madagascar.sffreqreg","text":"sffreqreg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffreqreg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffreqreg. See ?m8r for examples.\n\nRSF Documentation\n\nsffreqreg(1)                  Madagascar Manuals                  sffreqreg(1)\n\nNAME\n       sffreqreg - Local frequency interpolation.\n\nSYNOPSIS\n       sffreqreg  <  in.rsf  >  out.rsf  mask=mask.rsf  nw=  dw= w0=0. rect=10\n       niter=100 verb=n\n\nPARAMETERS\n       float  dw =      frequency step\n       string mask =      auxiliary input file name\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       int    rect =10      smoothing radius\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\nSOURCE\n       user/yliu/Mfreqreg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffreqreg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffreshape-Tuple{}","page":"Home","title":"Madagascar.sffreshape","text":"sffreshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffreshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffreshape. See ?m8r for examples.\n\nRSF Documentation\n\nsffreshape(1)                 Madagascar Manuals                 sffreshape(1)\n\nNAME\n       sffreshape - Nonstationary spectral balancing in frequency domain.\n\nSYNOPSIS\n       sffreshape   <  in.rsf  in2=in2.rsf  ma=ma.rsf  ma2=ma2.rsf  >  out.rsf\n       out2=out2.rsf dim=1\n\nPARAMETERS\n       int    dim =1      data dimensionality\n       string in2 =      optional second  input  file  (auxiliary  input  file\n              name)\n       file   ma =      auxiliary input file name\n       file   ma2 =      auxiliary input file name\n       file   out2 =      auxiliary output file name\nSOURCE\n       user/yliu/Mfreshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffreshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffrog-Tuple{}","page":"Home","title":"Madagascar.sffrog","text":"sffrog(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffrog on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffrog. See ?m8r for examples.\n\nRSF Documentation\n\nsffrog(1)                     Madagascar Manuals                     sffrog(1)\n\nNAME\n       sffrog - Simple 2-D wave propagation\n\nSYNOPSIS\n       sffrog < Fw.rsf > Fo.rsf vel=Fv.rsf ref=Fr.rsf verb=n type=0\n\nPARAMETERS\n       file   ref =      auxiliary input file name\n       int    type =0      Laplacian type\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/gee/Mfrog.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sffrog(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffrt-Tuple{}","page":"Home","title":"Madagascar.sffrt","text":"sffrt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffrt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffrt. See ?m8r for examples.\n\nRSF Documentation\n\nsffrt(1)                      Madagascar Manuals                      sffrt(1)\n\nNAME\n       sffrt - Frequency domain Radon transform.\n\nSYNOPSIS\n       sffrt  <  in.rsf  >  out.rsf  ref=ref.rsf  curv=0  inv=n  mtd=0 mu=0.05\n       eta=0.05 niter=5 np=0 op=0 dp=0 x0=maxoff\n\nPARAMETERS\n       int    curv =0      0: linear; 1:parabolic\n       float  dp =0      stepout interval\n       float  eta =0.05      eta: for fhrt, fcrt\n       bool   inv =n [y/n]     if y, perform inverse operation\n       int    mtd =0      0: fart; 1:firt; 2:fhrt; 3:fcrt\n       float  mu =0.05      mu: for firt, fhrt, fcrt\n       int    niter =5      sparse iterations: for fhrt, fcrt\n       int    np =0      stepout number\n       float  op =0      first stepout (moveout at ref )\n       file   ref =      auxiliary input file name\n       float  x0 =maxoff      reference offset\nSOURCE\n       user/chen/Mfrt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sffrt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffshift-Tuple{}","page":"Home","title":"Madagascar.sffshift","text":"sffshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffshift. See ?m8r for examples.\n\nRSF Documentation\n\nsffshift(1)                   Madagascar Manuals                   sffshift(1)\n\nNAME\n       sffshift -\n\nSYNOPSIS\n       sffshift < Fin.rsf > Fou.rsf tt=Ftt.rsf verb=n\n\nCOMMENTS\n       time shift in the frequency domain\n\nPARAMETERS\n       file   tt =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mfshift.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfftoper-Tuple{}","page":"Home","title":"Madagascar.sfftoper","text":"sfftoper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfftoper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfftoper. See ?m8r for examples.\n\nRSF Documentation\n\nsfftoper(1)                   Madagascar Manuals                   sfftoper(1)\n\nNAME\n       sfftoper - First-arrival Traveltime Tomography (linear operator)\n\nSYNOPSIS\n       sfftoper < in.rsf > out.rsf time=time.rsf mask=mask.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       string mask =      auxiliary input file name\n       string time =      auxiliary input file name\nSOURCE\n       user/llisiw/Mftoper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfftoper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwi2d-Tuple{}","page":"Home","title":"Madagascar.sffwi2d","text":"sffwi2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwi2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwi2d. See ?m8r for examples.\n\nRSF Documentation\n\nsffwi2d(1)                    Madagascar Manuals                    sffwi2d(1)\n\nNAME\n       sffwi2d - Time domain full waveform inversion\n\nSYNOPSIS\n       sffwi2d  < vinit.rsf shots=shots.rsf > vupdates.rsf grads=grads.rsf il‐\n       lums=illums.rsf objs=objs.rsf verb=y precon=n niter=100 rbell=2\n\nCOMMENTS\n       Note: This serial FWI is merely designed to help the  understanding  of\n       beginners. Enquist absorbing boundary condition (A2) is applied!\n\nPARAMETERS\n       file   grads =      auxiliary output file name\n       file   illums =      auxiliary output file name\n       int    niter =100      number of iterations\n       file   objs =      auxiliary output file name\n       bool   precon =n [y/n]     precondition or not\n       int    rbell =2      radius of bell smooth\n       file   shots =      auxiliary input file name\n       bool   verb =y [y/n]     vebosity\nSOURCE\n       user/pyang/Mfwi2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffwi2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwidir-Tuple{}","page":"Home","title":"Madagascar.sffwidir","text":"sffwidir(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwidir on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwidir. See ?m8r for examples.\n\nRSF Documentation\n\nsffwidir(1)                   Madagascar Manuals                   sffwidir(1)\n\nNAME\n       sffwidir - Update the conjugate direction in full waveform inversion\n\nSYNOPSIS\n       sffwidir   <   in.rsf   >   out.rsf   grad0=grad0.rsf   grad1=grad1.rsf\n       beta=beta.rsf option=\n\nPARAMETERS\n       string beta =      auxiliary output file name\n       file   grad0 =      auxiliary input file name\n       file   grad1 =      auxiliary input file name\n       string option  =       CG  update  parameter  (Polak,  Fletcher-Reeves,\n              Fletcher, Dai-Yuan)\nSOURCE\n       user/zhiguang/Mfwidir.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffwidir(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwigrad-Tuple{}","page":"Home","title":"Madagascar.sffwigrad","text":"sffwigrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwigrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwigrad. See ?m8r for examples.\n\nRSF Documentation\n\nsffwigrad(1)                  Madagascar Manuals                  sffwigrad(1)\n\nNAME\n       sffwigrad - 2D Gradient Calculation in Full Waveform Inversion\n\nSYNOPSIS\n       sffwigrad  <  in.rsf  > out.rsf misfit=misfit.rsf source=source.rsf re‐\n       ceiver=receiver.rsf record=record.rsf npml=20 omega= order=\n\nPARAMETERS\n       file   misfit =      auxiliary output file name\n       int    npml =20 ®\n       float  omega = ®\n       string order =      discretization scheme (default optimal 9-point)\n       file   receiver =      auxiliary input file name\n       file   record =      auxiliary input file name\n       file   source =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mfwigrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffwigrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwiobj-Tuple{}","page":"Home","title":"Madagascar.sffwiobj","text":"sffwiobj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwiobj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwiobj. See ?m8r for examples.\n\nRSF Documentation\n\nsffwiobj(1)                   Madagascar Manuals                   sffwiobj(1)\n\nNAME\n       sffwiobj - Calculate the misfit fuction  in Full Waveform Inversion\n\nSYNOPSIS\n       sffwiobj  <  in.rsf  >  out.rsf source=source.rsf receiver=receiver.rsf\n       record=record.rsf npml=20 omega= order=\n\nPARAMETERS\n       int    npml =20 ®\n       float  omega = ®\n       string order =      discretization scheme (default optimal 9-point)\n       file   receiver =      auxiliary input file name\n       file   record =      auxiliary input file name\n       file   source =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mfwiobj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffwiobj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwipe-Tuple{}","page":"Home","title":"Madagascar.sffwipe","text":"sffwipe(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwipe on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwipe. See ?m8r for examples.\n\nRSF Documentation\n\nsffwipe(1)                    Madagascar Manuals                    sffwipe(1)\n\nNAME\n       sffwipe - Phase encoding\n\nSYNOPSIS\n       sffwipe  <  in.rsf > out.rsf oldrec=oldrec.rsf newrec=newrec.rsf encod‐\n       ing=y nsim=ns nsource=1 seed=time(NULL)\n\nPARAMETERS\n       bool   encoding =y [y/n]\n       file   newrec =      auxiliary output file name\n       int    nsim =ns ®\n       int    nsource =1      check\n       file   oldrec =      auxiliary input file name\n       int    seed =time(NULL) ®\nSOURCE\n       user/zhiguang/Mfwipe.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffwipe(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffwiupdate-Tuple{}","page":"Home","title":"Madagascar.sffwiupdate","text":"sffwiupdate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffwiupdate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffwiupdate. See ?m8r for examples.\n\nRSF Documentation\n\nsffwiupdate(1)                Madagascar Manuals                sffwiupdate(1)\n\nNAME\n       sffwiupdate - Update model with search direction and step length in FWI\n\nSYNOPSIS\n       sffwiupdate  <  in.rsf  > out.rsf direction=dir.rsf alpha=alpha.rsf al‐\n       pha0= max=0.\n\nPARAMETERS\n       string alpha =      auxiliary input file name\n       float  alpha0 = ®\n       file   direction =      auxiliary input file name\n       float  max =0.       if max=0, no normalization; if max!=0,  normaliza‐\n              tion by alpha*max/dmax\nSOURCE\n       user/zhiguang/Mfwiupdate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffwiupdate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxdecon-Tuple{}","page":"Home","title":"Madagascar.sffxdecon","text":"sffxdecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxdecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxdecon. See ?m8r for examples.\n\nRSF Documentation\n\nsffxdecon(1)                  Madagascar Manuals                  sffxdecon(1)\n\nNAME\n       sffxdecon - Random noise attenuation using f-x deconvolution\n\nSYNOPSIS\n       sffxdecon  <  in.rsf  >  out.rsf verb=n taper=.1 fmin=1. fmax=1./(2*dt)\n       twlen=(float)(n1-1)*dt n2w=10 lenf=4\n\nPARAMETERS\n       float  fmax =1./(2*dt)      maximum frequency to process in Hz\n       float  fmin =1.       minimum frequency to process in Hz\n       int    lenf =4      number of traces for filter\n       int    n2w =10      number of traces in window\n       float  taper =.1      length of taper\n       float  twlen =(float)(n1-1)*dt      time window length\n       bool   verb =n [y/n]     flag to get advisory messages\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\nSOURCE\n       user/chenyk/Mfxdecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffxdecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxrna-Tuple{}","page":"Home","title":"Madagascar.sffxrna","text":"sffxrna(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxrna on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxrna. See ?m8r for examples.\n\nRSF Documentation\n\nsffxrna(1)                    Madagascar Manuals                    sffxrna(1)\n\nNAME\n       sffxrna - Local prediction filter for complex numbers (n-dimensional).\n\nSYNOPSIS\n       sffxrna    <    dat.rsf    >    flt.rsf    mask=mask.rsf   pred=pre.rsf\n       zshift=zshift.rsf zdata=zdata.rsf ns=1 niter=100 verb=y ty=\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns =1      shifts of both sides npef=2*ns+1\n       string pred =      auxiliary output file name\n       string ty =      Prediction type: all=backward+forward\n       bool   verb =y [y/n]     verbosity flag\n       string zdata =      auxiliary output file name\n       string zshift =      auxiliary output file name\nSOURCE\n       user/gchliu/Mfxrna.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sffxrna(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxspfdenoise2-Tuple{}","page":"Home","title":"Madagascar.sffxspfdenoise2","text":"sffxspfdenoise2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxspfdenoise2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxspfdenoise2. See ?m8r for examples.\n\nRSF Documentation\n\nsffxspfdenoise2(1)            Madagascar Manuals            sffxspfdenoise2(1)\n\nNAME\n       sffxspfdenoise2  - Random noise attenuation using 2D f-x streaming pre‐\n       diction filter.\n\nSYNOPSIS\n       sffxspfdenoise2 < inp.rsf > out.rsf verb=n lambda1= lambda3= na1=\n\nPARAMETERS\n       float  lambda1 =      Regularization in x direction\n       float  lambda3 =      Regularization in f direction\n       int    na1 =      filter size in x direction\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mfxspfdenoise2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sffxspfdenoise2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxspfint2-Tuple{}","page":"Home","title":"Madagascar.sffxspfint2","text":"sffxspfint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxspfint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxspfint2. See ?m8r for examples.\n\nRSF Documentation\n\nsffxspfint2(1)                Madagascar Manuals                sffxspfint2(1)\n\nNAME\n       sffxspfint2 - 2D missing data interpolation using f-x streaming predic‐\n       tion filter.\n\nSYNOPSIS\n       sffxspfint2 < inp.rsf > out.rsf mask=msk.rsf  verb=n  ftype=1  lambda1=\n       na=\n\nPARAMETERS\n       int    ftype =1      default = 1,\n                     1 : causal filter design\n                     2 : noncausal filter design\n       float  lambda1 =      lambda1.r\n       file   mask =      auxiliary input file name\n       int    na = ®\n       bool   verb =n [y/n]     default=false, verbosity flag\nSOURCE\n       user/yliu/Mfxspfint2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sffxspfint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxynpre-Tuple{}","page":"Home","title":"Madagascar.sffxynpre","text":"sffxynpre(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxynpre on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxynpre. See ?m8r for examples.\n\nRSF Documentation\n\nsffxynpre(1)                  Madagascar Manuals                  sffxynpre(1)\n\nNAME\n       sffxynpre - FXY non-stationary predictive filtering (with the option of\n       local processing windows).\n\nSYNOPSIS\n       sffxynpre <  Fin.rsf  >  Fou.rsf  verb=n  sym=n  opt=y  fs=n  Nfrac=6.0\n       Ntimes=5.0  pow=0.5  niter=100 n1win=n1 n2win=nx n3win=ny r1=0.5 r2=0.5\n       r3=0.5 mode=0 nsx=2 nsy=2 rect#=(1,1,...)\n\nCOMMENTS\n       with  frequency-axis  smoothness  constraint  with  frequency-dependent\n       smoothing\n\n       Reference:  Wang et al. (2021), Non-stationary predictive filtering for\n       seismic random noise  suppression  -  A  tutorial,  Geophysics,  86(3),\n       W21-W30.\n\nPARAMETERS\n       float  Nfrac   =6.0        frequency-dependent  smoothing  starts  from\n              1/Nfrac * (Nyquist frequency)\n       float  Ntimes =5.0      Maximum smoothing radius  is  Ntimes*(reference\n              smoothing radius)\n       bool   fs =n [y/n]     y, determine frequency-dependent smoothing\n       int    mode =0      predictive filtering mode; default: non-stationary\n       int    n1win =n1      first window length\n       int    n2win =nx      second window length\n       int    n3win =ny      second window length\n       int    niter =100      number of iterations\n       int    nsx =2      number of shifts in non-causal prediction filtering\n       int    nsy =2      number of shifts in non-causal prediction filtering\n       bool   opt =y [y/n]     y, determine optimal size for efficiency\n       float  pow =0.5      fraction parameter\n       float  r1 =0.5      first overlapping ratio\n       float  r2 =0.5      second overlapping ratio\n       float  r3 =0.5      third overlapping ratio\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   sym =n [y/n]     y, symmetric scaling for Hermitian FFT\n       bool   verb =n [y/n]     Verbosity flag\nSOURCE\n       user/chenyk/Mfxynpre.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sffxynpre(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxynpre2-Tuple{}","page":"Home","title":"Madagascar.sffxynpre2","text":"sffxynpre2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxynpre2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxynpre2. See ?m8r for examples.\n\nRSF Documentation\n\nsffxynpre2(1)                 Madagascar Manuals                 sffxynpre2(1)\n\nNAME\n       sffxynpre2  -  FXY non-stationary predictive filtering (with the option\n       of local processing windows).\n\nSYNOPSIS\n       sffxynpre2 < Fin.rsf  >  Fou.rsf  verb=n  sym=n  opt=y  fs=n  Nfrac=6.0\n       Ntimes=5.0  pow=0.5  niter=100 n1win=n1 n2win=nx n3win=ny r1=0.5 r2=0.5\n       r3=0.5 mode=0 nsx=2 nsy=2 rect#= shift#=\n\nCOMMENTS\n       with  frequency-axis  smoothness  constraint  with  frequency-dependent\n       smoothing  with  arbitrarily  designed smoothing strategies (to enforce\n       the a priori constraint) Enhanced version of sffxynpre Reference: Huang\n       et al. (2021).\n\nPARAMETERS\n       float  Nfrac =6.0 ®\n       float  Ntimes =5.0 ®\n       bool   fs =n [y/n]     y, determine frequency-dependent smoothing\n       int    mode =0      predictive filtering mode; default: non-stationary\n       int    n1win =n1      first window length\n       int    n2win =nx      second window length\n       int    n3win =ny      second window length\n       int    niter =100      number of iterations\n       int    nsx =2      number of shifts in non-causal prediction filtering\n       int    nsy =2      number of shifts in non-causal prediction filtering\n       bool   opt =y [y/n]     y, determine optimal size for efficiency\n       float  pow =0.5 ®\n       float  r1 =0.5      first overlapping ratio\n       float  r2 =0.5      second overlapping ratio\n       float  r3 =0.5      third overlapping ratio\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\n       bool   sym =n [y/n]     y, symmetric scaling for Hermitian FFT\n       bool   verb =n [y/n]     Verbosity flag\nSOURCE\n       user/chenyk/Mfxynpre2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sffxynpre2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxyspf-Tuple{}","page":"Home","title":"Madagascar.sffxyspf","text":"sffxyspf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxyspf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxyspf. See ?m8r for examples.\n\nRSF Documentation\n\nsffxyspf(1)                   Madagascar Manuals                   sffxyspf(1)\n\nNAME\n       sffxyspf  -  3D  f-x-y streaming prediction filter (SPF) for interpola‐\n       tion/denoising.\n\nSYNOPSIS\n       sffxyspf <  inp.rsf  >  out.rsf  mask=msk.rsf  verb=n  type=1  lambda1=\n       lambda2= lambda3= na1= na2=\n\nPARAMETERS\n       float  lambda1 =      lambda1\n       float  lambda2 =      lambda2\n       float  lambda3 =      lambda3\n       file   mask =      auxiliary input file name\n       int    na1 =      fiter size along x axis\n       int    na2 =      fiter size along y axis\n       int    type =1      default = 1,\n                   1 : denoise with noncausul filter desin\n                   2 : interpolation with causul filter design\n       bool   verb =n [y/n]     default=false, verbosity flag\nSOURCE\n       user/yliu/Mfxyspf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sffxyspf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxyspfdenoise3-Tuple{}","page":"Home","title":"Madagascar.sffxyspfdenoise3","text":"sffxyspfdenoise3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxyspfdenoise3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxyspfdenoise3. See ?m8r for examples.\n\nRSF Documentation\n\nsffxyspfdenoise3(1)           Madagascar Manuals           sffxyspfdenoise3(1)\n\nNAME\n       sffxyspfdenoise3  -  Random  noise attenuation using 3D f-x-y streaming\n       prediction filter.\n\nSYNOPSIS\n       sffxyspfdenoise3 < inp.rsf > out.rsf verb=n lambda1= lambda2=  lambda3=\n       na1= na2=\n\nPARAMETERS\n       float  lambda1 =      Regularization in x direction\n       float  lambda2 =      Regularization in y direction\n       float  lambda3 =      Regularization in f direction\n       int    na1 =      filter size in x direction\n       int    na2 =      filter size in y direction\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mfxyspfdenoise3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sffxyspfdenoise3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sffxyspfint3-Tuple{}","page":"Home","title":"Madagascar.sffxyspfint3","text":"sffxyspfint3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sffxyspfint3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sffxyspfint3. See ?m8r for examples.\n\nRSF Documentation\n\nsffxyspfint3(1)               Madagascar Manuals               sffxyspfint3(1)\n\nNAME\n       sffxyspfint3 - 3D missing data interpolation using f-x-y streaming pre‐\n       diction filter.\n\nSYNOPSIS\n       sffxyspfint3 < inp.rsf > out.rsf mask=msk.rsf verb=n  ftype=1  lambdax=\n       na1= na2=\n\nPARAMETERS\n       int    ftype =1      default = 1,\n                     1 : causal filter design\n                     2 : noncausal filter design\n       float  lambdax =      lambdax.r\n       file   mask =      auxiliary input file name\n       int    na1 = ®\n       int    na2 = ®\n       bool   verb =n [y/n]     default=false, verbosity flag\nSOURCE\n       user/yliu/Mfxyspfint3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sffxyspfint3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgammapick2d-Tuple{}","page":"Home","title":"Madagascar.sfgammapick2d","text":"sfgammapick2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgammapick2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgammapick2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfgammapick2d(1)              Madagascar Manuals              sfgammapick2d(1)\n\nNAME\n       sfgammapick2d - 2D picking for gamma=Vm/V panels\n\nSYNOPSIS\n       sfgammapick2d < dataFile_.rsf > outFile_.rsf eps=0 xApp=1\n\nCOMMENTS\n       Input: dataFile_.rsf - parameter spectrum (semblance) panel\n\n       Output: outFile_.rsf - picked optimal values\n\nPARAMETERS\n       float  eps =0      line-freedom measure\n       int    xApp =1      x-aperture\nSOURCE\n       user/aklokov/Mgammapick2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfgammapick2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgaussmooth-Tuple{}","page":"Home","title":"Madagascar.sfgaussmooth","text":"sfgaussmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgaussmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgaussmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfgaussmooth(1)               Madagascar Manuals               sfgaussmooth(1)\n\nNAME\n       sfgaussmooth - Recursive Gaussian smoothing on the fast axis.\n\nSYNOPSIS\n       sfgaussmooth < in.rsf > out.rsf der=n rect=1 repeat=1\n\nPARAMETERS\n       bool   der =n [y/n]     compute derivative\n       float  rect =1      smoothing radius\n       int    repeat =1      repeat filtering several times\nSOURCE\n       user/fomels/Mgaussmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfgaussmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgazdag-Tuple{}","page":"Home","title":"Madagascar.sfgazdag","text":"sfgazdag(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgazdag on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgazdag. See ?m8r for examples.\n\nRSF Documentation\n\nsfgazdag(1)                   Madagascar Manuals                   sfgazdag(1)\n\nNAME\n       sfgazdag  - Post-stack 2-D/3-D v(z) time modeling/migration with Gazdag\n       phase-shift.\n\nSYNOPSIS\n       sfgazdag < in.rsf > out.rsf velocity=vel.rsf velz=velz.rsf  eta=eta.rsf\n       inv=n  eps=0.01  verb=n  depth=n  nt=  dt=  nz=  dz=  vel=  vz=v0 n=0.0\n       pad=2*kiss_fft_next_fast_size((nt+1)/2) rule=\n\nPARAMETERS\n       bool   depth =n [y/n]     if true, depth migration\n       float  dt =      Sampling of time axis (for modeling)\n       float  dz =      Sampling of depth axis (for migration, if no  velocity\n              file)\n       float  eps =0.01      stabilization parameter\n       string eta =      auxiliary input file name\n       bool   inv =n [y/n]     if y, modeling; if n, migration\n       float  n =0.0      Constant eta (if no velocity file)\n       int    nt =      Length of time axis (for modeling)\n       int    nz  =       Length  of depth axis (for migration, if no velocity\n              file)\n       int    pad =2*kiss_fft_next_fast_size((nt+1)/2) ®\n       string rule =      phase-shift interpolation  rule  (simple,  midpoint,\n              linear)\n       float  vel =      Constant velocity (if no velocity file)\n       string velocity =      auxiliary input file name\n       string velz =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  vz =v0      Constant vertical velocity (if no velocity file)\nUSED IN\n       bei/dwnc/phasemod\n       bei/dwnc/sigmoid\n       bei/dwnc/vofz\nSOURCE\n       system/seismic/Mgazdag.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfgazdag(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgbeamform-Tuple{}","page":"Home","title":"Madagascar.sfgbeamform","text":"sfgbeamform(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgbeamform on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgbeamform. See ?m8r for examples.\n\nRSF Documentation\n\nsfgbeamform(1)                Madagascar Manuals                sfgbeamform(1)\n\nNAME\n       sfgbeamform - 2-D lateral smoothing.\n\nSYNOPSIS\n       sfgbeamform < in.rsf > out.rsf rect=3 adj=y repeat=2\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       int    rect =3      smoothing radius\n       int    repeat =2      triangle convolutions\nSOURCE\n       user/fomels/Mgbeamform.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfgbeamform(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgdmo-Tuple{}","page":"Home","title":"Madagascar.sfgdmo","text":"sfgdmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgdmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgdmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfgdmo(1)                     Madagascar Manuals                     sfgdmo(1)\n\nNAME\n       sfgdmo - Gardner's DMO for regularly sampled 2-D data (slow method)\n\nSYNOPSIS\n       sfgdmo < in.rsf > out.rsf eps=0.01 nb=171 b0=-85 db=1\n\nCOMMENTS\n       The input/ouput is (time,offset,midpoint).\n\nPARAMETERS\n       float  b0 =-85      first angle\n       float  db =1      angle increment\n       float  eps =0.01      stretch regularization\n       int    nb =171      number of angles\nSOURCE\n       system/seismic/Mgdmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfgdmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgenheaderallreceiver-Tuple{}","page":"Home","title":"Madagascar.sfgenheaderallreceiver","text":"sfgenheaderallreceiver(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgenheaderallreceiver on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgenheaderallreceiver. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgenmask-Tuple{}","page":"Home","title":"Madagascar.sfgenmask","text":"sfgenmask(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgenmask on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgenmask. See ?m8r for examples.\n\nRSF Documentation\n\nsfgenmask(1)                  Madagascar Manuals                  sfgenmask(1)\n\nNAME\n       sfgenmask - beg\n\nSYNOPSIS\n       sfgenmask < dataa.rsf > log_eo.rsf beg= end=\n\nPARAMETERS\n       int    beg = ®\n       int    end = ®\nSOURCE\n       user/sbader/Mgenmask.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgenmask(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgenshots-Tuple{}","page":"Home","title":"Madagascar.sfgenshots","text":"sfgenshots(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgenshots on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgenshots. See ?m8r for examples.\n\nRSF Documentation\n\nsfgenshots(1)                 Madagascar Manuals                 sfgenshots(1)\n\nNAME\n       sfgenshots  -  Generate  shots for FWI using Enquist absorbing boundary\n       condition\n\nSYNOPSIS\n       sfgenshots  <  vinit.rsf  >  shots.rsf  time=time.rsf   check=check.rsf\n       amp=1000  fm=10  dt=  nt=  ns= ng= jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg=\n       gxbeg= gzbeg= csdgather=n chk=n kt=100\n\nCOMMENTS\n       Note: You can try other complex boundary condition but we do not recom‐\n       mend  to  do so. The main reason is that FWI is to recover the low-fre‐\n       quency information of the earth model. Low-freq means  that  exact  ab‐\n       sorbing  is  not  necessarilly needed. The result will be improved with\n       the optimization procedure.  Furthermore,  complex  boundary  condition\n       (such as sponge ABC or PML) implies more computational cost, which will\n       degrade the efficiency of FWI.\n\nPARAMETERS\n       float  amp =1000      maximum amplitude of ricker\n       file   check =      auxiliary output file name\n       bool   chk =n [y/n]     check whether GPU-CPU  implementation  coincide\n              with each other or not\n       bool   csdgather =n [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =10      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =100      check it at it=100\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       file   time =      auxiliary output file name\nSOURCE\n       user/pyang/Mgenshots.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfgenshots(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgenshotscyk-Tuple{}","page":"Home","title":"Madagascar.sfgenshotscyk","text":"sfgenshotscyk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgenshotscyk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgenshotscyk. See ?m8r for examples.\n\nRSF Documentation\n\nsfgenshotscyk(1)              Madagascar Manuals              sfgenshotscyk(1)\n\nNAME\n       sfgenshotscyk - Generate shots for FWI test\n\nSYNOPSIS\n       sfgenshotscyk  < vel.rsf > shots.rsf wfd=wfd.rsf verb=y nt= ng= ns= dt=\n       amp=1000 fm=10 jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg=  gzbeg=  cs‐\n       dgather=n\n\nPARAMETERS\n       float  amp =1000      maximum amplitude of ricker\n       bool   csdgather =n [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time sampling interval\n       float  fm =10      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    ng =      total receivers in each shot\n       int    ns =      number of shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       bool   verb =y [y/n]     vebosity\n       file   wfd =      auxiliary output file name\nSOURCE\n       user/chenyk/Mgenshotscyk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfgenshotscyk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgeoconvert-Tuple{}","page":"Home","title":"Madagascar.sfgeoconvert","text":"sfgeoconvert(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgeoconvert on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgeoconvert. See ?m8r for examples.\n\nRSF Documentation\n\nsfgeoconvert(1)               Madagascar Manuals               sfgeoconvert(1)\n\nNAME\n       sfgeoconvert - 2-D regular geometry conversion\n\nSYNOPSIS\n       sfgeoconvert < in.rsf > out.rsf ns= nr= ds=0.05 dr=0.025 os=0. or=0.\n\nPARAMETERS\n       float  dr =0.025      receiver interval\n       float  ds =0.05      shot interval\n       int    nr =      receiver number per shot\n       int    ns =      shot number\n       float  or =0.       receiver origin\n       float  os =0.       shot origin\nSOURCE\n       user/yliu/Mgeoconvert.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfgeoconvert(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgeopar-Tuple{}","page":"Home","title":"Madagascar.sfgeopar","text":"sfgeopar(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgeopar on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgeopar. See ?m8r for examples.\n\nRSF Documentation\n\nsfgeopar(1)                   Madagascar Manuals                   sfgeopar(1)\n\nNAME\n       sfgeopar - Generate geometry parameters for 2d/3d RTM\n\nSYNOPSIS\n       sfgeopar > output.rsf\n\nSOURCE\n       user/jsun/Mgeopar.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfgeopar(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfget-Tuple{}","page":"Home","title":"Madagascar.sfget","text":"sfget(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfget on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfget. See ?m8r for examples.\n\nRSF Documentation\n\nsfget(1)                      Madagascar Manuals                      sfget(1)\n\nNAME\n       sfget - Output parameters from the header.\n\nSYNOPSIS\n       sfget parform=y all=n par1 par2 ...\n\nPARAMETERS\n       bool   all =n [y/n]     If output all values.\n       bool   parform  =y  [y/n]     If  y,  print  out parameter=value. If n,\n              print out value.\nSOURCE\n       system/main/get.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfget\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfget(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgetattr-Tuple{}","page":"Home","title":"Madagascar.sfgetattr","text":"sfgetattr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgetattr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgetattr. See ?m8r for examples.\n\nRSF Documentation\n\nsfgetattr(1)                  Madagascar Manuals                  sfgetattr(1)\n\nNAME\n       sfgetattr - Output dataset attributes.\n\nSYNOPSIS\n       sfgetattr < Fi.rsf > Fo.rsf want=\n\nPARAMETERS\n       string want = ®\nSOURCE\n       user/psava/Mgetattr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgetattr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgetcregather-Tuple{}","page":"Home","title":"Madagascar.sfgetcregather","text":"sfgetcregather(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgetcregather on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgetcregather. See ?m8r for examples.\n\nRSF Documentation\n\nsfgetcregather(1)             Madagascar Manuals             sfgetcregather(1)\n\nNAME\n       sfgetcregather - Build CRE gather given CMP X Offset CRE trajectory co‐\n       ordinates and interpolated data cube\n\nSYNOPSIS\n       sfgetcregather < in.rsf cremh=cremh.rsf > out.rsf m=out_m.rsf nm0= nt0=\n       aperture=1 verb=0\n\nCOMMENTS\n       This  program  searches  for the closest trace to the CRE trajectory to\n       build the CRE Gather for each (m, h) pair  given  in  the  interpolated\n       data cube.\n\n       Programmer: Rodolfo A. C. Neves (Dirack) 04/09/2019\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       int    aperture =1      Number of traces to put in a CRE Gather\n       file   cremh =      auxiliary input file name\n       file   m =      auxiliary output file name\n       int    nm0 =      Number of central CMPs in cremh file\n       int    nt0 =      Number of t0s in cremh file\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mgetcregather.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfgetcregather(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgetcretimecurve-Tuple{}","page":"Home","title":"Madagascar.sfgetcretimecurve","text":"sfgetcretimecurve(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgetcretimecurve on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgetcretimecurve. See ?m8r for examples.\n\nRSF Documentation\n\nsfgetcretimecurve(1)          Madagascar Manuals          sfgetcretimecurve(1)\n\nNAME\n       sfgetcretimecurve  -  Calculate  CRE  traveltime curve t(m,h) given CRS\n       zero-offset parameters (RN, RNIP, BETA)\n\nSYNOPSIS\n       sfgetcretimecurve < in.rsf param=par.rsf > out.rsf nm0= om0= dm0=  nt0=\n       ot0= dt0= v0=1.5 verb=0 cds=0\n\nCOMMENTS\n       Programmer: Rodolfo A. C. Neves (Dirack) 14/09/2019\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       bool   cds  =0  [y/n]     1: Non-hyperbolic CRS using CDS condition; 0:\n              cre approximation\n       float  dm0 =      central CMP sampling (Km) in parameters file\n       float  dt0 =      t0s sampling (s) in parameters file\n       int    nm0 =      Numbers of central CMPs in parameters file\n       int    nt0 =      Numbers of t0s in parameters file\n       float  om0 =      First central CMP (Km) in parameters file\n       float  ot0 =      First t0 (s) in parameters file\n       file   param =      auxiliary input file name\n       float  v0 =1.5      Near surface velocity (Km/s)\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mgetcretimecurve.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfgetcretimecurve(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgettype-Tuple{}","page":"Home","title":"Madagascar.sfgettype","text":"sfgettype(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgettype on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgettype. See ?m8r for examples.\n\nRSF Documentation\n\nsfgettype(1)                  Madagascar Manuals                  sfgettype(1)\n\nNAME\n       sfgettype - Displays numerical type of a dataset\n\nSYNOPSIS\n       sfgettype < in.rsf\n\nCOMMENTS\n       Output  can  be  be:  SF_CHAR,  SF_COMPLEX, SF_FLOAT, SF_INT, SF_SHORT,\n       SF_UCHAR Shell/tester for sf_gettype\n\nSOURCE\n       user/ivlad/Mgettype.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgettype(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpi3dzo-Tuple{}","page":"Home","title":"Madagascar.sfgpi3dzo","text":"sfgpi3dzo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpi3dzo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpi3dzo. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpi3dzo(1)                  Madagascar Manuals                  sfgpi3dzo(1)\n\nNAME\n       sfgpi3dzo - Gaussian weighting for ZO 3D case\n\nSYNOPSIS\n       sfgpi3dzo < inp.rsf > out.rsf v_a= v_b= beta=0.0 eps=0.001\n\nPARAMETERS\n       float  beta =0.0 ®\n       float  eps =0.001 ®\n       float  v_a = ®\n       float  v_b = ®\nSOURCE\n       user/dmerzlikin/Mgpi3dzo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgpi3dzo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpufbrec3d-Tuple{}","page":"Home","title":"Madagascar.sfgpufbrec3d","text":"sfgpufbrec3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpufbrec3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpufbrec3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpufbrec3d(1)               Madagascar Manuals               sfgpufbrec3d(1)\n\nNAME\n       sfgpufbrec3d  - Backward reconstruction of forward modeling with random\n       boundary\n\nSYNOPSIS\n       sfgpufbrec3d < Fv.rsf > Fw.rsf verb=n nb=20  nt=  kt=  dt=  fm=20  ns=1\n       szbeg= sxbeg= sybeg= jsz= jsx= jsy=\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20      dominant frequency of Ricker wavelet\n       int    jsx =      source jump interval in x-axis\n       int    jsy =      source jump interval in y-axis\n       int    jsz =      source jump interval in z-axis\n       int    kt =      record wavefield at time kt\n       int    nb =20      thickness of random boundary\n       int    ns =1      number of sources\n       int    nt =      total number of time steps\n       int    sxbeg =      source beginning of x-axis\n       int    sybeg =      source beginning of y-axis\n       int    szbeg =      source beginning of z-axis\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mgpufbrec3d.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfgpufbrec3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpufd3d-Tuple{}","page":"Home","title":"Madagascar.sfgpufd3d","text":"sfgpufd3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpufd3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpufd3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpufd3d(1)                  Madagascar Manuals                  sfgpufd3d(1)\n\nNAME\n       sfgpufd3d - GPU-based finite difference on 3-D grid\n\nSYNOPSIS\n       sfgpufd3d < Fv.rsf > Fw.rsf verb=n nt= kt= dt= fm=20 ns=1 szbeg= sxbeg=\n       sybeg= jsz= jsx= jsy=\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20      dominant frequency of Ricker wavelet\n       int    jsx =      source jump interval in x-axis\n       int    jsy =      source jump interval in y-axis\n       int    jsz =      source jump interval in z-axis\n       int    kt =      record wavefield at time kt\n       int    ns =1      number of sources\n       int    nt =      total number of time steps\n       int    sxbeg =      source beginning of x-axis\n       int    sybeg =      source beginning of y-axis\n       int    szbeg =      source beginning of z-axis\n       bool   verb =n [y/n]     verbosit2\nSOURCE\n       user/pyang/Mgpufd3d.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgpufd3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpufwi-Tuple{}","page":"Home","title":"Madagascar.sfgpufwi","text":"sfgpufwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpufwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpufwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpufwi(1)                   Madagascar Manuals                   sfgpufwi(1)\n\nNAME\n       sfgpufwi  -  CUDA  based FWI using Enquist absorbing boundary condition\n       (A2)\n\nSYNOPSIS\n       sfgpufwi < vinit.rsf  shots=shots.rsf  >  vupdates.rsf  grads=grads.rsf\n       objs=objs.rsf illums=illums.rsf verb=y precon=n niter=100 rbell=2\n\nCOMMENTS\n       Note: You can try other complex boundary condition but we do not recom‐\n       mend to do so. The main reason is that FWI is to recover  the  low-fre‐\n       quency  information  of  the earth model. Low-freq means that exact ab‐\n       sorbing is not necessarilly needed. The result will  be  improved  with\n       the  optimization  precedure.   Furthermore, complex boundary condition\n       (such as sponge ABC or PML) implies more computational cost, which will\n       degrade the efficiency of FWI.\n\nPARAMETERS\n       file   grads =      auxiliary output file name\n       file   illums =      auxiliary output file name\n       int    niter =100      number of iterations\n       file   objs =      auxiliary output file name\n       bool   precon =n [y/n]     precondition or not\n       int    rbell =2      radius of bell smooth\n       file   shots =      auxiliary input file name\n       bool   verb =y [y/n]     vebosity\nSOURCE\n       user/pyang/Mgpufwi.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfgpufwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpuktmig-Tuple{}","page":"Home","title":"Madagascar.sfgpuktmig","text":"sfgpuktmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpuktmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpuktmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpuktmig(1)                 Madagascar Manuals                 sfgpuktmig(1)\n\nNAME\n       sfgpuktmig - Prestack time migration (2-D/3-D) with CUDA.\n\nSYNOPSIS\n       sfgpuktmig   <   data.rsf   >   image.rsf  vrms=vrms.rsf  sxsy=sxsy.rsf\n       gxgy=gxgy.rsf cxcy=cxcy.rsf verb=n time=n aa=y diff=y dbtr=-1 apx=onx/2\n       apy=ony/2 maxtri=13 trfact=4.0*(0.5*(odx + ody)/dt)\n\nPARAMETERS\n       bool   aa =y [y/n]     Antialiaing flag\n       int    apx =onx/2      Apperture half-width in x direction\n       int    apy =ony/2      Apperture half-width in y direction\n       string cxcy =      File with midpoint coordinates (auxiliary input file\n              name)\n       int    dbtr =-1      Desired number of traces per block of threads\n       bool   diff =y [y/n]     Differentiation flag\n       string gxgy =      File with receiver coordinates (auxiliary input file\n              name)\n       int    maxtri =13      Maximum half-length of the antialias filter\n       string sxsy  =       File  with  shot coordinates (auxiliary input file\n              name)\n       bool   time =n [y/n]     Total time measurement time\n       float  trfact =4.0*(0.5*(odx + ody)/dt)      Trace factor for antialias\n              filter length calculation\n       bool   verb =n [y/n]     Verbosity flag\n       string vrms =      File with RMS velocities (auxiliary input file name)\nSOURCE\n       user/cuda/Mgpuktmig.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfgpuktmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpurayt-Tuple{}","page":"Home","title":"Madagascar.sfgpurayt","text":"sfgpurayt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpurayt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpurayt. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpurayt(1)                  Madagascar Manuals                  sfgpurayt(1)\n\nNAME\n       sfgpurayt - Parallel shortest path ray tracing\n\nSYNOPSIS\n       sfgpurayt  <  in.rsf  >  out.rsf ray=rayout.rsf ctime=ctimeout.rsf sx=0\n       sz=0 bs=16 ord=3 dx=1.0f ray= ctime=\n\nPARAMETERS\n       bs     =16      Cuda block is a square with bs*bs threads. Must  divide\n              dimensions of in.rsf, bs >= 1 (int)\n       ctime  =      Output rsf file for computation time. Empty for no compu‐\n              tation time output.\n       dx     =1.0f      Horizontal and vertical separation between nodes,  dx\n              > 0.0 (float)\n       ord    =3      Forward star has (ord*ord-1) nodes, ord >= 1 (int)\n       ray    =       Output file for a sfgraph compatible ray file. Empty for\n              no ray output.\n       sx     =0      Horizontal node source coordinate (int)\n       sz     =0      Vertical node source coordinate (int)\nSOURCE\n       user/jmonsegny/Mgpurayt.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgpurayt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgpurtm-Tuple{}","page":"Home","title":"Madagascar.sfgpurtm","text":"sfgpurtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgpurtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgpurtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfgpurtm(1)                   Madagascar Manuals                   sfgpurtm(1)\n\nNAME\n       sfgpurtm - 2D prestack GPU-based RTM using effective boundary saving.\n\nSYNOPSIS\n       sfgpurtm  <  vmodl.rsf  > imag1.rsf imag2=imag2.rsf fm= dt= nt= ns= ng=\n       jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= order=6 phost=0  cs‐\n       dgather=y vmute=1500 tdmute=2.0/(fm*dt)\n\nCOMMENTS\n       Some  basic descriptions of this code are in order.  1) Coordinate con‐\n       figuration of seismic data:\n\n       o--------------> x (2nd dim: *.y) | | | | | z (1st dim: *.x)  1st  dim:\n       i1=threadIdx.x+blockDim.x*blockIdx.x;  2nd  dim:  i2=threadIdx.y+block‐\n       Dim.y*blockIdx.y; (i1, i2)=i1+i2*nnz;\n\n       2) stability condition:   min(dx, dz)>sqrt(2)*dt*max(v) (NJ=2)  numeri‐\n       cal   dispersion   condition:    max(dx,  dz)<min(v)/(10*fmax)   (NJ=2)\n       max(dx, dz)<min(v)/(5*fmax)   (NJ=4)\n\n       3) This code doesn't save the history of forward time  steps.  We  just\n       save  the  least  boundaries  (referred to as effective boundary in our\n       work) of every time step and the two final steps of the wavefield.  Us‐\n       ing  this information, we can easily reconstruct the exact wavefield in\n       the reverse time steps. It is noteworthy that to implement large  scale\n       seismic  imaging,  pinned  memory is employed to save the boundaries of\n       each step so that all the saved data can be computed on the device  di‐\n       rectly.\n\n       4)  In our implementation, we employ staggered grid based convolutional\n       PML (CPML) boundary condition. Using 20 points for CPML  is  enough  to\n       obtain  perfect  absorbing  effect  (while commonly used sponge ABC may\n       need 30 or more). However, we use 32 points on each  side  due  to  the\n       grid  alignment  reasons.  (To make your code fast, you should consider\n       that the GPU codes implementation unit is half-warp (16  threads).  The\n       thickness of the boundary should be times of 16.\n\n       5)  The  final  images  can be two kinds: result of correlation imaging\n       condition and the normalized one. The  normalized  correlation  imaging\n       result  is  preferred due to compensated illumination. Some filters are\n       popular and effective to remove the  low  frequency  artifacts  of  the\n       imaging: the Laplacian filtering, derivative filtering and the bandpass\n       filtering. In this code, we use laplacian filtering.\n\nPARAMETERS\n       bool   csdgather =y [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       file   imag2 =      auxiliary output file name\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    order =6      order of finite difference, order=2,4,6,8,10\n       float  phost  =0       phost% points on host with zero-copy pinned mem‐\n              ory, the rest on device\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       int    tdmute =2.0/(fm*dt)      number of deleyed time samples to mute\n       float  vmute =1500      muting velocity to remove  the  low-freq  arti‐\n              facts, unit=m/s\nSOURCE\n       user/pyang/Mgpurtm.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfgpurtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgrad2-Tuple{}","page":"Home","title":"Madagascar.sfgrad2","text":"sfgrad2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgrad2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgrad2. See ?m8r for examples.\n\nRSF Documentation\n\nsfgrad2(1)                    Madagascar Manuals                    sfgrad2(1)\n\nNAME\n       sfgrad2 - 2-D smooth gradient.\n\nSYNOPSIS\n       sfgrad2 < in.rsf > out.rsf\n\nSOURCE\n       system/generic/Mgrad2.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgrad2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgrad3-Tuple{}","page":"Home","title":"Madagascar.sfgrad3","text":"sfgrad3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgrad3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgrad3. See ?m8r for examples.\n\nRSF Documentation\n\nsfgrad3(1)                    Madagascar Manuals                    sfgrad3(1)\n\nNAME\n       sfgrad3 - 3-D smooth gradient.\n\nSYNOPSIS\n       sfgrad3 < in.rsf > out.rsf dim=0\n\nPARAMETERS\n       int    dim =0      dimension of the gradient, 0 for gradient squared\nSOURCE\n       system/generic/Mgrad3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgrad3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgradient-Tuple{}","page":"Home","title":"Madagascar.sfgradient","text":"sfgradient(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgradient on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgradient. See ?m8r for examples.\n\nRSF Documentation\n\nsfgradient(1)                 Madagascar Manuals                 sfgradient(1)\n\nNAME\n       sfgradient - Linearized complex eikonal equation\n\nSYNOPSIS\n       sfgradient < vel.rsf > time.rsf s1=o[0] s2=o[1] s3=o[2] v0=1. b=0. s=0.\n\nPARAMETERS\n       float  b =0.  ®\n       float  s =0.  ®\n       float  s1 =o[0] ®\n       float  s2 =o[1] ®\n       float  s3 =o[2] ®\n       float  v0 =1.  ®\nSOURCE\n       user/llisiw/Mgradient.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfgradient(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgraph-Tuple{}","page":"Home","title":"Madagascar.sfgraph","text":"sfgraph(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgraph on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgraph. See ?m8r for examples.\n\nRSF Documentation\n\nsfgraph(1)                    Madagascar Manuals                    sfgraph(1)\n\nNAME\n       sfgraph - Graph plot.\n\nSYNOPSIS\n       sfgraph   <   in.rsf   depth=depth.rsf  symbolsz=  scalebar=n  wantfra‐\n       menum=(bool)  (n3  >  1)  nreserve=8   minval=   maxval=   barreverse=n\n       pclip=100. transp=n color= bar= symbol= > plot.vpl\n\nCOMMENTS\n       Run \"sfdoc stdplot\" for more parameters.\n\n       August  2011 program of the month: http://ahay.org/blog/2011/08/09/pro‐\n       gram-of-the-month-sfgraph/\n\nPARAMETERS\n       string bar =      file for scalebar data\n       bool   barreverse =n [y/n]     if y, go from small to large on the  bar\n              scale\n       string color =      color scheme (default is j)\n       string depth =      auxiliary input file name\n       float  maxval  =       maximum  value for scalebar (default is the data\n              maximum)\n       float  minval =      minimum value for scalebar (default  is  the  data\n              minimum)\n       int    nreserve =8      reserved colors\n       float  pclip =100.       clip percentile\n       bool   scalebar =n [y/n]     if y, draw scalebar\n       string symbol =      if set, plot with symbols instead of lines\n       floats symbolsz =      symbol size (default is 2) [n2]\n       bool   transp =n [y/n]     if y, transpose the axes\n       bool   wantframenum =(bool) (n3 > 1) [y/n]     if y, display third axis\n              position in the corner\nUSED IN\n       bei/fdm/movies\n       bei/vela/vscan\n       carrot/test/modeling\n       chen/test/wavmod\n       cup/rna2d/real\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       6 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       graph.html\nSOURCE\n       plot/main/graph.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgraph(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgraph3-Tuple{}","page":"Home","title":"Madagascar.sfgraph3","text":"sfgraph3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgraph3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgraph3. See ?m8r for examples.\n\nRSF Documentation\n\nsfgraph3(1)                   Madagascar Manuals                   sfgraph3(1)\n\nNAME\n       sfgraph3 - Generate 3-D cube plot for surfaces.\n\nSYNOPSIS\n       sfgraph3  <  in.rsf orient=1 yreverse=n min= max= point1=0.5 point2=0.5\n       frame1=0.5*(min+max)    frame2=n1-1    frame3=0    movie=0     dframe=1\n       n1pix=n1/point1+n3/(1.-point1)  n2pix=n2/point2+n3/(1.-point2) flat=y >\n       plot.vpl\n\nPARAMETERS\n       float  dframe =1      frame increment in a movie\n       bool   flat =y [y/n]     if n, display perspective view\n       float  frame1 =0.5*(min+max) ®\n       int    frame2 =n1-1 ®\n       int    frame3 =0      frame numbers for cube faces\n       float  max =      maximum function value\n       float  min =      minimum function value\n       int    movie =0      0: no movie, 1: movie over axis 1, 2: axis  2,  3:\n              axis 3\n       int    n1pix =n1/point1+n3/(1.-point1)      number of vertical pixels\n       int    n2pix =n2/point2+n3/(1.-point2)      number of horizontal pixels\n       int    orient =1      function orientation\n       float  point1 =0.5      fraction of the vertical axis for front face\n       float  point2 =0.5      fraction of the horizontal axis for front face\n       bool   yreverse =n [y/n]\nSOURCE\n       plot/main/graph3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfgraph3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgravcon-Tuple{}","page":"Home","title":"Madagascar.sfgravcon","text":"sfgravcon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgravcon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgravcon. See ?m8r for examples.\n\nRSF Documentation\n\nsfgravcon(1)                  Madagascar Manuals                  sfgravcon(1)\n\nNAME\n       sfgravcon - Continuation for gravity data by using FFT or intergral it‐\n       eration\n\nSYNOPSIS\n       sfgravcon < in.rsf > out.rsf verb=n iter=n z= niter=0\n\nPARAMETERS\n       bool   iter =n [y/n]     if y, perform iteration method\n       int    niter =0      continuation factor allocate memory\n       bool   verb =n [y/n]     verbosity flag\n       float  z =      for iteration method\nSOURCE\n       user/yliu/Mgravcon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfgravcon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgrey-Tuple{}","page":"Home","title":"Madagascar.sfgrey","text":"sfgrey(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgrey on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgrey. See ?m8r for examples.\n\nRSF Documentation\n\nsfgrey(1)                     Madagascar Manuals                     sfgrey(1)\n\nNAME\n       sfgrey - Generate raster plot.\n\nSYNOPSIS\n       sfgrey  <  in.rsf  >  out.rsf  > bar.rsf transp=y yreverse=y xreverse=n\n       gpow= phalf= clip= pclip= gainstep=0.5+n1/256. allpos=n mean=n  bias=0.\n       polarity=n symcp=n verb=n scalebar=n minval= maxval= barreverse=n want‐\n       framenum=(bool) (n3 > 1) nreserve=8 gpow=1  gainpanel=  bar=  color=  >\n       (plot.vpl | char.rsf)\n\nCOMMENTS\n       Can input char values.  If called \"byte\", outputs char values.\n\n       If called \"bar\", outputs scalebar data.\n\n       Run \"sfdoc stdplot\" for more parameters.\n\n       March  2015  program of the month: http://ahay.org/blog/2015/03/04/pro‐\n       gram-of-the-month-sfgrey/\n\nPARAMETERS\n       bool   allpos =n [y/n]     if y, assume positive data\n       string bar =      file for scalebar data\n       bool   barreverse =n [y/n]     if y, go from small to large on the  bar\n              scale\n       float  bias =0.       value mapped to the center of the color table\n       float  clip =      data clip\n       string color =      color scheme (default is i)\n       string gainpanel  =       gain reference: 'a' for all, 'e' for each, or\n              number\n       int    gainstep =0.5+n1/256.       subsampling for gpow and clip  esti‐\n              mation\n       float  gpow =1      raise data to gpow power for display\n       float  maxval  =       maximum  value for scalebar (default is the data\n              maximum)\n       bool   mean =n [y/n]     if y, bias on the mean value\n       float  minval =      minimum value for scalebar (default  is  the  data\n              minimum)\n       int    nreserve =8      reserved colors\n       float  pclip =      data clip percentile (default is 99)\n       float  phalf =      percentage for estimating gpow\n       bool   polarity  =n  [y/n]     if y, reverse polarity (white is high by\n              default)\n       bool   scalebar =n [y/n]     if y, draw scalebar\n       bool   symcp =n [y/n]     if y, assume symmetric color palette  of  255\n              colors\n       bool   transp =y [y/n]     if y, transpose the display axes\n       bool   verb =n [y/n]     verbosity flag\n       bool   wantframenum =(bool) (n3 > 1) [y/n]     if y, display third axis\n              position in the corner\n       bool   xreverse =n [y/n]     if y, reverse the horizontal axis\n       bool   yreverse =y [y/n]     if y, reverse the vertical axis\nUSED IN\n       bei/dpmv/krchdmo\n       bei/dpmv/matt\n       bei/dpmv/yalei\n       bei/dwnc/phasemod\n       bei/dwnc/sigmoid\n       bei/dwnc/vofz\n       bei/fdm/kjartjac\n       bei/fld/cube\n       bei/fld/shotmovie\n       bei/fld/synmarine\n       bei/fld/yc\n       bei/ft1/brad\n       bei/ft1/brad\n       bei/ft1/ft2d\n       bei/ft1/matrix\n       bei/ft1/plane4\n       bei/krch/alias\n       bei/krch/beach\n       bei/krch/sep73\n       bei/krch/wgkirch\n       bei/sg/denmark\n       bei/sg/meander\n       bei/sg/toldi\n       bei/trimo/all\n       bei/trimo/subsamp\n       77 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       grey.html\nSOURCE\n       plot/main/grey.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfgrey(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgrey3-Tuple{}","page":"Home","title":"Madagascar.sfgrey3","text":"sfgrey3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgrey3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgrey3. See ?m8r for examples.\n\nRSF Documentation\n\nsfgrey3(1)                    Madagascar Manuals                    sfgrey3(1)\n\nNAME\n       sfgrey3 - Generate 3-D cube plot.\n\nSYNOPSIS\n       sfgrey3  <  in.rsf  point1=0.5 point2=0.5 frame1=0 frame2=n2-1 frame3=0\n       movie=0             dframe=1             n1pix=n1/point1+n3/(1.-point1)\n       n2pix=n2/point2+n3/(1.-point2) flat=y scalebar=n minval= maxval= barre‐\n       verse=n nreserve=8 bar= color= > plot.vpl\n\nCOMMENTS\n       Requires an \"unsigned char\" input (the output of sfbyte).\n\n       April 2012 program of the  month:  http://ahay.org/blog/2012/04/01/pro‐\n       gram-of-the-month-sfgrey3/\n\nPARAMETERS\n       string bar =      file for scalebar data\n       bool   barreverse  =n [y/n]     if y, go from small to large on the bar\n              scale\n       string color =      color scheme (default is i)\n       int    dframe =1      frame increment in a movie\n       bool   flat =y [y/n]     if n, display perspective view\n       int    frame1 =0      top frame number\n       int    frame2 =n2-1      side frame number\n       int    frame3 =0      front frame number\n       float  maxval =      maximum value for scalebar (default  is  the  data\n              maximum)\n       float  minval  =       minimum  value for scalebar (default is the data\n              minimum)\n       int    movie =0      0: no movie, 1: movie over axis 1, 2: axis  2,  3:\n              axis 3\n       int    n1pix =n1/point1+n3/(1.-point1)      number of vertical pixels\n       int    n2pix =n2/point2+n3/(1.-point2)      number of horizontal pixels\n       int    nreserve =8      reserved colors\n       float  point1 =0.5      fraction of the vertical axis for front face\n       float  point2 =0.5      fraction of the horizontal axis for front face\n       bool   scalebar =n [y/n]     if y, draw scalebar\nUSED IN\n       bei/fld/cube\n       cup/rna3d/real\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2009TTIModeSeparation/vti3\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       data/alaska/line31-81-m8r\n       data/boem-g3d1206-002a/displayin\nSOURCE\n       plot/main/grey3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgrey3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgrey4-Tuple{}","page":"Home","title":"Madagascar.sfgrey4","text":"sfgrey4(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgrey4 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgrey4. See ?m8r for examples.\n\nRSF Documentation\n\nsfgrey4(1)                    Madagascar Manuals                    sfgrey4(1)\n\nNAME\n       sfgrey4 - Generate movie of 3-D cube plots.\n\nSYNOPSIS\n       sfgrey4  <  in.rsf  point1=0.5 point2=0.5 frame1=0 frame2=n2-1 frame3=0\n       n1pix=n1/point1+n3/(1.-point1)  n2pix=n2/point2+n3/(1.-point2)   flat=y\n       scalebar=n  minval=  maxval=  barreverse=n  nreserve=8  bar=  color=  >\n       plot.vpl\n\nCOMMENTS\n       Requires an \"unsigned char\" input (the output of sfbyte).\n\nPARAMETERS\n       string bar =      file for scalebar data\n       bool   barreverse =n [y/n]     if y, go from small to large on the  bar\n              scale\n       string color =      color scheme (default is i)\n       bool   flat =y [y/n]     if n, display perspective view\n       int    frame1 =0      top frame number\n       int    frame2 =n2-1      side frame number\n       int    frame3 =0      front frame number\n       float  maxval  =       maximum  value for scalebar (default is the data\n              maximum)\n       float  minval =      minimum value for scalebar (default  is  the  data\n              minimum)\n       int    n1pix =n1/point1+n3/(1.-point1)      number of vertical pixels\n       int    n2pix =n2/point2+n3/(1.-point2)      number of horizontal pixels\n       int    nreserve =8      reserved colors\n       float  point1 =0.5      fraction of the vertical axis for front face\n       float  point2 =0.5      fraction of the horizontal axis for front face\n       bool   scalebar =n [y/n]     if y, draw scalebar\nSOURCE\n       plot/main/grey4.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgrey4(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgroll-Tuple{}","page":"Home","title":"Madagascar.sfgroll","text":"sfgroll(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgroll on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgroll. See ?m8r for examples.\n\nRSF Documentation\n\nsfgroll(1)                    Madagascar Manuals                    sfgroll(1)\n\nNAME\n       sfgroll - Add linear-chirp ground-roll noise to the data\n\nSYNOPSIS\n       sfgroll < in.rsf > out.rsf begf=10. endf=5. theta=0.2 alpha=0.1 beg1=0.\n       beg2=0. rep=n\n\nPARAMETERS\n       float  alpha =0.1      width parameter of ground roll\n       float  beg1 =0.       radial beginning point at first axis\n       float  beg2 =0.       radial beginning point at second axis\n       float  begf =10.       beginning frequency of ground roll\n       float  endf =5.       ending frequency of ground roll\n       bool   rep =n [y/n]     if y, replace data with noise\n       float  theta =0.2      direction of central ground roll\nSOURCE\n       user/yliu/Mgroll.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgroll(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgsray-Tuple{}","page":"Home","title":"Madagascar.sfgsray","text":"sfgsray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgsray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgsray. See ?m8r for examples.\n\nRSF Documentation\n\nsfgsray(1)                    Madagascar Manuals                    sfgsray(1)\n\nNAME\n       sfgsray  -  Gauss  Seidel iterative solver for phase space escape posi‐\n       tions, angle and traveltime\n\nSYNOPSIS\n       sfgsray   <   in.rsf   >    out.rsf    slow=slow.rsf    slowz=slowz.rsf\n       slowx=slowx.rsf  dslow=dslow.rsf  dtout=dtout.rsf  iq= niter=50 liter=0\n       tol=0.000002*nx*nz order=1 verb=n sph=n\n\nPARAMETERS\n       string dslow =      auxiliary input file name\n       file   dtout =      auxiliary output file name\n       int    iq =      switch for escape variable 0=x, 1=a,  2=t,  3=z,  4=l,\n              5=i\n       int    liter =0      number of first iterations with low-order scheme\n       int    niter =50      number of Gauss-Seidel iterations\n       int    order =1      order of upwind\n       file   slow =      auxiliary input file name\n       file   slowx =      auxiliary input file name\n       file   slowz =      auxiliary input file name\n       bool   sph  =n  [y/n]     true  -  half-sphere,  false  -  flat B.C. on\n              left/right\n       float  tol =0.000002*nx*nz      accuracy tolerance\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/browaeys/Mgsray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfgsray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgsray2rays2d-Tuple{}","page":"Home","title":"Madagascar.sfgsray2rays2d","text":"sfgsray2rays2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgsray2rays2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgsray2rays2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfgsray2rays2d(1)             Madagascar Manuals             sfgsray2rays2d(1)\n\nNAME\n       sfgsray2rays2d - Oriented zero-offset migration.\n\nSYNOPSIS\n       sfgsray2rays2d  <  time.rsf  dept=dept.rsf  ang=angl.rsf  slow=slow.rsf\n       slowz=slowz.rsf slowx=slowx.rsf  ref3=fref3.rsf  >  imagt.rsf  stride=1\n       tolz= tolx= tola= ref1= ref2=\n\nPARAMETERS\n       file   ang =      auxiliary input file name\n       file   dept =      auxiliary input file name\n       string ref1 = ®\n       string ref2 = ®\n       string ref3 =      auxiliary input file name\n       file   slow =      auxiliary input file name\n       file   slowx =      auxiliary input file name\n       file   slowz =      auxiliary input file name\n       int    stride =1 ®\n       float  tola = ®\n       float  tolx = ®\n       float  tolz = ®\nSOURCE\n       user/roman/Mgsray2rays2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfgsray2rays2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgsrayvti-Tuple{}","page":"Home","title":"Madagascar.sfgsrayvti","text":"sfgsrayvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgsrayvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgsrayvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfgsrayvti(1)                 Madagascar Manuals                 sfgsrayvti(1)\n\nNAME\n       sfgsrayvti - Gauss Seidel iterative solver for phase space escape posi‐\n       tions, angle and traveltime\n\nSYNOPSIS\n       sfgsrayvti   <   in.rsf   >   out.rsf    vel=slow.rsf    velz=slowz.rsf\n       velx=slowx.rsf     iq=    niter=50    tol=0.000002*nx*nz    vti_eps=0.0\n       vti_gamma=0.0 vti_delta=0.0 vti=\n\nPARAMETERS\n       int    iq =      switch for escape variable 0=x, 1=a, 2=t, 3=z, 4=l\n       int    niter =50      number of Gauss-Seidel iterations\n       float  tol =0.000002*nx*nz      accuracy tolerance\n       file   vel =      auxiliary input file name\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       string vti =      what to compute (p=qP, v=qSV, h=SH)\n       float  vti_delta =0.0      VTI constants Thomsen\n       float  vti_eps =0.0 ®\n       float  vti_gamma =0.0 ®\nSOURCE\n       user/roman/Mgsrayvti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfgsrayvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfgui-Tuple{}","page":"Home","title":"Madagascar.sfgui","text":"sfgui(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfgui on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfgui. See ?m8r for examples.\n\nRSF Documentation\n\nsfgui(1)                      Madagascar Manuals                      sfgui(1)\n\nNAME\n       sfgui -\n\nSYNOPSIS\n       sfgui\n\nCOMMENTS\n       Open tkMadagascar GUI\n\nSOURCE\n       user/godwinj/Mgui.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfgui(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfh2warp-Tuple{}","page":"Home","title":"Madagascar.sfh2warp","text":"sfh2warp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfh2warp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfh2warp. See ?m8r for examples.\n\nRSF Documentation\n\nsfh2warp(1)                   Madagascar Manuals                   sfh2warp(1)\n\nNAME\n       sfh2warp - Distance From Midpoint-squared warping.\n\nSYNOPSIS\n       sfh2warp      <     in.rsf     >     out.rsf     eps=0.01     pad=in_n2\n       mid=(float)(in_n2-1)*in_d2/2+in_o2\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       float  mid  =(float)(in_n2-1)*in_d2/2+in_o2       center  for  midpoint\n              streching\n       int    pad =in_n2      output time samples\nSOURCE\n       user/luke/Mh2warp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfh2warp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhalfint-Tuple{}","page":"Home","title":"Madagascar.sfhalfint","text":"sfhalfint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhalfint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhalfint. See ?m8r for examples.\n\nRSF Documentation\n\nsfhalfint(1)                  Madagascar Manuals                  sfhalfint(1)\n\nNAME\n       sfhalfint - Half-order integration or differentiation.\n\nSYNOPSIS\n       sfhalfint < in.rsf > out.rsf adj=n inv=n rho=1.-1./n1\n\nCOMMENTS\n       December         2012        program        of        the        month:\n       http://ahay.org/blog/2012/12/23/program-of-the-month-sfhalfint/\n\nPARAMETERS\n       bool   adj =n [y/n]     If y, apply adjoint\n       bool   inv =n [y/n]     If y, do differentiation instead of integration\n       float  rho =1.-1./n1      Leaky integration constant\nUSED IN\n       bei/ft1/hankel\n       bei/trimo/mig\n       bei/trimo/mod\nSOURCE\n       system/seismic/Mhalfint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhalfint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhalfthr-Tuple{}","page":"Home","title":"Madagascar.sfhalfthr","text":"sfhalfthr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhalfthr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhalfthr. See ?m8r for examples.\n\nRSF Documentation\n\nsfhalfthr(1)                  Madagascar Manuals                  sfhalfthr(1)\n\nNAME\n       sfhalfthr  -  Half thresholding using exact-value or percentile thresh‐\n       olding.\n\nSYNOPSIS\n       sfhalfthr < in.rsf > out.rsf other=other.rsf ifverb=0 ifperc=1 thr=\n\nPARAMETERS\n       int    ifperc  =1       0,  exact-value  thresholding;  1,   percentile\n              thresholding.\n       int    ifverb  =0      0, not print threshold value; 1, print threshold\n              value.\n       string other =      auxiliary output file name\n       float  thr =      thresholding level\nSOURCE\n       user/chenyk/Mhalfthr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhalfthr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhandvel2rsf-Tuple{}","page":"Home","title":"Madagascar.sfhandvel2rsf","text":"sfhandvel2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhandvel2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhandvel2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfhandvel2rsf(1)              Madagascar Manuals              sfhandvel2rsf(1)\n\nNAME\n       sfhandvel2rsf - Converts 2D/3D velocity files from handvel.txt to hand‐\n       vel.rsf\n\nSYNOPSIS\n       sfhandvel2rsf n1= o1= d1=\n\nCOMMENTS\n       - sfhandvel2rsf < handvels.txt o1=0 d1=.001 n1=3000 > handvel.rsf\n\n       - The program converts time samples from ms to s\n\n       - The rsf output file will have traces equal to the number of CMP loca‐\n       tions  in  handvel.txt.  You  need  to interploate between traces for a\n       denser grid e.g. using sfremap1\n\n       - This program uses sfspline for interpolation.\n\nPARAMETERS\n       float  d1 =      sampling in the first axis\n       int    n1 =      size of the first axis\n       float  o1 =      origin of the first axis\nSOURCE\n       user/salah/Mhandvel2rsf.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfhandvel2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhcascade-Tuple{}","page":"Home","title":"Madagascar.sfhcascade","text":"sfhcascade(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhcascade on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhcascade. See ?m8r for examples.\n\nRSF Documentation\n\nsfhcascade(1)                 Madagascar Manuals                 sfhcascade(1)\n\nNAME\n       sfhcascade - Multidimensional convolution cascade.\n\nSYNOPSIS\n       sfhcascade < in.rsf filt=filt.rsf > out.rsf n= rect=0 lag=\n\nPARAMETERS\n       file   filt =      auxiliary input file name\n       string lag =      file with filter lags\n       ints   n =       [dim]\n       int    rect =0      smoothing radius\nSOURCE\n       user/gee/Mhcascade.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfhcascade(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhconv-Tuple{}","page":"Home","title":"Madagascar.sfhconv","text":"sfhconv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhconv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhconv. See ?m8r for examples.\n\nRSF Documentation\n\nsfhconv(1)                    Madagascar Manuals                    sfhconv(1)\n\nNAME\n       sfhconv - Convolution of two helix filters.\n\nSYNOPSIS\n       sfhconv < inp.rsf other=oth.rsf > out.rsf one=y lag=\n\nPARAMETERS\n       string lag = ®\n       bool   one =y [y/n]     include leading one\n       file   other =      auxiliary input file name\nSOURCE\n       user/gee/Mhconv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhconv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhdecon-Tuple{}","page":"Home","title":"Madagascar.sfhdecon","text":"sfhdecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhdecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhdecon. See ?m8r for examples.\n\nRSF Documentation\n\nsfhdecon(1)                   Madagascar Manuals                   sfhdecon(1)\n\nNAME\n       sfhdecon - Random noise removal by deconvolution on a helix\n\nSYNOPSIS\n       sfhdecon  <  inp.rsf  >  out.rsf  filt=fil.rsf  weight=wht.rsf eps=1.0f\n       niter=10 lag=\n\nPARAMETERS\n       float  eps =1.0f      regularization parameter\n       file   filt =      auxiliary input file name\n       string lag = ®\n       int    niter =10      number of iterations\n       string weight =      auxiliary input file name\nSOURCE\n       user/gee/Mhdecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfhdecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhdefd-Tuple{}","page":"Home","title":"Madagascar.sfhdefd","text":"sfhdefd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhdefd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhdefd. See ?m8r for examples.\n\nRSF Documentation\n\nsfhdefd(1)                    Madagascar Manuals                    sfhdefd(1)\n\nNAME\n       sfhdefd - Heat diffusion equation FD modeling\n\nSYNOPSIS\n       sfhdefd  < Fwav.rsf con=Fcon.rsf sou=Fsou.rsf rec=Frec.rsf wfl=Fwfl.rsf\n       >  Fdat.rsf  verb=n  snap=n  free=n   jdata=1   jsnap=nt   nqz=sf_n(az)\n       nqx=sf_n(ax) oqz=sf_o(az) oqx=sf_o(ax)\n\nPARAMETERS\n       file   con =      auxiliary input file name\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1      # of t steps at which to save receiver data\n       int    jsnap =nt      # of t steps at which to save wavefield\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mhdefd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhdefd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheaderattr-Tuple{}","page":"Home","title":"Madagascar.sfheaderattr","text":"sfheaderattr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheaderattr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheaderattr. See ?m8r for examples.\n\nRSF Documentation\n\nsfheaderattr(1)               Madagascar Manuals               sfheaderattr(1)\n\nNAME\n       sfheaderattr - Display header attributes.\n\nSYNOPSIS\n       sfheaderattr < head.rsf segy=y desc=n\n\nCOMMENTS\n       Only nonzero values are reported.\n\nPARAMETERS\n       bool   desc =n [y/n]     if describe keys\n       bool   segy =y [y/n]     if SEGY headers\nUSED IN\n       data/boem-g3d1206-002a/displayin\n       data/bpmodel94/firstlook\nSOURCE\n       system/seismic/Mheaderattr.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfheaderattr\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfheaderattr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheadercut-Tuple{}","page":"Home","title":"Madagascar.sfheadercut","text":"sfheadercut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheadercut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheadercut. See ?m8r for examples.\n\nRSF Documentation\n\nsfheadercut(1)                Madagascar Manuals                sfheadercut(1)\n\nNAME\n       sfheadercut - Zero a portion of a dataset based on a header mask.\n\nSYNOPSIS\n       sfheadercut mask=head.rsf < in.rsf > out.rsf\n\nCOMMENTS\n       The  input data is a collection of traces n1xn2, mask is an integer ar‐\n       ray of size n2.\n\nPARAMETERS\n       file   mask =      auxiliary input file name\nSOURCE\n       system/main/headercut.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfheadercut\nVERSION\n       4.2-git headerwindow.c 1303 2005-08-17 02:08:33Z fomels\n\nMadagascar                         JULY 2024                    sfheadercut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheadermath-Tuple{}","page":"Home","title":"Madagascar.sfheadermath","text":"sfheadermath(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheadermath on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheadermath. See ?m8r for examples.\n\nRSF Documentation\n\nsfheadermath(1)               Madagascar Manuals               sfheadermath(1)\n\nNAME\n       sfheadermath - Mathematical operations, possibly on header keys.\n\nSYNOPSIS\n       sfheadermath  <  in.rsf  >  out.rsf segy=y nkey=-1 memsize=sf_memsize()\n       key= output=\n\nCOMMENTS\n       Known functions for float data: cos,  sin,  tan,  acos,   asin,   atan,\n       cosh,  sinh,  tanh,  acosh,  asinh,  atanh, exp,  log,  sqrt, abs, erf,\n       erfc, sign\n\n       Known functions for int data: sign, abs\n\n       See also sfmath.\n\n       An addition operation can be performed by sfadd.\n\nPARAMETERS\n       string key =      key to replace\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\n       int    nkey =-1      number of key to replace\n       string output =      Describes the output in a mathematical notation.\n       bool   segy =y [y/n]     if SEGY headers\nSOURCE\n       system/seismic/Mheadermath.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfheadermath\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfheadermath(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheadersort-Tuple{}","page":"Home","title":"Madagascar.sfheadersort","text":"sfheadersort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheadersort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheadersort. See ?m8r for examples.\n\nRSF Documentation\n\nsfheadersort(1)               Madagascar Manuals               sfheadersort(1)\n\nNAME\n       sfheadersort - Sort a dataset according to a header key.\n\nSYNOPSIS\n       sfheadersort < in.rsf > out.rsf head=\n\nPARAMETERS\n       string head =      header file\nUSED IN\n       bei/ft1/autocor\nSOURCE\n       system/main/headersort.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfheadersort\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfheadersort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheaderwindow-Tuple{}","page":"Home","title":"Madagascar.sfheaderwindow","text":"sfheaderwindow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheaderwindow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheaderwindow. See ?m8r for examples.\n\nRSF Documentation\n\nsfheaderwindow(1)             Madagascar Manuals             sfheaderwindow(1)\n\nNAME\n       sfheaderwindow - Window a dataset based on a header mask.\n\nSYNOPSIS\n       sfheaderwindow mask=head.rsf < in.rsf > out.rsf inv=n\n\nCOMMENTS\n       The  input data is a collection of traces n1xn2, mask is an integer ar‐\n       ray os size n2, windowed is n1xm2, where m2 is the  number  of  nonzero\n       elements in mask.\n\nPARAMETERS\n       bool   inv =n [y/n]     inversion flag\n       file   mask =      auxiliary input file name\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       data/alaska/line31-81-m8r\nSOURCE\n       system/main/headerwindow.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfheaderwindow\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfheaderwindow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheal-Tuple{}","page":"Home","title":"Madagascar.sfheal","text":"sfheal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheal. See ?m8r for examples.\n\nRSF Documentation\n\nsfheal(1)                     Madagascar Manuals                     sfheal(1)\n\nNAME\n       sfheal - Heal empty traces ddd\n\nSYNOPSIS\n       sfheal < inFile.rsf > outFile.rsf\n\nCOMMENTS\n       Interpolation between two neighbours; An empty trace should be horizon‐\n       tal => transpose input before and after\n\nSOURCE\n       user/aklokov/Mheal.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfheal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheat-Tuple{}","page":"Home","title":"Madagascar.sfheat","text":"sfheat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheat. See ?m8r for examples.\n\nRSF Documentation\n\nsfheat(1)                     Madagascar Manuals                     sfheat(1)\n\nNAME\n       sfheat - Finite-difference solution of 2-D heat-flow equation\n\nSYNOPSIS\n       sfheat > out.rsf impl=n alpha=1.\n\nPARAMETERS\n       float  alpha =1.  ®\n       bool   impl =n [y/n]     if y, use implicit scheme\nSOURCE\n       system/generic/Mheat.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfheat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheat3-Tuple{}","page":"Home","title":"Madagascar.sfheat3","text":"sfheat3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheat3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheat3. See ?m8r for examples.\n\nRSF Documentation\n\nsfheat3(1)                    Madagascar Manuals                    sfheat3(1)\n\nNAME\n       sfheat3 - Finite-difference 3-D heat-flow equation using helix\n\nSYNOPSIS\n       sfheat3 > out.rsf n3=10 nh=5\n\nPARAMETERS\n       int    n3 =10 ®\n       int    nh =5 ®\nSOURCE\n       user/gee/Mheat3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfheat3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheatexplitest-Tuple{}","page":"Home","title":"Madagascar.sfheatexplitest","text":"sfheatexplitest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheatexplitest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheatexplitest. See ?m8r for examples.\n\nRSF Documentation\n\nsfheatexplitest(1)            Madagascar Manuals            sfheatexplitest(1)\n\nNAME\n       sfheatexplitest  - Solving 1-D heat equation using explicit finite dif‐\n       ference\n\nSYNOPSIS\n       sfheatexplitest > out.rsf nt= dt= nx= dx=\n\nCOMMENTS\n       artial(u)/artial(t)=a^2artial^2(u)/artial(x^2),\n       0<x<l & t>0, u(0,t)=u(l,t)=0, t>0, u(x,0)=f(x), 0<=x<=l.\n\nPARAMETERS\n       float  dt =      temporal sampling\n       float  dx =      spatial sampling\n       int    nt =      number of temporal points\n       int    nx =      number of spatial points\nSOURCE\n       user/chenyk/Mheatexplitest.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfheatexplitest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheatgmres1-Tuple{}","page":"Home","title":"Madagascar.sfheatgmres1","text":"sfheatgmres1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheatgmres1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheatgmres1. See ?m8r for examples.\n\nRSF Documentation\n\nsfheatgmres1(1)               Madagascar Manuals               sfheatgmres1(1)\n\nNAME\n       sfheatgmres1 - Solution of 1-D heat equation with GMRES.\n\nSYNOPSIS\n       sfheatgmres1 < tinitial.rsf > solution.rsf alpha= dt= nt= Ta=0 Tb=0\n\nPARAMETERS\n       float  Ta =0      Boundary condition on the left\n       float  Tb =0      Boundary condition on the right\n       float  alpha =      Conductivity\n       float  dt =      Time step\n       int    nt =      Number of time steps\nSOURCE\n       user/petsc/Mheatgmres1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfheatgmres1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfheatimplitest-Tuple{}","page":"Home","title":"Madagascar.sfheatimplitest","text":"sfheatimplitest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfheatimplitest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfheatimplitest. See ?m8r for examples.\n\nRSF Documentation\n\nsfheatimplitest(1)            Madagascar Manuals            sfheatimplitest(1)\n\nNAME\n       sfheatimplitest  - Solving 1-D heat equation using implicit finite dif‐\n       ference\n\nSYNOPSIS\n       sfheatimplitest > out.rsf nt= dt= nx= dx=\n\nCOMMENTS\n       artial(u)/artial(t)=a^2artial^2(u)/artial(x^2),\n       0<x<l & t>0, u(0,t)=u(l,t)=0, t>0, u(x,0)=f(x), 0<=x<=l.\n\nPARAMETERS\n       float  dt =      temporal sampling\n       float  dx =      spatial sampling\n       int    nt =      number of temporal points\n       int    nx =      number of spatial points\nSOURCE\n       user/chenyk/Mheatimplitest.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfheatimplitest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelicon-Tuple{}","page":"Home","title":"Madagascar.sfhelicon","text":"sfhelicon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelicon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelicon. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelicon(1)                  Madagascar Manuals                  sfhelicon(1)\n\nNAME\n       sfhelicon  -  Multidimensional  convolution  and deconvolution by helix\n       transform.\n\nSYNOPSIS\n       sfhelicon < in.rsf filt=filt.rsf > out.rsf n= adj=n div=n lag=\n\nCOMMENTS\n       May 2014 program of the month: http://ahay.org/blog/2014/05/13/program-\n       of-the-month-sfhelicon/\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint operation\n       bool   div =n [y/n]     if y, do inverse operation (deconvolution)\n       file   filt =      auxiliary input file name\n       string lag =      file with filter lags\n       ints   n =       [dim]\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\nSOURCE\n       user/gee/Mhelicon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhelicon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelloworld-Tuple{}","page":"Home","title":"Madagascar.sfhelloworld","text":"sfhelloworld(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelloworld on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelloworld. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelloworld(1)               Madagascar Manuals               sfhelloworld(1)\n\nNAME\n       sfhelloworld - None\n\nSYNOPSIS\n       sfhelloworld\n\nSOURCE\n       user/zdzhang/Mhelloworld.f90\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfhelloworld(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_bornsyn-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_bornsyn","text":"sfhelm2D_bornsyn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_bornsyn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_bornsyn. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dbornsyn(1)           Madagascar Manuals           sfhelm2Dbornsyn(1)\n\nNAME\n       sfhelm2D_bornsyn - 2D Born synthetic based on Helmholtz forward solver.\n\nSYNOPSIS\n       sfhelm2D_bornsyn < in.rsf > out.rsf source=source.rsf refl=reflfile.rsf\n       uts=0 hermite=n npml=20 order=\n\nPARAMETERS\n       bool   hermite =n [y/n]     Hermite operator\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string refl =      auxiliary input file name\n       string source =      auxiliary input file name\n       int    uts =0 ®\nSOURCE\n       user/hzhu/Mhelm2D_bornsyn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfhelm2D_bornsyn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_forward-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_forward","text":"sfhelm2D_forward(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_forward on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_forward. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dforward(1)           Madagascar Manuals           sfhelm2Dforward(1)\n\nNAME\n       sfhelm2D_forward - 2D Helmholtz forward solver by LU factorization.\n\nSYNOPSIS\n       sfhelm2D_forward  <  in.rsf > out.rsf source=source.rsf uts=0 hermite=n\n       npml=20 order=\n\nPARAMETERS\n       bool   hermite =n [y/n]     Hermite operator\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string source =      auxiliary input file name\n       int    uts =0 ®\nSOURCE\n       user/hzhu/Mhelm2D_forward.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfhelm2D_forward(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_fwi-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_fwi","text":"sfhelm2D_fwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_fwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_fwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dfwi(1)               Madagascar Manuals               sfhelm2Dfwi(1)\n\nNAME\n       sfhelm2D_fwi - 2D Frequency Domain Full Waveform Inversion.\n\nSYNOPSIS\n       sfhelm2D_fwi < in.rsf > out.rsf receiver=receiver.rsf source=source.rsf\n       record=record.rsf dip=dip.rsf niter=0 uts=0 npml=20  precond=n  radius=\n       order=\n\nPARAMETERS\n       string dip =      auxiliary input file name\n       int    niter =0 ®\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       bool   precond =n [y/n]\n       int    radius = ®\n       string receiver =      auxiliary input file name\n       string record =      auxiliary input file name\n       string source =      auxiliary input file name\n       int    uts =0 ®\nSOURCE\n       user/hzhu/Mhelm2D_fwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfhelm2D_fwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_genrec-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_genrec","text":"sfhelm2D_genrec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_genrec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_genrec. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dgenrec(1)            Madagascar Manuals            sfhelm2Dgenrec(1)\n\nNAME\n       sfhelm2D_genrec - Generate receiver file for Helmholtz solver.\n\nSYNOPSIS\n       sfhelm2D_genrec > out.rsf n1=1 n2=1 d1=0.1 d2=0.1 recz= recx0= recdx=\n\nPARAMETERS\n       float  d1 =0.1 ®\n       float  d2 =0.1 ®\n       int    n1 =1 ®\n       int    n2 =1 ®\n       int    recdx = ®\n       int    recx0 = ®\n       int    recz = ®\nSOURCE\n       user/hzhu/Mhelm2D_genrec.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfhelm2D_genrec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_genshot-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_genshot","text":"sfhelm2D_genshot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_genshot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_genshot. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dgenshot(1)           Madagascar Manuals           sfhelm2Dgenshot(1)\n\nNAME\n       sfhelm2D_genshot - Generate shot file for Helmholtz solver.\n\nSYNOPSIS\n       sfhelm2D_genshot  >  out.rsf fmag=fmag.rsf n1=1 n2=1 ns=1 d1=0.1 d2=0.1\n       nw=1 dw=1.0 ow=1.0 nsource=1 dsource=0 srcz= srcx0= srcdx= mag=1.0\n\nPARAMETERS\n       float  d1 =0.1 ®\n       float  d2 =0.1 ®\n       int    dsource =0 ®\n       float  dw =1.0 ®\n       string fmag =      auxiliary input file name\n       float  mag =1.0 ®\n       int    n1 =1 ®\n       int    n2 =1 ®\n       int    ns =1 ®\n       int    nsource =1 ®\n       int    nw =1 ®\n       float  ow =1.0 ®\n       int    srcdx = ®\n       int    srcx0 = ®\n       int    srcz = ®\nSOURCE\n       user/hzhu/Mhelm2D_genshot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfhelm2D_genshot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_lsm-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_lsm","text":"sfhelm2D_lsm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_lsm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_lsm. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Dlsm(1)               Madagascar Manuals               sfhelm2Dlsm(1)\n\nNAME\n       sfhelm2D_lsm  -  2D  Frequency Domain Least Squares Reverse Time Migra‐\n       tion.\n\nSYNOPSIS\n       sfhelm2D_lsm < in.rsf > out.rsf misfit=misfit.rsf receiver=receiver.rsf\n       source=source.rsf record=record.rsf uts=0 npml=20 niter=0 order=\n\nPARAMETERS\n       file   misfit =      auxiliary output file name\n       int    niter =0      Number of iterations\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string receiver =      auxiliary input file name\n       string record =      auxiliary input file name\n       string source =      auxiliary input file name\n       int    uts =0 ®\nSOURCE\n       user/hzhu/Mhelm2D_lsm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfhelm2D_lsm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelm2D_rtm-Tuple{}","page":"Home","title":"Madagascar.sfhelm2D_rtm","text":"sfhelm2D_rtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelm2D_rtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelm2D_rtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelm2Drtm(1)               Madagascar Manuals               sfhelm2Drtm(1)\n\nNAME\n       sfhelm2D_rtm - 2D Frequency Domain Reverse Time Migration.\n\nSYNOPSIS\n       sfhelm2D_rtm < in.rsf > out.rsf receiver=receiver.rsf source=source.rsf\n       record=record.rsf nh=0 uts=0 npml=20 order=\n\nPARAMETERS\n       int    nh =0 ®\n       int    npml =20      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string receiver =      auxiliary input file name\n       string record =      auxiliary input file name\n       string source =      auxiliary input file name\n       int    uts =0 ®\nSOURCE\n       user/hzhu/Mhelm2D_rtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfhelm2D_rtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelmlu-Tuple{}","page":"Home","title":"Madagascar.sfhelmlu","text":"sfhelmlu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelmlu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelmlu. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelmlu(1)                   Madagascar Manuals                   sfhelmlu(1)\n\nNAME\n       sfhelmlu - 2D Helmholtz solver by LU factorization.\n\nSYNOPSIS\n       sfhelmlu  <  in.rsf  >  out.rsf  source=source.rsf verb=n save=n load=n\n       uts=0 hermite=n npml=10 order=\n\nPARAMETERS\n       bool   hermite =n [y/n]     Hermite operator\n       bool   load =n [y/n]     load LU\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       bool   save =n [y/n]     save LU\n       string source =      auxiliary input file name\n       int    uts =0      number of OMP threads\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/sparse/Mhelmlu.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfhelmlu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelmmig-Tuple{}","page":"Home","title":"Madagascar.sfhelmmig","text":"sfhelmmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelmmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelmmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelmmig(1)                  Madagascar Manuals                  sfhelmmig(1)\n\nNAME\n       sfhelmmig - 2D frequency-domain migration with space-lag imaging condi‐\n       tion.\n\nSYNOPSIS\n       sfhelmmig < in.rsf > out.rsf source=source.rsf data=data.rsf  us=us.rsf\n       ur=ur.rsf timg=timg.rsf verb=n save=n load=n uts=0 nh=0 npml=10 order=\n\nPARAMETERS\n       string data =      auxiliary input file name\n       bool   load =n [y/n]     load LU\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       bool   save =n [y/n]     save LU\n       string source =      auxiliary input file name\n       string timg =      auxiliary output file name\n       string ur =      auxiliary output file name\n       string us =      auxiliary output file name\n       int    uts =0      number of OMP threads\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/sparse/Mhelmmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhelmmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhelmrhs-Tuple{}","page":"Home","title":"Madagascar.sfhelmrhs","text":"sfhelmrhs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhelmrhs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhelmrhs. See ?m8r for examples.\n\nRSF Documentation\n\nsfhelmrhs(1)                  Madagascar Manuals                  sfhelmrhs(1)\n\nNAME\n       sfhelmrhs - Reconstruct right-hand side from wavefield.\n\nSYNOPSIS\n       sfhelmrhs < in.rsf > out.rsf model=modl.rsf uts=0 order=\n\nPARAMETERS\n       string model =      auxiliary input file name\n       string order =      discretization scheme (default optimal 9-point)\n       int    uts =0      number of OMP threads\nSOURCE\n       user/sparse/Mhelmrhs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhelmrhs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhic2ang-Tuple{}","page":"Home","title":"Madagascar.sfhic2ang","text":"sfhic2ang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhic2ang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhic2ang. See ?m8r for examples.\n\nRSF Documentation\n\nsfhic2ang(1)                  Madagascar Manuals                  sfhic2ang(1)\n\nNAME\n       sfhic2ang - angle decomposition of CIPs\n\nSYNOPSIS\n       sfhic2ang  < Fcip.rsf > Fang.rsf vel=Fvel.rsf nor=Fnor.rsf tlt=Ftlt.rsf\n       ani=Fani.rsf verb=n anis=n adj=y nth=90 oth=0 dth=1.  nph=360  oph=-180\n       dph=1.  nhx=1  ohx=0  dhx=1.  nhy=1  ohy=0  dhy=1.  nht=1 oht=0. dht=1.\n       nps=251 ops=-25 dps=0.2\n\nPARAMETERS\n       bool   adj =y [y/n]     adj flag\n       file   ani =      auxiliary input file name\n       bool   anis =n [y/n]     anisotropy flag\n       float  dht =1.  ®\n       float  dhx =1.  ®\n       float  dhy =1.  ®\n       float  dph =1.  ®\n       float  dps =0.2 ®\n       float  dth =1.  ®\n       int    nht =1 ®\n       int    nhx =1 ®\n       int    nhy =1 ®\n       file   nor =      auxiliary input file name\n       int    nph =360 ®\n       int    nps =251 ®\n       int    nth =90 ®\n       float  oht =0.  ®\n       float  ohx =0 ®\n       float  ohy =0 ®\n       float  oph =-180 ®\n       float  ops =-25 ®\n       float  oth =0 ®\n       file   tlt =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\nSOURCE\n       user/psava/Mhic2ang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhic2ang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhilbert-Tuple{}","page":"Home","title":"Madagascar.sfhilbert","text":"sfhilbert(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhilbert on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhilbert. See ?m8r for examples.\n\nRSF Documentation\n\nsfhilbert(1)                  Madagascar Manuals                  sfhilbert(1)\n\nNAME\n       sfhilbert - Compute hilbert transform using different methods.\n\nSYNOPSIS\n       sfhilbert < in.rsf > out.rsf order=100 ref=1. phase=90. type=\n\nCOMMENTS\n       type=t  -> time domain convolution type=f -> frequency domain multipli‐\n       cation and use FFT type=m -> closed-form design of maximally  flat  FIR\n       hilbert transformer\n\nPARAMETERS\n       int    order =100      Hilbert transformer order if type=m\n       float  phase =90.       phase shift (in degrees)\n       float  ref  =1.       Hilbert transformer reference (0.5 < ref <= 1) if\n              type=m\n       string type =      Choosing hilbert transform method, type=t means time\n              domain,\n                     type=f means freqency domain, type=m means using more ro‐\n              bust algorithm\n                     the default is type=m\nSOURCE\n       user/chenyk/Mhilbert.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhilbert(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhist2-Tuple{}","page":"Home","title":"Madagascar.sfhist2","text":"sfhist2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhist2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhist2. See ?m8r for examples.\n\nRSF Documentation\n\nsfhist2(1)                    Madagascar Manuals                    sfhist2(1)\n\nNAME\n       sfhist2  -  Compute  a  2-D histogram of integer- or float-valued input\n       data\n\nSYNOPSIS\n       sfhist2 < in.rsf inp2=inp2.rsf > out.rsf n1= o1= d1= n2= o2= d2=\n\nCOMMENTS\n       The output grid is not centered on  the  bins;  it  marks  their  \"left\n       edge\".   I.e.,  the  first sample holds the number of values between o1\n       and o1+d1\n\nPARAMETERS\n       float  d1 =      histogram sampling for dimension 1\n       float  d2 =      histogram sampling for dimension 2\n       file   inp2 =      auxiliary input file name\n       int    n1 =      number of histogram samples in dimension 1\n       int    n2 =      number of histogram samples in dimension 2\n       float  o1 =      histogram origin for dimension 1\n       float  o2 =      histogram origin for dimension 2\nSOURCE\n       user/ivlad/Mhist2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhist2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhistogram-Tuple{}","page":"Home","title":"Madagascar.sfhistogram","text":"sfhistogram(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhistogram on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhistogram. See ?m8r for examples.\n\nRSF Documentation\n\nsfhistogram(1)                Madagascar Manuals                sfhistogram(1)\n\nNAME\n       sfhistogram  -  Compute  a  histogram of integer- or float-valued input\n       data.\n\nSYNOPSIS\n       sfhistogram < in.rsf > out.rsf n1= o1= d1=\n\nCOMMENTS\n       The output grid is not centered on  the  bins;  it  marks  their  \"left\n       edge\".   I.e.,  the  first sample holds the number of values between o1\n       and o1+d1.\n\n       February        2015        program        of        the         month:\n       http://ahay.org/blog/2015/03/01/program-of-the-month-sfhistogram/\n\nPARAMETERS\n       float  d1 =      histogram sampling\n       int    n1 =      number of histogram samples\n       float  o1 =      histogram origin\nSOURCE\n       system/generic/Mhistogram.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfhistogram(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhole-Tuple{}","page":"Home","title":"Madagascar.sfhole","text":"sfhole(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhole on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhole. See ?m8r for examples.\n\nRSF Documentation\n\nsfhole(1)                     Madagascar Manuals                     sfhole(1)\n\nNAME\n       sfhole - Cut an elliptic hole in data (for interpolation tests).\n\nSYNOPSIS\n       sfhole < in.rsf > out.rsf maskout=mask.rsf\n\nPARAMETERS\n       file   maskout =      auxiliary output file name\nSOURCE\n       user/gee/Mhole.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfhole(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhorizon-Tuple{}","page":"Home","title":"Madagascar.sfhorizon","text":"sfhorizon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhorizon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhorizon. See ?m8r for examples.\n\nRSF Documentation\n\nsfhorizon(1)                  Madagascar Manuals                  sfhorizon(1)\n\nNAME\n       sfhorizon - horizon extraction\n\nSYNOPSIS\n       sfhorizon < in.rsf horizon=hor.rsf > out.rsf interp=\n\nPARAMETERS\n       file   horizon =      auxiliary input file name\n       string interp =      < interpolation method: nearest, linear >\nSOURCE\n       user/chen/Mhorizon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfhorizon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhorwrite-Tuple{}","page":"Home","title":"Madagascar.sfhorwrite","text":"sfhorwrite(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhorwrite on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhorwrite. See ?m8r for examples.\n\nRSF Documentation\n\nsfhorwrite(1)                 Madagascar Manuals                 sfhorwrite(1)\n\nNAME\n       sfhorwrite  -  save  rsf  data  into  horizon  ASCII  format,  eq to dd\n       form=ascii\n\nSYNOPSIS\n       sfhorwrite < in.rsf head= tail= fromat=\n\nPARAMETERS\n       string fromat =      format\n       string head =      header\n       string tail =      tail\nSOURCE\n       user/chen/Mhorwrite.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfhorwrite(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhpef-Tuple{}","page":"Home","title":"Madagascar.sfhpef","text":"sfhpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhpef. See ?m8r for examples.\n\nRSF Documentation\n\nsfhpef(1)                     Madagascar Manuals                     sfhpef(1)\n\nNAME\n       sfhpef  - Multi-dimensional PEF (prediction error filter) estimation on\n       a helix.\n\nSYNOPSIS\n       sfhpef < in.rsf > filt.rsf maskin=mask.rsf  a=  center=  gap=  n=  na=0\n       tol=1.e-6 niter=2*(aa->nh) lag= maskout=\n\nPARAMETERS\n       ints   a =       [dim]\n       ints   center =       [dim]\n       ints   gap =       [dim]\n       string lag =      output file for filter lags\n       string maskin  =       optional  input  mask file (auxiliary input file\n              name)\n       string maskout =      optional output mask file\n       ints   n =       [dim]\n       int    na =0      filter size\n       int    niter =2*(aa->nh)      number of iterations\n       float  tol =1.e-6      tolerance for filter compression\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\nSOURCE\n       user/gee/Mhpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfhpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhradon-Tuple{}","page":"Home","title":"Madagascar.sfhradon","text":"sfhradon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhradon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhradon. See ?m8r for examples.\n\nRSF Documentation\n\nsfhradon(1)                   Madagascar Manuals                   sfhradon(1)\n\nNAME\n       sfhradon - Time domain high-resolution hyperbolic Radon transform.\n\nSYNOPSIS\n       sfhradon  <  in.rsf > out.rsf vel=vel.rsf offset=offset.rsf inv=y adj=n\n       solver=n v0= dv= nv= N1=10 N2=3 verb=0 h0= dh= nh=\n\nCOMMENTS\n       m(tau,p) = _{ih=1}^{nh} d(tau=t{tau^2+h[ih]^2/p^2),h} inv=true  do  in‐\n       verse adj=true do adjoint inv=false && adj=false do forward\n\nPARAMETERS\n       int    N1 =10      CG Iterations (Internal loop)\n       int    N2  =3      Update of weights for the sparse solution, N1 = 1 LS\n              , N2 > 3 for High Res (Sparse) solution\n       bool   adj =n [y/n]     if implement the adjoint transform  instead  of\n              the inverse transform\n       float  dh = ®\n       float  dv = ®\n       float  h0 = ®\n       bool   inv =y [y/n]     if implement the inverse transform\n       int    nh = ®\n       int    nv = ®\n       string offset =      auxiliary input file name\n       bool   solver =n [y/n]     if use Madagascar bigsolver, default is not\n       float  v0 = ®\n       string vel =      auxiliary input file name\n       int    verb =0      If output the debugging process\nSOURCE\n       user/chenyk/Mhradon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfhradon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhshape-Tuple{}","page":"Home","title":"Madagascar.sfhshape","text":"sfhshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfhshape(1)                   Madagascar Manuals                   sfhshape(1)\n\nNAME\n       sfhshape - Helical autoregressive shaping\n\nSYNOPSIS\n       sfhshape < inp.rsf > out.rsf filt=fil.rsf eps=1.0f rect=1 lag=\n\nPARAMETERS\n       float  eps =1.0f      regularization parameter\n       file   filt =      auxiliary input file name\n       string lag = ®\n       int    rect =1      shaping radius\nSOURCE\n       user/gee/Mhshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfhshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhv2d-Tuple{}","page":"Home","title":"Madagascar.sfhv2d","text":"sfhv2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhv2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhv2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfhv2d(1)                     Madagascar Manuals                     sfhv2d(1)\n\nNAME\n       sfhv2d - Velocity with heterogeneity convert to dip.\n\nSYNOPSIS\n       sfhv2d  <  in.rsf > out.rsf heterog=heterog.rsf n=32 d=12.5 o=0. mute=n\n       half=n tp=0.150 t0=0. v0=10000 x0=0. abs=y inner=n hyper=n\n\nPARAMETERS\n       bool   abs =y [y/n]     if y, use absolute value |x-x0| (available when\n              mute=y)\n       float  d =12.5      offset interval\n       bool   half =n [y/n]     if y, half-offset instead of full offset\n       file   heterog =      auxiliary input file name\n       bool   hyper  =n  [y/n]     if  y,  do  hyperbolic mute (available when\n              mute=y)\n       bool   inner =n [y/n]     if y, do inner muter (available when mute=y)\n       bool   mute =n [y/n]     if y, use mutter\n       int    n =32      offset number\n       float  o =0.       offset origin\n       float  t0 =0.       starting time (available when mute=y)\n       float  tp =0.150      end time (available when mute=y)\n       float  v0 =10000      velocity (available when mute=y)\n       float  x0 =0.       starting space (available when mute=y)\nSOURCE\n       user/yliu/Mhv2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfhv2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhwt2d-Tuple{}","page":"Home","title":"Madagascar.sfhwt2d","text":"sfhwt2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhwt2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhwt2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfhwt2d(1)                    Madagascar Manuals                    sfhwt2d(1)\n\nNAME\n       sfhwt2d - 2-D Huygens wavefront tracing traveltimes\n\nSYNOPSIS\n       sfhwt2d  <  Fv.rsf > Fw.rsf verb=n rays=n xsou=sf_o(ax) + nx*sf_d(ax)/2\n       zsou=sf_o(az) + nz*sf_d(az)/2 nt=100 ot=0 dt=0.001 ng=360 og=-180 dg=1\n\nPARAMETERS\n       float  dg =1 ®\n       float  dt =0.001 ®\n       int    ng =360 ®\n       int    nt =100 ®\n       float  og =-180 ®\n       float  ot =0 ®\n       bool   rays =n [y/n]     velocity file\n       bool   verb =n [y/n]\n       float  xsou =sf_o(ax) + nx*sf_d(ax)/2 ®\n       float  zsou =sf_o(az) + nz*sf_d(az)/2 ®\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\nSOURCE\n       system/seismic/Mhwt2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhwt2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhwt3d-Tuple{}","page":"Home","title":"Madagascar.sfhwt3d","text":"sfhwt3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhwt3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhwt3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfhwt3d(1)                    Madagascar Manuals                    sfhwt3d(1)\n\nNAME\n       sfhwt3d -\n\nSYNOPSIS\n       sfhwt3d < Fv.rsf > Fw.rsf verb=n forceray=n scaleray=1. xsou=sf_o(ax) +\n       sf_n(ax)*sf_d(ax)/2 ysou=sf_o(ay) + sf_n(ay)*sf_d(ay)/2 zsou=sf_o(az) +\n       sf_n(az)*sf_d(az)/2  nt=100  ot=0  dt=0.001  ng=360 og=-180 dg=1 nh=360\n       oh=-180 dh=1\n\nCOMMENTS\n       * 3-D Huygens wavefront tracing traveltimes * pcs 2005\n\nPARAMETERS\n       float  dg =1 ®\n       float  dh =1 ®\n       float  dt =0.001 ®\n       bool   forceray =n [y/n]\n       int    ng =360 ®\n       int    nh =360 ®\n       int    nt =100 ®\n       float  og =-180 ®\n       float  oh =-180 ®\n       float  ot =0 ®\n       int    scaleray =1.       velocity file\n       bool   verb =n [y/n]\n       float  xsou =sf_o(ax) + sf_n(ax)*sf_d(ax)/2 ®\n       float  ysou =sf_o(ay) + sf_n(ay)*sf_d(ay)/2 ®\n       float  zsou =sf_o(az) + sf_n(az)*sf_d(az)/2 ®\nSOURCE\n       user/psava/Mhwt3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhwt3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhwtex-Tuple{}","page":"Home","title":"Madagascar.sfhwtex","text":"sfhwtex(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhwtex on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhwtex. See ?m8r for examples.\n\nRSF Documentation\n\nsfhwtex(1)                    Madagascar Manuals                    sfhwtex(1)\n\nNAME\n       sfhwtex - Huygens wavefront tracing traveltimes\n\nSYNOPSIS\n       sfhwtex < Fv.rsf sou=Fs.rsf > Fw.rsf verb=n wini=n nt=100 ot=0 dt=0.001\n\nPARAMETERS\n       float  dt =0.001 ®\n       int    nt =100 ®\n       float  ot =0 ®\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       bool   wini =n [y/n]     initialize two wavefronts\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/seismic/Mhwtex.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfhwtex(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfhyperdif-Tuple{}","page":"Home","title":"Madagascar.sfhyperdif","text":"sfhyperdif(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfhyperdif on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfhyperdif. See ?m8r for examples.\n\nRSF Documentation\n\nsfhyperdif(1)                 Madagascar Manuals                 sfhyperdif(1)\n\nNAME\n       sfhyperdif  -  Solving 1-D transportation equation using finite differ‐\n       ence algorithm\n\nSYNOPSIS\n       sfhyperdif > out.rsf dinit=dinit.rsf  dtrue=dtrue.rsf  wanttrue=n  wan‐\n       tinit=n nt= dt= ox= nx= dx= type=\n\nCOMMENTS\n       artial(u)/artial(t)+a(x,t)artial(u)/artial(x),\n       0<t<=T, x->unlimited, u(x,0)=f(x).\n\nPARAMETERS\n       file   dinit =      auxiliary output file name\n       float  dt =      temporal sampling\n       file   dtrue =      auxiliary output file name\n       float  dx =      spatial sampling\n       int    nt =      number of temporal points\n       int    nx =      number of spatial points\n       float  ox =      spatial starting point\n       string type =      [upwind, friedrichs,  wendroff]  get  the  type  for\n              solving  hyperbola partial differential equation, the default is\n              upwind\n       bool   wantinit =n [y/n]     if want initial value. y: want,  n:  don't\n              want.\n       bool   wanttrue  =n  [y/n]     if want true solution. y: want, n: don't\n              want.\nSOURCE\n       user/chenyk/Mhyperdif.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfhyperdif(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfic-Tuple{}","page":"Home","title":"Madagascar.sfic","text":"sfic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfic. See ?m8r for examples.\n\nRSF Documentation\n\nsfic(1)                       Madagascar Manuals                       sfic(1)\n\nNAME\n       sfic - Imaging condition\n\nSYNOPSIS\n       sfic  <  Fs.rsf  ur=Fr.rsf  > Fi.rsf ompchunk=1 verb=n nbuf=1 version=0\n       eps=1e-6\n\nPARAMETERS\n       float  eps =1e-6      epsilon\n       int    nbuf =1      buffer size\n       int    ompchunk =1      OpenMP data chunk size\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       int    version =0      I.C. version (see paper)\nUSED IN\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\nSOURCE\n       user/psava/Mic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sficor-Tuple{}","page":"Home","title":"Madagascar.sficor","text":"sficor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sficor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sficor. See ?m8r for examples.\n\nRSF Documentation\n\nsficor(1)                     Madagascar Manuals                     sficor(1)\n\nNAME\n       sficor  -  Interferometric  cross-correlation  of time series (zero-lag\n       output)\n\nSYNOPSIS\n       sficor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1\n\nPARAMETERS\n       int    nht =1 ®\n       int    nhx =0 ®\n       int    nhz =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Micor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sficor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfidempatch-Tuple{}","page":"Home","title":"Madagascar.sfidempatch","text":"sfidempatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfidempatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfidempatch. See ?m8r for examples.\n\nRSF Documentation\n\nsfidempatch(1)                Madagascar Manuals                sfidempatch(1)\n\nNAME\n       sfidempatch - Patching test.\n\nSYNOPSIS\n       sfidempatch  > out.rsf wind=wind.rsf n1=100 n2=30 w1=17 w2=6 k1=5 k2=11\n       a1=1 a2=1 lag1=1 lag2=1\n\nPARAMETERS\n       int    a1 =1 ®\n       int    a2 =1 ®\n       int    k1 =5 ®\n       int    k2 =11 ®\n       int    lag1 =1 ®\n       int    lag2 =1 ®\n       int    n1 =100 ®\n       int    n2 =30 ®\n       int    w1 =17 ®\n       int    w2 =6 ®\n       string wind =      optional output file for  window  weight  (auxiliary\n              output file name)\nSOURCE\n       user/gee/Midempatch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfidempatch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfigrad-Tuple{}","page":"Home","title":"Madagascar.sfigrad","text":"sfigrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfigrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfigrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfigrad(1)                    Madagascar Manuals                    sfigrad(1)\n\nNAME\n       sfigrad - Gradient on the first axis.\n\nSYNOPSIS\n       sfigrad < in.rsf > out.rsf square=n adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   square =n [y/n]     if y, use gradient squared\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/generic/Migrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfigrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimag-Tuple{}","page":"Home","title":"Madagascar.sfimag","text":"sfimag(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimag on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimag. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimage-Tuple{}","page":"Home","title":"Madagascar.sfimage","text":"sfimage(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimage on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimage. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimagsrc-Tuple{}","page":"Home","title":"Madagascar.sfimagsrc","text":"sfimagsrc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimagsrc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimagsrc. See ?m8r for examples.\n\nRSF Documentation\n\nsfimagsrc(1)                  Madagascar Manuals                  sfimagsrc(1)\n\nNAME\n       sfimagsrc - Convolution with a Ricker wavelet.\n\nSYNOPSIS\n       sfimagsrc < in.rsf > out.rsf frequency= freq=0.2\n\nPARAMETERS\n       float  freq =0.2      peak frequency for Ricker wavelet (as fraction of\n              Nyquist)\n       float  frequency =      peak frequency for Ricker wavelet (in Hz)\nSOURCE\n       user/jsun/Mimagsrc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfimagsrc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimospray-Tuple{}","page":"Home","title":"Madagascar.sfimospray","text":"sfimospray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimospray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimospray. See ?m8r for examples.\n\nRSF Documentation\n\nsfimospray(1)                 Madagascar Manuals                 sfimospray(1)\n\nNAME\n       sfimospray  -  Inversion  of constant-velocity nearest-neighbor inverse\n       NMO.\n\nSYNOPSIS\n       sfimospray < in.rsf > out.rsf adj=n n2=20 d2=200. o2=0. v=1000.\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  d2 =200.       offset sampling (if inv=n)\n       int    n2 =20      number of offsets (if inv=n)\n       float  o2 =0.       offset origin (if inv=n)\n       float  v =1000.       velocity\nUSED IN\n       bei/vela/stack\nSOURCE\n       user/gee/Mimospray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfimospray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimpl1-Tuple{}","page":"Home","title":"Madagascar.sfimpl1","text":"sfimpl1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimpl1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimpl1. See ?m8r for examples.\n\nRSF Documentation\n\nsfimpl1(1)                    Madagascar Manuals                    sfimpl1(1)\n\nNAME\n       sfimpl1 - 1-D anisotropic diffusion.\n\nSYNOPSIS\n       sfimpl1 < in.rsf > out.rsf rect1= tau=0.1 pclip=50. up=n\n\nPARAMETERS\n       float  pclip =50.       percentage clip for the gradient\n       float  rect1 =      smoothing radius\n       float  tau =0.1      smoothing time\n       bool   up =n [y/n]     smoothing style\nSOURCE\n       system/generic/Mimpl1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfimpl1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimpl2-Tuple{}","page":"Home","title":"Madagascar.sfimpl2","text":"sfimpl2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimpl2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimpl2. See ?m8r for examples.\n\nRSF Documentation\n\nsfimpl2(1)                    Madagascar Manuals                    sfimpl2(1)\n\nNAME\n       sfimpl2 - 2-D anisotropic diffusion.\n\nSYNOPSIS\n       sfimpl2  < in.rsf > out.rsf rect1= rect2= tau=0.1 pclip=50. up=n verb=n\n       nsnap=1 lin=n adj=n dist= snap=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       string dist =      inverse distance file (input)\n       bool   lin =n [y/n]     if linear operator\n       int    nsnap =1      number of snapshots\n       float  pclip =50.       percentage clip for the gradient\n       float  rect1 =      vertical smoothing\n       float  rect2 =      horizontal smoothing\n       string snap =      snapshot file (output)\n       float  tau =0.1      smoothing time\n       bool   up =n [y/n]     smoothing style\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/generic/Mimpl2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfimpl2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimpl3-Tuple{}","page":"Home","title":"Madagascar.sfimpl3","text":"sfimpl3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimpl3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimpl3. See ?m8r for examples.\n\nRSF Documentation\n\nsfimpl3(1)                    Madagascar Manuals                    sfimpl3(1)\n\nNAME\n       sfimpl3 - 3-D anisotropic diffusion.\n\nSYNOPSIS\n       sfimpl3  < in.rsf > out.rsf rect1= rect2= rect3= tau=0.1 pclip=50. up=n\n       verb=n nsnap=1 dist= snap=\n\nPARAMETERS\n       string dist =      inverse distance file (input)\n       int    nsnap =1      number of snapshots\n       float  pclip =50.       percentage clip for the gradient\n       float  rect1 = ®\n       float  rect2 = ®\n       float  rect3 =      smoothing radius\n       string snap =      snapshot file (output)\n       float  tau =0.1      smoothing time\n       bool   up =n [y/n]     smoothing style\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/generic/Mimpl3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfimpl3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfimray-Tuple{}","page":"Home","title":"Madagascar.sfimray","text":"sfimray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfimray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfimray. See ?m8r for examples.\n\nRSF Documentation\n\nsfimray(1)                    Madagascar Manuals                    sfimray(1)\n\nNAME\n       sfimray - 2-D image ray tracing using HWT\n\nSYNOPSIS\n       sfimray < vel.rsf > dix.rsf nt= dt= order=3\n\nPARAMETERS\n       float  dt = ®\n       int    nt = ®\n       int    order =3      interpolation order\nSOURCE\n       user/fomels/Mimray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfimray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfin-Tuple{}","page":"Home","title":"Madagascar.sfin","text":"sfin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfin. See ?m8r for examples.\n\nRSF Documentation\n\nsfin(1)                       Madagascar Manuals                       sfin(1)\n\nNAME\n       sfin - Display basic information about RSF files.\n\nSYNOPSIS\n       sfin info=y check=2. trail=y [<file0.rsf] file1.rsf file2.rsf ...\n\nCOMMENTS\n       n1,n2,...  are data dimensions o1,o2,... are axis origins d1,d2,... are\n       axis   sampling   intervals   label1,label2,...   are    axis    labels\n       unit1,unit2,... are axis units\n\nPARAMETERS\n       float  check  =2.        Portion  of the data (in Mb) to check for zero\n              values.\n       bool   info =y [y/n]     If n, only display the name of the data file.\n       bool   trail =y [y/n]     If n, skip trailing dimensions of one\nSOURCE\n       system/main/in.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfin\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinfill-Tuple{}","page":"Home","title":"Madagascar.sfinfill","text":"sfinfill(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinfill on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinfill. See ?m8r for examples.\n\nRSF Documentation\n\nsfinfill(1)                   Madagascar Manuals                   sfinfill(1)\n\nNAME\n       sfinfill - Shot interpolation.\n\nSYNOPSIS\n       sfinfill < in.rsf > out.rsf eps=0.1 positive=y\n\nPARAMETERS\n       float  eps =0.1      regularization parameter\n       bool   positive =y [y/n]     initial offset orientation\nSOURCE\n       system/seismic/Minfill.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfinfill(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinitial-Tuple{}","page":"Home","title":"Madagascar.sfinitial","text":"sfinitial(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinitial on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinitial. See ?m8r for examples.\n\nRSF Documentation\n\nsfinitial(1)                  Madagascar Manuals                  sfinitial(1)\n\nNAME\n       sfinitial - Initialize a data\n\nSYNOPSIS\n       sfinitial < in.rsf > out.rsf sign=y\n\nPARAMETERS\n       bool   sign =y [y/n]     if y, initialize data with 1 , or with 0\nSOURCE\n       user/yliu/Minitial.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinitial(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinitwave2-Tuple{}","page":"Home","title":"Madagascar.sfinitwave2","text":"sfinitwave2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinitwave2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinitwave2. See ?m8r for examples.\n\nRSF Documentation\n\nsfinitwave2(1)                Madagascar Manuals                sfinitwave2(1)\n\nNAME\n       sfinitwave2 - Complex 2-D wave propagation using initial condition\n\nSYNOPSIS\n       sfinitwave2    <    Fi.rsf    >   Fo.rsf   snaps=Fs.rsf   left=left.rsf\n       right=right.rsf verb=y nt= dt= snap=0 correct=n pad1=1 mode=\n\nPARAMETERS\n       bool   correct =n [y/n]     correction\n       float  dt = ®\n       file   left =      auxiliary input file name\n       string mode =      default mode is pspi\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/jsun/Minitwave2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfinitwave2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinjop2d-Tuple{}","page":"Home","title":"Madagascar.sfinjop2d","text":"sfinjop2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinjop2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinjop2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfinjop2d(1)                  Madagascar Manuals                  sfinjop2d(1)\n\nNAME\n       sfinjop2d - inject/extract in/from 2D wavefield\n\nSYNOPSIS\n       sfinjop2d  coo=Fcoo.rsf  < Fwfl.rsf > Ftrc.rsf verb=n adj=n nz=1 oz=0.0\n       dz=1.0 nx=1 ox=0.0 dx=1.0\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   coo =      auxiliary input file name\n       float  dx =1.0 ®\n       float  dz =1.0 ®\n       int    nx =1 ®\n       int    nz =1 ®\n       float  ox =0.0 ®\n       float  oz =0.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Minjop2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinjop2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinjop3d-Tuple{}","page":"Home","title":"Madagascar.sfinjop3d","text":"sfinjop3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinjop3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinjop3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfinjop3d(1)                  Madagascar Manuals                  sfinjop3d(1)\n\nNAME\n       sfinjop3d - inject/extract in/from 3D wavefield\n\nSYNOPSIS\n       sfinjop3d  coo=Fcoo.rsf  < Fwfl.rsf > Ftrc.rsf verb=n adj=n nz=1 oz=0.0\n       dz=1.0 ny=1 oy=0.0 dy=1.0 nx=1 ox=0.0 dx=1.0\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   coo =      auxiliary input file name\n       float  dx =1.0 ®\n       float  dy =1.0 ®\n       float  dz =1.0 ®\n       int    nx =1 ®\n       int    ny =1 ®\n       int    nz =1 ®\n       float  ox =0.0 ®\n       float  oy =0.0 ®\n       float  oz =0.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Minjop3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinjop3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinmo-Tuple{}","page":"Home","title":"Madagascar.sfinmo","text":"sfinmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfinmo(1)                     Madagascar Manuals                     sfinmo(1)\n\nNAME\n       sfinmo - Inverse normal moveout.\n\nSYNOPSIS\n       sfinmo  <  cmp.rsf  velocity=velocity.rsf  > nmod.rsf offset=offset.rsf\n       mask=msk.rsf half=y slowness=n h0=0. eps=0.01\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       float  h0 =0.       reference offset\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       string mask =      auxiliary input file name\n       string offset =      auxiliary input file name\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       file   velocity =      auxiliary input file name\nUSED IN\n       bei/vela/strat\n       data/alaska/line31-81-m8r\nSOURCE\n       system/seismic/Minmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfinmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinmo3-Tuple{}","page":"Home","title":"Madagascar.sfinmo3","text":"sfinmo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinmo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinmo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfinmo3(1)                    Madagascar Manuals                    sfinmo3(1)\n\nNAME\n       sfinmo3 - 3-D Inverse normal moveout.\n\nSYNOPSIS\n       sfinmo3 < cmp.rsf > nmod.rsf velocity=vel.rsf half=y eps=0.01 extend=8\n\nCOMMENTS\n       velocity file contains slowness squared with n2=3 (wx,wy,wxy)\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half  =y [y/n]     if y, the second and third axes are half-off‐\n              set instead of full offset\n       file   velocity =      auxiliary input file name\nUSED IN\n       cup/rna3d/shot\nSOURCE\n       system/seismic/Minmo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfinmo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinmo3_ort-Tuple{}","page":"Home","title":"Madagascar.sfinmo3_ort","text":"sfinmo3_ort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinmo3_ort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinmo3_ort. See ?m8r for examples.\n\nRSF Documentation\n\nsfinmo3ort(1)                Madagascar Manuals                sfinmo3ort(1)\n\nNAME\n       sfinmo3_ort  - 3-D Inverse normal moveout using orthogonal parametriza‐\n       tion\n\nSYNOPSIS\n       sfinmo3_ort < cmp.rsf > nmod.rsf velocity=vel.rsf half=y  eps=0.01  ex‐\n       tend=8\n\nCOMMENTS\n       velocity file contains slowness squared with n2=3 (Wavg,Wcos,Wsin)\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half  =y [y/n]     if y, the second and third axes are half-off‐\n              set instead of full offset\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/jingwei/Minmo3_ort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfinmo3_ort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinmo3gma-Tuple{}","page":"Home","title":"Madagascar.sfinmo3gma","text":"sfinmo3gma(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinmo3gma on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinmo3gma. See ?m8r for examples.\n\nRSF Documentation\n\nsfinmo3gma(1)                 Madagascar Manuals                 sfinmo3gma(1)\n\nNAME\n       sfinmo3gma - 3-D Inverse generalized normal moveout.\n\nSYNOPSIS\n       sfinmo3gma  <  cmp.rsf  > nmod.rsf velocity=vel.rsf half=n eps=0.01 ex‐\n       tend=8\n\nCOMMENTS\n       Velocity    file    contains    slowness     squared     with     n2=16\n       (wx,wxy,wy,A1,A2,A3,A4,A5,B1,B2,B3,C1,C2,C3,C4,C5)  following Sripanich\n       and Fomel (2015).\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half =n [y/n]     if x,y , the second and third axes  are  half-\n              offset instead of full offset\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Minmo3gma.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinmo3gma(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinstattr-Tuple{}","page":"Home","title":"Madagascar.sfinstattr","text":"sfinstattr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinstattr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinstattr. See ?m8r for examples.\n\nRSF Documentation\n\nsfinstattr(1)                 Madagascar Manuals                 sfinstattr(1)\n\nNAME\n       sfinstattr - Estimate of instantaneous attributes.\n\nSYNOPSIS\n       sfinstattr  <  in.rsf  > out.rsf order=10 ref=1. hertz=y hires=n der2=n\n       verb=n type=\n\nPARAMETERS\n       bool   der2 =n [y/n]     if y, compute 2nd-order derivative to use with\n              hires=y\n       bool   hertz =y [y/n]     if y, convert output to Hertz\n       bool   hires  =n  [y/n]     if y, compute high resolution instantaneous\n              attributes\n       int    order =10      Hilbert transformer order\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       string type =      [amplitude,phase,frequency] attribute type, the  de‐\n              fault is amplitude\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Minstattr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinstattr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinstsnr-Tuple{}","page":"Home","title":"Madagascar.sfinstsnr","text":"sfinstsnr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinstsnr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinstsnr. See ?m8r for examples.\n\nRSF Documentation\n\nsfinstsnr(1)                  Madagascar Manuals                  sfinstsnr(1)\n\nNAME\n       sfinstsnr - Instantaneous signal-to-noise ratio (SNR) estimation.\n\nSYNOPSIS\n       sfinstsnr < in.rsf > out.rsf en=en.rsf\n\nPARAMETERS\n       file   en =      auxiliary input file name\nSOURCE\n       user/yliu/Minstsnr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinstsnr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfint3d-Tuple{}","page":"Home","title":"Madagascar.sfint3d","text":"sfint3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfint3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfint3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfint3d(1)                    Madagascar Manuals                    sfint3d(1)\n\nNAME\n       sfint3d -\n\nSYNOPSIS\n       sfint3d  <  Fw.rsf  >  Ft.rsf  verb=n  pick=2 fill=1 nz=100 oz=0. dz=1.\n       nx=100 ox=0. dx=1. ny=1 oy=0. dy=1.\n\nCOMMENTS\n       * 3-D traveltime interpolation (from rays to Cartesian cube) * pcs 2005\n\nPARAMETERS\n       float  dx =1.  ®\n       float  dy =1.  ®\n       float  dz =1.  ®\n       int    fill =1      wavefronts file (a,g,h,t)\n       int    nx =100 ®\n       int    ny =1 ®\n       int    nz =100 ®\n       float  ox =0.  ®\n       float  oy =0.  ®\n       float  oz =0.  ®\n       int    pick =2 ®\n       bool   verb =n [y/n]\nSOURCE\n       user/psava/Mint3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfint3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintbin-Tuple{}","page":"Home","title":"Madagascar.sfintbin","text":"sfintbin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintbin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintbin. See ?m8r for examples.\n\nRSF Documentation\n\nsfintbin(1)                   Madagascar Manuals                   sfintbin(1)\n\nNAME\n       sfintbin - Data binning by trace sorting.\n\nSYNOPSIS\n       sfintbin  <  in.rsf > out.rsf inv=n xkey= ykey= xmin= xmax= ymin= ymax=\n       head= xk= yk= map= mask=\n\nCOMMENTS\n       If inv=n, the input is 2-D (n1 x ntr). The output is 3-D  (n1  x  n2  x\n       n3), n2 and n3 correspond to two selected keys from the header file.\n\n       If inv=y, the input is 3-D, and the output is 2-D.\n\n       if xkey < 0, the first axis indexes traces in a gather like cdpt.\n\n       June  2015  program  of the month: http://ahay.org/blog/2015/06/10/pro‐\n       gram-of-the-month-sfintbin/\n\nPARAMETERS\n       string head =      header file\n       bool   inv =n [y/n]     inversion flag\n       string map =      output map file\n       string mask =      output mask file\n       string xk =      x key name\n       int    xkey =      x key number (if no xk), default is fldr\n       int    xmax =      x maximum\n       int    xmin =      x minimum\n       string yk =      y key name\n       int    ykey =      y key number (if no yk), default is tracf\n       int    ymax =      y maximum\n       int    ymin =      y minimum\nSOURCE\n       system/seismic/Mintbin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfintbin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintbin3-Tuple{}","page":"Home","title":"Madagascar.sfintbin3","text":"sfintbin3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintbin3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintbin3. See ?m8r for examples.\n\nRSF Documentation\n\nsfintbin3(1)                  Madagascar Manuals                  sfintbin3(1)\n\nNAME\n       sfintbin3 - 4-D data binning.\n\nSYNOPSIS\n       sfintbin3  < in.rsf > out.rsf xkey= ykey= zkey= xmin= xmax= ymin= ymax=\n       zmin= zmax= head= xk= yk= zk= mask=\n\nCOMMENTS\n       if xkey < 0, the first axis indexes traces in a gather like cdpt.\n\nPARAMETERS\n       string head =      header file\n       string mask =      output mask file\n       string xk =      x key name\n       int    xkey =      x key number (if no xk), default is fldr\n       int    xmax =      x maximum\n       int    xmin =      x minimum\n       string yk =      y key name\n       int    ykey =      y key number (if no yk), default is iline\n       int    ymax =      y maximum\n       int    ymin =      y minimum\n       string zk =      z key name\n       int    zkey =      z key number (if no zk), default is xline\n       int    zmax =      z maximum\n       int    zmin =      z minimum\nSOURCE\n       system/seismic/Mintbin3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfintbin3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintbin4-Tuple{}","page":"Home","title":"Madagascar.sfintbin4","text":"sfintbin4(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintbin4 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintbin4. See ?m8r for examples.\n\nRSF Documentation\n\nsfintbin4(1)                  Madagascar Manuals                  sfintbin4(1)\n\nNAME\n       sfintbin4 - 5-D data binning.\n\nSYNOPSIS\n       sfintbin4  < in.rsf > out.rsf xkey= ykey= skey= rkey= xmin= xmax= ymin=\n       ymax= smin= smax= rmin= rmax= dx=1 dy=1 ds=1 dr=1 head= xk= yk= sk= rk=\n       fold=\n\nPARAMETERS\n       int    dr =1 ®\n       int    ds =1 ®\n       int    dx =1 ®\n       int    dy =1 ®\n       string fold =      output fold file\n       string head =      header file\n       string rk =      r key name\n       int    rkey =      r key number (if no rk), default is gwdep\n       int    rmax =      r maximum\n       int    rmin =      r minimum\n       string sk =      s key name\n       int    skey =      s key number (if no sk), default is swdep\n       int    smax =      s maximum\n       int    smin =      s minimum\n       string xk =      x key name\n       int    xkey =      x key number (if no xk), default is fldr\n       int    xmax =      x maximum\n       int    xmin =      x minimum\n       string yk =      y key name\n       int    ykey =      y key number (if no yk), default is tracf\n       int    ymax =      y maximum\n       int    ymin =      y minimum\nSOURCE\n       user/yliu/Mintbin4.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfintbin4(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintegral1-Tuple{}","page":"Home","title":"Madagascar.sfintegral1","text":"sfintegral1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintegral1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintegral1. See ?m8r for examples.\n\nRSF Documentation\n\nsfintegral1(1)                Madagascar Manuals                sfintegral1(1)\n\nNAME\n       sfintegral1 - integration\n\nSYNOPSIS\n       sfintegral1 < Fin.rsf > Fout.rsf rule=\n\nPARAMETERS\n       string rule =      t, s : quadrature rules\nSOURCE\n       user/xuxin/Mintegral1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfintegral1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinterf-Tuple{}","page":"Home","title":"Madagascar.sfinterf","text":"sfinterf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinterf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinterf. See ?m8r for examples.\n\nRSF Documentation\n\nsfinterf(1)                   Madagascar Manuals                   sfinterf(1)\n\nNAME\n       sfinterf - Create an interferometric matrix\n\nSYNOPSIS\n       sfinterf < inp.rsf > out.rsf\n\nSOURCE\n       user/fomels/Minterf.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfinterf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinterleave-Tuple{}","page":"Home","title":"Madagascar.sfinterleave","text":"sfinterleave(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinterleave on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinterleave. See ?m8r for examples.\n\nRSF Documentation\n\nsfinterleave(1)               Madagascar Manuals               sfinterleave(1)\n\nNAME\n       sfinterleave - Combine several datasets by interleaving.\n\nSYNOPSIS\n       sfinterleave > out.rsf axis=3 [< file0.rsf] file1.rsf file2.rsf ...\n\nPARAMETERS\n       int    axis =3      Axis for interleaving\nSOURCE\n       system/main/interleave.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfinterleave\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfinterleave(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinternalmult-Tuple{}","page":"Home","title":"Madagascar.sfinternalmult","text":"sfinternalmult(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinternalmult on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinternalmult. See ?m8r for examples.\n\nRSF Documentation\n\nsfinternalmult(1)             Madagascar Manuals             sfinternalmult(1)\n\nNAME\n       sfinternalmult  -  Generate internal multiples by using virtual seismic\n       data.\n\nSYNOPSIS\n       sfinternalmult < in.rsf > out.rsf  dif=dif.rsf  verb=n  stack=n  both=n\n       jumpo=1 jumps=1\n\nPARAMETERS\n       bool   both =n [y/n]     receiver flag, if y, receiver with both sides\n       string dif =      auxiliary input file name\n       int    jumpo =1      jump in offset dimension, only for stack=n\n       int    jumps =1      jump in shot dimension, only for stack=n\n       bool   stack =n [y/n]     stack flag, if y, no common multiple gather\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Minternalmult.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfinternalmult(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinterp-Tuple{}","page":"Home","title":"Madagascar.sfinterp","text":"sfinterp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinterp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinterp. See ?m8r for examples.\n\nRSF Documentation\n\nsfinterp(1)                   Madagascar Manuals                   sfinterp(1)\n\nNAME\n       sfinterp -\n\nSYNOPSIS\n       sfinterp < logrefa.rsf > logref_co.rsf\n\nCOMMENTS\n       1D linear missing data interpolation\n\n       Linear  interpolation  of missing data (0 values) based on nearest non‐\n       zero samples\n\nSOURCE\n       user/sbader/Minterp.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfinterp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinterp2-Tuple{}","page":"Home","title":"Madagascar.sfinterp2","text":"sfinterp2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinterp2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinterp2. See ?m8r for examples.\n\nRSF Documentation\n\nsfinterp2(1)                  Madagascar Manuals                  sfinterp2(1)\n\nNAME\n       sfinterp2 - Multiple-arrival interpolation.\n\nSYNOPSIS\n       sfinterp2  <  in.rsf  size=size.rsf > out.rsf grid=grid.rsf sx=0. sz=0.\n       nw=4 plane=0\n\nPARAMETERS\n       file   grid =      auxiliary input file name\n       int    nw =4      Interpolation accuracy\n       int    plane =0      0: point-source, 4: plane-wave\n       file   size =      auxiliary input file name\n       float  sx =0.  ®\n       float  sz =0.       Shot coordinates\nSOURCE\n       user/fomels/Minterp2.c\nVERSION\n       4.2-git Minterp2.c 4084 2009-01-22 21:39:08Z sfomel\n\nMadagascar                         JULY 2024                      sfinterp2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinterpt-Tuple{}","page":"Home","title":"Madagascar.sfinterpt","text":"sfinterpt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinterpt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinterpt. See ?m8r for examples.\n\nRSF Documentation\n\nsfinterpt(1)                  Madagascar Manuals                  sfinterpt(1)\n\nNAME\n       sfinterpt - Multiple-arrival interpolation (yet another).\n\nSYNOPSIS\n       sfinterpt < in.rsf > out.rsf sx=0. sz=0. nw=4\n\nPARAMETERS\n       int    nw =4      Interpolation accuracy\n       float  sx =0.  ®\n       float  sz =0.       Shot coordinate\nSOURCE\n       user/fomels/Minterpt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinterpt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintervalVTI-Tuple{}","page":"Home","title":"Madagascar.sfintervalVTI","text":"sfintervalVTI(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintervalVTI on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintervalVTI. See ?m8r for examples.\n\nRSF Documentation\n\nsfintervalVTI(1)              Madagascar Manuals              sfintervalVTI(1)\n\nNAME\n       sfintervalVTI - Interval/Effective VTI parameters from Effective/Inter‐\n       val profiles\n\nSYNOPSIS\n       sfintervalVTI    <    vn.rsf     >     vn_out.rsf     vH_out=vh_out.rsf\n       eta_out=eta_out.rsf eta=eta.rsf interval=y\n\nPARAMETERS\n       string eta =      input eta(auxiliary input file name)\n       string eta_out =      output eta(auxiliary output file name)\n       bool   interval  =y  [y/n]     output are interval [y] or effective [n]\n              profiles\n       string vH_out =      output HOR vel(auxiliary output file name)\nSOURCE\n       user/lcasasan/MintervalVTI.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfintervalVTI(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintshow-Tuple{}","page":"Home","title":"Madagascar.sfintshow","text":"sfintshow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintshow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintshow. See ?m8r for examples.\n\nRSF Documentation\n\nsfintshow(1)                  Madagascar Manuals                  sfintshow(1)\n\nNAME\n       sfintshow - Output interpolation filter.\n\nSYNOPSIS\n       sfintshow > filt.rsf nw= x= kai=4.0 interp=\n\nCOMMENTS\n       See also: inttest1.\n\nPARAMETERS\n       string interp  =       interpolation (lagrange,cubic,kaiser,lanczos,co‐\n              sine,welch,spline,mom)\n       float  kai =4.0      Kaiser window parameter\n       int    nw =      interpolator size\n       float  x =      interpolation shift\nSOURCE\n       system/generic/Mintshow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfintshow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinttest1-Tuple{}","page":"Home","title":"Madagascar.sfinttest1","text":"sfinttest1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinttest1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinttest1. See ?m8r for examples.\n\nRSF Documentation\n\nsfinttest1(1)                 Madagascar Manuals                 sfinttest1(1)\n\nNAME\n       sfinttest1 - Interpolation from a regular grid in 1-D.\n\nSYNOPSIS\n       sfinttest1 < in.rsf > out.rsf coord=crd.rsf nw= same=y kai=4.0 interp=\n\nCOMMENTS\n       January 2014 program of the month: http://ahay.org/blog/2014/01/09/pro‐\n       gram-of-the-month-sfinttest1/\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       string interp =       interpolation  (lagrange,cubic,kaiser,lanczos,co‐\n              sine,welch,spline,mom)\n       float  kai =4.0      Kaiser window parameter\n       int    nw =      interpolator size\n       bool   same =y [y/n]     same or different coordinates for each trace\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Minttest1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinttest1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinttest2-Tuple{}","page":"Home","title":"Madagascar.sfinttest2","text":"sfinttest2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinttest2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinttest2. See ?m8r for examples.\n\nRSF Documentation\n\nsfinttest2(1)                 Madagascar Manuals                 sfinttest2(1)\n\nNAME\n       sfinttest2 - Interpolation from a regular grid in 2-D.\n\nSYNOPSIS\n       sfinttest2 < in.rsf > out.rsf coord=crd.rsf nw= kai=4.0 interp=\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       string interp  =       interpolation (lagrange,cubic,kaiser,lanczos,co‐\n              sine,welch,spline)\n       float  kai =4.0      Kaiser window parameter\n       int    nw =      interpolator size\nUSED IN\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\nSOURCE\n       system/generic/Minttest2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinttest2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinttest3-Tuple{}","page":"Home","title":"Madagascar.sfinttest3","text":"sfinttest3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinttest3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinttest3. See ?m8r for examples.\n\nRSF Documentation\n\nsfinttest3(1)                 Madagascar Manuals                 sfinttest3(1)\n\nNAME\n       sfinttest3 - Interpolation from a regular grid in 3-D.\n\nSYNOPSIS\n       sfinttest3 < in.rsf > out.rsf coord=crd.rsf nw= kai=4.0 interp=\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       string interp  =       interpolation (lagrange,cubic,kaiser,lanczos,co‐\n              sine,welch,spline)\n       float  kai =4.0      Kaiser window parameter\n       int    nw =      interpolator size\nSOURCE\n       system/generic/Minttest3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinttest3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintv2avg-Tuple{}","page":"Home","title":"Madagascar.sfintv2avg","text":"sfintv2avg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintv2avg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintv2avg. See ?m8r for examples.\n\nRSF Documentation\n\nsfintv2avg(1)                 Madagascar Manuals                 sfintv2avg(1)\n\nNAME\n       sfintv2avg - None\n\nSYNOPSIS\n       sfintv2avg < in.rsf > out.rsf\n\nSOURCE\n       user/zdzhang/Mintv2avg.f90\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfintv2avg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfintv2rms-Tuple{}","page":"Home","title":"Madagascar.sfintv2rms","text":"sfintv2rms(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfintv2rms on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfintv2rms. See ?m8r for examples.\n\nRSF Documentation\n\nsfintv2rms(1)                 Madagascar Manuals                 sfintv2rms(1)\n\nNAME\n       sfintv2rms - None\n\nSYNOPSIS\n       sfintv2rms < in.rsf > out.rsf\n\nSOURCE\n       user/zdzhang/Mintv2rms.f90\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfintv2rms(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvalid-Tuple{}","page":"Home","title":"Madagascar.sfinvalid","text":"sfinvalid(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvalid on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvalid. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvalid(1)                  Madagascar Manuals                  sfinvalid(1)\n\nNAME\n       sfinvalid  -  Finds  RSF  files  with missing or incomplete binaries or\n       headers.\n\nSYNOPSIS\n       sfinvalid verb=n dir=. rec=n chk4nan=n\n\nCOMMENTS\n       Delete them all with shell constructs like: rm -f `sfinvalid dir=.`\n\nPARAMETERS\n       bool   chk4nan =n [y/n]     Check for NaN values. Expensive!!\n       string dir =.       Directory with files\n       bool   rec =n [y/n]     Whether to go down recursively\n       bool   verb =n [y/n]     Display what is wrong with the dataset\nSOURCE\n       user/ivlad/Minvalid.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinvalid(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvbin-Tuple{}","page":"Home","title":"Madagascar.sfinvbin","text":"sfinvbin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvbin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvbin. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvbin(1)                   Madagascar Manuals                   sfinvbin(1)\n\nNAME\n       sfinvbin  -  Data interpolation in 2-D slices using helix precondition‐\n       ing.\n\nSYNOPSIS\n       sfinvbin < in.rsf > out.rsf filt=flt.rsf  pch=pch.rsf  n=  xkey=  ykey=\n       xmax=  xmin=  ymax=  ymin=  x0=xmin y0=ymin nx=(int) (xmax - xmin + 1.)\n       ny=(int) (ymax - ymin + 1.) dx=  dy=  interp=2  der=n  stat=y  niter=20\n       eps=0.01 head= lag= nh=\n\nPARAMETERS\n       bool   der =n [y/n]     if y, apply derivative filter on the residual\n       float  dx =      bin size in x\n       float  dy =      bin size in y\n       float  eps =0.01      regularization parameter\n       file   filt =      auxiliary input file name\n       string head = ®\n       int    interp =2      interpolation length\n       string lag = ®\n       ints   n =       [2]\n       string nh = ®\n       int    niter =20      number of iterations\n       int    nx =(int) (xmax - xmin + 1.)       Number of bins in x\n       int    ny =(int) (ymax - ymin + 1.)       Number of bins in y\n       file   pch =      auxiliary input file name\n       bool   stat =y [y/n]     stationary or nonstationary filter\n       float  x0 =xmin ®\n       int    xkey =      x key number\n       float  xmax = ®\n       float  xmin = ®\n       float  y0 =ymin      grid origin\n       int    ykey =      y key number\n       float  ymax = ®\n       float  ymin =      Grid dimensions\nSOURCE\n       user/gee/Minvbin.c\nVERSION\n       4.2-git Mbin.c 991 2005-02-10 11:42:19Z fomels\n\nMadagascar                         JULY 2024                       sfinvbin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvbin1-Tuple{}","page":"Home","title":"Madagascar.sfinvbin1","text":"sfinvbin1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvbin1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvbin1. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvbin1(1)                  Madagascar Manuals                  sfinvbin1(1)\n\nNAME\n       sfinvbin1 - 1-D inverse interpolation.\n\nSYNOPSIS\n       sfinvbin1  <  in.rsf  >  out.rsf  nx=  xmin= xmax= x0=xmin dx= filter=1\n       prec=y verb=n niter=nx eps=0.2 pef=n head=\n\nPARAMETERS\n       float  dx =      grid sampling\n       float  eps =0.2      regularization parameter\n       int    filter =1      filter type\n       string head = ®\n       int    niter =nx      number of conjugate-gradient iterations\n       int    nx =      number of bins\n       bool   pef =n [y/n]     if y, use PEF for regularization\n       bool   prec =y [y/n]     if y, use preconditioning\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =xmin      grid origin\n       float  xmax = ®\n       float  xmin =      grid size\nSOURCE\n       user/gee/Minvbin1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinvbin1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvqfilt-Tuple{}","page":"Home","title":"Madagascar.sfinvqfilt","text":"sfinvqfilt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvqfilt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvqfilt. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvqfilt(1)                 Madagascar Manuals                 sfinvqfilt(1)\n\nNAME\n       sfinvqfilt  -  Inverse Q filtering by using equivalent Q value in time-\n       frequency domain.\n\nSYNOPSIS\n       sfinvqfilt < inp.rsf > out.rsf eqt=eqt.rsf verb=n gim=20\n\nPARAMETERS\n       string eqt =      equivalent quality: eqt (auxiliary input file name)\n       int    gim =20      GIM\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Minvqfilt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinvqfilt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvrec1-Tuple{}","page":"Home","title":"Madagascar.sfinvrec1","text":"sfinvrec1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvrec1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvrec1. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvrec1(1)                  Madagascar Manuals                  sfinvrec1(1)\n\nNAME\n       sfinvrec1 - 1-D inverse interpolation with recursive filtering.\n\nSYNOPSIS\n       sfinvrec1  < in.rsf > out.rsf filt=filt.rsf lag=lag.rsf nx= xmin= xmax=\n       x0=xmin dx= spline=n nw=2 verb=n niter=nx eps=0.2 movie=n head=\n\nPARAMETERS\n       float  dx =      grid sampling\n       float  eps =0.2      regularization parameter\n       file   filt =      auxiliary input file name\n       string head = ®\n       string lag =      optional input file with filter lags (auxiliary input\n              file name)\n       bool   movie =n [y/n]     verbosity flag\n       int    niter =nx      number of conjugate-gradient iterations\n       int    nw =2      interpolator size\n       int    nx =      number of bins\n       bool   spline =n [y/n]     if use spline interpolation\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =xmin      grid origin\n       float  xmax = ®\n       float  xmin =      grid size\nSOURCE\n       user/gee/Minvrec1.c\nVERSION\n       4.2-git Minvbin1.c 2521 2007-02-02 00:25:42Z sfomel\n\nMadagascar                         JULY 2024                      sfinvrec1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvtest-Tuple{}","page":"Home","title":"Madagascar.sfinvtest","text":"sfinvtest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvtest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvtest. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvtest(1)                  Madagascar Manuals                  sfinvtest(1)\n\nNAME\n       sfinvtest - Test inverse rank-1 approximation for lowrank wave propaga‐\n       tion: prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfinvtest < input.rsf > output1.rsf flag= reg= nz= dz= z0= nx= dx= x0=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       flag   = ®\n       nx     = ®\n       nz     = ®\n       reg    = ®\n       x0     = ®\n       z0     = ®\nSOURCE\n       user/jingwei/Minvtest.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfinvtest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfinvtest1-Tuple{}","page":"Home","title":"Madagascar.sfinvtest1","text":"sfinvtest1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfinvtest1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfinvtest1. See ?m8r for examples.\n\nRSF Documentation\n\nsfinvtest1(1)                 Madagascar Manuals                 sfinvtest1(1)\n\nNAME\n       sfinvtest1  - Test inverse rank-1 approximation for lowrank wave propa‐\n       gation: prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfinvtest1 < input.rsf > output1.rsf flag= nz= dz= z0= nx= dx= x0=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       flag   = ®\n       nx     = ®\n       nz     = ®\n       x0     = ®\n       z0     = ®\nSOURCE\n       user/jingwei/Minvtest1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfinvtest1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiphase-Tuple{}","page":"Home","title":"Madagascar.sfiphase","text":"sfiphase(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiphase on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiphase. See ?m8r for examples.\n\nRSF Documentation\n\nsfiphase(1)                   Madagascar Manuals                   sfiphase(1)\n\nNAME\n       sfiphase - Smooth estimate of instantaneous frequency.\n\nSYNOPSIS\n       sfiphase < in.rsf > out.rsf verb=n complex=n niter=100 order=100 ref=1.\n       hertz=n band=n rect#=(1,1,...)\n\nPARAMETERS\n       bool   band =n [y/n]     if y, compute instantaneous bandwidth\n       bool   complex =n [y/n]     if y, use complex-valued computations\n       bool   hertz =n [y/n]     if y, convert output to Hertz\n       int    niter =100      number of iterations\n       int    order =100      Hilbert transformer order\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fomels/Miphase.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfiphase(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfipick-Tuple{}","page":"Home","title":"Madagascar.sfipick","text":"sfipick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfipick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfipick. See ?m8r for examples.\n\nRSF Documentation\n\nsfipick(1)                    Madagascar Manuals                    sfipick(1)\n\nNAME\n       sfipick - Simple interactive picking\n\nSYNOPSIS\n       sfipick\n\nSOURCE\n       user/fomels/Mipick.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfipick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiq2eq-Tuple{}","page":"Home","title":"Madagascar.sfiq2eq","text":"sfiq2eq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiq2eq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiq2eq. See ?m8r for examples.\n\nRSF Documentation\n\nsfiq2eq(1)                    Madagascar Manuals                    sfiq2eq(1)\n\nNAME\n       sfiq2eq - Convert interval Q value to equivalent Q value\n\nSYNOPSIS\n       sfiq2eq < inp.rsf > out.rsf verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Miq2eq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfiq2eq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfirays-Tuple{}","page":"Home","title":"Madagascar.sfirays","text":"sfirays(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfirays on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfirays. See ?m8r for examples.\n\nRSF Documentation\n\nsfirays(1)                    Madagascar Manuals                    sfirays(1)\n\nNAME\n       sfirays - Fast marching for image rays\n\nSYNOPSIS\n       sfirays  < in.rsf > out.rsf t0=ot0.rsf x0=ox0.rsf f0=of0.rsf velocity=y\n       order=1 thres=10.\n\nPARAMETERS\n       string f0 =      auxiliary output file name\n       int    order =1      fastmarching accuracy order\n       string t0 =      auxiliary output file name\n       float  thres =10.       thresholding for caustics\n       bool   velocity =y [y/n]     y, inputs  are  velocity  /  n,  slowness-\n              squared\n       string x0 =      output upwind neighbor (auxiliary output file name)\nSOURCE\n       user/llisiw/Mirays.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfirays(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisaac0-Tuple{}","page":"Home","title":"Madagascar.sfisaac0","text":"sfisaac0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisaac0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisaac0. See ?m8r for examples.\n\nRSF Documentation\n\nsfisaac0(1)                   Madagascar Manuals                   sfisaac0(1)\n\nNAME\n       sfisaac0 - Zero-offset bending ray tracing in one-layered media\n\nSYNOPSIS\n       sfisaac0  <  refl.rsf > ttime.rsf xrefl=xrefl.rsf ns=nr ds=dr s0=r0 or‐\n       der=3 velocity=2.0 tol=0.0001/velocity\n\nPARAMETERS\n       float  ds =dr      source sampling\n       int    ns =nr      Number of sources\n       int    order =3      interpolation order\n       float  s0 =r0      source origin\n       float  tol =0.0001/velocity      assign a default value for tolerance\n       float  velocity =2.0      assign velocity km/s\n       file   xrefl =      auxiliary output file name\nSOURCE\n       user/zone/Misaac0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisaac0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisaac1-Tuple{}","page":"Home","title":"Madagascar.sfisaac1","text":"sfisaac1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisaac1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisaac1. See ?m8r for examples.\n\nRSF Documentation\n\nsfisaac1(1)                   Madagascar Manuals                   sfisaac1(1)\n\nNAME\n       sfisaac1 - Pre-stack bending ray tracing in one-layered media\n\nSYNOPSIS\n       sfisaac1  <  refl.rsf  >  ttime.rsf  xrefl=xrefl.rsf ns=nr ns2=nr ds=dr\n       ds2=dr s0=r0 s02=r0 type=1 order=4  velocity=2.0  tol=1/(1000000*veloc‐\n       ity) break=n\n\nPARAMETERS\n       bool   break =n [y/n]     Go beyond zero or not\n       float  ds =dr      source sampling for midpoint\n       float  ds2 =dr      source sampling for offset\n       int    ns =nr      number of sources for midpoint\n       int    ns2 =nr      number of sources for offset\n       int    order =4      Interpolation order if choose to use sf_eno\n       float  s0 =r0      origin for midpoint\n       float  s02 =r0      origin for offset\n       float  tol =1/(1000000*velocity)      Assign a default value for toler‐\n              ance\n       int    type =1      Interpolation type 0=sf_eno  and  1=central  finite\n              difference\n       float  velocity =2.0      Assign velocity km/s\n       file   xrefl =      auxiliary output file name\nSOURCE\n       user/zone/Misaac1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisaac1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisaac2-Tuple{}","page":"Home","title":"Madagascar.sfisaac2","text":"sfisaac2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisaac2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisaac2. See ?m8r for examples.\n\nRSF Documentation\n\nsfisaac2(1)                   Madagascar Manuals                   sfisaac2(1)\n\nNAME\n       sfisaac2 - 2D Bending ray tracing in multi-layered media\n\nSYNOPSIS\n       sfisaac2  < refl.rsf > xrefl.rsf aniso=vti.rsf layer= velocity= xgradi‐\n       ent= zgradient= xref= zref= velocity= xinitial= number= xs=  xr=  vsta‐\n       tus=   min=(xx[0]<xx[nr2+1])?   xx[0]:xx[nr2+1]  max=(xx[0]>xx[nr2+1])?\n       xx[0]:xx[nr2+1] niter=100 debug=n tol=0.000001/v_inp[0] ns=2  ns2=nr2+2\n       ds=1 s0=0 order=3\n\nPARAMETERS\n       file   aniso =      auxiliary input file name\n       bool   debug =n [y/n]     Debug flag\n       float  ds =1      Step increment\n       floats layer =      Layer sequence [nr2+1]\n       float  max  =(xx[0]>xx[nr2+1])? xx[0]:xx[nr2+1]      The maximum bound‐\n              ary if not entered, set to max(xs,xr)\n       float  min =(xx[0]<xx[nr2+1])? xx[0]:xx[nr2+1]      The minimum  bound‐\n              ary if not entered, set to min(xs,xr)\n       int    niter =100      The number of iterations\n       int    ns =2      Dimension of output reflection points (x,z)\n       int    ns2  =nr2+2      Dimension of output reflection points (the num‐\n              ber of points)\n       int    number =      Number of intersecting points [nr2]\n       int    order =3      Interpolation order\n       float  s0 =0      Staring position\n       double tol =0.000001/v_inp[0]      Assign a default value for tolerance\n       floats velocity =      Assign velocity km/s [N-1]\n       int    vstatus =      Velocity status (0 for constant v, 1 for gradient\n              v, and 2 for VTI)\n       floats xgradient =      Assign x-gradient [N-1]\n       floats xinitial =       [nr2]\n       float  xr =      Receiver\n       floats xref =      Assign x-reference point [N-1]\n       float  xs =      Source\n       floats zgradient =      Assign z-gradient [N-1]\n       floats zref =      Assign z-reference point [N-1]\nSOURCE\n       user/zone/Misaac2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisaac2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisaac3-Tuple{}","page":"Home","title":"Madagascar.sfisaac3","text":"sfisaac3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisaac3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisaac3. See ?m8r for examples.\n\nRSF Documentation\n\nsfisaac3(1)                   Madagascar Manuals                   sfisaac3(1)\n\nNAME\n       sfisaac3 - 3D Bending ray tracing in Multi-layered media\n\nSYNOPSIS\n       sfisaac3  < refl.rsf > xrefl.rsf aniso=vti.rsf layer= velocity= xgradi‐\n       ent= ygradient= zgradient= xref= yref= zref= xinitial= yinitial=  xini‐\n       tial=  number= xs= ys= xr= yr= vstatus= order=3 xmin= ymin= xmax= ymax=\n       niter= debug=n tol=0.000001/v_inp[0] ns=3 ns2=nr3+2 ds=1 s0=0 order=3\n\nPARAMETERS\n       file   aniso =      auxiliary input file name\n       bool   debug =n [y/n]     Debug flag\n       float  ds =1      Step increment\n       floats layer =      Layer sequence [nr3+1]\n       int    niter =      The number of iterations\n       int    ns =3      Dimension of output reflection points (x,y,z)\n       int    ns2 =nr3+2      Dimension of output reflection points (the  num‐\n              ber of points)\n       int    number =      Number of reflectors\n       int    order =3      Interpolation order\n       float  s0 =0      Staring position\n       double tol =0.000001/v_inp[0]      Assign a default value for tolerance\n       floats velocity =      Assign velocity km/s [N-1]\n       int    vstatus =      Velocity status (0 for constant v, 1 for gradient\n              v, and 2 for VTI)\n       floats xgradient =      Assign x-gradient [N-1]\n       floats xinitial =       [nr3]\n       float  xmax = ®\n       float  xmin = ®\n       float  xr =      x-Receiver\n       floats xref =      Assign x-reference point [N-1]\n       float  xs =      x-Source\n       floats ygradient =      Assign y-gradient [N-1]\n       floats yinitial =       [nr3]\n       float  ymax = ®\n       float  ymin = ®\n       float  yr =      y-Receiver\n       floats yref =      Assign y-reference point [N-1]\n       float  ys =      y-Source\n       floats zgradient =      Assign z-gradient [N-1]\n       floats zref =      Assign z-reference point [N-1]\nSOURCE\n       user/zone/Misaac3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisaac3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisin2ang-Tuple{}","page":"Home","title":"Madagascar.sfisin2ang","text":"sfisin2ang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisin2ang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisin2ang. See ?m8r for examples.\n\nRSF Documentation\n\nsfisin2ang(1)                 Madagascar Manuals                 sfisin2ang(1)\n\nNAME\n       sfisin2ang - inverse sin to angle transformation\n\nSYNOPSIS\n       sfisin2ang   <   Fstk.rsf   >   Fang.rsf   velocity=velocity.rsf  na=nt\n       da=90/(nt-1) a0=0. extend=4 top=n\n\nPARAMETERS\n       float  a0 =0.       angle origin\n       float  da =90/(nt-1)      angle sampling\n       int    extend =4      tmp extension\n       int    na =nt      number of angles\n       bool   top =n [y/n]     velocity scaling option\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Misin2ang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfisin2ang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisoimpulse-Tuple{}","page":"Home","title":"Madagascar.sfisoimpulse","text":"sfisoimpulse(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisoimpulse on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisoimpulse. See ?m8r for examples.\n\nRSF Documentation\n\nsfisoimpulse(1)               Madagascar Manuals               sfisoimpulse(1)\n\nNAME\n       sfisoimpulse  - Impulse response for plane-wave migration in tilted co‐\n       ordinates\n\nSYNOPSIS\n       sfisoimpulse wave=wave.rsf t=0.8 ep=0.4 dl=0.2 vti=y\n\nPARAMETERS\n       float  dl =0.2 ®\n       float  ep =0.4 ®\n       float  t =0.8 ®\n       bool   vti =y [y/n]\n       file   wave =      auxiliary output file name\nSOURCE\n       user/guojian/Misoimpulse.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfisoimpulse(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisolr2-Tuple{}","page":"Home","title":"Madagascar.sfisolr2","text":"sfisolr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisolr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisolr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfisolr2(1)                   Madagascar Manuals                   sfisolr2(1)\n\nNAME\n       sfisolr2 - Lowrank decomposition for 2-D isotropic wave propagation.\n\nSYNOPSIS\n       sfisolr2 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL\n       eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/fomels/Misolr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisolr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisolr25-Tuple{}","page":"Home","title":"Madagascar.sfisolr25","text":"sfisolr25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisolr25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisolr25. See ?m8r for examples.\n\nRSF Documentation\n\nsfisolr25(1)                  Madagascar Manuals                  sfisolr25(1)\n\nNAME\n       sfisolr25 - Lowrank decomposition for 2-D isotropic wave propagation.\n\nSYNOPSIS\n       sfisolr25    <    vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 stablecoef=0 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       stablecoef\n              =0      tolerance\nSOURCE\n       user/zedong/Misolr25.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfisolr25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisolr3-Tuple{}","page":"Home","title":"Madagascar.sfisolr3","text":"sfisolr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisolr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisolr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfisolr3(1)                   Madagascar Manuals                   sfisolr3(1)\n\nNAME\n       sfisolr3 - Lowrank decomposition for 3-D isotropic wave propagation.\n\nSYNOPSIS\n       sfisolr3 < vel.rsf fft=fft.rsf left=left.rsf > right.rsf seed=time(NULL\n       eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/fomels/Misolr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfisolr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisolrsg1-Tuple{}","page":"Home","title":"Madagascar.sfisolrsg1","text":"sfisolrsg1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisolrsg1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisolrsg1. See ?m8r for examples.\n\nRSF Documentation\n\nsfisolrsg1(1)                 Madagascar Manuals                 sfisolrsg1(1)\n\nNAME\n       sfisolrsg1 - Lowrank decomposition for 1-D isotropic wave propagation.\n\nSYNOPSIS\n       sfisolrsg1    <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/fangg/Misolrsg1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfisolrsg1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfisolrsg2-Tuple{}","page":"Home","title":"Madagascar.sfisolrsg2","text":"sfisolrsg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfisolrsg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfisolrsg2. See ?m8r for examples.\n\nRSF Documentation\n\nsfisolrsg2(1)                 Madagascar Manuals                 sfisolrsg2(1)\n\nNAME\n       sfisolrsg2 - Lowrank decomposition for 2-D isotropic wave propagation.\n\nSYNOPSIS\n       sfisolrsg2    <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/fangg/Misolrsg2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfisolrsg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfistinterp-Tuple{}","page":"Home","title":"Madagascar.sfistinterp","text":"sfistinterp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfistinterp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfistinterp. See ?m8r for examples.\n\nRSF Documentation\n\nsfistinterp(1)                Madagascar Manuals                sfistinterp(1)\n\nNAME\n       sfistinterp - n-D IST interpolation using a generalized shrinkage oper‐\n       ator\n\nSYNOPSIS\n       sfistinterp  <  in.rsf  >  out.rsf  mask=Fmask.rsf   verb=n   niter=100\n       pclip=10. normp=0.9 n#= mode=\n\nCOMMENTS\n       Note: Acquistion geometry specified by mask operator\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       int    n# =      size of #-th axis\n       int    niter =100      total number of iterations\n       float  normp =0.9      quasi-norm: normp<2\n       float  pclip =10.       starting data clip percentile (default is 10)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mistinterp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfistinterp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfistpad-Tuple{}","page":"Home","title":"Madagascar.sfistpad","text":"sfistpad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfistpad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfistpad. See ?m8r for examples.\n\nRSF Documentation\n\nsfistpad(1)                   Madagascar Manuals                   sfistpad(1)\n\nNAME\n       sfistpad - n-D IST interpolation using a generalized shrinkage operator\n       and zero-padding\n\nSYNOPSIS\n       sfistpad < in.rsf > out.rsf mask=Fmask.rsf pad= verb=n pow2=n niter=100\n       pclip=10. normp=1. n#= mode=\n\nCOMMENTS\n       Note: Acquistion geometry specified by mask operator\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;     'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       int    n# =      size of #-th axis\n       int    niter =100      total number of iterations\n       float  normp =1.       quasi-norm: normp<2\n       ints   pad =      number of zeros to be padded for each axis [dim]\n       float  pclip =10.       starting data clip percentile (default is 10)\n       bool   pow2 =n [y/n]     round up the length of each axis to  be  power\n              of 2\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mistpad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfistpad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfistseislet-Tuple{}","page":"Home","title":"Madagascar.sfistseislet","text":"sfistseislet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfistseislet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfistseislet. See ?m8r for examples.\n\nRSF Documentation\n\nsfistseislet(1)               Madagascar Manuals               sfistseislet(1)\n\nNAME\n       sfistseislet - Analysis-based IST interpolation using seislet (2d vali‐\n       dation)\n\nSYNOPSIS\n       sfistseislet < Fin.rsf mask=Fmask.rsf > Fout.rsf dip=Fdip.rsf  eps=0.01\n       order=1 pscale=25 verb=n niter=10 pclip=99 p=0.35 type= mode=\n\nCOMMENTS\n       IST=iterative shrinkage-thresholding\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       int    niter =10      total number iterations\n       int    order =1      accuracy order for seislet transform\n       float  p =0.35      norm=p, where 0<p<=1\n       float  pclip =99      starting data clip percentile (default is 99)\n       float  pscale =25      percentile of small scale to be  preserved  (de‐\n              fault is 25)\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mistseislet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfistseislet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitaupmo-Tuple{}","page":"Home","title":"Madagascar.sfitaupmo","text":"sfitaupmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitaupmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitaupmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfitaupmo(1)                  Madagascar Manuals                  sfitaupmo(1)\n\nNAME\n       sfitaupmo - Inverse normal moveout in tau-p domain.\n\nSYNOPSIS\n       sfitaupmo < cmp.rsf velocity=velocity.rsf > nmod.rsf eta=eta.rsf inter‐\n       val=y eps=0.01\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       string eta =      auxiliary input file name\n       bool   interval =y [y/n]     use interval velocity\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mitaupmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfitaupmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitaupmo2-Tuple{}","page":"Home","title":"Madagascar.sfitaupmo2","text":"sfitaupmo2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitaupmo2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitaupmo2. See ?m8r for examples.\n\nRSF Documentation\n\nsfitaupmo2(1)                 Madagascar Manuals                 sfitaupmo2(1)\n\nNAME\n       sfitaupmo2 - Inverse normal moveout in tau-p-x domain.\n\nSYNOPSIS\n       sfitaupmo2  <  cmp.rsf  velocity=velocity.rsf > nmod.rsf nx= dx= x0=0.0\n       nw=4\n\nPARAMETERS\n       float  dx =      offset sampling\n       int    nw =4      interpolator size (2,3,4,6,8)\n       int    nx =      number of offsets\n       file   velocity =      auxiliary input file name\n       float  x0 =0.0      first offset\nSOURCE\n       system/seismic/Mitaupmo2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfitaupmo2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitaupmo3-Tuple{}","page":"Home","title":"Madagascar.sfitaupmo3","text":"sfitaupmo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitaupmo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitaupmo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfitaupmo3(1)                 Madagascar Manuals                 sfitaupmo3(1)\n\nNAME\n       sfitaupmo3 - 3-D Inverse taup normal moveout.\n\nSYNOPSIS\n       sfitaupmo3 < cmp.rsf > nmod.rsf velocity=vel.rsf eps=0.01 slow=n inter‐\n       val=y extend=8\n\nCOMMENTS\n       velocity file contains velocity squared with n2=3 (vx,vy,vxy)\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   interval =y [y/n]     use interval velocity\n       bool   slow =n [y/n]     slowness [y] or velocity [n] squared\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mitaupmo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfitaupmo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitrace-Tuple{}","page":"Home","title":"Madagascar.sfitrace","text":"sfitrace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitrace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitrace. See ?m8r for examples.\n\nRSF Documentation\n\nsfitrace(1)                   Madagascar Manuals                   sfitrace(1)\n\nNAME\n       sfitrace -\n\nSYNOPSIS\n       sfitrace  <  xEscFile.rsf  esct=tEscFile.rsf  > xResFile.rsf zres=zRes‐\n       File.rsf x0=0.f z0=0.f p0=0.f sa0=0.f dx=5*xStep dt=0.02f\n\nPARAMETERS\n       float  dt =0.02f      time-range for point detection\n       float  dx =5*xStep      x-range for point detection\n       string esct =      escape-time file (auxiliary input file name)\n       float  p0 =0.f      migration angle\n       float  sa0 =0.f      scattering-angle\n       float  x0 =0.f      x-coordinate of the diffraction point\n       float  z0 =0.f      z-coordinate of the diffraction point\n       string zres =      auxiliary output file name\nSOURCE\n       user/aklokov/Mitrace.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfitrace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitrack2d-Tuple{}","page":"Home","title":"Madagascar.sfitrack2d","text":"sfitrack2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitrack2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitrack2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfitrack2d(1)                 Madagascar Manuals                 sfitrack2d(1)\n\nNAME\n       sfitrack2d - Datuming by 2D Green functions in constant media\n\nSYNOPSIS\n       sfitrack2d   cnn=Fnn.rsf  cff=Fff.rsf  <  Fwin.rsf  >  Fwou.rsf  verb=n\n       velo=1.0 fast=y nin=y nou=y ox=0.0 oz=0.0 angMAX=90.0 gauANG=0.3*angMAX\n\nPARAMETERS\n       float  angMAX =90.0 ®\n       file   cff =      auxiliary input file name\n       file   cnn =      auxiliary input file name\n       bool   fast =y [y/n]     fast execution\n       float  gauANG =0.3*angMAX ®\n       bool   nin =y [y/n]\n       bool   nou                                                           =y\n              [y/n]     ------------------------------------------------------------\n       float  ox =0.0 ®\n       float  oz =0.0 ®\n       float  velo =1.0      medium velocity\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mitrack2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfitrack2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitrack3d-Tuple{}","page":"Home","title":"Madagascar.sfitrack3d","text":"sfitrack3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitrack3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitrack3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfitrack3d(1)                 Madagascar Manuals                 sfitrack3d(1)\n\nNAME\n       sfitrack3d - Datuming by 3D Green functions in constant media\n\nSYNOPSIS\n       sfitrack3d   cnn=Fnn.rsf  cff=Fff.rsf  <  Fwin.rsf  >  Fwou.rsf  verb=n\n       velo=1.0  fast=y  nin=y  nou=y   ox=0.0   oy=0.0   oz=0.0   angMAX=90.0\n       gauANG=0.3*angMAX\n\nPARAMETERS\n       float  angMAX =90.0 ®\n       file   cff =      auxiliary input file name\n       file   cnn =      auxiliary input file name\n       bool   fast =y [y/n]     fast execution\n       float  gauANG =0.3*angMAX ®\n       bool   nin =y [y/n]\n       bool   nou                                                           =y\n              [y/n]     ------------------------------------------------------------\n       float  ox =0.0 ®\n       float  oy =0.0 ®\n       float  oz =0.0 ®\n       float  velo =1.0      medium velocity\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mitrack3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfitrack3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitxmo-Tuple{}","page":"Home","title":"Madagascar.sfitxmo","text":"sfitxmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitxmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitxmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfitxmo(1)                    Madagascar Manuals                    sfitxmo(1)\n\nNAME\n       sfitxmo - Forward and inverse normal moveout with interval velocity.\n\nSYNOPSIS\n       sfitxmo  <  inp.rsf > out.rsf velocity=velocity.rsf inv=n nx= dx= x0=0.\n       np= dp= p0=0. eps=0.01\n\nPARAMETERS\n       float  dp =      slope sampling\n       float  dx =      offset sampling\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]\n       int    np =      slope samples\n       int    nx =      offset samples\n       float  p0 =0.       first slope\n       file   velocity =      auxiliary input file name\n       float  x0 =0.       first offset\nSOURCE\n       system/seismic/Mitxmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfitxmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfitxmo3-Tuple{}","page":"Home","title":"Madagascar.sfitxmo3","text":"sfitxmo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfitxmo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfitxmo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfitxmo3(1)                   Madagascar Manuals                   sfitxmo3(1)\n\nNAME\n       sfitxmo3 - Forward and inverse normal moveout with interval velocity.\n\nSYNOPSIS\n       sfitxmo3  <  inp.rsf  >  out.rsf  c11=C11.rsf  c22=C22.rsf  c33=C33.rsf\n       c44=C44.rsf c55=C55.rsf c66=C66.rsf c12=C12.rsf c13=C13.rsf c23=C23.rsf\n       velocity=velocity.rsf  time=testtime.rsf  x=testx.rsf y=testy.rsf cij=n\n       inv=n nx= dx= x0=0. ny= dy= y0=0. npx= dpx=  px0=0.  npy=  dpy=  py0=0.\n       eps=0.01\n\nPARAMETERS\n       file   c11 =      auxiliary input file name\n       file   c12 =      auxiliary input file name\n       file   c13 =      auxiliary input file name\n       file   c22 =      auxiliary input file name\n       file   c23 =      auxiliary input file name\n       file   c33 =      auxiliary input file name\n       file   c44 =      auxiliary input file name\n       file   c55 =      auxiliary input file name\n       file   c66 =      auxiliary input file name\n       bool   cij =n [y/n]\n       float  dpx =      x slope sampling\n       float  dpy =      y slope sampling\n       float  dx =      x offset sampling\n       float  dy =      y offset sampling\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]\n       int    npx =      x slope samples\n       int    npy =      y slope samples\n       int    nx =      x offset samples\n       int    ny =      y offset samples\n       float  px0 =0.       x first slope\n       float  py0 =0.       y first slope\n       file   time =      auxiliary output file name\n       file   velocity =      auxiliary input file name\n       file   x =      auxiliary output file name\n       float  x0 =0.       x first offset\n       file   y =      auxiliary output file name\n       float  y0 =0.       y first offset\nSOURCE\n       system/seismic/Mitxmo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfitxmo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwarp-Tuple{}","page":"Home","title":"Madagascar.sfiwarp","text":"sfiwarp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwarp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwarp. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwarp(1)                    Madagascar Manuals                    sfiwarp(1)\n\nNAME\n       sfiwarp - Inverse 1-D warping.\n\nSYNOPSIS\n       sfiwarp < in.rsf > out.rsf warp=warp.rsf inv=y n1=nt eps=0.01 d1=1 o1=0\n\nCOMMENTS\n       September        2012        program        of        the        month:\n       http://ahay.org/blog/2012/09/03/program-of-the-month-sfiwarp/\n\nPARAMETERS\n       float  d1 =1      output sampling - for inv=y\n       float  eps =0.01      stretch regularization\n       bool   inv =y [y/n]     inversion flag\n       int    n1 =nt      output samples - for inv=y\n       float  o1 =0      output origin - for inv=y\n       file   warp =      auxiliary input file name\nSOURCE\n       system/generic/Miwarp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfiwarp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwarp2-Tuple{}","page":"Home","title":"Madagascar.sfiwarp2","text":"sfiwarp2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwarp2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwarp2. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwarp2(1)                   Madagascar Manuals                   sfiwarp2(1)\n\nNAME\n       sfiwarp2 - Inverse 2-D warping\n\nSYNOPSIS\n       sfiwarp2  <  in.rsf  > out.rsf warp=warp.rsf inv=y n1=nt n2=nx eps=0.01\n       d1=1 o1=0 d2=1 o2=0\n\nPARAMETERS\n       int    d1 =1      output sampling - for inv=y\n       float  d2 =1      output sampling - for inv=y\n       float  eps =0.01      stretch regularization\n       bool   inv =y [y/n]     inversion flag\n       int    n1 =nt ®\n       int    n2 =nx      output samples - for inv=y\n       float  o1 =0      output origin - for inv=y\n       float  o2 =0      output origin - for inv=y\n       file   warp =      auxiliary input file name\nSOURCE\n       system/seismic/Miwarp2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfiwarp2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwarp3-Tuple{}","page":"Home","title":"Madagascar.sfiwarp3","text":"sfiwarp3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwarp3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwarp3. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwarp3(1)                   Madagascar Manuals                   sfiwarp3(1)\n\nNAME\n       sfiwarp3 - Inverse 3-D warping\n\nSYNOPSIS\n       sfiwarp3  <  in.rsf  >  out.rsf  warp=warp.rsf  inv=y n1=nt n2=ny n3=nx\n       eps=0.01 d1=1 o1=0\n\nPARAMETERS\n       float  d1 =1      output sampling - for inv=y\n       float  eps =0.01      stretch regularization\n       bool   inv =y [y/n]     inversion flag\n       int    n1 =nt ®\n       int    n2 =ny ®\n       int    n3 =nx      output samples - for inv=y\n       float  o1 =0      output origin - for inv=y\n       file   warp =      auxiliary input file name\nSOURCE\n       system/seismic/Miwarp3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfiwarp3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwigrad-Tuple{}","page":"Home","title":"Madagascar.sfiwigrad","text":"sfiwigrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwigrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwigrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwigrad(1)                  Madagascar Manuals                  sfiwigrad(1)\n\nNAME\n       sfiwigrad - Image-domain waveform tomography (gradient).\n\nSYNOPSIS\n       sfiwigrad   <   in.rsf   >   out.rsf   source=source.rsf  data=data.rsf\n       imask=imask.rsf weight=weight.rsf precon=precon.rsf verb=n nh=0  load=n\n       update=y  uts=0 npml=10 prect1=5 prect2=1 prect3=5 pliter=20 plower=0.1\n       pupper=3.  dorder=6  grect1=5  grect2=5  gliter=1  geps=0.   gscale=0.5\n       miter=10 lower=1.5 upper=7.5 order= cost=\n\nPARAMETERS\n       string cost =      cost functional type (default classic DSO)\n       string data =      auxiliary input file name\n       int    dorder =6      image derivative accuracy order\n       float  geps =0.       regularization parameter for Gauss-Newton\n       int    gliter =1      # of Gauss-Newton iterations\n       int    grect1 =5      gradient smoothing radius on axis 1\n       int    grect2 =5      gradient smoothing radius on axis 2\n       float  gscale =0.5      gradient re-scale\n       string imask =      auxiliary input file name\n       bool   load =n [y/n]     load LU\n       float  lower =1.5      lower bound of feasible set\n       int    miter =10      Nonlinear-CG maximum # of iterations\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       int    pliter =20      slope estimation # of linear iterations\n       float  plower =0.1      slope thresholding lower limit\n       string precon =      auxiliary input file name\n       int    prect1 =5      slope smoothing radius on axis 1\n       int    prect2 =1      slope smoothing radius on axis 2\n       int    prect3 =5      slope smoothing radius on axis 3\n       float  pupper =3.       slope thresholding upper limit\n       string source =      auxiliary input file name\n       bool   update =y [y/n]     Non-linear CG update\n       float  upper =7.5      upper bound of feasible set\n       int    uts =0      number of OMP threads\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwigrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfiwigrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwiiter-Tuple{}","page":"Home","title":"Madagascar.sfiwiiter","text":"sfiwiiter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwiiter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwiiter. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwiiter(1)                  Madagascar Manuals                  sfiwiiter(1)\n\nNAME\n       sfiwiiter - Image-domain waveform tomography.\n\nSYNOPSIS\n       sfiwiiter  <  in.rsf  >  out.rsf  model=model.rsf  us=us.rsf  ur=ur.rsf\n       weight=weight.rsf  precon=precon.rsf  miter=miter.rsf   riter=riter.rsf\n       verb=n  nh=0  load=n  uts=0  npml=10  mass=n  cgiter=10  shape=n reg=0.\n       tol=1.e-6 rect1=1 rect2=1 order=\n\nPARAMETERS\n       int    cgiter =10      number of conjugate-gradient iterations\n       bool   load =n [y/n]     load LU\n       bool   mass =n [y/n]     if y, use discretization-based mass term\n       string miter =      auxiliary output file name\n       string model =      auxiliary input file name\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string precon =      auxiliary input file name\n       int    rect1 =1      smoothing radius on axis 1\n       int    rect2 =1      smoothing radius on axis 2\n       float  reg =0.       regularization parameter\n       file   riter =      auxiliary output file name\n       bool   shape =n [y/n]     regularization (default Tikhnov)\n       float  tol =1.e-6      tolerance for shaping regularization\n       string ur =      auxiliary input file name\n       string us =      auxiliary input file name\n       int    uts =0      number of OMP threads\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwiiter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfiwiiter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwiiter0-Tuple{}","page":"Home","title":"Madagascar.sfiwiiter0","text":"sfiwiiter0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwiiter0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwiiter0. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwiiter0(1)                 Madagascar Manuals                 sfiwiiter0(1)\n\nNAME\n       sfiwiiter0 - Image-domain waveform tomography.\n\nSYNOPSIS\n       sfiwiiter0  <  in.rsf  >  out.rsf  model=model.rsf  us=us.rsf ur=ur.rsf\n       weight=weight.rsf  precon=precon.rsf  miter=miter.rsf   riter=riter.rsf\n       verb=n  nh=0  uts=0  npml=10  mass=n cgiter=10 shape=n reg=0. tol=1.e-6\n       rect1=1 rect2=1 order=\n\nPARAMETERS\n       int    cgiter =10      number of conjugate-gradient iterations\n       bool   mass =n [y/n]     if y, use discretization-based mass term\n       string miter =      auxiliary output file name\n       string model =      auxiliary input file name\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string precon =      auxiliary input file name\n       int    rect1 =1      smoothing radius on axis 1\n       int    rect2 =1      smoothing radius on axis 2\n       float  reg =0.       regularization parameter\n       file   riter =      auxiliary output file name\n       bool   shape =n [y/n]     regularization (default Tikhnov)\n       float  tol =1.e-6      tolerance for shaping regularization\n       string ur =      auxiliary input file name\n       string us =      auxiliary input file name\n       int    uts =0      number of OMP threads\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwiiter0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfiwiiter0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwilbfgs-Tuple{}","page":"Home","title":"Madagascar.sfiwilbfgs","text":"sfiwilbfgs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwilbfgs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwilbfgs. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwilbfgs(1)                 Madagascar Manuals                 sfiwilbfgs(1)\n\nNAME\n       sfiwilbfgs - Image-domain waveform tomography (L-BFGS).\n\nSYNOPSIS\n       sfiwilbfgs   <   in.rsf   >   out.rsf  source=source.rsf  data=data.rsf\n       wdso=wdso.rsf wstk=wstk.rsf precon=precon.rsf grad=grad.rsf verb=y  de‐\n       riv=y  nh=0  load=n  uts=0 npml=10 beta=0. grect1=5 grect2=5 gscale=-1.\n       nhess=6 miter=10 mline=5 epsilon=1.e-7 lower=1.5 upper=7.5 order=\n\nPARAMETERS\n       float  beta =0.       stacking power cost function\n       string data =      auxiliary input file name\n       bool   deriv =y [y/n]     if y, apply derivative in z\n       float  epsilon =1.e-7      L-BFGS termination epsilon\n       string grad =      auxiliary output file name\n       int    grect1 =5      gradient smoothing radius on axis 1\n       int    grect2 =5      gradient smoothing radius on axis 2\n       float  gscale =-1.       gradient re-scale (enabled if (0,1))\n       bool   load =n [y/n]     load LU\n       float  lower =1.5      lower bound of feasible set\n       int    miter =10      L-BFGS maximum # of iterations\n       int    mline =5      L-BFGS maximum # of line search\n       int    nh =0      horizontal space-lag\n       int    nhess =6      L-BFGS # of Hessian corrections\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string precon =      auxiliary input file name\n       string source =      auxiliary input file name\n       float  upper =7.5      upper bound of feasible set\n       int    uts =0      number of OMP threads\n       bool   verb =y [y/n]     verbosity flag\n       string wdso =      auxiliary input file name\n       string wstk =      auxiliary input file name\nSOURCE\n       user/sparse/Miwilbfgs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfiwilbfgs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwinlcg-Tuple{}","page":"Home","title":"Madagascar.sfiwinlcg","text":"sfiwinlcg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwinlcg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwinlcg. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwinlcg(1)                  Madagascar Manuals                  sfiwinlcg(1)\n\nNAME\n       sfiwinlcg - Image-domain waveform tomography (Non-linear CG).\n\nSYNOPSIS\n       sfiwinlcg   <   in.rsf   >   out.rsf   source=source.rsf  data=data.rsf\n       imask=imask.rsf   weight=weight.rsf   precon=precon.rsf   grad=grad.rsf\n       objt=objt.rsf  imag=imag.rsf  verb=y nh=0 load=n update=y uts=0 npml=10\n       prect1=5 prect2=1  prect3=5  pliter=20  plower=0.1  pupper=3.  dorder=6\n       grect1=5   grect2=5   gliter=5   geps=0.  gscale=0.1  miter=10  liter=5\n       delta=1.e-5 lower=1.5 upper=7.5 order= cost=\n\nPARAMETERS\n       string cost =      cost functional type (default Weibull)\n       string data =      auxiliary input file name\n       float  delta =1.e-5      Nonlinear-CG convergence criteria\n       int    dorder =6      image derivative accuracy order\n       float  geps =0.       regularization parameter for Gauss-Newton\n       int    gliter =5      # of Gauss-Newton iterations\n       string grad =      auxiliary output file name\n       int    grect1 =5      gradient smoothing radius on axis 1\n       int    grect2 =5      gradient smoothing radius on axis 2\n       float  gscale =0.1      gradient re-scale\n       string imag =      auxiliary output file name\n       string imask =      auxiliary input file name\n       int    liter =5      Nonlinear-CG maximum # of line searches\n       bool   load =n [y/n]     load LU\n       float  lower =1.5      lower bound of feasible set\n       int    miter =10      Nonlinear-CG maximum # of iterations\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string objt =      auxiliary output file name\n       string order =      discretization scheme (default optimal 25-point)\n       int    pliter =20      slope estimation # of linear iterations\n       float  plower =0.1      slope thresholding lower limit\n       string precon =      auxiliary input file name\n       int    prect1 =5      slope smoothing radius on axis 1\n       int    prect2 =1      slope smoothing radius on axis 2\n       int    prect3 =5      slope smoothing radius on axis 3\n       float  pupper =3.       slope thresholding upper limit\n       string source =      auxiliary input file name\n       bool   update =y [y/n]     y, nonlinear CG; n, Gauss-Newton\n       float  upper =7.5      upper bound of feasible set\n       int    uts =0      number of OMP threads\n       bool   verb =y [y/n]     verbosity flag\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwinlcg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfiwinlcg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwioper-Tuple{}","page":"Home","title":"Madagascar.sfiwioper","text":"sfiwioper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwioper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwioper. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwioper(1)                  Madagascar Manuals                  sfiwioper(1)\n\nNAME\n       sfiwioper - Image-domain waveform tomography (linear operator).\n\nSYNOPSIS\n       sfiwioper  <  in.rsf  >  out.rsf  model=model.rsf  us=us.rsf  ur=ur.rsf\n       weight=weight.rsf precon=precon.rsf adj=n  nh=0  load=n  uts=0  npml=10\n       mass=n order=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   load =n [y/n]     load LU\n       bool   mass =n [y/n]     if y, use discretization-based mass term\n       string model =      auxiliary input file name\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string precon =      auxiliary input file name\n       string ur =      auxiliary input file name\n       string us =      auxiliary input file name\n       int    uts =0      number of OMP threads\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwioper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfiwioper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwioper0-Tuple{}","page":"Home","title":"Madagascar.sfiwioper0","text":"sfiwioper0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwioper0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwioper0. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwioper0(1)                 Madagascar Manuals                 sfiwioper0(1)\n\nNAME\n       sfiwioper0 - Image-domain waveform tomography (linear operator).\n\nSYNOPSIS\n       sfiwioper0  <  in.rsf  >  out.rsf  model=model.rsf  us=us.rsf ur=ur.rsf\n       weight=weight.rsf precon=precon.rsf adj=n nh=0 uts=0 npml=10 mass=n or‐\n       der=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       bool   mass =n [y/n]     if y, use discretization-based mass term\n       string model =      auxiliary input file name\n       int    nh =0      horizontal space-lag\n       int    npml =10      PML width\n       string order =      discretization scheme (default optimal 9-point)\n       string precon =      auxiliary input file name\n       string ur =      auxiliary input file name\n       string us =      auxiliary input file name\n       int    uts =0      number of OMP threads\n       string weight =      auxiliary input file name\nSOURCE\n       user/sparse/Miwioper0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfiwioper0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfiwipert-Tuple{}","page":"Home","title":"Madagascar.sfiwipert","text":"sfiwipert(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfiwipert on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfiwipert. See ?m8r for examples.\n\nRSF Documentation\n\nsfiwipert(1)                  Madagascar Manuals                  sfiwipert(1)\n\nNAME\n       sfiwipert - Image-domain waveform tomography (image perturbation).\n\nSYNOPSIS\n       sfiwipert < in.rsf > out.rsf pz=pz.rsf ph=ph.rsf thres=0.01\n\nPARAMETERS\n       string ph =      auxiliary input file name\n       string pz =      auxiliary input file name\n       float  thres =0.01      slope thresholding\nSOURCE\n       user/llisiw/Miwipert.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfiwipert(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjacobi-Tuple{}","page":"Home","title":"Madagascar.sfjacobi","text":"sfjacobi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjacobi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjacobi. See ?m8r for examples.\n\nRSF Documentation\n\nsfjacobi(1)                   Madagascar Manuals                   sfjacobi(1)\n\nNAME\n       sfjacobi  -  Find  eigenvalues of a symmetric matrix by Jacobi's itera‐\n       tion.\n\nSYNOPSIS\n       sfjacobi < mat.rsf > val.rsf eig=eig.rsf niter=10\n\nPARAMETERS\n       string eig =      auxiliary output file name\n       int    niter =10 ®\nSOURCE\n       system/generic/Mjacobi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfjacobi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjacobi2-Tuple{}","page":"Home","title":"Madagascar.sfjacobi2","text":"sfjacobi2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjacobi2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjacobi2. See ?m8r for examples.\n\nRSF Documentation\n\nsfjacobi2(1)                  Madagascar Manuals                  sfjacobi2(1)\n\nNAME\n       sfjacobi2 - Find eigenvalues of a general complex matrix by Jacobi-like\n       iteration.\n\nSYNOPSIS\n       sfjacobi2 < mat.rsf > val.rsf niter=10 verb=n\n\nPARAMETERS\n       int    niter =10 ®\n       bool   verb =n [y/n]\nSOURCE\n       system/generic/Mjacobi2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfjacobi2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjitter-Tuple{}","page":"Home","title":"Madagascar.sfjitter","text":"sfjitter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjitter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjitter. See ?m8r for examples.\n\nRSF Documentation\n\nsfjitter(1)                   Madagascar Manuals                   sfjitter(1)\n\nNAME\n       sfjitter -\n\nSYNOPSIS\n       sfjitter perc=.75 jit=1/(1-perc seed=np.random.randn(\n\nCOMMENTS\n       Return mask to remove random traces in 2D using jittered sampling\n\nPARAMETERS\n       float  jit =1/(1-perc ®\n       float  perc =.75      percentage of traces to remove\n       int    seed =np.random.randn( ®\nSOURCE\n       user/slim/Mjitter.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfjitter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjoiner-Tuple{}","page":"Home","title":"Madagascar.sfjoiner","text":"sfjoiner(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjoiner on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjoiner. See ?m8r for examples.\n\nRSF Documentation\n\nsfjoiner(1)                   Madagascar Manuals                   sfjoiner(1)\n\nNAME\n       sfjoiner - Join two selected points along the first dimension\n\nSYNOPSIS\n       sfjoiner < in.rsf index=index_FILE.rsf > out.rsf nw=\n\nPARAMETERS\n       file   index =      auxiliary input file name\n       int    nw =      length of joining window\nSOURCE\n       user/lcasasan/Mjoiner.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfjoiner(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjpg2byte-Tuple{}","page":"Home","title":"Madagascar.sfjpg2byte","text":"sfjpg2byte(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjpg2byte on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjpg2byte. See ?m8r for examples.\n\nRSF Documentation\n\nsfjpg2byte(1)                 Madagascar Manuals                 sfjpg2byte(1)\n\nNAME\n       sfjpg2byte - Convert JPEG image to byte RSF.\n\nSYNOPSIS\n       sfjpg2byte > out.rsf < file.jpeg\n\nSOURCE\n       user/fomels/_jpg2byte.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfjpg2byte(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfjudgechaos-Tuple{}","page":"Home","title":"Madagascar.sfjudgechaos","text":"sfjudgechaos(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfjudgechaos on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfjudgechaos. See ?m8r for examples.\n\nRSF Documentation\n\nsfjudgechaos(1)               Madagascar Manuals               sfjudgechaos(1)\n\nNAME\n       sfjudgechaos - Judgement of chaos\n\nSYNOPSIS\n       sfjudgechaos  < in.rsf > out.rsf mask=mask.rsf gx=2.0 delta=0.01 verb=n\n       fixgrid=n ma=n\n\nCOMMENTS\n       Input  - Complex; Output - Float\n\nPARAMETERS\n       float  delta =0.01      The cell size of grid\n       bool   fixgrid =n [y/n]     if y ,the total size of grid determined  by\n              gx\n       float  gx =2.0      Total Size of fixed grid\n       bool   ma =n [y/n]     if y ,output auxilily file = mask\n       string mask =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mjudgechaos.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfjudgechaos(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkarlistinterp-Tuple{}","page":"Home","title":"Madagascar.sfkarlistinterp","text":"sfkarlistinterp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkarlistinterp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkarlistinterp. See ?m8r for examples.\n\nRSF Documentation\n\nsfkarlistinterp(1)            Madagascar Manuals            sfkarlistinterp(1)\n\nNAME\n       sfkarlistinterp  -  n-D IST interpolation using a general Lp-norm opti‐\n       mization\n\nSYNOPSIS\n       sfkarlistinterp < in.rsf  >  out.rsf  mask=Fmask.rsf  verb=n  niter=100\n       pclip=10. n#=\n\nCOMMENTS\n       Note: acquistion geometry illustrated by mask operator\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    n# =      size of #-th axis\n       int    niter =100      total number iterations\n       float  pclip =10.       starting data clip percentile (default is 99)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/karl/Mkarlistinterp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfkarlistinterp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkarlpocs-Tuple{}","page":"Home","title":"Madagascar.sfkarlpocs","text":"sfkarlpocs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkarlpocs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkarlpocs. See ?m8r for examples.\n\nRSF Documentation\n\nsfkarlpocs(1)                 Madagascar Manuals                 sfkarlpocs(1)\n\nNAME\n       sfkarlpocs  -  n-D POCS interpolation using a general Lp-norm optimiza‐\n       tion\n\nSYNOPSIS\n       sfkarlpocs < in.rsf > out.rsf mask=Fmask.rsf verb=n niter=100 pclip=10.\n       n#=\n\nCOMMENTS\n       Note: Acquistion geometry represented by mask operator.\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    n# =      size of #-th axis\n       int    niter =100      total number iterations\n       float  pclip =10.       starting data clip percentile (default is 99)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/karl/Mkarlpocs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkarlpocs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkarman-Tuple{}","page":"Home","title":"Madagascar.sfkarman","text":"sfkarman(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkarman on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkarman. See ?m8r for examples.\n\nRSF Documentation\n\nsfkarman(1)                   Madagascar Manuals                   sfkarman(1)\n\nNAME\n       sfkarman - Estimation of von Karman autocorrelation 1D spectrum.\n\nSYNOPSIS\n       sfkarman < in.rsf > out.rsf x0=1. niter=100 nliter=1 verb=n\n\nPARAMETERS\n       int    niter =100      number of iterations\n       int    nliter =1      number of reweighting iterations\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =1.       initial squared length scale\nSOURCE\n       user/browaeys/Mkarman.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkarman(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkarman2-Tuple{}","page":"Home","title":"Madagascar.sfkarman2","text":"sfkarman2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkarman2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkarman2. See ?m8r for examples.\n\nRSF Documentation\n\nsfkarman2(1)                  Madagascar Manuals                  sfkarman2(1)\n\nNAME\n       sfkarman2  -  Estimation  of  von Karman autocorrelation 2D spectrum by\n       nonlinear separable least squares.\n\nSYNOPSIS\n       sfkarman2 < in.rsf > out.rsf a0=1000. b0=0. c0=400. niter=100 verb=n\n\nPARAMETERS\n       float  a0 =1000.       starting correlation length in xx\n       float  b0 =0.       starting correlation length in xy\n       float  c0 =400.       starting correlation length in yy\n       int    niter =100      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/browaeys/Mkarman2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkarman2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkarmans-Tuple{}","page":"Home","title":"Madagascar.sfkarmans","text":"sfkarmans(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkarmans on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkarmans. See ?m8r for examples.\n\nRSF Documentation\n\nsfkarmans(1)                  Madagascar Manuals                  sfkarmans(1)\n\nNAME\n       sfkarmans - Inversion for von Karman autocorrelation 1D spectrum.\n\nSYNOPSIS\n       sfkarmans  <  in.rsf  >  out.rsf  prm=prm.rsf niter=100 x10=6. x20=-0.5\n       x30=200. verb=n\n\nPARAMETERS\n       int    niter =100      number of iterations\n       file   prm =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\n       float  x10 =6.       initial nonlinear parameter x1 value\n       float  x20 =-0.5      initial nonlinear parameter x2 value\n       float  x30 =200.       initial nonlinear parameter x3 value\nSOURCE\n       user/browaeys/Mkarmans.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkarmans(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkdmig2d-Tuple{}","page":"Home","title":"Madagascar.sfkdmig2d","text":"sfkdmig2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkdmig2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkdmig2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfkdmig2d(1)                  Madagascar Manuals                  sfkdmig2d(1)\n\nNAME\n       sfkdmig2d - 2-D Prestack Kirchhoff depth migration (SU version).\n\nSYNOPSIS\n       sfkdmig2d  < infp.rsf > outfp.rsf verb=n dxm=0.5*ds rscale=RSCALE_KDMIG\n       nxo=(nxt-1)*2+1 fxo=fxt dxo=dxt*0.5 nzo=(nzt-1)*5+1 fzo=fzt dzo=dzt*0.2\n       v0=1.5   dvz=0  angmax=60.  aperx=0.5*nxt*dxt  offmax=3.0  fmax=0.25/dt\n       noff=1 off0=0. doff=0.1 ls=1 absoff=0 limoff=0  ntr=sf_leftsize  (infp,\n       1) mtr=100 npv=0 ttfile= tvfile= csfile= outfile1=\n\nPARAMETERS\n       int    absoff  =0      1 - use absolute value of offset, 0 - use offset\n              =gx-sx\n       float  angmax =60.       migration angle aperature from vertical\n       float  aperx =0.5*nxt*dxt      migration lateral aperature\n       string csfile =      input file of cosine tables\n       float  doff =0.1      offset increment in output\n       float  dvz =0      reference velocity vertical gradient\n       float  dxm =0.5*ds      sampling interval of midpoints\n       float  dxo =dxt*0.5      horizontal spacing of output trace\n       float  dzo =dzt*0.2      vertical spacing of output trace\n       float  fmax =0.25/dt      frequency-highcut for input traces\n       float  fxo =fxt      x-coordinate of first output trace\n       float  fzo =fzt      z-coordinate of first point in output trace\n       int    limoff =0      1 - limit traces used by  offset,  0  -  use  all\n              traces\n       int    ls =1      flag for line source\n       int    mtr =100      print verbal information at every mtr traces\n       int    noff =1      number of offsets in output\n       int    npv =0      1 - compute quantities for velocity analysis\n       int    ntr  =sf_leftsize  (infp, 1)      maximum number of input traces\n              to be migrated\n       int    nxo =(nxt-1)*2+1      number of output traces\n       int    nzo =(nzt-1)*5+1      number of points in output trace\n       float  off0 =0.       first offest in output\n       float  offmax =3.0      maximum absolute offset allowed in migration\n       string outfile1 =      file containning additional migration output\n       float  rscale =RSCALE_KDMIG      scaling for roundoff error suppression\n       string ttfile =      input traveltime tables\n       string tvfile =      input file of traveltime variation tables\n       float  v0 =1.5      reference velocity value at surface\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       su/main/kdmig2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkdmig2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkdsort-Tuple{}","page":"Home","title":"Madagascar.sfkdsort","text":"sfkdsort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkdsort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkdsort. See ?m8r for examples.\n\nRSF Documentation\n\nsfkdsort(1)                   Madagascar Manuals                   sfkdsort(1)\n\nNAME\n       sfkdsort - Sort entries based on k-D tree.\n\nSYNOPSIS\n       sfkdsort < inp.rsf > out.rsf\n\nSOURCE\n       user/fomels/Mkdsort.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkdsort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkdtree-Tuple{}","page":"Home","title":"Madagascar.sfkdtree","text":"sfkdtree(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkdtree on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkdtree. See ?m8r for examples.\n\nRSF Documentation\n\nsfkdtree(1)                   Madagascar Manuals                   sfkdtree(1)\n\nNAME\n       sfkdtree - Test k-D tree algorithm.\n\nSYNOPSIS\n       sfkdtree < inp.rsf > out.rsf point=\n\nPARAMETERS\n       floats point =       [nd]\nSOURCE\n       user/fomels/Mkdtree.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkdtree(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkernel-Tuple{}","page":"Home","title":"Madagascar.sfkernel","text":"sfkernel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkernel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkernel. See ?m8r for examples.\n\nRSF Documentation\n\nsfkernel(1)                   Madagascar Manuals                   sfkernel(1)\n\nNAME\n       sfkernel - Test migration kernel.\n\nSYNOPSIS\n       sfkernel ncalls=5000\n\nPARAMETERS\n       int    ncalls =5000      number of calls\nSOURCE\n       user/mccowan/Mkernel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkernel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkhshot-Tuple{}","page":"Home","title":"Madagascar.sfkhshot","text":"sfkhshot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkhshot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkhshot. See ?m8r for examples.\n\nRSF Documentation\n\nsfkhshot(1)                   Madagascar Manuals                   sfkhshot(1)\n\nNAME\n       sfkhshot - Kirchhoff shot migration\n\nSYNOPSIS\n       sfkhshot   <   Fin.rsf   >  Fout.rsf  ttfile=Ftt.rsf  verb=n  theta=30.\n       dtheta=theta/3 df=5. fmax=.5/d1 ntaper=11 tmin=3*d1 xs=  nx=n2t  ox=o2t\n       dx=d2t nz=n1t oz=o1t dz=d1t\n\nPARAMETERS\n       float  df =5.       anti-aliasing sampling\n       float  dtheta =theta/3      taper zone\n       float  dx =d2t ®\n       float  dz =d1t      checking dimensions\n       float  fmax =.5/d1 ®\n       int    ntaper =11 ®\n       int    nx =n2t ®\n       int    nz =n1t ®\n       float  ox =o2t ®\n       float  oz =o1t ®\n       float  theta =30.       maximum dip\n       float  tmin =3*d1 ®\n       file   ttfile =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  xs =      image parameters\nSOURCE\n       user/effsilva/Mkhshot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkhshot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkill-Tuple{}","page":"Home","title":"Madagascar.sfkill","text":"sfkill(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkill on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkill. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkilltraces-Tuple{}","page":"Home","title":"Madagascar.sfkilltraces","text":"sfkilltraces(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkilltraces on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkilltraces. See ?m8r for examples.\n\nRSF Documentation\n\nsfkilltraces(1)               Madagascar Manuals               sfkilltraces(1)\n\nNAME\n       sfkilltraces -\n\nSYNOPSIS\n       sfkilltraces perc=.75 maxfactor=1. seed=np.random.randn(\n\nCOMMENTS\n       Return  mask  to  remove random traces in 2D and 3D using a maximum gap\n       size constraint\n\nPARAMETERS\n       float  maxfactor =1.       maximum gap factor\n       float  perc =.75      percentage of traces to remove\n       int    seed =np.random.randn( ®\nSOURCE\n       user/slim/Mkilltraces.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfkilltraces(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkine2dvti-Tuple{}","page":"Home","title":"Madagascar.sfkine2dvti","text":"sfkine2dvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkine2dvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkine2dvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfkine2dvti(1)                Madagascar Manuals                sfkine2dvti(1)\n\nNAME\n       sfkine2dvti  -  2-D two-components wavefield modeling using pseudo-pure\n       mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sfkine2dvti > Fo1.rsf WFp=Fo2.rsf WFs=Fo3.rsf  nx=201  nz=201  dx=0.008\n       dz=0.008 time=0.2 da=0.05 vp0=3000.0 vs0=1200.0 eps=0.2 del=0.1 the=0.0\n       t0=0.04 f0=20.0\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China Authors:  Jiubing\n       Cheng and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   WFp =      auxiliary output file name\n       file   WFs =      auxiliary output file name\n       float  da =0.05 ®\n       float  del =0.1 ®\n       float  dx =0.008 ®\n       float  dz =0.008 ®\n       float  eps =0.2 ®\n       float  f0 =20.0 ®\n       int    nx =201 ®\n       int    nz =201 ®\n       float  t0 =0.04 ®\n       float  the =0.0 ®\n       float  time =0.2      unit: SECOND\n       float  vp0 =3000.0 ®\n       float  vs0 =1200.0 ®\nSOURCE\n       user/chengjb/Mkine2dvti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfkine2dvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirchinv-Tuple{}","page":"Home","title":"Madagascar.sfkirchinv","text":"sfkirchinv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirchinv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirchinv. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirchinv(1)                 Madagascar Manuals                 sfkirchinv(1)\n\nNAME\n       sfkirchinv - Kirchhoff 2-D post-stack least-squares time migration with\n       antialiasing.\n\nSYNOPSIS\n       sfkirchinv < in.rsf > out.rsf fweight=fwght.rsf weight=wght.rsf  veloc‐\n       ity=vel.rsf model0=in0.rsf hd=y ps=y sw=0 niter=10 err=\n\nCOMMENTS\n       Antialiasing by reparameterization.\n\nPARAMETERS\n       string err =      output file for error\n       string fweight =      auxiliary input file name\n       bool   hd =y [y/n]     if y, apply half-derivative filter\n       string model0 =      auxiliary input file name\n       int    niter =10      number of iterations\n       bool   ps =y [y/n]     if y, apply pseudo-unitary weighting\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       file   velocity =      auxiliary input file name\n       file   weight =      auxiliary input file name\nSOURCE\n       system/seismic/Mkirchinv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkirchinv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirchinvs-Tuple{}","page":"Home","title":"Madagascar.sfkirchinvs","text":"sfkirchinvs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirchinvs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirchinvs. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirchinvs(1)                Madagascar Manuals                sfkirchinvs(1)\n\nNAME\n       sfkirchinvs  -  Kirchhoff  2-D  post-stack least-squares time migration\n       with sparse constrains.\n\nSYNOPSIS\n       sfkirchinvs < in.rsf > out.rsf velocity=vel.rsf hd=y ps=y  verb=n  sw=0\n       niter=5 liter=5 eps=0. err=\n\nCOMMENTS\n       Antialiasing by reparameterization.\n\nPARAMETERS\n       float  eps =0.       regularization parameters\n       string err =      output file for error\n       bool   hd =y [y/n]     if y, apply half-derivative filter\n       int    liter =5      number of linear iterations\n       int    niter  =5       number  of  non-linear iterations, when niter=1,\n              it's linear\n       bool   ps =y [y/n]     if y, apply pseudo-unitary weighting\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/seisinv/Mkirchinvs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfkirchinvs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirchnew-Tuple{}","page":"Home","title":"Madagascar.sfkirchnew","text":"sfkirchnew(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirchnew on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirchnew. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirchnew(1)                 Madagascar Manuals                 sfkirchnew(1)\n\nNAME\n       sfkirchnew  - Kirchhoff 2-D post-stack time migration and modeling with\n       antialiasing.\n\nSYNOPSIS\n       sfkirchnew < in.rsf > out.rsf velocity=vel.rsf adj=y hd=y sw=0 v0=\n\nCOMMENTS\n       Antialiasing by reparameterization.\n\nPARAMETERS\n       bool   adj =y [y/n]     yes: migration, no: modeling\n       bool   hd =y [y/n]     if y, apply half-derivative filter\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       float  v0 =      constant velocity (if no velocity=)\n       string velocity =      velocity file (auxiliary input file name)\nUSED IN\n       bei/dpmv/krchdmo\n       bei/dwnc/sigmoid\n       bei/krch/wgkirch\nSOURCE\n       system/seismic/Mkirchnew.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkirchnew(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirdat-Tuple{}","page":"Home","title":"Madagascar.sfkirdat","text":"sfkirdat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirdat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirdat. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirdat(1)                   Madagascar Manuals                   sfkirdat(1)\n\nNAME\n       sfkirdat - 2-D Pre-stack Kirchhoff redatuming.\n\nSYNOPSIS\n       sfkirdat  <  in.rsf  >  out.rsf sgreen=sgreen.rsf rgreen=rgreen.rsf in‐\n       term=interm.rsf verb=n datum= aperture=50 taper=10 length=0.025\n\nPARAMETERS\n       int    aperture =50      aperture (number of traces)\n       float  datum =      datum depth\n       string interm =      auxiliary output file name\n       float  length =0.025      filter length (in seconds)\n       file   rgreen =      auxiliary input file name\n       file   sgreen =      auxiliary input file name\n       int    taper =10      taper (number of traces)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/llisiw/Mkirdat.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkirdat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirdat0-Tuple{}","page":"Home","title":"Madagascar.sfkirdat0","text":"sfkirdat0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirdat0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirdat0. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirdat0(1)                  Madagascar Manuals                  sfkirdat0(1)\n\nNAME\n       sfkirdat0 - 2-D Post-stack Kirchhoff redatuming.\n\nSYNOPSIS\n       sfkirdat0  < in.rsf > out.rsf green=green.rsf verb=n datum= aperture=50\n       taper=10 length=0.025\n\nPARAMETERS\n       int    aperture =50      aperture (number of traces)\n       float  datum =      datum depth\n       file   green =      auxiliary input file name\n       float  length =0.025      filter length (in seconds)\n       int    taper =10      taper (number of traces)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/llisiw/Mkirdat0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkirdat0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirdatsr-Tuple{}","page":"Home","title":"Madagascar.sfkirdatsr","text":"sfkirdatsr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirdatsr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirdatsr. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirdatsr(1)                 Madagascar Manuals                 sfkirdatsr(1)\n\nNAME\n       sfkirdatsr - 2-D Pre-stack Kirchhoff redatuming.\n\nSYNOPSIS\n       sfkirdatsr  <  in.rsf > out.rsf sgreen=sgreen.rsf rgreen=rgreen.rsf in‐\n       term=interm.rsf   verb=n   sdatum=   rdatum=    aperture=50    taper=10\n       length=0.025\n\nPARAMETERS\n       int    aperture =50      aperture (number of traces)\n       string interm =      auxiliary output file name\n       float  length =0.025      filter length (in seconds)\n       float  rdatum =      receiver datum depth\n       file   rgreen =      auxiliary input file name\n       float  sdatum =      source datum depth\n       file   sgreen =      auxiliary input file name\n       int    taper =10      taper (number of traces)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/llisiw/Mkirdatsr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkirdatsr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmig-Tuple{}","page":"Home","title":"Madagascar.sfkirmig","text":"sfkirmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmig(1)                   Madagascar Manuals                   sfkirmig(1)\n\nNAME\n       sfkirmig - 2-D Prestack Kirchhoff depth migration.\n\nSYNOPSIS\n       sfkirmig  <  dat.rsf  > mig.rsf table=tbl.rsf deriv=der.rsf adj=y cmp=y\n       nt= nh=1 ns=1 t0=0.0 dt= h0=0.0 dh= s0=0.0 ds= tau=0. aperture=90.  an‐\n       tialias=1.0 cig=n type=\n\nPARAMETERS\n       bool   adj =y [y/n]     y for migration, n for modeling\n       float  antialias =1.0      antialiasing\n       float  aperture =90.       migration aperture (in degree)\n       bool   cig =n [y/n]     y - output common offset/receiver gathers\n       bool   cmp =y [y/n]     y for CMP gather, n for shot gather\n       file   deriv =      auxiliary input file name\n       float  dh =      offset/receiver sampling\n       float  ds =      shot sampling\n       float  dt =      time sampling\n       float  h0 =0.0      offset/receiver origin\n       int    nh =1      offset/receiver samples\n       int    ns =1      shot samples\n       int    nt =      time samples\n       float  s0 =0.0      shot origin\n       float  t0 =0.0      time origin\n       file   table =      auxiliary input file name\n       float  tau =0.       static time-shift (in second)\n       string type =      type of interpolation (default Hermit)\nSOURCE\n       user/llisiw/Mkirmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkirmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmig0-Tuple{}","page":"Home","title":"Madagascar.sfkirmig0","text":"sfkirmig0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmig0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmig0. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmig0(1)                  Madagascar Manuals                  sfkirmig0(1)\n\nNAME\n       sfkirmig0 - 2-D Post-stack Kirchhoff depth migration.\n\nSYNOPSIS\n       sfkirmig0 < dat.rsf > mig.rsf table=tbl.rsf deriv=der.rsf adj=y nt= ns=\n       t0=0.0 dt= s0=0.0 ds= aperture=90. antialias=1.0 type=\n\nPARAMETERS\n       bool   adj =y [y/n]     y for migration, n for modeling\n       float  antialias =1.0      antialiasing\n       float  aperture =90.       migration aperture (in degree)\n       file   deriv =      auxiliary input file name\n       float  ds =      midpoint sampling\n       float  dt =      time sampling\n       int    ns =      midpoint samples\n       int    nt =      time samples\n       float  s0 =0.0      midpoint origin\n       float  t0 =0.0      time origin\n       file   table =      auxiliary input file name\n       string type =      type of interpolation (default Hermit)\nSOURCE\n       user/llisiw/Mkirmig0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkirmig0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmigsr-Tuple{}","page":"Home","title":"Madagascar.sfkirmigsr","text":"sfkirmigsr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmigsr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmigsr. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmigsr(1)                 Madagascar Manuals                 sfkirmigsr(1)\n\nNAME\n       sfkirmigsr - 2-D Prestack Kirchhoff depth migration.\n\nSYNOPSIS\n       sfkirmigsr   <   dat.rsf   >  mig.rsf  stable=stim.rsf  sderiv=sder.rsf\n       rtable=rtim.rsf rderiv=rder.rsf adj=y cmp=y nt= nh=1  ns=1  t0=0.0  dt=\n       h0=0.0 dh= s0=0.0 ds= tau=0. aperture=90. antialias=1.0 cig=n type=\n\nCOMMENTS\n       October    2022    program    of   the   month:   https://reproducibil‐\n       ity.org/blog/2022/10/12/program-of-the-month-sfkirmigsr/\n\nPARAMETERS\n       bool   adj =y [y/n]     y for migration, n for modeling\n       float  antialias =1.0      antialiasing\n       float  aperture =90.       migration aperture (in degree)\n       bool   cig =n [y/n]     y - output common offset gathers\n       bool   cmp =y [y/n]     y for CMP gather, n for shot gather\n       float  dh =      offset sampling\n       float  ds =      shot sampling\n       float  dt =      time sampling\n       float  h0 =0.0      offset origin\n       int    nh =1      offset samples\n       int    ns =1      shot samples\n       int    nt =      time samples\n       file   rderiv =      auxiliary input file name\n       file   rtable =      auxiliary input file name\n       float  s0 =0.0      shot origin\n       file   sderiv =      auxiliary input file name\n       file   stable =      auxiliary input file name\n       float  t0 =0.0      time origin\n       float  tau =0.       static time-shift (in second)\n       string type =      type of interpolation (default Hermit)\nSOURCE\n       user/llisiw/Mkirmigsr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkirmigsr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmod-Tuple{}","page":"Home","title":"Madagascar.sfkirmod","text":"sfkirmod(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmod on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmod. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmod(1)                   Madagascar Manuals                   sfkirmod(1)\n\nNAME\n       sfkirmod  -  Kirchhoff 2-D/2.5-D modeling with analytical Green's func‐\n       tions.\n\nSYNOPSIS\n       sfkirmod   <   modl.rsf   >   data.rsf   curv=curv.rsf    refl=refl.rsf\n       picks=picks.rsf  slopes=slopes.rsf  lin=n  adj=n  absoff=n nt= dt=0.004\n       t0=0. ns=nx s0=x0 ds=dx nh=nx h0=0. dh=dx  verb=n  r0=1.  r0=1.  twod=n\n       cmp=n  freq=0.2/dt  vel=  gradx=  gradz=  velz=  eta= refx= refz= vel2=\n       gradx2= gradz2= rgrad= dip= type= type2=\n\nCOMMENTS\n       October 2012 program of the month: http://ahay.org/blog/2012/10/03/pro‐\n       gram-of-the-month-sfkirmod/\n\nPARAMETERS\n       bool   absoff =n [y/n]     y - h0 is not in shot coordinate system\n       bool   adj =n [y/n]     adjoint flag\n       bool   cmp =n [y/n]     compute CMP instead of shot gathers\n       file   curv =      auxiliary input file name\n       float  dh =dx      offset increment\n       string dip =      reflector dip file\n       float  ds =dx      shot/midpoint increment\n       float  dt =0.004      time sampling\n       float  eta =      parameter for VTI anisotropy\n       float  freq =0.2/dt      peak frequency for Ricker wavelet\n       float  gradx =      horizontal velocity gradient\n       float  gradx2 =      converted velocity, horizontal gradient\n       float  gradz =      vertical velocity gradient\n       float  gradz2 =      converted velocity, vertical gradient\n       float  h0 =0.       first offset\n       bool   lin =n [y/n]     if linear operator\n       int    nh =nx      number of offsets\n       int    ns =nx      number of shots (midpoints if cmp=y)\n       int    nt =      time samples\n       string picks =      auxiliary output file name\n       float  r0 =1.       normal reflectivity (if constant)\n       string refl =      auxiliary input file name\n       float  refx =      reference x-coordinate for velocity\n       float  refz =      reference z-coordinate for velocity\n       string rgrad =      AVO gradient file (B/A)\n       float  s0 =x0      first shot (midpoint if cmp=y)\n       string slopes =      auxiliary output file name\n       float  t0 =0.       time origin\n       bool   twod =n [y/n]     2-D or 2.5-D\n       string type  =      type of velocity, 'c': constant, 's': linear sloth,\n              'v': linear velocity, 'a': VTI anisotropy\n       string type2 =      type of velocity for the converted (receiver  side)\n              branch\n       float  vel =      velocity\n       float  vel2 =      converted velocity\n       float  velz =      vertical velocity for VTI anisotropy\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mkirmod.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkirmod(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmod3-Tuple{}","page":"Home","title":"Madagascar.sfkirmod3","text":"sfkirmod3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmod3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmod3. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmod3(1)                  Madagascar Manuals                  sfkirmod3(1)\n\nNAME\n       sfkirmod3 - Kirchhoff 3-D modeling with analytical Green's functions.\n\nSYNOPSIS\n       sfkirmod3  < curv.rsf > modl.rsf head=head.rsf refl=refl.rsf verb=y nt=\n       dt=0.004 t0=0. absoff=n  nsx=nx  s0x=x0  dsx=dx  nsy=ny  s0y=y0  dsy=dy\n       nhx=nx    h0x=0.   dhx=dx   nhy=ny   h0y=0.   dhy=dy   r0=1.   aper=hy‐\n       potf(nx*dx,ny*dy) freq=0.2/dt rgrad= dipx= dipy= type=\n\nPARAMETERS\n       bool   absoff =n [y/n]     y - h0x, h0y - are not  in  shot  coordinate\n              system\n       float  aper =hypotf(nx*dx,ny*dy)      aperture\n       float  dhx =dx      inline offset increment\n       float  dhy =dy      crossline offset increment\n       string dipx = ®\n       string dipy = ®\n       float  dsx =dx      inline shot increment\n       float  dsy =dy      crossline shot increment\n       float  dt =0.004      time sampling\n       float  freq =0.2/dt      peak frequency for Ricker wavelet\n       float  h0x =0.       first inline offset\n       float  h0y =0.       first crossline offset\n       string head =      source-receiver geometry (optional) (auxiliary input\n              file name)\n       int    nhx =nx      number of inline offsets\n       int    nhy =ny      number of crossline offsets\n       int    nsx =nx      number of inline shots\n       int    nsy =ny      number of crossline shots\n       int    nt =      time samples\n       float  r0 =1.       constant reflectivity\n       string refl =      auxiliary input file name\n       string rgrad = ®\n       float  s0x =x0      first inline shot\n       float  s0y =y0      first crossline shot\n       float  t0 =0.       time origin\n       string type =      type of velocity ('c': constant, 's': linear  sloth,\n              'v': linear velocity)\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       system/seismic/Mkirmod3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfkirmod3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkirmod_newton-Tuple{}","page":"Home","title":"Madagascar.sfkirmod_newton","text":"sfkirmod_newton(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkirmod_newton on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkirmod_newton. See ?m8r for examples.\n\nRSF Documentation\n\nsfkirmodnewton(1)            Madagascar Manuals            sfkirmodnewton(1)\n\nNAME\n       sfkirmod_newton  -  Kirchhoff  2-D/2.5-D modeling in layered media with\n       bending ray tracing.\n\nSYNOPSIS\n       sfkirmod_newton  <  modl.rsf  >  data.rsf  curv=curv.rsf  refl=refl.rsf\n       picks=picks.rsf  slopes=slopes.rsf  aniso=vti.rsf  velocity= xgradient=\n       zgradient= xref= zref= lin=n adj=n absoff=n nt=  dt=0.004  t0=0.  ns=nx\n       s0=x0  ds=dx nh=nx h0=0. dh=dx verb=n r0=1. r0=1. debug=n fwdxini=n vs‐\n       tatus= niter=500 tol=0.00001 order=3 cmp=n freq=0.2/dt rgrad= dip=\n\nPARAMETERS\n       bool   absoff =n [y/n]     y - h0 is not in shot coordinate system\n       bool   adj =n [y/n]     adjoint flag\n       file   aniso =      auxiliary input file name\n       bool   cmp =n [y/n]     compute CMP instead of shot gathers\n       file   curv =      auxiliary input file name\n       bool   debug =n [y/n]     debug flag\n       float  dh =dx      offset increment\n       string dip =      reflector dip file\n       float  ds =dx      shot/midpoint increment\n       float  dt =0.004      time sampling\n       float  freq =0.2/dt      peak frequency for Ricker wavelet\n       bool   fwdxini =n [y/n]     use the result of previous iteration to  be\n              the xinitial of the next one\n       float  h0 =0.       first offset\n       bool   lin =n [y/n]     if linear operator\n       int    nh =nx      number of offsets\n       int    niter =500      The number of iterations\n       int    ns =nx      number of shots (midpoints if cmp=y)\n       int    nt =      time samples\n       int    order =3      Interpolation order\n       string picks =      auxiliary output file name\n       float  r0 =1.       normal reflectivity (if constant)\n       string refl =      auxiliary input file name\n       string rgrad =      AVO gradient file (B/A)\n       float  s0 =x0      first shot (midpoint if cmp=y)\n       string slopes =      auxiliary output file name\n       float  t0 =0.       time origin\n       double tol =0.00001      Assign a default value for tolerance\n       floats velocity =      Assign velocity km/s [nc]\n       bool   verb =n [y/n]     verbosity flag\n       int    vstatus  =      Velocity status (0 for constant v,1 for gradient\n              v, and 2 for vti)\n       floats xgradient =       [nc]\n       floats xref =      Assign x-reference point [nc]\n       floats zgradient =       [nc]\n       floats zref =      Assign z-reference point [nc]\nSOURCE\n       user/zone/Mkirmod_newton.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfkirmod_newton(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkolmog-Tuple{}","page":"Home","title":"Madagascar.sfkolmog","text":"sfkolmog(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkolmog on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkolmog. See ?m8r for examples.\n\nRSF Documentation\n\nsfkolmog(1)                   Madagascar Manuals                   sfkolmog(1)\n\nNAME\n       sfkolmog - Kolmogoroff spectral factorization.\n\nSYNOPSIS\n       sfkolmog < in.rsf > out.rsf spec=n lag=0 shift=0\n\nPARAMETERS\n       int    lag =0      lag for asymmetric part\n       int    shift =0      time shift\n       bool   spec  =n [y/n]     if y, the input is spectrum squared; n, time-\n              domain signal\nSOURCE\n       user/gee/Mkolmog.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfkolmog(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkron-Tuple{}","page":"Home","title":"Madagascar.sfkron","text":"sfkron(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkron on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkron. See ?m8r for examples.\n\nRSF Documentation\n\nsfkron(1)                     Madagascar Manuals                     sfkron(1)\n\nNAME\n       sfkron - Kroneker product with square matrices\n\nSYNOPSIS\n       sfkron  <  in.rsf  >  out.rsf  mat1=mat1.rsf  mat2=mat2.rsf adj=n inv=n\n       niter=100 eps=0. nliter=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  eps =0.       regularization\n       bool   inv =n [y/n]     inversion flag\n       file   mat1 =      auxiliary input file name\n       file   mat2 =      auxiliary input file name\n       int    niter =100      maximum number of iterations\n       int    nliter =1      number of nonlinear iterations\nSOURCE\n       user/fomels/Mkron.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfkron(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfktmig-Tuple{}","page":"Home","title":"Madagascar.sfktmig","text":"sfktmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfktmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfktmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfktmig(1)                    Madagascar Manuals                    sfktmig(1)\n\nNAME\n       sfktmig - Prestack time migration (2-D/3-D) for irregular data.\n\nSYNOPSIS\n       sfktmig    <   data.rsf   >   image.rsf   vrms=vrms.rsf   sxsy=sxsy.rsf\n       gxgy=gxgy.rsf  cxcy=cxcy.rsf  verb=n  time=n  aa=y   diff=y   dbtr=1000\n       apx=onx/2 apy=ony/2 maxtri=13 trfact=4.0*(0.5*(odx + ody)/dt)\n\nPARAMETERS\n       bool   aa =y [y/n]     Antialiaing flag\n       int    apx =onx/2      Apperture half-width in x direction\n       int    apy =ony/2      Apperture half-width in y direction\n       string cxcy =      File with midpoint coordinates (auxiliary input file\n              name)\n       int    dbtr =1000      Number of input traces to read at once\n       bool   diff =y [y/n]     Differentiation flag\n       string gxgy =      File with receiver coordinates (auxiliary input file\n              name)\n       int    maxtri =13      Maximum half-length of the antialias filter\n       string sxsy  =       File  with  shot coordinates (auxiliary input file\n              name)\n       bool   time =n [y/n]     Measure execution time\n       float  trfact =4.0*(0.5*(odx + ody)/dt)      Trace factor for antialias\n              filter length calculation\n       bool   verb =n [y/n]     Verbosity flag\n       string vrms =      File with RMS velocities (auxiliary input file name)\nSOURCE\n       user/bash/Mktmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfktmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfkuwahara-Tuple{}","page":"Home","title":"Madagascar.sfkuwahara","text":"sfkuwahara(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfkuwahara on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfkuwahara. See ?m8r for examples.\n\nRSF Documentation\n\nsfkuwahara(1)                 Madagascar Manuals                 sfkuwahara(1)\n\nNAME\n       sfkuwahara - 1-D and 2-D Kuwahara filter.\n\nSYNOPSIS\n       sfkuwahara  <  in.rsf > out.rsf nfw1= nfw2=1 boundary=n verb=n weight=n\n       sigma=3.\n\nCOMMENTS\n       1D filter (nfw2=1); 2D filter (otherwise)\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw1 =      filter-window length in n1 direction  (positive  and\n              odd integer)\n       int    nfw2 =1      filter-window length in n2 direction (default=1, 1D\n              case)\n       float  sigma =3.       Gaussian weight radius\n       bool   verb =n [y/n]     verbosity flag\n       bool   weight =n [y/n]     Gaussian weight flag\nSOURCE\n       user/yliu/Mkuwahara.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfkuwahara(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflabel-Tuple{}","page":"Home","title":"Madagascar.sflabel","text":"sflabel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflabel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflabel. See ?m8r for examples.\n\nRSF Documentation\n\nsflabel(1)                    Madagascar Manuals                    sflabel(1)\n\nNAME\n       sflabel - Connected-component labeling\n\nSYNOPSIS\n       sflabel < inp.rsf > out.rsf\n\nSOURCE\n       user/fomels/Mlabel.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflabel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflagrange-Tuple{}","page":"Home","title":"Madagascar.sflagrange","text":"sflagrange(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflagrange on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflagrange. See ?m8r for examples.\n\nRSF Documentation\n\nsflagrange(1)                 Madagascar Manuals                 sflagrange(1)\n\nNAME\n       sflagrange - A forward interpolation using Lagrange method.\n\nSYNOPSIS\n       sflagrange < in.rsf > out.rsf ox=o1 dx=d1 nx=n1\n\nCOMMENTS\n       Specify ox= dx= nx=\n\nPARAMETERS\n       float  dx =d1 ®\n       int    nx =n1 ®\n       float  ox =o1 ®\nSOURCE\n       user/chenyk/Mlagrange.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflagrange(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflapfill-Tuple{}","page":"Home","title":"Madagascar.sflapfill","text":"sflapfill(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflapfill on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflapfill. See ?m8r for examples.\n\nRSF Documentation\n\nsflapfill(1)                  Madagascar Manuals                  sflapfill(1)\n\nNAME\n       sflapfill  - Missing data interpolation in 2-D by Laplacian regulariza‐\n       tion.\n\nSYNOPSIS\n       sflapfill < in.rsf > out.rsf mask=mask.rsf niter=200 grad=n verb=n\n\nPARAMETERS\n       bool   grad =n [y/n]     if y, use gradient instead of laplacian\n       string mask =      optional mask file with zeroes for missing data  lo‐\n              cations (auxiliary input file name)\n       int    niter =200      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/generic/Mlapfill.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflapfill(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaplac-Tuple{}","page":"Home","title":"Madagascar.sflaplac","text":"sflaplac(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaplac on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaplac. See ?m8r for examples.\n\nRSF Documentation\n\nsflaplac(1)                   Madagascar Manuals                   sflaplac(1)\n\nNAME\n       sflaplac - 2-D finite-difference Laplacian operation.\n\nSYNOPSIS\n       sflaplac < in.rsf > out.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\nSOURCE\n       system/generic/Mlaplac.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflaplac(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaplac3d-Tuple{}","page":"Home","title":"Madagascar.sflaplac3d","text":"sflaplac3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaplac3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaplac3d. See ?m8r for examples.\n\nRSF Documentation\n\nsflaplac3d(1)                 Madagascar Manuals                 sflaplac3d(1)\n\nNAME\n       sflaplac3d - 3-D finite-difference Laplacian operation.\n\nSYNOPSIS\n       sflaplac3d < in.rsf > out.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\nSOURCE\n       system/generic/Mlaplac3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflaplac3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaplace-Tuple{}","page":"Home","title":"Madagascar.sflaplace","text":"sflaplace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaplace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaplace. See ?m8r for examples.\n\nRSF Documentation\n\nsflaplace(1)                  Madagascar Manuals                  sflaplace(1)\n\nNAME\n       sflaplace - 2-D finite-difference Laplacian\n\nSYNOPSIS\n       sflaplace > out.rsf < img.rsf\n\nSOURCE\n       user/songxl/Mlaplace.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflaplace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaplace2-Tuple{}","page":"Home","title":"Madagascar.sflaplace2","text":"sflaplace2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaplace2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaplace2. See ?m8r for examples.\n\nRSF Documentation\n\nsflaplace2(1)                 Madagascar Manuals                 sflaplace2(1)\n\nNAME\n       sflaplace2 - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sflaplace2 > out.rsf < img.rsf\n\nSOURCE\n       user/songxl/Mlaplace2.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflaplace2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaps2d-Tuple{}","page":"Home","title":"Madagascar.sflaps2d","text":"sflaps2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaps2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaps2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflaps2d(1)                   Madagascar Manuals                   sflaps2d(1)\n\nNAME\n       sflaps2d - OpenMP lagged-products in the time-domain\n\nSYNOPSIS\n       sflaps2d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n buf=n nhz=0 nhx=0\n       nht=0\n\nPARAMETERS\n       bool   buf =n [y/n]\n       file   cc =      auxiliary input file name\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhz =0      number of lags on the z axis\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\nSOURCE\n       user/psava/Mlaps2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflaps2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflaps3d-Tuple{}","page":"Home","title":"Madagascar.sflaps3d","text":"sflaps3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflaps3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflaps3d. See ?m8r for examples.\n\nRSF Documentation\n\nsflaps3d(1)                   Madagascar Manuals                   sflaps3d(1)\n\nNAME\n       sflaps3d - OpenMP lagged-products in the time-domain\n\nSYNOPSIS\n       sflaps3d < Fs.rsf ur=Fr.rsf cc=Fc.rsf > Fi.rsf verb=n buf=n nhx=0 nhy=0\n       nhz=0 nht=0\n\nPARAMETERS\n       bool   buf =n [y/n]\n       file   cc =      auxiliary input file name\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhy =0      number of lags on the y axis\n       int    nhz =0      number of lags on the z axis\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mlaps3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflaps3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflas2rsf-Tuple{}","page":"Home","title":"Madagascar.sflas2rsf","text":"sflas2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflas2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflas2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsflas2rsf(1)                  Madagascar Manuals                  sflas2rsf(1)\n\nNAME\n       sflas2rsf - Convert LAS-2 well logs to RSF\n\nSYNOPSIS\n       sflas2rsf\n\nSOURCE\n       user/fomels/Mlas2rsf.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflas2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflcf-Tuple{}","page":"Home","title":"Madagascar.sflcf","text":"sflcf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflcf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflcf. See ?m8r for examples.\n\nRSF Documentation\n\nsflcf(1)                      Madagascar Manuals                      sflcf(1)\n\nNAME\n       sflcf - Estimate local centroid frequency.\n\nSYNOPSIS\n       sflcf   <   in.rsf   >   out.rsf   trange=trange.rsf  brange=brange.rsf\n       avef=avef.rsf var2=var2.rsf tflo=tflo.rsf  tfhi=tfhi.rsf  tfme=tfme.rsf\n       verb=n niter=100 eps=0.0f rect#=(10,10,...)\n\nPARAMETERS\n       string avef =      auxiliary output file name\n       string brange =      data weight (auxiliary input file name)\n       float  eps =0.0f ®\n       int    niter =100      regularization\n       int    rect# =(10,10,...)       smoothing radius on #-th axis\n       string tfhi =      auxiliary output file name\n       string tflo =      auxiliary output file name\n       string tfme =      auxiliary output file name\n       string trange =      data weight (auxiliary input file name)\n       string var2 =      auxiliary output file name\n       bool   verb =n [y/n]     smoothing radius\nSOURCE\n       user/yliu/Mlcf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sflcf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflcfseq-Tuple{}","page":"Home","title":"Madagascar.sflcfseq","text":"sflcfseq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflcfseq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflcfseq. See ?m8r for examples.\n\nRSF Documentation\n\nsflcfseq(1)                   Madagascar Manuals                   sflcfseq(1)\n\nNAME\n       sflcfseq  -  Estimate  equivalent Q value based on a reference layer by\n       using Local centroid frequency shift (LCFS) method.\n\nSYNOPSIS\n       sflcfseq < inp.rsf > out.rsf var2=var2.rsf repos=repos.rsf verb=n\n\nPARAMETERS\n       string repos =      Position of reference point (auxiliary  input  file\n              name)\n       string var2 =      variance (auxiliary input file name)\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mlcfseq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflcfseq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflcfsiq-Tuple{}","page":"Home","title":"Madagascar.sflcfsiq","text":"sflcfsiq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflcfsiq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflcfsiq. See ?m8r for examples.\n\nRSF Documentation\n\nsflcfsiq(1)                   Madagascar Manuals                   sflcfsiq(1)\n\nNAME\n       sflcfsiq  -  Estimate  interval Q value between every two adjacent time\n       sampling points by using Local centroid frequency shift (LCFS) method.\n\nSYNOPSIS\n       sflcfsiq < inp.rsf > out.rsf var2=var2.rsf verb=n\n\nPARAMETERS\n       string var2 =      variance (auxiliary input file name)\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mlcfsiq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflcfsiq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfldip-Tuple{}","page":"Home","title":"Madagascar.sfldip","text":"sfldip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfldip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfldip. See ?m8r for examples.\n\nRSF Documentation\n\nsfldip(1)                     Madagascar Manuals                     sfldip(1)\n\nNAME\n       sfldip - dip estimation by line interpolating pwd\n\nSYNOPSIS\n       sfldip  <  in.rsf > out.rsf idip=p0.rsf m=1 n=1 rect1=0 rect2=0 niter=5\n       liter=20 eta=1.0 verb=n interp=\n\nPARAMETERS\n       float  eta =1.0      steps for iteration\n       string idip =      auxiliary input file name\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    liter =20      number of linear iterations\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    niter =5      number of iterations\n       int    rect1 =0      dip smoothness on 1st axis\n       int    rect2 =0      dip smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chen/Mldip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfldip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfleftsize-Tuple{}","page":"Home","title":"Madagascar.sfleftsize","text":"sfleftsize(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfleftsize on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfleftsize. See ?m8r for examples.\n\nRSF Documentation\n\nsfleftsize(1)                 Madagascar Manuals                 sfleftsize(1)\n\nNAME\n       sfleftsize - Computes Ni+1 x Ni+2 x ...\n\nSYNOPSIS\n       sfleftsize < in.rsf i=0\n\nCOMMENTS\n       Wrapper for sf_leftsize\n\nPARAMETERS\n       int    i  =0      What size to start counting from. i=0 gets total num‐\n              ber of elements\nSOURCE\n       user/ivlad/Mleftsize.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfleftsize(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflegacy-Tuple{}","page":"Home","title":"Madagascar.sflegacy","text":"sflegacy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflegacy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflegacy. See ?m8r for examples.\n\nRSF Documentation\n\nsflegacy(1)                   Madagascar Manuals                   sflegacy(1)\n\nNAME\n       sflegacy - Merging legacy and hires datasets\n\nSYNOPSIS\n       sflegacy   <   in.rsf   >   out.rsf  rect=rect.rsf  hweight=hweight.rsf\n       lweight=lweight.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   hweight =      auxiliary input file name\n       file   lweight =      auxiliary input file name\n       file   rect =      auxiliary input file name\nSOURCE\n       user/fomels/Mlegacy.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflegacy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflesolver-Tuple{}","page":"Home","title":"Madagascar.sflesolver","text":"sflesolver(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflesolver on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflesolver. See ?m8r for examples.\n\nRSF Documentation\n\nsflesolver(1)                 Madagascar Manuals                 sflesolver(1)\n\nNAME\n       sflesolver - Linear equations solver using Gauss Elimination\n\nSYNOPSIS\n       sflesolver < in.rsf d=d.rsf > out.rsf\n\nPARAMETERS\n       file   d =      auxiliary input file name\nSOURCE\n       user/chenyk/Mlesolver.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflesolver(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflevint-Tuple{}","page":"Home","title":"Madagascar.sflevint","text":"sflevint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflevint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflevint. See ?m8r for examples.\n\nRSF Documentation\n\nsflevint(1)                   Madagascar Manuals                   sflevint(1)\n\nNAME\n       sflevint - Leveler inverse interpolation in 1-D.\n\nSYNOPSIS\n       sflevint  <  in.rsf  >  out.rsf nx= x0= dx= niter=1+m1*3/2 eps=0.2 na=3\n       head=\n\nPARAMETERS\n       float  dx =      grid sampling\n       float  eps =0.2      regularization parameter\n       string head = ®\n       int    na =3 ®\n       int    niter =1+m1*3/2      number of conjugate-gradient iterations\n       int    nx =      number of bins\n       float  x0 =      grid origin\nSOURCE\n       user/gee/Mlevint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflevint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfd2_25b-Tuple{}","page":"Home","title":"Madagascar.sflfd2_25b","text":"sflfd2_25b(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfd2_25b on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfd2_25b. See ?m8r for examples.\n\nRSF Documentation\n\nsflfd225b(1)                 Madagascar Manuals                 sflfd225b(1)\n\nNAME\n       sflfd2_25b - 2-D Fourth-order Optimized Finite-difference wave extrapo‐\n       lation\n\nSYNOPSIS\n       sflfd2_25b > out.rsf vel=vel.rsf  <  source.rsf  G=G.rsf  s1=files1.rsf\n       s2=files2.rsf  dt=  nt=  isx=  isz=  nbt=100  nbb=100  nbl=100  nbr=100\n       ct=0.002 cb=0.002 cl=0.002 cr=0.002 jm=10\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  cb =0.002      decaying parameter\n       float  cl =0.002      decaying parameter\n       float  cr =0.002      decaying parameter\n       float  ct =0.002      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    jm =10 ®\n       int    nbb =100 ®\n       int    nbl =100 ®\n       int    nbr =100 ®\n       int    nbt =100 ®\n       int    nt = ®\n       file   s1 =      auxiliary input file name\n       file   s2 =      auxiliary input file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mlfd2_25b.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflfd2_25b(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdanc2_25-Tuple{}","page":"Home","title":"Madagascar.sflfdanc2_25","text":"sflfdanc2_25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdanc2_25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdanc2_25. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdanc225(1)               Madagascar Manuals               sflfdanc225(1)\n\nNAME\n       sflfdanc2_25 - 2D high-order TTI Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdanc2_25  < velz.rsf > outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt=\n       size=17 de=1\n\nPARAMETERS\n       de     =1      stencil length\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =17      stencil length\nSOURCE\n       user/songxl/Mlfdanc2_25.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sflfdanc2_25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdc1-Tuple{}","page":"Home","title":"Madagascar.sflfdc1","text":"sflfdc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdc1. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdc1(1)                    Madagascar Manuals                    sflfdc1(1)\n\nNAME\n       sflfdc1 - 1D 10th-order Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdc1 < velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/songxl/Mlfdc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflfdc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdc2_25-Tuple{}","page":"Home","title":"Madagascar.sflfdc2_25","text":"sflfdc2_25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdc2_25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdc2_25. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdc225(1)                 Madagascar Manuals                 sflfdc225(1)\n\nNAME\n       sflfdc2_25 - 2D 10th-order Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdc2_25  <  velf.rsf  > outm.rsf s1=s1f.rsf seed=time(NULL eps=1.e-6\n       npk=50 dt= size=9\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       file   s1 =      auxiliary output file name\n       seed   =time(NULL ®\n       size   =9      stencil length\nSOURCE\n       user/songxl/Mlfdc2_25.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflfdc2_25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdc2_7-Tuple{}","page":"Home","title":"Madagascar.sflfdc2_7","text":"sflfdc2_7(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdc2_7 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdc2_7. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdc27(1)                  Madagascar Manuals                  sflfdc27(1)\n\nNAME\n       sflfdc2_7 - 2D 10th-order Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdc2_7  <  velf.rsf  >  outm.rsf seed=time(NULL eps=1.e-6 npk=50 dt=\n       size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\nSOURCE\n       user/songxl/Mlfdc2_7.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflfdc2_7(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdp1-Tuple{}","page":"Home","title":"Madagascar.sflfdp1","text":"sflfdp1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdp1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdp1. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdp1(1)                    Madagascar Manuals                    sflfdp1(1)\n\nNAME\n       sflfdp1 - 1D 10th-order Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdp1  <  velf.rsf  >  outm.rsf  seed=time(NULL  eps=1.e-4 npk=20 dt=\n       size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\nSOURCE\n       user/songxl/Mlfdp1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflfdp1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfdp2-Tuple{}","page":"Home","title":"Madagascar.sflfdp2","text":"sflfdp2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfdp2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfdp2. See ?m8r for examples.\n\nRSF Documentation\n\nsflfdp2(1)                    Madagascar Manuals                    sflfdp2(1)\n\nNAME\n       sflfdp2 - 2D 10th-order Lowrank FD coefficient\n\nSYNOPSIS\n       sflfdp2  <  velf.rsf  >  outm.rsf  seed=time(NULL  eps=1.e-6 npk=50 dt=\n       size=9\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =9      stencil length\nSOURCE\n       user/songxl/Mlfdp2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflfdp2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflffd1_10-Tuple{}","page":"Home","title":"Madagascar.sflffd1_10","text":"sflffd1_10(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflffd1_10 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflffd1_10. See ?m8r for examples.\n\nRSF Documentation\n\nsflffd110(1)                 Madagascar Manuals                 sflffd110(1)\n\nNAME\n       sflffd1_10 - 1-D Lowrank Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sflffd1_10  <  in.rsf  vel=vel.rsf G=Gmatrix.rsf > out.rsf nt= dt= fac‐\n       tor=0.5\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       float  factor =0.5 ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mlffd1_10.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflffd1_10(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflffd2_an_25-Tuple{}","page":"Home","title":"Madagascar.sflffd2_an_25","text":"sflffd2_an_25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflffd2_an_25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflffd2_an_25. See ?m8r for examples.\n\nRSF Documentation\n\nsflffd2an25(1)              Madagascar Manuals              sflffd2an25(1)\n\nNAME\n       sflffd2_an_25 - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sflffd2_an_25   >  out.rsf  <  source.rsf  velz=velz.rsf  velx=velx.rsf\n       yita=yita.rsf  seta=seta.rsf  G=G.rsf   paras=paras.rsf   s1=files1.rsf\n       s2=files2.rsf  dt=  nt=  isx=  isz= ax=2.0 az=2.0 factor=1.0 err=0.0001\n       de=y\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       bool   de =y [y/n]\n       float  dt = ®\n       float  err =0.0001      suppress HF parameter\n       float  factor =1.0      suppress HF parameter\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   paras =      auxiliary input file name\n       file   s1 =      auxiliary input file name\n       file   s2 =      auxiliary input file name\n       file   seta =      auxiliary input file name\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       file   yita =      auxiliary input file name\nSOURCE\n       user/songxl/Mlffd2_an_25.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflffd2_an_25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflffd2an25-Tuple{}","page":"Home","title":"Madagascar.sflffd2an25","text":"sflffd2an25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflffd2an25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflffd2an25. See ?m8r for examples.\n\nRSF Documentation\n\nsflffd2an25(1)                Madagascar Manuals                sflffd2an25(1)\n\nNAME\n       sflffd2an25 - 2-D Fourier finite-difference wave extrapolation\n\nSYNOPSIS\n       sflffd2an25    >    out.rsf    <   source.rsf   velz=velz.rsf   G=G.rsf\n       paras=paras.rsf s1=files1.rsf s2=files2.rsf dt= nt=  isx=  isz=  ax=2.0\n       az=2.0 factor=1.0 err=0.0001 de=y\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       bool   de =y [y/n]\n       float  dt = ®\n       float  err =0.0001      suppress HF parameter\n       float  factor =1.0      suppress HF parameter\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   paras =      auxiliary input file name\n       file   s1 =      auxiliary input file name\n       file   s2 =      auxiliary input file name\n       file   velz =      auxiliary input file name\nSOURCE\n       user/songxl/Mlffd2an25.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sflffd2an25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflffdan-Tuple{}","page":"Home","title":"Madagascar.sflffdan","text":"sflffdan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflffdan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflffdan. See ?m8r for examples.\n\nRSF Documentation\n\nsflffdan(1)                   Madagascar Manuals                   sflffdan(1)\n\nNAME\n       sflffdan - 2D high-order TTI Lowrank FFD coefficient\n\nSYNOPSIS\n       sflffdan  <  velz.rsf  >  outm.rsf  seed=time(NULL eps=1.e-6 npk=50 dt=\n       pr=0.25 size=9 de=1\n\nPARAMETERS\n       de     =1      stencil length\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       pr     =0.25      time step\n       seed   =time(NULL ®\n       size   =9      stencil length\nSOURCE\n       user/songxl/Mlffdan.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflffdan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflfftexp0-Tuple{}","page":"Home","title":"Madagascar.sflfftexp0","text":"sflfftexp0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflfftexp0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflfftexp0. See ?m8r for examples.\n\nRSF Documentation\n\nsflfftexp0(1)                 Madagascar Manuals                 sflfftexp0(1)\n\nNAME\n       sflfftexp0 - 2-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration as linear operator\n\nSYNOPSIS\n       sflfftexp0 < data.rsf > image.rsf left=left.rsf  right=right.rsf  adj=n\n       cmplx=n pad1=1 nz= dz= nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\nSOURCE\n       user/fomels/Mlfftexp0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflfftexp0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflight-Tuple{}","page":"Home","title":"Madagascar.sflight","text":"sflight(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflight on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflight. See ?m8r for examples.\n\nRSF Documentation\n\nsflight(1)                    Madagascar Manuals                    sflight(1)\n\nNAME\n       sflight - Apply 2-D directional high-pass to highlight data.\n\nSYNOPSIS\n       sflight < in.rsf > out.rsf ax=1. ay=1. eps=0.\n\nPARAMETERS\n       float  ax =1.       x direction\n       float  ay =1.       y direction\n       float  eps =0.       highpass filter parameter; if eps=0, apply deriva‐\n              tive\nSOURCE\n       user/gee/Mlight.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflight(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinear-Tuple{}","page":"Home","title":"Madagascar.sflinear","text":"sflinear(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinear on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinear. See ?m8r for examples.\n\nRSF Documentation\n\nsflinear(1)                   Madagascar Manuals                   sflinear(1)\n\nNAME\n       sflinear - 1-D linear interpolation.\n\nSYNOPSIS\n       sflinear  <  in.rsf > out.rsf pattern=pattern.rsf sort=n niter=0 rect=1\n       nw=2 n1= d1= o1=\n\nCOMMENTS\n       The input should have n2=2 (coordinates,values)\n\n       For output, specify either n1= o1= d1= or pattern=\n\n       March 2016 program of the  month:  http://ahay.org/blog/2016/03/23/pro‐\n       gram-of-the-month-sflinear/\n\nPARAMETERS\n       float  d1 =      Output sampling\n       string n1 =      Output grid size\n       int    niter =0      number of iterations\n       int    nw =2      interpolator size\n       float  o1 =      Output origin\n       string pattern =      auxiliary input file name\n       int    rect =1      smoothing regularization\n       bool   sort =n [y/n]     if y, the coordinates need sorting\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Mlinear.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflinear(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinefit-Tuple{}","page":"Home","title":"Madagascar.sflinefit","text":"sflinefit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinefit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinefit. See ?m8r for examples.\n\nRSF Documentation\n\nsflinefit(1)                  Madagascar Manuals                  sflinefit(1)\n\nNAME\n       sflinefit - Fit a line to a set of points in 2-D.\n\nSYNOPSIS\n       sflinefit < in.rsf > out.rsf pattern=pattern.rsf\n\nPARAMETERS\n       string pattern =      auxiliary input file name\nSOURCE\n       system/generic/Mlinefit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflinefit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflineiko-Tuple{}","page":"Home","title":"Madagascar.sflineiko","text":"sflineiko(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflineiko on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflineiko. See ?m8r for examples.\n\nRSF Documentation\n\nsflineiko(1)                  Madagascar Manuals                  sflineiko(1)\n\nNAME\n       sflineiko - Iterative solution of the linearized eikonal equation.\n\nSYNOPSIS\n       sflineiko   <   time.rsf   >   dtime.rsf  time=time0.rsf  slow=slow.rsf\n       mask=mask.rsf squared=y adj=n inv=n niter=1 tol=0.001 what=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag (for what=linear)\n       bool   inv =n [y/n]     inverse flag (for what=linear)\n       string mask =      auxiliary input file name\n       int    niter =1      maximum number of iterations\n       file   slow =      auxiliary input file name\n       bool   squared =y [y/n]     if slowness is squared\n       string time =      auxiliary input file name\n       float  tol =0.001      tolerance for convergence\n       string what =      what to compute\nSOURCE\n       system/seismic/Mlineiko.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflineiko(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflineslope-Tuple{}","page":"Home","title":"Madagascar.sflineslope","text":"sflineslope(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflineslope on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflineslope. See ?m8r for examples.\n\nRSF Documentation\n\nsflineslope(1)                Madagascar Manuals                sflineslope(1)\n\nNAME\n       sflineslope  - Calculate the slope by fitting a line to a set of points\n       in 2-D.\n\nSYNOPSIS\n       sflineslope < in.rsf > out.rsf\n\nSOURCE\n       user/yliu/Mlineslope.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sflineslope(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinmig2-Tuple{}","page":"Home","title":"Madagascar.sflinmig2","text":"sflinmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsflinmig2(1)                  Madagascar Manuals                  sflinmig2(1)\n\nNAME\n       sflinmig2 - 2-D Kirchhoff time migration with antialiasing with adjoint\n       flag.\n\nSYNOPSIS\n       sflinmig2 < in.rsf  >  mig.rsf  vel=fvel.rsf  n1=  adj=y  ps=y  doomp=y\n       rho=1.-1./nt hd=y apt=nx angle=90.0 dd=y antialias=\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       float  angle =90.0      angle aperture\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       bool   dd =y [y/n]     differentiation in the data domain\n       bool   doomp =y [y/n]     perform OpenMP optimization\n       bool   hd =y [y/n]     half derivative\n       int    n1 = ®\n       bool   ps =y [y/n]     spherical divergence\n       float  rho =1.-1./nt      Leaky integration constant\n       file   vel =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mlinmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflinmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinmig3-Tuple{}","page":"Home","title":"Madagascar.sflinmig3","text":"sflinmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsflinmig3(1)                  Madagascar Manuals                  sflinmig3(1)\n\nNAME\n       sflinmig3 - 3-D Kirchhoff time migration with antialiasing with adjoint\n       flag.\n\nSYNOPSIS\n       sflinmig3  <  in.rsf  >  mig.rsf  vel=velFile.rsf  n1=  adj=y   doomp=n\n       rho=1.-1./nt apt=nx angle=90.0 vel= antialias=\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       float  angle =90.0      angle aperture\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       bool   doomp =n [y/n]     perform OpenMP optimization\n       int    n1 = ®\n       float  rho =1.-1./nt      Leaky integration constant\n       float  vel =      migration velocity\nSOURCE\n       user/dmerzlikin/Mlinmig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflinmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinmute-Tuple{}","page":"Home","title":"Madagascar.sflinmute","text":"sflinmute(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinmute on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinmute. See ?m8r for examples.\n\nRSF Documentation\n\nsflinmute(1)                  Madagascar Manuals                  sflinmute(1)\n\nNAME\n       sflinmute - None\n\nSYNOPSIS\n       sflinmute\n\nSOURCE\n       trip/iwave/trace/main/linmute.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflinmute(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinpi-Tuple{}","page":"Home","title":"Madagascar.sflinpi","text":"sflinpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinpi. See ?m8r for examples.\n\nRSF Documentation\n\nsflinpi(1)                    Madagascar Manuals                    sflinpi(1)\n\nNAME\n       sflinpi - 3D Path-Summation Integral Operator as a Linear Filter\n\nSYNOPSIS\n       sflinpi  <  inp.rsf  >  out.rsf adj=n v_1= v_2= v_3= v_4= passthr=0.001\n       eps=0.001 epst2=0.001 pad=nt\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       float  v_1 =      path-integral range\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\nSOURCE\n       user/dmerzlikin/Mlinpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflinpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinpipwd2d-Tuple{}","page":"Home","title":"Madagascar.sflinpipwd2d","text":"sflinpipwd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinpipwd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinpipwd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflinpipwd2d(1)               Madagascar Manuals               sflinpipwd2d(1)\n\nNAME\n       sflinpipwd2d  - pi operator building wrapping test function flat gauss‐\n       ian weighting smoothing after pi\n\nSYNOPSIS\n       sflinpipwd2d < inp.rsf > out.rsf vel=vel.rsf dip=dip.rsf adj=n sm=y do‐\n       mod=y   doomp=y   dopi=y   ps=y  dd=y  apt=nx  angle=90.0  hd=y  verb=y\n       rho=1.-1./nt v_1= v_2= v_3= v_4=  passthr=0.001  eps=0.001  epst2=0.001\n       pad=nt order=1 nj1=1 antialias=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  angle =90.0      angle aperture\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       bool   dd =y [y/n]     differentiation in the data domain\n       file   dip =      auxiliary input file name\n       bool   domod =y [y/n]     if perform modeling via Kirchhoff\n       bool   doomp =y [y/n]     OMP is forced currently\n       bool   dopi =y [y/n]     if do pi\n       float  eps =0.001      damper for pi\n       float  epst2 =0.001      damper for t2warp\n       bool   hd =y [y/n]     half differentiation\n       int    nj1 =1      antialiasing\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      threshold for tail elimination\n       bool   ps =y [y/n]     spherical divergence\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform derivative filtering = PWD\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mlinpipwd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sflinpipwd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinpipwd2dca-Tuple{}","page":"Home","title":"Madagascar.sflinpipwd2dca","text":"sflinpipwd2dca(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinpipwd2dca on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinpipwd2dca. See ?m8r for examples.\n\nRSF Documentation\n\nsflinpipwd2dca(1)             Madagascar Manuals             sflinpipwd2dca(1)\n\nNAME\n       sflinpipwd2dca  -  pi  operator  building  wrapping  test function flat\n       gaussian weighting smoothing after pi\n\nSYNOPSIS\n       sflinpipwd2dca  <   inp.rsf   >   out.rsf   vel=vel.rsf   dip1=dip1.rsf\n       dip2=dip2.rsf    dip3=dip3.rsf    outpwd=outpwdcheck.rsf    outdip=out‐\n       dipcheck.rsf offset=offset.rsf adj=n sm=y  domod=y  debug=  normalize=y\n       nh=  antialias=1.0 apt=nx angle=90.0 half=y verb=y rho=1.-1./nt dh= h0=\n       v_1= v_2= v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001 pad=nt  order=1\n       nj1=1\n\nPARAMETERS\n       bool   adj =n [y/n]     if perform derivative filtering = PWD\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       bool   debug = [y/n]\n       float  dh =      offset sampling (for modeling)\n       file   dip1 =      auxiliary input file name\n       file   dip2 =      auxiliary input file name\n       file   dip3 =      auxiliary input file name\n       bool   domod =y [y/n]     debug flag\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       int    nj1 =1      antialiasing\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       int    order =1 [1,2,3]   accuracy order\n       file   outdip =      auxiliary output file name\n       file   outpwd =      auxiliary output file name\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform modelling via Kirchhoff\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mlinpipwd2dca.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sflinpipwd2dca(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflinsincos-Tuple{}","page":"Home","title":"Madagascar.sflinsincos","text":"sflinsincos(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflinsincos on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflinsincos. See ?m8r for examples.\n\nRSF Documentation\n\nsflinsincos(1)                Madagascar Manuals                sflinsincos(1)\n\nNAME\n       sflinsincos - Solve for angle in equation vx*sin(d) + vy*cos(d) = 1/s0.\n\nSYNOPSIS\n       sflinsincos  <  in.rsf  >  out.rsf  s0=  na= da= oa= nt=180 dt=2. ot=0.\n       nr=nvx/2 dr=dvx extend=4\n\nPARAMETERS\n       float  da =      angle sampling.\n       float  dr =dvx      radius sampling.\n       float  dt =2.       polar angle sampling.\n       int    extend =4      tmp extension\n       int    na =      number of angle values.\n       int    nr =nvx/2      number of radius on radial lines\n       int    nt =180      number of polar angle for integration.\n       float  oa =      angle origin\n       float  ot =0.       polar angle origin\n       float  s0 =      reference slowness\nSOURCE\n       system/seismic/Mlinsincos.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sflinsincos(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflint1-Tuple{}","page":"Home","title":"Madagascar.sflint1","text":"sflint1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflint1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflint1. See ?m8r for examples.\n\nRSF Documentation\n\nsflint1(1)                    Madagascar Manuals                    sflint1(1)\n\nNAME\n       sflint1 - Linear interpolation\n\nSYNOPSIS\n       sflint1 coord=coord.rsf < dat.rsf > mod.rsf adj=n n1= o1= d1=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   coord =      auxiliary input file name\n       float  d1 =      regular axis sampling (for adj=y)\n       int    n1 =      regular axis size (for adj=y)\n       float  o1 =      regular axis origin (for adj=y)\nSOURCE\n       user/gee/Mlint1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflint1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflintshape2d-Tuple{}","page":"Home","title":"Madagascar.sflintshape2d","text":"sflintshape2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflintshape2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflintshape2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflintshape2d(1)              Madagascar Manuals              sflintshape2d(1)\n\nNAME\n       sflintshape2d  -  find  grid  that will Linearly INTerpolate the input.\n       Use SHAPEing in 2D.\n\nSYNOPSIS\n       sflintshape2d < in.rsf > out.rsf verbose=1 xmin= xmax= ymin= ymax=  dx=\n       dy= nx= ny=\n\nCOMMENTS\n       Input  data is Z, elevation, or amplitude at irregular (x,y) locations.\n       These are just (x,y,z) triplets.  The input file is RSF.  Input file n1\n       is  3,  for the (x,y,z) values.  Input file n2 is the number of (x,y,z)\n       points.\n\n       The output data is a regularly sampled 2D grid (ie 2D rsf).\n\n       sflintshape2d computes a 2D grid that can be bilinearly interpolated to\n       fit  the  input  data  points.  A conjugate gradient algorithm is used.\n       The equation solved is: bilinear_interpolate * 2d_grid ~  irregular_in‐\n       put\n\n       Where ~ means \"approximately equals\".\n\n       There  may  be  more  than one 2d_grid that will fit the data, so I use\n       preconditioning (aka shaping regularization).  Change variables using;\n\n       2d_grid = Smooth * 2d_grid'\n\n       and you obtain:\n\n       bilinear_interpolate * Smooth * 2d_grid' ~ irregular_input\n\n       After solving this equation the desired answer is 2d_grid  =  Smooth  *\n       2d_grid'.\n\n       For  a  smoothing  filter I use a 2D box car filter convolved with a 2D\n       boxcar filter that is 1/1.5 times smaller.  The smaller filter  is  in‐\n       tended to reduce the first sidelobe of the larger filter.\n\n       I  solve the problem with a very long filter, then repeat with a filter\n       1/1.5 times smaller.  I repeat with smaller and smaller  filters  until\n       the filter is only a single point (ie no filtering at all.)\n\n       This  algorithm  is a direct implementation of the ideas in Geophysical\n       Image Estimation by Example\" by Jon Claerbout.  I adopted the left  and\n       right  preconditioning  for congugate gradient psuedo code described in\n       \"Merits and challenges for accurate velocity model building by 3D grid‐\n       ded tomography\" by Guo et al.\n\n       EXAMPLE:\n\n       <  sxyamp.rsf  sflintshape2d   verbose=1  xmin=788150000 xmax=809380000\n       nx=194  dx=110000  ymin=939180000  ymax=977020000  ny=345  dy=110000  >\n       s_lintshape.rsf\n\n       <  s_lintshape.rsf  sfclip2  lower=0.34461  upper=2.46485 | sfmath out‐\n       put=\"input-1.4\" | sfgrey title=\"s_lintshape2d shot  scalar\"  color=j  |\n       sfpen\n\n       This example grids the shot consistant amplitude (sxyamp.rsf) estimated\n       on the teapot dome 3D land survey.   The  2d  grid  s_lintshape.rsf  is\n       clipped, biased, and plotted (sfgrey | sfpen)\n\nPARAMETERS\n       float  dx = ®\n       float  dy = ®\n       int    nx = ®\n       int    ny = ®\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       float  xmax = ®\n       float  xmin = ®\n       float  ymax = ®\n       float  ymin = ®\nSOURCE\n       user/karl/Mlintshape2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflintshape2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflistminmax-Tuple{}","page":"Home","title":"Madagascar.sflistminmax","text":"sflistminmax(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflistminmax on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflistminmax. See ?m8r for examples.\n\nRSF Documentation\n\nsflistminmax(1)               Madagascar Manuals               sflistminmax(1)\n\nNAME\n       sflistminmax  -  Construct incremental minimum or maximum lists from an\n       RSF file.\n\nSYNOPSIS\n       sflistminmax < in.rsf > out.rsf mode=\n\nCOMMENTS\n       Constructs the following set of minimum or maximum lists for  each  x2,\n       x3, ... xn in the input RSF file:\n\n       out[0]  =  in[0] out[i] = min or max of (in[i], out[i-1]) for i = 1, 2,\n       3, ... n1\n\n       The input file data type must be float.  The output file data type will\n       be float.\n\n       sflistminmax  mode=min,  can be used to simulate \"erosion\" for a set of\n       geological surfaces, producing a new set of surfaces that do not cross.\n\n       See also: sfminmax, sfstack.\n\nPARAMETERS\n       string mode =      'min' (default) or 'max'\nSOURCE\n       user/jennings/Mlistminmax.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sflistminmax(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfllpf-Tuple{}","page":"Home","title":"Madagascar.sfllpf","text":"sfllpf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfllpf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfllpf. See ?m8r for examples.\n\nRSF Documentation\n\nsfllpf(1)                     Madagascar Manuals                     sfllpf(1)\n\nNAME\n       sfllpf - Local prediction filter (n-dimensional) with an adjoint flag.\n\nSYNOPSIS\n       sfllpf basis=dat.rsf < mat.rsf > flt.rsf adj=n niter=100 verb=y\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   basis =      auxiliary input file name\n       int    niter =100      number of iterations\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mllpf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfllpf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflmo-Tuple{}","page":"Home","title":"Madagascar.sflmo","text":"sflmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflmo. See ?m8r for examples.\n\nRSF Documentation\n\nsflmo(1)                      Madagascar Manuals                      sflmo(1)\n\nNAME\n       sflmo - Linear move-out in the frequency domain\n\nSYNOPSIS\n       sflmo < in.rsf > out.rsf p=\n\nPARAMETERS\n       float  p =      Slope of LMO\nSOURCE\n       user/ivlad/Mlmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sflmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflmostretch-Tuple{}","page":"Home","title":"Madagascar.sflmostretch","text":"sflmostretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflmostretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflmostretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflocalskew-Tuple{}","page":"Home","title":"Madagascar.sflocalskew","text":"sflocalskew(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflocalskew on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflocalskew. See ?m8r for examples.\n\nRSF Documentation\n\nsflocalskew(1)                Madagascar Manuals                sflocalskew(1)\n\nNAME\n       sflocalskew - Rotate phase and compute local skewness.\n\nSYNOPSIS\n       sflocalskew < inp.rsf > sim.rsf na=360 da=1.0 a0=-180. order=100 ref=1.\n       verb=y inv=y niter=20 rect=3 const=n eps=0.0f\n\nPARAMETERS\n       float  a0 =-180.       first angle\n       bool   const =n [y/n]     if y, compute inverse varimax\n       float  da =1.0      angle increment\n       float  eps =0.0f      regularization\n       bool   inv =y [y/n]     inverse similarity\n       int    na =360      number of angles\n       int    niter =20      maximum number of iterations\n       int    order =100      Hilbert transformer order\n       int    rect =3      smoothing radius\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mlocalskew.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sflocalskew(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflocalsnr-Tuple{}","page":"Home","title":"Madagascar.sflocalsnr","text":"sflocalsnr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflocalsnr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflocalsnr. See ?m8r for examples.\n\nRSF Documentation\n\nsflocalsnr(1)                 Madagascar Manuals                 sflocalsnr(1)\n\nNAME\n       sflocalsnr - Local signal-to-noise ratio (SNR) estimation.\n\nSYNOPSIS\n       sflocalsnr  <  in.rsf en=en.rsf > out.rsf nw= niter=100 verb=y eps=0.0f\n       stack=y rect#=(1,1,...)\n\nPARAMETERS\n       file   en =      auxiliary input file name\n       float  eps =0.0f      regularization\n       int    niter =100      number of inversion iterations\n       int    nw =      window length\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   stack =y [y/n]     if y, window centre point, whereas window av‐\n              erage\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mlocalsnr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflocalsnr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflocorr-Tuple{}","page":"Home","title":"Madagascar.sflocorr","text":"sflocorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflocorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflocorr. See ?m8r for examples.\n\nRSF Documentation\n\nsflocorr(1)                   Madagascar Manuals                   sflocorr(1)\n\nNAME\n       sflocorr - Local correlation measure between two datasets.\n\nSYNOPSIS\n       sflocorr < in.rsf > out.rsf other=other.rsf verb=n rect#=(1,1,1)\n\nPARAMETERS\n       file   other =      auxiliary input file name\n       int    rect# =(1,1,1)      smoothing radius on #-th axis\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/yliu/Mlocorr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflocorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflocov-Tuple{}","page":"Home","title":"Madagascar.sflocov","text":"sflocov(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflocov on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflocov. See ?m8r for examples.\n\nRSF Documentation\n\nsflocov(1)                    Madagascar Manuals                    sflocov(1)\n\nNAME\n       sflocov - Local covariance filter\n\nSYNOPSIS\n       sflocov < inp.rsf > out.rsf na=1 nb=1 a0= b0= a1=a0 b1=b0\n\nPARAMETERS\n       float  a0 = ®\n       float  a1 =a0 ®\n       float  b0 = ®\n       float  b1 =b0 ®\n       int    na =1 ®\n       int    nb =1 ®\nSOURCE\n       user/fomels/Mlocov.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflocov(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflogstretch-Tuple{}","page":"Home","title":"Madagascar.sflogstretch","text":"sflogstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflogstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflogstretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflogwarp-Tuple{}","page":"Home","title":"Madagascar.sflogwarp","text":"sflogwarp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflogwarp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflogwarp. See ?m8r for examples.\n\nRSF Documentation\n\nsflogwarp(1)                  Madagascar Manuals                  sflogwarp(1)\n\nNAME\n       sflogwarp - Log warping.\n\nSYNOPSIS\n       sflogwarp < in.rsf > out.rsf inv=n pad=n1 t0=o1 eps=0.01\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]     inversion flag\n       int    pad =n1      output time samples\n       float  t0 =o1 ®\nSOURCE\n       system/generic/Mlogwarp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflogwarp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflogzero-Tuple{}","page":"Home","title":"Madagascar.sflogzero","text":"sflogzero(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflogzero on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflogzero. See ?m8r for examples.\n\nRSF Documentation\n\nsflogzero(1)                  Madagascar Manuals                  sflogzero(1)\n\nNAME\n       sflogzero -\n\nSYNOPSIS\n       sflogzero < loga.rsf > log_eo.rsf switch=\n\nCOMMENTS\n       1D dataset windowing\n\n       Built  for log data manipulation - Clips padded values at the beginning\n       and end of well log data to zero\n\nPARAMETERS\n       int    switch = ®\nSOURCE\n       user/sbader/Mlogzero.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflogzero(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflomatch-Tuple{}","page":"Home","title":"Madagascar.sflomatch","text":"sflomatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflomatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflomatch. See ?m8r for examples.\n\nRSF Documentation\n\nsflomatch(1)                  Madagascar Manuals                  sflomatch(1)\n\nNAME\n       sflomatch  - Local Matched filter for coherent noise removal (1-D, 2-D,\n       and 3-D).\n\nSYNOPSIS\n       sflomatch < dat.rsf > mcf.rsf match=mat.rsf  mask=known.rsf  w=  a=  k=\n       gap=  center=  niter=1  perc=90.0  eps=0.01 verb=n dim=dim liter=aa->nh\n       lag=\n\nPARAMETERS\n       ints   a =      filter size [dim1]\n       ints   center =      filter center [dim1]\n       int    dim =dim      matched filter dimensionality\n       float  eps =0.01      dumping parameter x=(M'M+eps*I)M'd\n       ints   gap =      filter gap [dim1]\n       ints   k =      number of windows [dim1]\n       string lag =      output file for filter lags\n       int    liter =aa->nh      number of linear iteration\n       string mask =      auxiliary input file name\n       string match =      auxiliary input file name\n       int    niter =1      number of POCS iterations: =1 L2 norm ; >1 L1 norm\n       float  perc =90.0      percentage for sharpening [L1 norm]\n       bool   verb =n [y/n]     verbosity flag\n       ints   w =      window size [dim1]\nSOURCE\n       user/lcasasan/Mlomatch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflomatch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflopef-Tuple{}","page":"Home","title":"Madagascar.sflopef","text":"sflopef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflopef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflopef. See ?m8r for examples.\n\nRSF Documentation\n\nsflopef(1)                    Madagascar Manuals                    sflopef(1)\n\nNAME\n       sflopef - Local Prediction-Error Filter (1-D, 2-D, and 3-D).\n\nSYNOPSIS\n       sflopef  <  dat.rsf  >  pef.rsf  mask=known.rsf  w=  a= k= gap= center=\n       dim=dim steepdip=n vel=1.7 tgap=0.030 lag=\n\nPARAMETERS\n       ints   a =      filter size [dim1]\n       ints   center =      filter center [dim1]\n       int    dim =dim      PEF dimensionality\n       ints   gap =      filter gap [dim1]\n       ints   k =      number of windows [dim1]\n       string lag =      output file for filter lags\n       string mask =      auxiliary input file name\n       bool   steepdip =n [y/n]     if y, do steep-dip PEF estimation\n       float  tgap =0.030      time gap for steep-dip decon\n       float  vel =1.7      velocity for steep-dip decon\n       ints   w =      window size [dim1]\nSOURCE\n       user/gee/Mlopef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflopef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflorenz-Tuple{}","page":"Home","title":"Madagascar.sflorenz","text":"sflorenz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflorenz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflorenz. See ?m8r for examples.\n\nRSF Documentation\n\nsflorenz(1)                   Madagascar Manuals                   sflorenz(1)\n\nNAME\n       sflorenz - Generate Lorenz attractor.\n\nSYNOPSIS\n       sflorenz   >   out.rsf   niter=1000   n=niter   rho=28.00   sigma=10.00\n       beta=8.00/3.00 x0=3.051522 y0=1.582542 z0=15.62388 dt=0.0001\n\nPARAMETERS\n       double beta =8.00/3.00      Beta reference\n       double dt =0.0001      time step\n       int    n =niter      set maximum\n       int    niter =1000      number of iterations\n       double rho =28.00      Rayleigh number\n       double sigma =10.00      Prandtl number\n       double x0 =3.051522      intial x coordinate\n       double y0 =1.582542      intial y coordinate\n       double z0 =15.62388      intial z coordinate\nSOURCE\n       system/generic/Mlorenz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflorenz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflosignoi-Tuple{}","page":"Home","title":"Madagascar.sflosignoi","text":"sflosignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflosignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflosignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsflosignoi(1)                 Madagascar Manuals                 sflosignoi(1)\n\nNAME\n       sflosignoi - Local signal and noise separation (N-dimensional).\n\nSYNOPSIS\n       sflosignoi  <  dat.rsf  > signal.rsf sfilt=spef.rsf nfilt=npef.rsf eps=\n       niter=20 slag= nlag=\n\nCOMMENTS\n       Signal and noise separation by inversion  (super-deconvolution).   Uses\n       the helix and patching technologies.\n\nPARAMETERS\n       float  eps =      regularization parameter\n       file   nfilt =      auxiliary input file name\n       int    niter =20      number of iterations\n       string nlag = ®\n       file   sfilt =      auxiliary input file name\n       string slag = ®\nSOURCE\n       user/gee/Mlosignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflosignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflow-Tuple{}","page":"Home","title":"Madagascar.sflow","text":"sflow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflow. See ?m8r for examples.\n\nRSF Documentation\n\nsflow(1)                      Madagascar Manuals                      sflow(1)\n\nNAME\n       sflow  -  Calculating local (signal-and-noise) orthogonalization weight\n       (LOW)\n\nSYNOPSIS\n       sflow < fnoi.rsf sig=fsig.rsf  >  flow.rsf  niter=100  verb=y  eps=0.0f\n       rect#=(1,1,...)\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       file   sig =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chenyk/Mlow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sflow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpad-Tuple{}","page":"Home","title":"Madagascar.sflpad","text":"sflpad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpad. See ?m8r for examples.\n\nRSF Documentation\n\nsflpad(1)                     Madagascar Manuals                     sflpad(1)\n\nNAME\n       sflpad - Pad and interleave traces.\n\nSYNOPSIS\n       sflpad < in.rsf > out.rsf mask=mask.rsf jump=2\n\nCOMMENTS\n       Each  initial  trace  is  followed  by \"jump\" zero traces, the same for\n       planes.\n\n       March 2014 program of the  month:  http://ahay.org/blog/2014/03/11/pro‐\n       gram-of-the-month-sflpad/\n\nPARAMETERS\n       int    jump =2      aliasing\n       file   mask =      auxiliary output file name\nSOURCE\n       system/generic/Mlpad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflpad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpad2-Tuple{}","page":"Home","title":"Madagascar.sflpad2","text":"sflpad2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpad2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpad2. See ?m8r for examples.\n\nRSF Documentation\n\nsflpad2(1)                    Madagascar Manuals                    sflpad2(1)\n\nNAME\n       sflpad2 - 2D pad and interleave traces.\n\nSYNOPSIS\n       sflpad2 < in.rsf > out.rsf mask=mask.rsf jump=2\n\nCOMMENTS\n       Each initial trace is followed by \"jump\" zero traces.\n\nPARAMETERS\n       int    jump =2      aliasing\n       file   mask =      auxiliary output file name\nSOURCE\n       user/yliu/Mlpad2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflpad2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpef-Tuple{}","page":"Home","title":"Madagascar.sflpef","text":"sflpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpef. See ?m8r for examples.\n\nRSF Documentation\n\nsflpef(1)                     Madagascar Manuals                     sflpef(1)\n\nNAME\n       sflpef - Find PEF on aliased traces.\n\nSYNOPSIS\n       sflpef < dat.rsf > pef.rsf a= center= gap= jump=2 lag=\n\nPARAMETERS\n       ints   a =       [dim]\n       ints   center =       [dim]\n       ints   gap =       [dim]\n       int    jump =2 ®\n       string lag =      output file for filter lags\nSOURCE\n       user/gee/Mlpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpf-Tuple{}","page":"Home","title":"Madagascar.sflpf","text":"sflpf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpf. See ?m8r for examples.\n\nRSF Documentation\n\nsflpf(1)                      Madagascar Manuals                      sflpf(1)\n\nNAME\n       sflpf - Local prediction filter (n-dimensional).\n\nSYNOPSIS\n       sflpf  <  dat.rsf match=mat.rsf > flt.rsf pred=pre.rsf niter=100 verb=y\n       pef= lag=\n\nCOMMENTS\n       July 2019 program of  the  month:  http://ahay.org/blog/2019/07/09/pro‐\n       gram-of-the-month-sflpf/\n\nPARAMETERS\n       string lag =      file with PEF lags (optional)\n       file   match =      auxiliary input file name\n       int    niter =100      number of iterations\n       string pef =      signal PEF file (optional)\n       string pred =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mlpf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sflpf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpf2-Tuple{}","page":"Home","title":"Madagascar.sflpf2","text":"sflpf2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpf2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpf2. See ?m8r for examples.\n\nRSF Documentation\n\nsflpf2(1)                     Madagascar Manuals                     sflpf2(1)\n\nNAME\n       sflpf2 - 2D Local prediction filter.\n\nSYNOPSIS\n       sflpf2  < dat.rsf match=mat.rsf > flt.rsf pred=pre.rsf niter=100 verb=y\n       pef= lag=\n\nPARAMETERS\n       string lag =      file with PEF lags (optional)\n       file   match =      auxiliary input file name\n       int    niter =100      number of iterations\n       string pef =      signal PEF file (optional)\n       string pred =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mlpf2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflpf2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpfL1-Tuple{}","page":"Home","title":"Madagascar.sflpfL1","text":"sflpfL1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpfL1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpfL1. See ?m8r for examples.\n\nRSF Documentation\n\nsflpfL1(1)                    Madagascar Manuals                    sflpfL1(1)\n\nNAME\n       sflpfL1 - Local prediction filter (n-dimensional) in L1 norm.\n\nSYNOPSIS\n       sflpfL1   <  dat.rsf  match=mat.rsf  >  flt.rsf  pred=pre.rsf  liter=10\n       niter=25 perc=90.0 verb=y pef= lag=\n\nPARAMETERS\n       string lag =      file with PEF lags (optional)\n       int    liter =10      number of CG iterations\n       file   match =      auxiliary input file name\n       int    niter =25      number of POCS iterations [L1]\n       string pef =      signal PEF file (optional)\n       float  perc =90.0      percentage for sharpening [L1]\n       string pred =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/lcasasan/MlpfL1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflpfL1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpfdenoise1-Tuple{}","page":"Home","title":"Madagascar.sflpfdenoise1","text":"sflpfdenoise1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpfdenoise1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpfdenoise1. See ?m8r for examples.\n\nRSF Documentation\n\nsflpfdenoise1(1)              Madagascar Manuals              sflpfdenoise1(1)\n\nNAME\n       sflpfdenoise1  -  1D  denoising  using edge-preserving local polynomial\n       fitting (ELPF).\n\nSYNOPSIS\n       sflpfdenoise1 < in.rsf > out.rsf nfw= rect= boundary=n niter=100 verb=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\n       int    niter =100      number of iterations\n       int    rect =      local smoothing radius\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mlpfdenoise1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflpfdenoise1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflpfdenoise2-Tuple{}","page":"Home","title":"Madagascar.sflpfdenoise2","text":"sflpfdenoise2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflpfdenoise2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflpfdenoise2. See ?m8r for examples.\n\nRSF Documentation\n\nsflpfdenoise2(1)              Madagascar Manuals              sflpfdenoise2(1)\n\nNAME\n       sflpfdenoise2  -  2D  denoising  using edge-preserving local polynomial\n       fitting (ELPF).\n\nSYNOPSIS\n       sflpfdenoise2 < in.rsf > out.rsf dip=dip.rsf nfw= nw= rect=  boundary=y\n       niter=100 verb=n\n\nPARAMETERS\n       bool   boundary =y [y/n]     if y, boundary is data, whereas zero\n       file   dip =      auxiliary input file name\n       int    nfw =      filter-window length (positive and odd integer)\n       int    niter =100      number of iterations\n       int    nw =      data-window length (positive and odd integer)\n       int    rect =      local smoothing radius\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mlpfdenoise2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflpfdenoise2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflphcoef-Tuple{}","page":"Home","title":"Madagascar.sflphcoef","text":"sflphcoef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflphcoef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflphcoef. See ?m8r for examples.\n\nRSF Documentation\n\nsflphcoef(1)                  Madagascar Manuals                  sflphcoef(1)\n\nNAME\n       sflphcoef - Linear PHase filter COEFficients\n\nSYNOPSIS\n       sflphcoef > out.rsf m=1 n=1 interp=\n\nPARAMETERS\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\nSOURCE\n       user/chen/Mlphcoef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflphcoef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflphfreq-Tuple{}","page":"Home","title":"Madagascar.sflphfreq","text":"sflphfreq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflphfreq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflphfreq. See ?m8r for examples.\n\nRSF Documentation\n\nsflphfreq(1)                  Madagascar Manuals                  sflphfreq(1)\n\nNAME\n       sflphfreq - frequency response of linear phase approximators\n\nSYNOPSIS\n       sflphfreq > out.rsf m=1 n=1 iir=y n1=50 o2=0.1 d2=0.3 n2=1 interp=\n\nPARAMETERS\n       float  d2 =0.3      phase shift increment\n       bool   iir =y [y/n]     y:iir, n:fir\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    n1 =50      samples in frequency domain between (0:f_c]\n       int    n2 =1      number of phase shift\n       float  o2 =0.1      first phase shift\nSOURCE\n       user/chen/Mlphfreq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflphfreq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrlsrtm2mpi-Tuple{}","page":"Home","title":"Madagascar.sflrlsrtm2mpi","text":"sflrlsrtm2mpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrlsrtm2mpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrlsrtm2mpi. See ?m8r for examples.\n\nRSF Documentation\n\nsflrlsrtm2mpi(1)              Madagascar Manuals              sflrlsrtm2mpi(1)\n\nNAME\n       sflrlsrtm2mpi  - 2-D Low-rank One-step Least Pre-stack Reverse-Time-Mi‐\n       gration in the complex domain (both img and data  are  complex  valued)\n       without MPI...\n\nSYNOPSIS\n       sflrlsrtm2mpi   <   Frcd.rsf   src=Fsrc.rsf  >  Fimg.rsf  left=left.rsf\n       right=right.rsf  leftb=leftb.rsf  rightb=rightb.rsf  vel=Fvel.rsf   tm‐\n       pwf=Ftmpwf.rsf  tmpbwf=Ftmpbwf.rsf  verb=n  adj=y wantwf=n wantrecord=y\n       illum=y shtbgn= sht0=shtbgn shtend= shtint= spz= spz= gpz= gpl= snapin‐\n       ter=10  srctrunc=0.4  rectz=1  rectx=1  repeat=0  top=40  bot=40 lft=40\n       rht=40 pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =y [y/n]     if n, no source illumination\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    pad1 =1      padding factor on the first axis\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40      Set I/O file\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =10      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       file   tmpbwf =      auxiliary output file name\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord =y [y/n]     if n, using  record  data  generated  by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\nSOURCE\n       user/jsun/Mlrlsrtm2mpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflrlsrtm2mpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrmatrix-Tuple{}","page":"Home","title":"Madagascar.sflrmatrix","text":"sflrmatrix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrmatrix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrmatrix. See ?m8r for examples.\n\nRSF Documentation\n\nsflrmatrix(1)                 Madagascar Manuals                 sflrmatrix(1)\n\nNAME\n       sflrmatrix - Lowrank matrix decomposition\n\nSYNOPSIS\n       sflrmatrix  name=mfile.rsf  < in.rsf > out.rsf seed=time(NULL eps=1.e-4\n       npk=20 outputs=2\n\nPARAMETERS\n       eps    =1.e-4      tolerance\n       file   name =      auxiliary output file name\n       npk    =20      maximum rank\n       outputs\n              =2      number of outputs (2 or 3)\n       seed   =time(NULL ®\nSOURCE\n       user/lexing/Mlrmatrix.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflrmatrix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrmf-Tuple{}","page":"Home","title":"Madagascar.sflrmf","text":"sflrmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrmf. See ?m8r for examples.\n\nRSF Documentation\n\nsflrmf(1)                     Madagascar Manuals                     sflrmf(1)\n\nNAME\n       sflrmf - Local radial median filtering.\n\nSYNOPSIS\n       sflrmf < in.rsf > out.rsf nfw= boundary=n vmin= vmax= tmin= tmax=\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter window of median filter\n       float  tmax =      zero-offset time for mimumum velocity\n       float  tmin =      zero-offset time for maximum velocity\n       float  vmax =      maximum velocity\n       float  vmin =      minimum velocity\nSOURCE\n       user/yliu/Mlrmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflrmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrmig0-Tuple{}","page":"Home","title":"Madagascar.sflrmig0","text":"sflrmig0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrmig0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrmig0. See ?m8r for examples.\n\nRSF Documentation\n\nsflrmig0(1)                   Madagascar Manuals                   sflrmig0(1)\n\nNAME\n       sflrmig0 - Fast zero-offset time migration\n\nSYNOPSIS\n       sflrmig0 < inp.rsf > mig.rsf left=left.rsf right=right.rsf\n\nPARAMETERS\n       file   left =      auxiliary input file name\n       file   right =      auxiliary input file name\nSOURCE\n       user/fomels/Mlrmig0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflrmig0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflroslsrtm2-Tuple{}","page":"Home","title":"Madagascar.sflroslsrtm2","text":"sflroslsrtm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflroslsrtm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflroslsrtm2. See ?m8r for examples.\n\nRSF Documentation\n\nsflroslsrtm2(1)               Madagascar Manuals               sflroslsrtm2(1)\n\nNAME\n       sflroslsrtm2  -  2-D Low-rank One-step Pre-stack Reverse-Time-Migration\n       in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sflroslsrtm2 < Frcd.rsf src=Fsrc.rsf > Fimg.rsf vel=Fvel.rsf tmpwf=Ftm‐\n       pwf.rsf      tmpbwf=Ftmpbwf.rsf      left=left.rsf      right=right.rsf\n       leftb=leftb.rsf rightb=rightb.rsf verb=n  adj=y  wantwf=n  wantrecord=y\n       srctrunc=0.4  rectz=1  rectx=1  repeat=0  pad1=1  top=40  bot=40 lft=40\n       rht=40 slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gpz=0 gpx= gpl=  snap‐\n       inter=10\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       float  gdep =-1.0      recorder depth on grid\n       int    gpl =      recorder length on index\n       int    gpx =      recorder starting location on index\n       int    gpz =0      recorder depth on index\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    pad1 =1      padding factor on the first axis\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0 ®\n       int    rht =40      Width of abc layer\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       float  slx =-1.0      source location x\n       float  slz =-1.0      source location z\n       int    snapinter =10      snap interval\n       int    spx =-1      source location x (index)\n       int    spz =-1      source location z (index)\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       file   tmpbwf =      auxiliary output file name\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord  =y  [y/n]     if  n,  using record data generated by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\nSOURCE\n       user/jsun/Mlroslsrtm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sflroslsrtm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrosrtm2-Tuple{}","page":"Home","title":"Madagascar.sflrosrtm2","text":"sflrosrtm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrosrtm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrosrtm2. See ?m8r for examples.\n\nRSF Documentation\n\nsflrosrtm2(1)                 Madagascar Manuals                 sflrosrtm2(1)\n\nNAME\n       sflrosrtm2 - 2-D Low-rank One-step Pre-stack Reverse-Time-Migration\n\nSYNOPSIS\n       sflrosrtm2   refl=Frefl.rsf  vel=Fvel.rsf  <  Fsrc.rsf  rec=Frcd.rsf  >\n       Fimg1.rsf    img2=Fimg2.rsf     tmpwf=Ftmpwf.rsf     tmpbwf=Ftmpbwf.rsf\n       left=left.rsf  right=right.rsf leftb=leftb.rsf rightb=rightb.rsf verb=n\n       wantwf=n wantrecord=y dbg=n srcill=y srctrunc=0.4 rectz=1  rectx=1  re‐\n       peat=0  pad1=1  top=40  bot=40  lft=40  rht=40 slx=-1.0 spx=-1 slz=-1.0\n       spz=-1 gdep=-1.0 gpz=0 gpx= gpl= snapinter=10\n\nCOMMENTS\n       img1 :  crosscorrelation img2 :  crosscorrelation with  source/receiver\n       normalization\n\nPARAMETERS\n       int    bot =40 ®\n       bool   dbg  =n  [y/n]     debug mode - doesn't propagate receiver wave‐\n              field\n       float  gdep =-1.0      recorder depth on grid\n       int    gpl =      recorder length on index\n       int    gpx =      recorder starting location on index\n       int    gpz =0      recorder depth on index\n       file   img2 =      auxiliary output file name\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    pad1 =1      padding factor on the first axis\n       file   rec =      auxiliary input file name\n       int    rectx =1 ®\n       int    rectz =1 ®\n       file   refl =      auxiliary output file name\n       int    repeat =0 ®\n       int    rht =40      Width of abc layer\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       float  slx =-1.0      source location x\n       float  slz =-1.0      source location z\n       int    snapinter =10      snap interval\n       int    spx =-1      source location x (index)\n       int    spz =-1      source location z (index)\n       bool   srcill =y [y/n]     true - source illumination; false - receiver\n              illumination\n       float  srctrunc =0.4 ®\n       file   tmpbwf =      auxiliary output file name\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord  =y  [y/n]     if  n,  using record data generated by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\nSOURCE\n       user/jsun/Mlrosrtm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflrosrtm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrrtm-Tuple{}","page":"Home","title":"Madagascar.sflrrtm","text":"sflrrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsflrrtm(1)                    Madagascar Manuals                    sflrrtm(1)\n\nNAME\n       sflrrtm - Lowrank prestack RTM as a linear operator\n\nSYNOPSIS\n       sflrrtm\n\nSOURCE\n       user/zhiguang/Mlrrtm.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflrrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrtti2de-Tuple{}","page":"Home","title":"Madagascar.sflrtti2de","text":"sflrtti2de(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrtti2de on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrtti2de. See ?m8r for examples.\n\nRSF Documentation\n\nsflrtti2de(1)                 Madagascar Manuals                 sflrtti2de(1)\n\nNAME\n       sflrtti2de - 2-D two-components wavefield modeling using original elas‐\n       tic displacement wave equation in TTI media by lowrank method.\n\nSYNOPSIS\n       sflrtti2de  <  Fvp0.rsf  pleft=Fpl.rsf   pright=Fpr.rsf   sleft=Fsl.rsf\n       sright=Fsr.rsf > Fo1.rsf Elasticz=Fo2.rsf Pwavez=Fpz.rsf Pwavex=Fpx.rsf\n       Swavez=Fsz.rsf  Swavex=Fsx.rsf  nt=301  dt=0.001  abc=n  nbt=   nbb=nbt\n       nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct isx=nx/2 isz=nz/2 t0=0.04 f0=30.0\n       A=1.0 cmplx=n sep=n pad1=1 src=1\n\nPARAMETERS\n       float  A =1.0      wavelet amplitude\n       file   Elasticz =      auxiliary output file name\n       string Pwavex =      auxiliary output file name\n       string Pwavez =      auxiliary output file name\n       string Swavex =      auxiliary output file name\n       string Swavez =      auxiliary output file name\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cr =ct ®\n       float  ct = ®\n       float  dt =0.001      absorbing boundary condition\n       float  f0 =30.0      wavelet peak freq\n       int    isx =nx/2 ®\n       int    isz =nz/2 ®\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt =301 ®\n       int    pad1 =1      padding factor on the first axis\n       file   pleft =      auxiliary input file name\n       file   pright =      auxiliary input file name\n       bool   sep =n [y/n]     output separated wavefields\n       file   sleft =      auxiliary input file name\n       int    src =1      source mode: 1 - exploding force; 2  -  equil-energy\n              force\n       file   sright =      auxiliary input file name\n       float  t0 =0.04      wavelet time lag\nSOURCE\n       user/jsun/Mlrtti2de.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflrtti2de(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrvc0-Tuple{}","page":"Home","title":"Madagascar.sflrvc0","text":"sflrvc0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrvc0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrvc0. See ?m8r for examples.\n\nRSF Documentation\n\nsflrvc0(1)                    Madagascar Manuals                    sflrvc0(1)\n\nNAME\n       sflrvc0 - Lowrank decomposition for zero-offset time migration\n\nSYNOPSIS\n       sflrvc0  vel=vel.rsf < fft.rsf left=left.rsf > right.rsf seed=time(NULL\n       tol=1.e-4 npk=20 v0=0.0 fmin=dw tmax=t0+(nt-1\n\nPARAMETERS\n       fmin   =dw      minimum frequency\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       tmax   =t0+(nt-1 ®\n       tol    =1.e-4      tolerance\n       v0     =0.0      minimum velocity\n       file   vel =      auxiliary input file name\nSOURCE\n       user/fomels/Mlrvc0.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflrvc0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflrwave2-Tuple{}","page":"Home","title":"Madagascar.sflrwave2","text":"sflrwave2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflrwave2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflrwave2. See ?m8r for examples.\n\nRSF Documentation\n\nsflrwave2(1)                  Madagascar Manuals                  sflrwave2(1)\n\nNAME\n       sflrwave2 - 2-D FFT-based (point src) wave propagation and its adjoint\n\nSYNOPSIS\n       sflrwave2   <   data.rsf   >   image.rsf   src=src.rsf  snaps=snaps.rsf\n       left=left.rsf right=right.rsf adj=n timer=n verb=n  snap=0  pad1=1  nt=\n       dt= nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       float  dt =      time sampling\n       file   left =      auxiliary input file name\n       int    nt =      time samples\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       file   src =      auxiliary input file name\n       bool   timer =n [y/n]\n       bool   verb =n [y/n]\nSOURCE\n       user/jsun/Mlrwave2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflrwave2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsLU-Tuple{}","page":"Home","title":"Madagascar.sflsLU","text":"sflsLU(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsLU on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsLU. See ?m8r for examples.\n\nRSF Documentation\n\nsflsLU(1)                     Madagascar Manuals                     sflsLU(1)\n\nNAME\n       sflsLU - Local similarity filter (direct solving)\n\nSYNOPSIS\n       sflsLU  obs=dat.rsf  <  mat.rsf  >  flt.rsf adj1=adj1.rsf adj2=adj2.rsf\n       verb=y shift=n adjsrc=n rect1=50 nw= dw= w0=\n\nPARAMETERS\n       file   adj1 =      auxiliary output file name\n       file   adj2 =      auxiliary output file name\n       bool   adjsrc =n [y/n]     use shift instead of stretch\n       float  dw =      omega sampling\n       int    nw =      number of omega values\n       file   obs =      auxiliary input file name\n       int    rect1 =50      smoothing along first axis\n       bool   shift =n [y/n]     use shift instead of stretch\n       bool   verb =y [y/n]     verbosity flag\n       float  w0 =      omega origin\nSOURCE\n       user/zhiguang/MlsLU.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflsLU(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsdmo-Tuple{}","page":"Home","title":"Madagascar.sflsdmo","text":"sflsdmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsdmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsdmo. See ?m8r for examples.\n\nRSF Documentation\n\nsflsdmo(1)                    Madagascar Manuals                    sflsdmo(1)\n\nNAME\n       sflsdmo - Kirchhoff least-squares DMO with antialiasing by reparameter‐\n       ization.\n\nSYNOPSIS\n       sflsdmo < in.rsf > out.rsf mint=2 n=32 niter=5 inv=n type=1  h=  half=y\n       velhalf=0.75\n\nPARAMETERS\n       float  h = ®\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       bool   inv =n [y/n]     inversion flag\n       int    mint =2      starting time sample\n       int    n =32      number of offset samples\n       int    niter =5      iterative number\n       int    type =1      type of amplitude (0,1,2,3)\n       float  velhalf =0.75      half-velocity\nSOURCE\n       user/seisinv/Mlsdmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflsdmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsfit-Tuple{}","page":"Home","title":"Madagascar.sflsfit","text":"sflsfit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsfit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsfit. See ?m8r for examples.\n\nRSF Documentation\n\nsflsfit(1)                    Madagascar Manuals                    sflsfit(1)\n\nNAME\n       sflsfit - Simple least-squares regression.\n\nSYNOPSIS\n       sflsfit  <  inp.rsf  fit=fit.rsf > out.rsf coef=coef.rsf weight=wht.rsf\n       linear=y dim=dim eps=0.0f\n\nPARAMETERS\n       string coef =      auxiliary output file name\n       int    dim =dim      number of dimensions\n       float  eps =0.0f      regularization parameter\n       file   fit =      auxiliary input file name\n       bool   linear =y [y/n]     if linear LS\n       string weight =      auxiliary input file name\nSOURCE\n       user/fomels/Mlsfit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sflsfit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsinterp2d-Tuple{}","page":"Home","title":"Madagascar.sflsinterp2d","text":"sflsinterp2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsinterp2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsinterp2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflsinterp2d(1)               Madagascar Manuals               sflsinterp2d(1)\n\nNAME\n       sflsinterp2d - Least-squares interpolation for 2D validition\n\nSYNOPSIS\n       sflsinterp2d  <  Fin.rsf  mask=Fmask.rsf  >  Fout.rsf  verb=n niter=100\n       nouter=5 eps=1.e-2\n\nPARAMETERS\n       float  eps =1.e-2      regularization parameter\n       string mask =      auxiliary input file name\n       int    niter =100      inner iterations\n       int    nouter =5      outer iterations\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mlsinterp2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sflsinterp2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflskernel-Tuple{}","page":"Home","title":"Madagascar.sflskernel","text":"sflskernel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflskernel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflskernel. See ?m8r for examples.\n\nRSF Documentation\n\nsflskernel(1)                 Madagascar Manuals                 sflskernel(1)\n\nNAME\n       sflskernel -\n\nSYNOPSIS\n       sflskernel  <  _in.rsf  >  _out.rsf match=_match.rsf adj=n wrap=n nk1=5\n       nk2=5\n\nCOMMENTS\n       find kernel for convolution in ls sense, this is assuming 3 dimensional\n       data and a 2d kernel\n\nPARAMETERS\n       bool   adj  =n  [y/n]     if  n takes kernel and outputs function, if y\n              takes function and outputs kernel\n       string match =      auxiliary input file name\n       int    nk1 =5      size of kernel in dimension 1\n       int    nk2 =5      size of kernel in dimension 2\n       bool   wrap =n [y/n]     if y, perform  doughnut  wrapping.  if  n,  no\n              wrapping\nSOURCE\n       user/luke/Mlskernel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflskernel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflslfdc1-Tuple{}","page":"Home","title":"Madagascar.sflslfdc1","text":"sflslfdc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflslfdc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflslfdc1. See ?m8r for examples.\n\nRSF Documentation\n\nsflslfdc1(1)                  Madagascar Manuals                  sflslfdc1(1)\n\nNAME\n       sflslfdc1 - None\n\nSYNOPSIS\n       sflslfdc1   <  velf.rsf  >  outm.rsf  sx=fsx.rsf  Mexact=Mexactfile.rsf\n       wfun=Mwfun.rsf  seed=time(NULL  f0=15  a0=0.0001  taper=0.0   eps=1.e-4\n       npk=20 dt= wavnumcut=1.0 size=6\n\nPARAMETERS\n       file   Mexact =      auxiliary output file name\n       a0     =0.0001      weight parameters\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       f0     =15      dominant frequency\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       taper  =0.0      taper for stability\n       wavnumcut\n              =1.0      wavenumber cut percentile\n       file   wfun =      auxiliary output file name\nSOURCE\n       user/fangg/Mlslfdc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflslfdc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsm_dsr2d-Tuple{}","page":"Home","title":"Madagascar.sflsm_dsr2d","text":"sflsm_dsr2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsm_dsr2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsm_dsr2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflsmdsr2d(1)                Madagascar Manuals                sflsmdsr2d(1)\n\nNAME\n       sflsm_dsr2d - 2-D prestack least-squares migration with split-step DSR.\n\nSYNOPSIS\n       sflsm_dsr2d  < in.rsf > out.rsf slowness=vel.rsf error=error.rsf verb=n\n       eps=0.01 niter=10 nt=1 nr=1 dt=0.004 npad=0\n\nPARAMETERS\n       float  dt =0.004      time error\n       float  eps =0.01      stability parameter\n       file   error =      auxiliary output file name\n       int    niter =10      number of iterations\n       int    npad =0      padding on offset wavenumber\n       int    nr =1      maximum number of references\n       int    nt =1      taper size\n       file   slowness =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/seisinv/Mlsm_dsr2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sflsm_dsr2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsmig3-Tuple{}","page":"Home","title":"Madagascar.sflsmig3","text":"sflsmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsflsmig3(1)                   Madagascar Manuals                   sflsmig3(1)\n\nNAME\n       sflsmig3  -  Least-Squares 3D Path-Summation Integral, Azimuthal Plane-\n       Wave Destruction and Kirchhoff Modeling/Migration Chain of Operators\n\nSYNOPSIS\n       sflsmig3  <  inp.rsf  >  out.rsf  dip=dip.rsf  az=azin.rsf   vx=fvx.rsf\n       vy=fvy.rsf  vel=velFile.rsf snapsf=snapsf.rsf adj=n v_1= v_2= v_3= v_4=\n       passthr=0.001 eps=0.001 epst2=0.001 pad=nt vel= rho=1.-1./nt apt=nx an‐\n       gle=90.0  order=1 nj1=1 nj2=1 sm=y domod=y dopi=y doanisodiff=y dothr=y\n       doomp=n  snaps=n   dsnaps=1   initer=2   oniter=1   niter=10   repeat=1\n       anisoeps=1. thr= antialias= mode=\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjoint flag\n       float  angle =90.0      angle aperture\n       float  anisoeps =1.       Anisotropic diffusion: regularization parame‐\n              ter\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       file   az =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       bool   doanisodiff =y [y/n]     if perform anisotropic diffusion  regu‐\n              larization\n       bool   domod =y [y/n]     if perform Kirchhoff modeling/migration\n       bool   doomp =n [y/n]     OpenMP\n       bool   dopi =y [y/n]     if perform PI filtering\n       bool   dothr =y [y/n]     if perform sparse regularization\n       int    dsnaps =1      snapshots interval\n       float  eps =0.001      Damper for pi\n       float  epst2 =0.001      Damper for t2warp\n       int    initer =2      inner iterations\n       string mode =      'soft', 'hard', 'nng' (default: soft)\n       int    niter =10      Anisotropic diffusion: number of conjugate-gradi‐\n              ent iterations\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    oniter =1      outer iterations\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      Threshold for tail elimination\n       int    repeat =1      Anisotropic diffusion: number of smoothing itera‐\n              tions\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform AzPWD filtering\n       bool   snaps =n [y/n]     if do snapshots of outer iterations\n       file   snapsf =      auxiliary output file name\n       float  thr =      Thresholding level\n       float  v_1 =      Path-integral range\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       float  vel =      migration velocity for Kirchhoff\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mlsmig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sflsmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflspiazpwdmig3-Tuple{}","page":"Home","title":"Madagascar.sflspiazpwdmig3","text":"sflspiazpwdmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflspiazpwdmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflspiazpwdmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsflspiazpwdmig3(1)            Madagascar Manuals            sflspiazpwdmig3(1)\n\nNAME\n       sflspiazpwdmig3  -  Least-Squares 3D Path-Summation Integral, Azimuthal\n       Plane-Wave Destruction and Kirchhoff Modeling/Migration Chain of Opera‐\n       tors\n\nSYNOPSIS\n       sflspiazpwdmig3  < inp.rsf > out.rsf dip=dip.rsf az=azin.rsf vx=fvx.rsf\n       vy=fvy.rsf vel=velFile.rsf snapsf=snapsf.rsf adj=n v_1= v_2= v_3=  v_4=\n       passthr=0.001 eps=0.001 epst2=0.001 pad=nt vel= rho=1.-1./nt apt=nx an‐\n       gle=90.0 order=1 nj1=1 nj2=1 sm=y domod=y dopi=y doanisodiff=y  dothr=y\n       doomp=n   snaps=n   dsnaps=1   initer=2   oniter=1   niter=10  repeat=1\n       anisoeps=1. thr= antialias= mode=\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjoint flag\n       float  angle =90.0      angle aperture\n       float  anisoeps =1.       Anisotropic diffusion: regularization parame‐\n              ter\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       file   az =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       bool   doanisodiff  =y [y/n]     if perform anisotropic diffusion regu‐\n              larization\n       bool   domod =y [y/n]     if perform Kirchhoff modeling/migration\n       bool   doomp =n [y/n]     OpenMP\n       bool   dopi =y [y/n]     if perform PI filtering\n       bool   dothr =y [y/n]     if perform sparse regularization\n       int    dsnaps =1      snapshots interval\n       float  eps =0.001      Damper for pi\n       float  epst2 =0.001      Damper for t2warp\n       int    initer =2      inner iterations\n       string mode =      'soft', 'hard', 'nng' (default: soft)\n       int    niter =10      Anisotropic diffusion: number of conjugate-gradi‐\n              ent iterations\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    oniter =1      outer iterations\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      Threshold for tail elimination\n       int    repeat =1      Anisotropic diffusion: number of smoothing itera‐\n              tions\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform AzPWD filtering\n       bool   snaps =n [y/n]     if do snapshots of outer iterations\n       file   snapsf =      auxiliary output file name\n       float  thr =      Thresholding level\n       float  v_1 =      Path-integral range\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       float  vel =      migration velocity for Kirchhoff\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mlspiazpwdmig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sflspiazpwdmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflspiazpwdmig32-Tuple{}","page":"Home","title":"Madagascar.sflspiazpwdmig32","text":"sflspiazpwdmig32(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflspiazpwdmig32 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflspiazpwdmig32. See ?m8r for examples.\n\nRSF Documentation\n\nsflspiazpwdmig32(1)           Madagascar Manuals           sflspiazpwdmig32(1)\n\nNAME\n       sflspiazpwdmig32  - Least-Squares 3D Path-Summation Integral, Azimuthal\n       Plane-Wave Destruction and Kirchhoff Modeling/Migration Chain of Opera‐\n       tors. Shaping is pwddiffuse\n\nSYNOPSIS\n       sflspiazpwdmig32  <  inp.rsf  >  out.rsf dip=dip.rsf dipim=dipImage.rsf\n       az=azin.rsf  vx=fvx.rsf  vy=fvy.rsf  vel=velFile.rsf  snapsf=snapsf.rsf\n       adj=n  v_1=  v_2=  v_3= v_4= passthr=0.001 eps=0.001 epst2=0.001 pad=nt\n       vel= rho=1.-1./nt apt=nx angle=90.0 order=1 nj1=1  nj2=1  sm=y  domod=y\n       dopi=y doanisodiff=y dothr=y doomp=n snaps=n dsnaps=1 initer=2 oniter=1\n       niter=10 repeat=1 anisoeps=1. thr= antialias= mode=\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjoint flag\n       float  angle =90.0      angle aperture\n       float  anisoeps =1.       Anisotropic diffusion: regularization parame‐\n              ter\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       file   az =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       file   dipim =      auxiliary input file name\n       bool   doanisodiff  =y [y/n]     if perform anisotropic diffusion regu‐\n              larization\n       bool   domod =y [y/n]     if perform Kirchhoff modeling/migration\n       bool   doomp =n [y/n]     OpenMP\n       bool   dopi =y [y/n]     if perform PI filtering\n       bool   dothr =y [y/n]     if perform sparse regularization\n       int    dsnaps =1      snapshots interval\n       float  eps =0.001      Damper for pi\n       float  epst2 =0.001      Damper for t2warp\n       int    initer =2      inner iterations\n       string mode =      'soft', 'hard', 'nng' (default: soft)\n       int    niter =10      Anisotropic diffusion: number of conjugate-gradi‐\n              ent iterations\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    oniter =1      outer iterations\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      Threshold for tail elimination\n       int    repeat =1      Anisotropic diffusion: number of smoothing itera‐\n              tions\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform AzPWD filtering\n       bool   snaps =n [y/n]     if do snapshots of outer iterations\n       file   snapsf =      auxiliary output file name\n       float  thr =      Thresholding level\n       float  v_1 =      Path-integral range\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       float  vel =      migration velocity for Kirchhoff\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mlspiazpwdmig32.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sflspiazpwdmig32(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsprtm2d-Tuple{}","page":"Home","title":"Madagascar.sflsprtm2d","text":"sflsprtm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsprtm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsprtm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflsprtm2d(1)                 Madagascar Manuals                 sflsprtm2d(1)\n\nNAME\n       sflsprtm2d - least-squares prestack RTM in 2-D\n\nSYNOPSIS\n       sflsprtm2d  <  shots.rsf  vel=velo.rsf  >  imglsm.rsf imgrtm=imgrtm.rsf\n       verb=y niter=10 nb=20 fromBoundary=y testadj=0\n\nPARAMETERS\n       bool   fromBoundary  =y  [y/n]     if  fromBoundary=true,   reconstruct\n              source wavefield from stored boundary\n       file   imgrtm =      auxiliary output file name\n       int    nb =20      number (thickness) of ABC on each side\n       int    niter =10      totol number of least-squares iteration\n       int    testadj =0      if testadj = 1 then program only testadj without\n              calculating\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/pyang/Mlsprtm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sflsprtm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflsrtm2d-Tuple{}","page":"Home","title":"Madagascar.sflsrtm2d","text":"sflsrtm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflsrtm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflsrtm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflsrtm2d(1)                  Madagascar Manuals                  sflsrtm2d(1)\n\nNAME\n       sflsrtm2d  -  2-D  zero-offset  least-squares  reverse  time  migration\n       (LSRTM)\n\nSYNOPSIS\n       sflsrtm2d < data.rsf  >  imag.rsf  vel=modl.rsf  n0=0  verb=n  niter=10\n       tol=1.e-12\n\nPARAMETERS\n       int    n0 =0      shot depth in the grid\n       int    niter =10      totol number of least-squares iteration\n       float  tol =1.e-12      tolerance of inversion\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mlsrtm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflsrtm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflstk-Tuple{}","page":"Home","title":"Madagascar.sflstk","text":"sflstk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflstk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflstk. See ?m8r for examples.\n\nRSF Documentation\n\nsflstk(1)                     Madagascar Manuals                     sflstk(1)\n\nNAME\n       sflstk - Local slant stacks (2D)\n\nSYNOPSIS\n       sflstk  <  Fi.rsf > Fo.rsf ompchunk=1 verb=n sig=1.0 na=1 oa=0.0 da=1.0\n       nl=0 dl=1. ol=0.\n\nPARAMETERS\n       float  da =1.0 ®\n       float  dl =1.  ®\n       int    na =1 ®\n       int    nl =0 ®\n       float  oa =0.0 ®\n       float  ol =0.  ®\n       int    ompchunk =1      OpenMP data chunk size\n       float  sig =1.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mlstk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflstk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflstri2d-Tuple{}","page":"Home","title":"Madagascar.sflstri2d","text":"sflstri2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflstri2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflstri2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflstri2d(1)                  Madagascar Manuals                  sflstri2d(1)\n\nNAME\n       sflstri2d - 2-D passive seismic RTM and its adjoint\n\nSYNOPSIS\n       sflstri2d   <   in.rsf   >   out.rsf   velocity=vel.rsf   geop=geop.rsf\n       weight=weight.rsf verb=n adj=n abc=n inv=n prec=n  sw=n  ctr=n  depth=0\n       niter=0   ngrp=1   size=0  rectz=1  rectx=1  rectt=1  repeat=1  stack=1\n       perc=SF_EPS hard=0.0f cb=0.0f\n\nPARAMETERS\n       bool   abc =n [y/n]     absorbing boundary condition\n       bool   adj =n [y/n]     adjoint flag, 0: modeling, 1: migration\n       float  cb =0.0f      allocate arrays\n       bool   ctr =n [y/n]     CTR IC flag\n       int    depth =0      acquisition surface\n       string geop =      auxiliary input file name\n       float  hard =0.0f      hard thresholding\n       bool   inv =n [y/n]     inversion flag\n       int    ngrp =1      number of groups of receivers\n       int    niter =0      number of iterations\n       float  perc =SF_EPS      stable division padding percentage (of max)\n       bool   prec =n [y/n]     use ctr as precondioner\n       int    rectt =1      smoothing radius in t\n       int    rectx =1      smoothing radius in x\n       int    rectz =1      smoothing radius in z\n       int    repeat =1      smoothing repeatation\n       int    size =0      sliding window size\n       int    stack =1      local stacking length\n       bool   sw =n [y/n]     inversion flag\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary input file name\nSOURCE\n       user/jsun/Mlstri2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflstri2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfltft-Tuple{}","page":"Home","title":"Madagascar.sfltft","text":"sfltft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfltft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfltft. See ?m8r for examples.\n\nRSF Documentation\n\nsfltft(1)                     Madagascar Manuals                     sfltft(1)\n\nNAME\n       sfltft - Local time-frequency transform (LTFT).\n\nSYNOPSIS\n       sfltft    <    in.rsf    >    out.rsf   basis=basis.rsf   mask=mask.rsf\n       weight=weight.rsf inv=n verb=n nw= dw= w0=0. rect=10 niter=100 alpha=0.\n\nCOMMENTS\n       July 2014 program of  the  month:  http://ahay.org/blog/2014/07/13/pro‐\n       gram-of-the-month-sfltft/\n\nPARAMETERS\n       float  alpha =0.       frequency adaptivity\n       string basis =      auxiliary output file name\n       float  dw =      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       string mask =      data weight (auxiliary input file name)\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       int    rect =10      smoothing radius (in time, samples)\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\n       string weight =      model weight (auxiliary input file name)\nSOURCE\n       user/yliu/Mltft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfltft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfltftn-Tuple{}","page":"Home","title":"Madagascar.sfltftn","text":"sfltftn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfltftn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfltftn. See ?m8r for examples.\n\nRSF Documentation\n\nsfltftn(1)                    Madagascar Manuals                    sfltftn(1)\n\nNAME\n       sfltftn - Non-stationary local time-frequency transform (NLTFT).\n\nSYNOPSIS\n       sfltftn    <    in.rsf    >   out.rsf   basis=basis.rsf   mask=mask.rsf\n       weight=weight.rsf inv=n verb=n nw= dw= w0=0. rect=10 rectf=5  niter=100\n       alpha=0. shift#=\n\nPARAMETERS\n       float  alpha =0.       frequency adaptivity\n       string basis =      auxiliary output file name\n       float  dw =      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       string mask =      data weight (auxiliary input file name)\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       int    rect =10      smoothing radius (in time, samples)\n       int    rectf =5      smoothing radius (in frequency, samples)\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\n       string weight =      model weight (auxiliary input file name)\nSOURCE\n       user/chenyk/Mltftn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfltftn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfltfts-Tuple{}","page":"Home","title":"Madagascar.sfltfts","text":"sfltfts(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfltfts on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfltfts. See ?m8r for examples.\n\nRSF Documentation\n\nsfltfts(1)                    Madagascar Manuals                    sfltfts(1)\n\nNAME\n       sfltfts - Stationary local time-frequency transform (SLTFT).\n\nSYNOPSIS\n       sfltfts    <    in.rsf    >   out.rsf   basis=basis.rsf   mask=mask.rsf\n       weight=weight.rsf inv=n verb=n nw= dw= w0=0. rect=10 niter=100 alpha=0.\n\nPARAMETERS\n       float  alpha =0.       frequency adaptivity\n       string basis =      auxiliary output file name\n       float  dw =      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       string mask =      data weight (auxiliary input file name)\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       int    rect =10      smoothing radius (in time, samples)\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\n       string weight =      model weight (auxiliary input file name)\nSOURCE\n       user/chenyk/Mltfts.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfltfts(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflum-Tuple{}","page":"Home","title":"Madagascar.sflum","text":"sflum(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflum on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflum. See ?m8r for examples.\n\nRSF Documentation\n\nsflum(1)                      Madagascar Manuals                      sflum(1)\n\nNAME\n       sflum - 1D LUM filter\n\nSYNOPSIS\n       sflum  <  in.rsf  >  out.rsf  nfw=  smnclip=(nfw+1)/2 shnclip=(nfw+1)/2\n       boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\n       int    shnclip =(nfw+1)/2      sharpener tuning parameter (1 <= shnclip\n              <= (nfw+1)/2, the default is (nfw+1)/2)\n       int    smnclip  =(nfw+1)/2      smoother tuning parameter (1 <= smnclip\n              <= (nfw+1)/2, the default is (nfw+1)/2)\nSOURCE\n       user/yliu/Mlum.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sflum(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflum2-Tuple{}","page":"Home","title":"Madagascar.sflum2","text":"sflum2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflum2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflum2. See ?m8r for examples.\n\nRSF Documentation\n\nsflum2(1)                     Madagascar Manuals                     sflum2(1)\n\nNAME\n       sflum2 - 2D LUM filter\n\nSYNOPSIS\n       sflum2  < in.rsf > out.rsf nfw1= nfw2=nfw1 smnclip=(nfw1*nfw2+1)/2 shn‐\n       clip=(nfw1*nfw2+1)/2 boundary=n verb=n type=\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw1 =      filter-window length in n1 direction  (positive  and\n              odd integer)\n       int    nfw2  =nfw1       filter-window  length  in  n2  direction  (de‐\n              fault=nfw1)\n       int    shnclip =(nfw1*nfw2+1)/2      sharpener tuning parameter  (1  <=\n              shnclip <= (nfw1*nfw2+1)/2, the default is (nfw1*nfw2+1)/2)\n       int    smnclip  =(nfw1*nfw2+1)/2       smoother  tuning parameter (1 <=\n              smnclip <= (nfw1*nfw2+1)/2, the default is (nfw1*nfw2+1)/2)\n       string type =      [rectangular,cross] 2-D window type, the default  is\n              rectangular\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mlum2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sflum2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflumsharpener-Tuple{}","page":"Home","title":"Madagascar.sflumsharpener","text":"sflumsharpener(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflumsharpener on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflumsharpener. See ?m8r for examples.\n\nRSF Documentation\n\nsflumsharpener(1)             Madagascar Manuals             sflumsharpener(1)\n\nNAME\n       sflumsharpener - 1D LUM sharpener filter\n\nSYNOPSIS\n       sflumsharpener < in.rsf > out.rsf nfw= nclip=(nfw+1)/2 boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nclip =(nfw+1)/2      tuning parameter (1 <= nclip <= (nfw+1)/2,\n              the default is (nfw+1)/2)\n       int    nfw =      filter-window length (positive and odd integer)\nSOURCE\n       user/yliu/Mlumsharpener.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sflumsharpener(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflumsmoother-Tuple{}","page":"Home","title":"Madagascar.sflumsmoother","text":"sflumsmoother(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflumsmoother on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflumsmoother. See ?m8r for examples.\n\nRSF Documentation\n\nsflumsmoother(1)              Madagascar Manuals              sflumsmoother(1)\n\nNAME\n       sflumsmoother - 1D LUM smoother filter\n\nSYNOPSIS\n       sflumsmoother < in.rsf > out.rsf nfw= nclip=(nfw+1)/2 boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nclip =(nfw+1)/2      tuning parameter (1 <= nclip <= (nfw+1)/2,\n              the default is (nfw+1)/2)\n       int    nfw =      filter-window length (positive and odd integer)\nSOURCE\n       user/yliu/Mlumsmoother.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sflumsmoother(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sflwefd2d-Tuple{}","page":"Home","title":"Madagascar.sflwefd2d","text":"sflwefd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sflwefd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sflwefd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsflwefd2d(1)                  Madagascar Manuals                  sflwefd2d(1)\n\nNAME\n       sflwefd2d - linearized acoustic time-domain FD modeling\n\nSYNOPSIS\n       sflwefd2d    <    Fwav.rsf   sou=Fsou.rsf   rec=Frec.rsf   vel=Fvel.rsf\n       den=Fden.rsf  ref=Fref.rsf   wfl=Fwfl.rsf   >   Fdat.rsf   liw=Fliw.rsf\n       lid=Flid.rsf  ompchunk=1  ompnth=0  verb=n snap=n free=n expl=n jdata=1\n       jsnap=nt nqz=sf_n(a1) nqx=sf_n(a2) oqz=sf_o(a1) oqx=sf_o(a2)\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       file   lid =      auxiliary output file name\n       file   liw =      auxiliary output file name\n       int    nqx =sf_n(a2) ®\n       int    nqz =sf_n(a1) ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  oqx =sf_o(a2) ®\n       float  oqz =sf_o(a1) ®\n       file   rec =      auxiliary input file name\n       file   ref =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mlwefd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sflwefd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmake-Tuple{}","page":"Home","title":"Madagascar.sfmake","text":"sfmake(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmake on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmake. See ?m8r for examples.\n\nRSF Documentation\n\nsfmake(1)                     Madagascar Manuals                     sfmake(1)\n\nNAME\n       sfmake - Simple 2-D synthetics with crossing plane waves.\n\nSYNOPSIS\n       sfmake > mod.rsf n1=100 n2=14 n3=1 second=y n=3 p=3 t1=4 t2=4\n\nPARAMETERS\n       int    n =3 ®\n       int    n1 =100 ®\n       int    n2 =14 ®\n       int    n3 =1      dimensions\n       int    p =3 ®\n       bool   second =y [y/n]     if n, only one plane wave is modeled\n       int    t1 =4      triangle smoother for first wave\n       int    t2 =4      triangle smoother for second wave\nSOURCE\n       user/gee/Mmake.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmake(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmake_ix_indx-Tuple{}","page":"Home","title":"Madagascar.sfmake_ix_indx","text":"sfmake_ix_indx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmake_ix_indx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmake_ix_indx. See ?m8r for examples.\n\nRSF Documentation\n\nsfmakeixindx(1)             Madagascar Manuals             sfmakeixindx(1)\n\nNAME\n       sfmake_ix_indx  - MAKE Iline Xline INDX files for quick 3D data subsets\n       (superbins)\n\nSYNOPSIS\n       sfmake_ix_indx < infile.rsf > out.rsf verbose=1  ilinemin=-1e31  iline‐\n       max=-1e31  xlinemin=-1e31  xlinemax=-1e31  ilineinc=10  input= headers=\n       iline= xline= indxdir=\n\nCOMMENTS\n       These indexes are intended to be  used  by  future  sftahsort  and  sf‐\n       tah5dinterp.\n\n       EXAMPLE: Runnning the programs:\n\n       sfmake_ix_indx             verbose=1              input=npr3_fielda.rsf\n       indxdir=npr3_field            ilineinc=10                   iline=iline\n       xline=xline            append=no              >/dev/null sfmake_ix_indx\n       verbose=1                 input=npr3_fieldb.rsf      indxdir=npr3_field\n       ilineinc=10            iline=iline            xline=xline           ap‐\n       pend=yes            >/dev/null\n\n       Will   create   a   set   of   files:   npr3_field/il0   npr3_field/il5\n       npr3_field/il350 and npr3_field/filename_indx\n\n       The  file  npr3_field/il15 will contain the trace headers of the traces\n       with trace header \"iline\" nearest to 15.  The file also  has  the  file\n       number  and  the trace number, so you can locate the trace in the input\n       files (either npr3_fielda.rsf or npr3_fieldb.rsf.  The trace headers in\n       the  file  are  all  sorted  by  xline.   With this information you can\n       quickly find all the traces that are in a range of ilines  and  xlines.\n       This  supports  sftah5dinterp  which processes all the traces in a mid‐\n       point superbin that might be 800 meters by 800 meters (about 16  ilines\n       and  32  xlines).  This is not a simple sort problem because sftah5din‐\n       terp processes data in overlapping bin (i.e.  the  800  meter  superbin\n       centers  moveup by 400 meters).  Overlapping superbins are supported by\n       allowing traces to be reread.\n\n       The program also allows sftahsort to read from multiple files. This  is\n       useful  on  larger 3D projects where the input data is on multiple segy\n       files.  Previously I merged the files into one big file  after  running\n       sfsegyread.   This  required  an  additional copy of all the data to be\n       saved on disk.\n\nPARAMETERS\n       string headers =\n\n                   Trace header file name.  Default is the input data file\n                   name, with the final .rsf changed to _hdr.rsf\n       string iline =\n\n                   header key for the main index key.  This should  be  iline,\n              but you\n                   may  have non-standard trace headers or a wierd use of this\n              program\n       int    ilineinc =10\n\n                   incrment in iline for the index\n       float  ilinemax =-1e31\n\n                   maximum \"iline\" header key to include in  the  index.   Use\n              this parameter\n                   to  remove  null  trace  headers  or traces outside project\n              area.\n       float  ilinemin =-1e31\n\n                   minimum \"iline\" header key to include in  the  index.   Use\n              this parameter\n                   to  remove  null  trace  headers  or traces outside project\n              area.\n       string indxdir =\n\n                   The name of the directory containing the iline,xline index.\n              This\n                   directory  will  be  in  DATAPATH (probably the environment\n              variable). The\n                   directory also continues a file \"filenames\", a list of  the\n              trace and\n                   header  files that contributes to this index. The directory\n              contains files\n                   with names  \"indx#\"  here  #  is  an  integer  multiple  of\n              ilineinc. These files\n                   contains a record for each contributing trace with filenum‐\n              ber,\n                   tracenumber, and the trace header. The file containing  the\n              trace is\n                   determined  using  the  can be read by using the filenumber\n              and the\n                   \"filenames\" file.  The tracenumber defines the location  of\n              the trace\n                   in the file.\n       string input =\n\n                   Input file for traces amplitudes\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       string xline = ®\n       float  xlinemax =-1e31\n\n                   maximum  \"xline\"  header  key to include in the index.  Use\n              this parameter\n                   to remove null trace  headers  or  traces  outside  project\n              area.\n       float  xlinemin =-1e31\n\n                   minimum  \"xline\"  header  key to include in the index.  Use\n              this parameter\n                   to remove null trace  headers  or  traces  outside  project\n              area.\nSOURCE\n       user/karl/Mmake_ix_indx.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfmake_ix_indx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmakevel-Tuple{}","page":"Home","title":"Madagascar.sfmakevel","text":"sfmakevel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmakevel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmakevel. See ?m8r for examples.\n\nRSF Documentation\n\nsfmakevel(1)                  Madagascar Manuals                  sfmakevel(1)\n\nNAME\n       sfmakevel - Make a velocity function v(x,y,z)\n\nSYNOPSIS\n       sfmakevel  >  out.rsf  n2=  n1= n3=1 d2=1.0 d3=1.0 d1=1.0 o2=0.0 o3=0.0\n       o1=0.0  v000=2.0  dvdx2=0.0  dvdx3=0.0  dvdx1=0.0  x2lens=fx  x3lens=fy\n       x1lens=fz  vlens=0.0  dlens=1.0  tlens=1.0 vran=0.0 vx1ran=0.0 vx1c=0.0\n       x11c=fz x12c=fz+(nz-1)*dz l1c=dz l2c=dz exc=1.0 vzfile= vx1file=\n\nPARAMETERS\n       float  d1 =1.0      1st dimension sampling interval\n       float  d2 =1.0      2nd dimension sampling interval\n       float  d3 =1.0      3rd dimension sampling interval\n       float  dlens =1.0      diameter of parabolic lens\n       float  dvdx1 =0.0      velocity gradient with respect to 1st dimension\n       float  dvdx2 =0.0      velocity gradient with respect to 2nd dimension\n       float  dvdx3 =0.0      velocity gradient with respect to 3rd dimension\n       float  exc =1.0      exponent of chirp\n       float  l1c =dz      wavelength at beginning of chirp\n       float  l2c =dz      wavelength at end of chirp\n       int    n1 =      number of z samples (1st  dimension)),  must  be  pro‐\n              vided!\n       int    n2 =      number of x samples (2nd dimension), must be provided!\n       int    n3 =1      number of y samples (3rd dimension)\n       float  o1 =0.0      Origin 1st dimension\n       float  o2 =0.0      Origin 2nd dimension\n       float  o3 =0.0      Origin 3rd dimension\n       float  tlens =1.0      thickness of parabolic lens\n       float  v000 =2.0      velocity at (x=0,y=0,z=0)\n       float  vlens =0.0      velocity perturbation in parabolic lens\n       float  vran =0.0      standard deviation of random perturbation\n       float  vx1c =0.0      1st dimension v(z) chirp amplitude\n       string vx1file =      file containing v(z) 1st dimension profile\n       float  vx1ran  =0.0       standard  deviation of random perturbation to\n              1st dimension\n       string vzfile = ®\n       float  x11c =fz      1st dimension at which to begin chirp\n       float  x12c =fz+(nz-1)*dz      1st dimension at which to end chirp\n       float  x1lens =fz      1st dimension coordinate of center of  parabolic\n              lens\n       float  x2lens  =fx      2nd dimension coordinate of center of parabolic\n              lens\n       float  x3lens =fy      3rd dimension coordinate of center of  parabolic\n              lens\nSOURCE\n       su/main/makevel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmakevel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmandelbrot-Tuple{}","page":"Home","title":"Madagascar.sfmandelbrot","text":"sfmandelbrot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmandelbrot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmandelbrot. See ?m8r for examples.\n\nRSF Documentation\n\nsfmandelbrot(1)               Madagascar Manuals               sfmandelbrot(1)\n\nNAME\n       sfmandelbrot - Generate Mandelbrot set.\n\nSYNOPSIS\n       sfmandelbrot  >  out.rsf  n1=512  n2=512 x0=-2. y0=-1. xmax=0.5 ymax=1.\n       niter=1000 dx=(xmax-x0)/(n1-1) dy=(ymax-y0)/(n2-1)\n\nPARAMETERS\n       float  dx =(xmax-x0)/(n1-1) ®\n       float  dy =(ymax-y0)/(n2-1) ®\n       int    n1 =512 ®\n       int    n2 =512      dimensions\n       int    niter =1000      number of iterations\n       float  x0 =-2.  ®\n       float  xmax =0.5 ®\n       float  y0 =-1.       set origin\n       float  ymax =1.       set maximum\nSOURCE\n       system/generic/Mmandelbrot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmandelbrot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmap2cloud2D-Tuple{}","page":"Home","title":"Madagascar.sfmap2cloud2D","text":"sfmap2cloud2D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmap2cloud2D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmap2cloud2D. See ?m8r for examples.\n\nRSF Documentation\n\nsfmap2cloud2D(1)              Madagascar Manuals              sfmap2cloud2D(1)\n\nNAME\n       sfmap2cloud2D -\n\nSYNOPSIS\n       sfmap2cloud2D < Fin.rsf > Fou.rsf msk=Fmk.rsf verb=n sphc=n\n\nCOMMENTS\n       reformat gridded maps to point clouds Paul Sava Copyright (C) 2022 Col‐\n       orado School of Mines\n\nPARAMETERS\n       string msk =      auxiliary input file name\n       bool   sphc =n [y/n]     spherical coordinates\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mmap2cloud2D.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmap2cloud2D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmap2cloud3D-Tuple{}","page":"Home","title":"Madagascar.sfmap2cloud3D","text":"sfmap2cloud3D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmap2cloud3D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmap2cloud3D. See ?m8r for examples.\n\nRSF Documentation\n\nsfmap2cloud3D(1)              Madagascar Manuals              sfmap2cloud3D(1)\n\nNAME\n       sfmap2cloud3D -\n\nSYNOPSIS\n       sfmap2cloud3D < Fin.rsf > Fou.rsf msk=Fmk.rsf verb=n sphc=n\n\nCOMMENTS\n       reformat gridded maps to point clouds Paul Sava Copyright (C) 2022 Col‐\n       orado School of Mines\n\nPARAMETERS\n       string msk =      auxiliary input file name\n       bool   sphc =n [y/n]     spherical coordinates\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mmap2cloud3D.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmap2cloud3D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmap2coh-Tuple{}","page":"Home","title":"Madagascar.sfmap2coh","text":"sfmap2coh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmap2coh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmap2coh. See ?m8r for examples.\n\nRSF Documentation\n\nsfmap2coh(1)                  Madagascar Manuals                  sfmap2coh(1)\n\nNAME\n       sfmap2coh  - From parameter's attribute map (veltran) to coherency-like\n       plots.\n\nSYNOPSIS\n       sfmap2coh  <  cmp.rsf  map=map.rsf  >  coh.rsf  nv=  v0=  dv=   min2=o2\n       max2=o2+d2*(n2-1) nw=4\n\nCOMMENTS\n       (eventually masked)\n\nPARAMETERS\n       float  dv =      velocity sampling\n       string map =      parameters map (auxiliary input file name)\n       float  max2 =o2+d2*(n2-1)      max2\n       float  min2 =o2      min2\n       int    nv =      number of velocities\n       int    nw =4      interpolator size (2,3,4,6,8)\n       float  v0 =      velocity origin\nSOURCE\n       system/seismic/Mmap2coh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmap2coh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmarchenko-Tuple{}","page":"Home","title":"Madagascar.sfmarchenko","text":"sfmarchenko(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmarchenko on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmarchenko. See ?m8r for examples.\n\nRSF Documentation\n\nsfmarchenko(1)                Madagascar Manuals                sfmarchenko(1)\n\nNAME\n       sfmarchenko - Marchenko-Wapenaar-Broggini iterative scheme\n\nSYNOPSIS\n       sfmarchenko  <  Fplus.rsf  refl=FRefl.rsf > FGp.rsf Gm=FGm.rsf G=FG.rsf\n       H=FH.rsf  p=Fp.rsf  q=Fq.rsf  window=Ftwin.rsf  verb=n  conj=n   twin=n\n       pandq=n Gtot=n Htot=n niter=1 ntaper=101 scale=1.0 eps=1e-4 shift=5\n\nCOMMENTS\n       sfmarchenko  <  downgoing.rsf  refl=REFL_000.rsf  conj=y  verb=n Gtot=y\n       niter=21 nshots=401 scale=1 eps=1e-4 shift=5 Gm=Gm.rsf G=G.rsf> Gp.rsf\n\n       ======= INPUTS ============\n\n       p0plus.rsf: initial downgoing wave field\n\n       REFL_000.rsf: Fourier transform of the reflection response\n\n       ======= PARAMETERS ========\n\n       conj  = [y]/n  - complex-conjugation of the first input (corresponds to\n       time-reversal in time) verb = y/[n]   - verbosity flag twin  = y/[n]  -\n       returns the timewindow as one of the outputs (window=window.rsf)  pandq\n       =  y/[n]  -  pandq=true: returns p and q, pandq=false returns Gp and Gm\n       Gtot  = y/[n] - Gtot=true returns G=Gp+Gm Htot   =  y/[n]  -  Htot=true\n       returns  H=Gp-Gm  niter   = 1          - number of iterations ntaper  =\n       101  - tapering width for each side scale  = 1.0   - scale factor  (of‐\n       ten due to resampling) eps  = 1e-4         - threshold for the timewin‐\n       dow shift  = 5          - shift in samples for the timewindow\n\nPARAMETERS\n       file   G =      auxiliary output file name\n       file   Gm =      auxiliary output file name\n       bool   Gtot =n [y/n]     Gtot=true: returns G=Gp+Gm\n       file   H =      auxiliary output file name\n       bool   Htot =n [y/n]     Htot=true: returns H=Gp-Gm\n       bool   conj =n [y/n]     complex conjugation (time-reversal) flag\n       float  eps =1e-4      threshold for the timewindow\n       int    niter =1      number of iterations\n       int    ntaper =101      tapering widht\n       file   p =      auxiliary output file name\n       bool   pandq =n [y/n]     pandq=true: returns p and q\n       file   q =      auxiliary output file name\n       file   refl =      auxiliary input file name\n       float  scale =1.0      scale factor\n       int    shift =5      shift in samples for the timewindow\n       bool   twin =n [y/n]     returns the timewindow as one of the outputs\n       bool   verb =n [y/n]     verbosity flag\n       file   window =      auxiliary output file name\nSOURCE\n       user/fbroggin/Mmarchenko.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmarchenko(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmarsiswav-Tuple{}","page":"Home","title":"Madagascar.sfmarsiswav","text":"sfmarsiswav(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmarsiswav on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmarsiswav. See ?m8r for examples.\n\nRSF Documentation\n\nsfmarsiswav(1)                Madagascar Manuals                sfmarsiswav(1)\n\nNAME\n       sfmarsiswav -\n\nSYNOPSIS\n       sfmarsiswav > wavTout.rsf verb=n window= delay= cmplxBB= zpad=\n\nCOMMENTS\n       Create the time domain range compressed waveform for MARSIS Created by:\n       Dylan Hickson, Colorado School of Mines Created on: Feb 16, 2022 Edited\n       May 4, 2022: - add option to zero-pad\n\nPARAMETERS\n       bool   cmplxBB = [y/n]     complex baseband chirp\n       float  delay =      latency delay in transmitted signal in microseconds\n       bool   verb =n [y/n]     verbosity flag\n       bool   window = [y/n]     spectral Hann window flag\n       bool   zpad = [y/n]     zero pad to closest 2^n\nSOURCE\n       user/cwp/Mmarsiswav.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmarsiswav(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmask-Tuple{}","page":"Home","title":"Madagascar.sfmask","text":"sfmask(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmask on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmask. See ?m8r for examples.\n\nRSF Documentation\n\nsfmask(1)                     Madagascar Manuals                     sfmask(1)\n\nNAME\n       sfmask - Create a mask.\n\nSYNOPSIS\n       sfmask < in.rsf > out.rsf min= max= min= max=\n\nCOMMENTS\n       Mask  is an integer data with ones and zeros.  Ones correspond to input\n       values between min and max.\n\n       The output can be used with sfheaderwindow.\n\nPARAMETERS\n       int    max =      maximum header value\n       int    min =      minimum header value\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/simple\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       data/alaska/line31-81-m8r\nSOURCE\n       system/main/mask.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfmask\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmask(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmaskinv-Tuple{}","page":"Home","title":"Madagascar.sfmaskinv","text":"sfmaskinv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmaskinv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmaskinv. See ?m8r for examples.\n\nRSF Documentation\n\nsfmaskinv(1)                  Madagascar Manuals                  sfmaskinv(1)\n\nNAME\n       sfmaskinv  - Missing data interpolation using one or two prediction-er‐\n       ror filters.\n\nSYNOPSIS\n       sfmaskinv < in.rsf > out.rsf mask=mask.rsf center= a= b= niter=80\n\nPARAMETERS\n       ints   a =      first filter dimensions [dim]\n       ints   b =      second filter dimensions [dim]\n       ints   center =      filter center [dim]\n       file   mask =      auxiliary input file name\n       int    niter =80      number of iterations\nSOURCE\n       user/gee/Mmaskinv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmaskinv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmaskval-Tuple{}","page":"Home","title":"Madagascar.sfmaskval","text":"sfmaskval(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmaskval on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmaskval. See ?m8r for examples.\n\nRSF Documentation\n\nsfmaskval(1)                  Madagascar Manuals                  sfmaskval(1)\n\nNAME\n       sfmaskval - Mask values inside or outside of a range.\n\nSYNOPSIS\n       sfmaskval  <  in.rsf  >  out.rsf  upper=+FLT_MAX  lower=-FLT_MAX upper‐\n       val=+FLT_MAX lowerval=-FLT_MAX\n\nCOMMENTS\n       sfmaskval < in.rsf > out.rsf upper=ul lower=ll upperval=uv lowerval=lv\n\n       If upper > lower, then values larger than ul will be changed to uv  and\n       values  belowe ll will be changed to lv.  If upper < lower, then values\n       inside [ul;ll] will be changed to lv.\n\nPARAMETERS\n       float  lower =-FLT_MAX      lower range limit\n       float  lowerval =-FLT_MAX      lower range value\n       float  upper =+FLT_MAX      upper range limit\n       float  upperval =+FLT_MAX      upper range value\nSOURCE\n       user/bash/Mmaskval.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmaskval(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatch-Tuple{}","page":"Home","title":"Madagascar.sfmatch","text":"sfmatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatch. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatch(1)                    Madagascar Manuals                    sfmatch(1)\n\nNAME\n       sfmatch - Simple matching filtering\n\nSYNOPSIS\n       sfmatch < inp.rsf > out.rsf other=oth.rsf adj=n nf=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    nf =      filter size\n       file   other =      auxiliary input file name\nSOURCE\n       system/generic/Mmatch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmatch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatch1d-Tuple{}","page":"Home","title":"Madagascar.sfmatch1d","text":"sfmatch1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatch1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatch1d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatch1d(1)                  Madagascar Manuals                  sfmatch1d(1)\n\nNAME\n       sfmatch1d  -  1D Least-Sqaure Adaptive Matched-Filter for Multiple Sup‐\n       pression\n\nSYNOPSIS\n       sfmatch1d < in.rsf > out.rsf multiple=multiple.rsf w1=9 order=w1-2 w2=3\n       eps=0.01 verb=n transient=n method=\n\nCOMMENTS\n            x = argmin || d - M x ||^2\n\n            The  Program  uses  internal  (icaf.c)  or  transient  convolution\n       (tcaf.c)\n\nPARAMETERS\n       float  eps =0.01      dumping parameter\n       string method =      method to use (old,new)\n       string multiple =      auxiliary input file name\n       int    order =w1-2      matchied-filter order\n       bool   transient =n [y/n]     transient convolution [y/n]\n       bool   verb =n [y/n]\n       int    w1 =9      data window length along 1st dimentions (time/depth)\n       int    w2 =3      data window length along 1st dimentions (time/depth)\nSOURCE\n       user/lcasasan/Mmatch1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmatch1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatchoper-Tuple{}","page":"Home","title":"Madagascar.sfmatchoper","text":"sfmatchoper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatchoper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatchoper. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatchoper(1)                Madagascar Manuals                sfmatchoper(1)\n\nNAME\n       sfmatchoper - Local matching-radon operator.\n\nSYNOPSIS\n       sfmatchoper  <  in.rsf  >  out.rsf weight=weight.rsf np= dp= p0= shift=\n       verb=n freq=y parab=n x0=1. rho=y anti=1. p1=0. niter=100 pclip=100.\n\nPARAMETERS\n       float  anti =1.       antialiasing, only when freq=n\n       float  dp =      p sampling\n       bool   freq =y [y/n]     if y, parabolic Radon transform\n       int    niter =100      number of iterations\n       int    np =      number of p values\n       float  p0 =      p origin\n       float  p1 =0.       reference slope, only when freq=n\n       bool   parab =n [y/n]     if y, parabolic Radon  transform,  only  when\n              freq=y\n       float  pclip =100.  ®\n       bool   rho =y [y/n]     rho filtering, only when freq=n\n       int    shift = ®\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary output file name\n       float  x0 =1.       reference offset\nSOURCE\n       user/yliu/Mmatchoper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmatchoper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmath-Tuple{}","page":"Home","title":"Madagascar.sfmath","text":"sfmath(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmath on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmath. See ?m8r for examples.\n\nRSF Documentation\n\nsfmath(1)                     Madagascar Manuals                     sfmath(1)\n\nNAME\n       sfmath - Mathematical operations on data files.\n\nSYNOPSIS\n       sfmath > out.rsf nostdin=n n#= d#=(1,1,...) o#=(0,0,...) label#= unit#=\n       type= label= unit= output=\n\nCOMMENTS\n       Known functions: cos,  sin,  tan,   acos,   asin,   atan,  cosh,  sinh,\n       tanh, acosh, asinh, atanh, exp,  log,  sqrt, abs, erf,  erfc, sign (for\n       float data), arg,  conj, real, imag (for complex data).\n\n       sfmath will work on float or complex data, but all the input and output\n       files must be of the same data type.\n\n       An  alternative to sfmath is sfadd, which may be more efficient, but is\n       less versatile.\n\n       Examples:\n\n       sfmath      x=file1.rsf      y=file2.rsf      power=file3.rsf      out‐\n       put='sin((x+2*y)^power)'  >  out.rsf  sfmath  < file1.rsf tau=file2.rsf\n       output='exp(tau*input)'  >  out.rsf  sfmath  n1=100  type=complex  out‐\n       put=\"exp(I*x1)\" > out.rsf\n\n       Arguments  which  are  not treated as variables in mathematical expres‐\n       sions: datapath=, type=, out=\n\n       See also: sfheadermath.\n\nPARAMETERS\n       float  d# =(1,1,...)       sampling on #-th axis\n       string label =      data label\n       string label# =      label on #-th axis\n       largeint\n              n# =      size of #-th axis\n       bool   nostdin =n [y/n]     y - ignore stdin\n       float  o# =(0,0,...)       origin on #-th axis\n       string output =      Mathematical description of the output\n       string type =      output data type [float,complex]\n       string unit =      data unit\n       string unit# =      unit on #-th axis\nUSED IN\n       bei/dpmv/matt\n       bei/dwnc/sigmoid\n       bei/ft1/autocor\n       bei/ft1/brad\n       bei/ft1/ft2d\n       bei/ft1/matrix\n       bei/trimo/all\n       bei/vela/strat\n       bei/vela/vscan\n       chen/test/fpca\n       chen/test/wavmod\n       chen/test/xtime\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sact1\n       24 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       math.html\nSOURCE\n       system/main/math.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfmath\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmath(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatlr-Tuple{}","page":"Home","title":"Madagascar.sfmatlr","text":"sfmatlr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatlr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatlr. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatlr(1)                    Madagascar Manuals                    sfmatlr(1)\n\nNAME\n       sfmatlr - Flip a matrix\n\nSYNOPSIS\n       sfmatlr < Fin.rsf > Fout.rsf\n\nSOURCE\n       user/chenyk/Mmatlr.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmatlr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatmult-Tuple{}","page":"Home","title":"Madagascar.sfmatmult","text":"sfmatmult(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatmult on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatmult. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatmult(1)                  Madagascar Manuals                  sfmatmult(1)\n\nNAME\n       sfmatmult - Simple matrix multiplication\n\nSYNOPSIS\n       sfmatmult < in.rsf > out.rsf mat=mat.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   mat =      auxiliary input file name\nSOURCE\n       system/generic/Mmatmult.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmatmult(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatoper-Tuple{}","page":"Home","title":"Madagascar.sfmatoper","text":"sfmatoper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatoper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatoper. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatoper(1)                  Madagascar Manuals                  sfmatoper(1)\n\nNAME\n       sfmatoper - Matrix algebra operation\n\nSYNOPSIS\n       sfmatoper < in.rsf mat=mat.rsf > out.rsf type=\n\nCOMMENTS\n       Implement  C=Oper(A,B).   Specially, when \"Oper\" stands for multiplica‐\n       tion, C=AB,  where: C is a m*k matrix, m  corresponds  to  dimension  2\n       while k corrsponds to dimension 1.  A is a m*n matrix, m corresponds to\n       dimension 2 while n corrsponds to dimension 1.  B is a  n*k  matrix,  n\n       corresponds  to  dimension  2  while k corrsponds to dimension 1.  Like\n       matlab matrix operation.\n\nPARAMETERS\n       file   mat =      auxiliary input file name\n       string type =      [mul, add, sub, dotmul] operation type, the  default\n              is mul\nSOURCE\n       user/chenyk/Mmatoper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmatoper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatplotlib-Tuple{}","page":"Home","title":"Madagascar.sfmatplotlib","text":"sfmatplotlib(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatplotlib on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatplotlib. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatplotlib(1)               Madagascar Manuals               sfmatplotlib(1)\n\nNAME\n       sfmatplotlib - Plotting RSF files with matplotlib\n\nSYNOPSIS\n       sfmatplotlib\n\nSOURCE\n       user/fomels/Mmatplotlib.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmatplotlib(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmatrix-Tuple{}","page":"Home","title":"Madagascar.sfmatrix","text":"sfmatrix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmatrix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmatrix. See ?m8r for examples.\n\nRSF Documentation\n\nsfmatrix(1)                   Madagascar Manuals                   sfmatrix(1)\n\nNAME\n       sfmatrix - multiply, for Matrix\n\nSYNOPSIS\n       sfmatrix < inA.rsf B=inB.rsf > outC.rsf\n\nPARAMETERS\n       file   B =      auxiliary input file name\nSOURCE\n       user/fangg/Mmatrix.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmatrix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmax-Tuple{}","page":"Home","title":"Madagascar.sfmax","text":"sfmax(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmax on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmax. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmax1-Tuple{}","page":"Home","title":"Madagascar.sfmax1","text":"sfmax1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmax1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmax1. See ?m8r for examples.\n\nRSF Documentation\n\nsfmax1(1)                     Madagascar Manuals                     sfmax1(1)\n\nNAME\n       sfmax1 - Picking local maxima on the first axis.\n\nSYNOPSIS\n       sfmax1 < in.rsf > out.rsf min=o1 max=o1+(n1-1)*d1 np=n1 sorted=y\n\nCOMMENTS\n       Outputs complex numbers (time,amplitude)\n\n       September        2014        program        of        the        month:\n       http://ahay.org/blog/2014/09/24/program-of-the-month-sfmax1/\n\nPARAMETERS\n       float  max =o1+(n1-1)*d1      maximum value of time\n       float  min =o1      minimum value of time\n       int    np =n1      maximum number of picks\n       bool   sorted =y [y/n]     if y, sort by amplitude\nSOURCE\n       system/generic/Mmax1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmax1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmax2-Tuple{}","page":"Home","title":"Madagascar.sfmax2","text":"sfmax2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmax2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmax2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmax2(1)                     Madagascar Manuals                     sfmax2(1)\n\nNAME\n       sfmax2 - Picking local maxima in 2-D\n\nSYNOPSIS\n       sfmax2 < in.rsf > out.rsf np=n12\n\nPARAMETERS\n       int    np =n12      maximum number of picks\nSOURCE\n       user/fomels/Mmax2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmax2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmcaseislet-Tuple{}","page":"Home","title":"Madagascar.sfmcaseislet","text":"sfmcaseislet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmcaseislet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmcaseislet. See ?m8r for examples.\n\nRSF Documentation\n\nsfmcaseislet(1)               Madagascar Manuals               sfmcaseislet(1)\n\nNAME\n       sfmcaseislet  -  Morphological  component  analysis  using  2-D Seislet\n       transform\n\nSYNOPSIS\n       sfmcaseislet  <  Fin.rsf  >  Fout.rsf   dips=Fdips.rsf   mask=Fmask.rsf\n       eps=0.01  order=1 pscale=25 verb=n decr=y niter=10 pclip=10 p=0.5 type=\n       mode=\n\nCOMMENTS\n       Note:  Here, nc components with nc seislet transforms build  a  seislet\n       frame  to  do the simultineous multicomponent separation and interpola‐\n       tion.\n\nPARAMETERS\n       bool   decr =y [y/n]     decrease threshold in iterations or not\n       file   dips =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',  generalized   quasi-p;   'exp',   exponential\n              shrinkage\n       int    niter =10      total number iterations\n       int    order =1      accuracy order for seislet transform\n       float  p =0.5      norm=p, where 0<p<=1\n       float  pclip =10      starting data clip percentile (default is 10)\n       float  pscale  =25       percentile of small scale to be preserved (de‐\n              fault is 100)\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =n [y/n]     verbosity or not\nSOURCE\n       user/pyang/Mmcaseislet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmcaseislet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmcbmcgauss-Tuple{}","page":"Home","title":"Madagascar.sfmcbmcgauss","text":"sfmcbmcgauss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmcbmcgauss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmcbmcgauss. See ?m8r for examples.\n\nRSF Documentation\n\nsfmcbmcgauss(1)               Madagascar Manuals               sfmcbmcgauss(1)\n\nNAME\n       sfmcbmcgauss - Monte Carlo integration of cos(2t).P(x1,x2).P(y1,y2)\n\nSYNOPSIS\n       sfmcbmcgauss < in.rsf > out.rsf n=100 m1=0.0 s1=1.0 iseed=-33\n\nPARAMETERS\n       int    iseed =-33      random generator seed\n       float  m1 =0.0      mean for deviates\n       int    n =100      number of random deviates pairs\n       float  s1 =1.0      standard deviation for deviates\nSOURCE\n       user/browaeys/Mmcbmcgauss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmcbmcgauss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmdfd4-Tuple{}","page":"Home","title":"Madagascar.sfmdfd4","text":"sfmdfd4(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmdfd4 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmdfd4. See ?m8r for examples.\n\nRSF Documentation\n\nsfmdfd4(1)                    Madagascar Manuals                    sfmdfd4(1)\n\nNAME\n       sfmdfd4 - 2D finite difference modeling\n\nSYNOPSIS\n       sfmdfd4   <  modl.rsf  >  data.rsf  wave=wave.rsf  div=div.rsf  nt=1000\n       dt=0.004 jt=40 wvlt=0 w0=35.0 sx=0 sz=0 rx0=0 nr=1 dr=1 rz=0\n\nPARAMETERS\n       file   div =      auxiliary output file name\n       int    dr =1      receiver interval of unit dx\n       float  dt =0.004      time interval\n       int    jt =40      wave movie time interval\n       int    nr =1      receiver numbers\n       int    nt =1000      time samples\n       int    rx0 =0      x position index of first receiver\n       int    rz =0      z position index of receivers\n       int    sx =0      x position index of the source\n       int    sz =0      z position index of the source\n       float  w0 =35.0      central frequency for ricker/harmonic wavelet\n       string wave =      wavefield movie file (auxiliary output file name)\n       int    wvlt =0      wavelet type ricker/harmonic/other\nSOURCE\n       user/chen/Mmdfd4.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmdfd4(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmdip-Tuple{}","page":"Home","title":"Madagascar.sfmdip","text":"sfmdip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmdip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmdip. See ?m8r for examples.\n\nRSF Documentation\n\nsfmdip(1)                     Madagascar Manuals                     sfmdip(1)\n\nNAME\n       sfmdip - 2-D multiscale dip estimation by plane wave destruction.\n\nSYNOPSIS\n       sfmdip < in.rsf > out.rsf mask=mask.rsf idip=idip0.rsf niter=5 liter=20\n       rect1=1  rect2=1  p0=0.  order=1  nj1=1  drift=n  verb=n  pmin=-FLT_MAX\n       pmax=+FLT_MAX eps=0.0f\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string idip =      initial in-line dip (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    niter =5      number of iterations\n       int    nj1 =1      antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial dip\n       float  pmax =+FLT_MAX      maximum dip\n       float  pmin =-FLT_MAX      minimum dip\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mmdip.c\nVERSION\n       4.2-git Mdip2.c 7107 2011-04-10 02:04:14Z ivlad\n\nMadagascar                         JULY 2024                         sfmdip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmean-Tuple{}","page":"Home","title":"Madagascar.sfmean","text":"sfmean(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmean on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmean. See ?m8r for examples.\n\nRSF Documentation\n\nsfmean(1)                     Madagascar Manuals                     sfmean(1)\n\nNAME\n       sfmean - 1-D sliding-window mean filtering\n\nSYNOPSIS\n       sfmean < in.rsf > out.rsf nfw= boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive integer)\nSOURCE\n       user/yliu/Mmean.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmean(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmedian-Tuple{}","page":"Home","title":"Madagascar.sfmedian","text":"sfmedian(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmedian on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmedian. See ?m8r for examples.\n\nRSF Documentation\n\nsfmedian(1)                   Madagascar Manuals                   sfmedian(1)\n\nNAME\n       sfmedian - Compute median on the first axis.\n\nSYNOPSIS\n       sfmedian < in.rsf > out.rsf\n\nSOURCE\n       user/fomels/Mmedian.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmedian(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmedianbalance-Tuple{}","page":"Home","title":"Madagascar.sfmedianbalance","text":"sfmedianbalance(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmedianbalance on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmedianbalance. See ?m8r for examples.\n\nRSF Documentation\n\nsfmedianbalance(1)            Madagascar Manuals            sfmedianbalance(1)\n\nNAME\n       sfmedianbalance - Do median balancing.\n\nSYNOPSIS\n       sfmedianbalance inp= out= inp= out= verb=n pclip=99\n\nPARAMETERS\n       string inp =      input file\n       string out =      output file\n       float  pclip =99      percentile clip\n       bool   verb =n [y/n]     if y, print system commands, outputs\nSOURCE\n       user/mlai/Mmedianbalance.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfmedianbalance(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmerge-Tuple{}","page":"Home","title":"Madagascar.sfmerge","text":"sfmerge(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmerge on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmerge. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmf-Tuple{}","page":"Home","title":"Madagascar.sfmf","text":"sfmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmf. See ?m8r for examples.\n\nRSF Documentation\n\nsfmf(1)                       Madagascar Manuals                       sfmf(1)\n\nNAME\n       sfmf - 1D median filtering.\n\nSYNOPSIS\n       sfmf < in.rsf > out.rsf nfw= boundary=n\n\nCOMMENTS\n       January 2015 program of the month: http://ahay.org/blog/2015/01/30/pro‐\n       gram-of-the-month-sfmf/\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\nSOURCE\n       user/yliu/Mmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmffit-Tuple{}","page":"Home","title":"Madagascar.sfmffit","text":"sfmffit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmffit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmffit. See ?m8r for examples.\n\nRSF Documentation\n\nsfmffit(1)                    Madagascar Manuals                    sfmffit(1)\n\nNAME\n       sfmffit - Fitting multi-focusing approximations\n\nSYNOPSIS\n       sfmffit < in.rsf coef=coef.rsf > out.rsf fit=fit.rsf x0=m0 type=\n\nPARAMETERS\n       file   coef =      auxiliary input file name\n       file   fit =      auxiliary output file name\n       string type =      Type of approximation (crs,mf,nonhyperbolic)\n       float  x0 =m0      central midpoint\nSOURCE\n       user/fomels/Mmffit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmffit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmflt-Tuple{}","page":"Home","title":"Madagascar.sfmflt","text":"sfmflt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmflt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmflt. See ?m8r for examples.\n\nRSF Documentation\n\nsfmflt(1)                     Madagascar Manuals                     sfmflt(1)\n\nNAME\n       sfmflt - 3D Recursive median filter\n\nSYNOPSIS\n       sfmflt < in.rsf > out.rsf rect1=1 rect2=0 rect3=0\n\nPARAMETERS\n       int    rect1 =1      filter length on 1st axis\n       int    rect2 =0      filter length on 2nd axis\n       int    rect3 =0      filter length on 3nd axis\nUSED IN\n       chen/test/fpca\nSOURCE\n       user/chen/Mmflt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmflt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmig2-Tuple{}","page":"Home","title":"Madagascar.sfmig2","text":"sfmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmig2(1)                     Madagascar Manuals                     sfmig2(1)\n\nNAME\n       sfmig2 - 2-D prestack Kirchhoff time migration with antialiasing.\n\nSYNOPSIS\n       sfmig2  <  inp.rsf  vel=vel.rsf > out.rsf gather=gather.rsf offset=off‐\n       set.rsf adj=y normalize=y nh= antialias=1.0  apt=nx  angle=90.0  half=y\n       verb=y rho=1.-1./nt dh= h0=\n\nCOMMENTS\n       The axes in the input are {time,midpoint,offset} The axes in the offset\n       are {1,midpoint,offset} The axes in the output are {time,midpoint}  The\n       axes in the \"image gather\" are {time,midpoint,offset}\n\n       February         2016        program        of        the        month:\n       http://ahay.org/blog/2016/02/18/program-of-the-month-sfmig2/\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag (y for migration, n for modeling)\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       float  dh =      offset sampling (for modeling)\n       string gather =      auxiliary output file name\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       float  rho =1.-1./nt      Leaky integration constant\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmig2pwd-Tuple{}","page":"Home","title":"Madagascar.sfmig2pwd","text":"sfmig2pwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmig2pwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmig2pwd. See ?m8r for examples.\n\nRSF Documentation\n\nsfmig2pwd(1)                  Madagascar Manuals                  sfmig2pwd(1)\n\nNAME\n       sfmig2pwd - combination of mig2 Kirchhoff migration nad PWD filtering\n\nSYNOPSIS\n       sfmig2pwd  <  inp.rsf  > out.rsf vel=vel.rsf dip=dip.rsf outpwd=outpwd‐\n       check.rsf outdip=outdipcheck.rsf offset=offset.rsf adj=n  sm=y  domod=y\n       debug=  normalize=y  nh=  antialias=1.0 apt=nx angle=90.0 half=y verb=y\n       rho=1.-1./nt dh=  h0=  v_1=  v_2=  v_3=  v_4=  passthr=0.001  eps=0.001\n       epst2=0.001 pad=nt order=1 nj1=1\n\nPARAMETERS\n       bool   adj =n [y/n]     if perform derivative filtering = PWD\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       bool   debug = [y/n]\n       float  dh =      offset sampling (for modeling)\n       file   dip =      auxiliary input file name\n       bool   domod =y [y/n]     debug flag\n       float  eps =0.001 ®\n       float  epst2 =0.001 ®\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       int    nj1 =1      antialiasing\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       int    order =1 [1,2,3]   accuracy order\n       file   outdip =      auxiliary output file name\n       file   outpwd =      auxiliary output file name\n       int    pad =nt      output time samples\n       float  passthr =0.001 ®\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform modelling via Kirchhoff\n       float  v_1 = ®\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mmig2pwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmig2pwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmig2s-Tuple{}","page":"Home","title":"Madagascar.sfmig2s","text":"sfmig2s(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmig2s on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmig2s. See ?m8r for examples.\n\nRSF Documentation\n\nsfmig2s(1)                    Madagascar Manuals                    sfmig2s(1)\n\nNAME\n       sfmig2s - 2-D Prestack Kirchhoff time migration with antialiasing.\n\nSYNOPSIS\n       sfmig2s  <  inp.rsf vel=vel.rsf > out.rsf gather=gather.rsf offset=off‐\n       set.rsf adj=y normalize=y nh= antialias=1.0  apt=nx  angle=90.0  half=y\n       verb=y rho=1.-1./nt s=1. dh= h0=\n\nCOMMENTS\n       Shifted  hyperbola  travel-time  approximation.  Tested for zero-offset\n       only The axes in the input are {time,midpoint,offset} The axes  in  the\n       offset  are  {1,midpoint,offset}  The axes in the output are {time,mid‐\n       point} The axes in the \"image gather\" are {time,midpoint,offset}\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag (y for migration, n for modeling)\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       float  dh =      offset sampling (for modeling)\n       string gather =      auxiliary output file name\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       float  rho =1.-1./nt      Leaky integration constant\n       float  s =1.  ®\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mmig2s.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmig2s(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmig2semb-Tuple{}","page":"Home","title":"Madagascar.sfmig2semb","text":"sfmig2semb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmig2semb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmig2semb. See ?m8r for examples.\n\nRSF Documentation\n\nsfmig2semb(1)                 Madagascar Manuals                 sfmig2semb(1)\n\nNAME\n       sfmig2semb - 2-D Prestack Kirchhoff time migration with antialiasing.\n\nSYNOPSIS\n       sfmig2semb  <  inp.rsf  vel=vel.rsf  >  out.rsf semblance=semblance.rsf\n       gather=gather.rsf offset=offset.rsf adj=y normalize=y nh= antialias=1.0\n       apt=nx angle=90.0 half=y verb=y rho=1.-1./nt dh= h0=\n\nCOMMENTS\n       The axes in the input are {time,midpoint,offset} The axes in the offset\n       are {1,midpoint,offset} The axes in the output are {time,midpoint}  The\n       axes in the \"image gather\" are {time,midpoint,offset}\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag (y for migration, n for modeling)\n       float  angle =90.0      angle aperture\n       float  antialias =1.0      antialiasing\n       int    apt =nx      integral aperture\n       float  dh =      offset sampling (for modeling)\n       string gather =      auxiliary output file name\n       float  h0 =      first offset (for modeling)\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    nh =      number of offsets (for modeling)\n       bool   normalize =y [y/n]     normalize for the fold\n       string offset =      auxiliary input file name\n       float  rho =1.-1./nt      Leaky integration constant\n       file   semblance =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mmig2semb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmig2semb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmig3-Tuple{}","page":"Home","title":"Madagascar.sfmig3","text":"sfmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsfmig3(1)                     Madagascar Manuals                     sfmig3(1)\n\nNAME\n       sfmig3 - 3-D Kirchhoff time migration with antialiasing.\n\nSYNOPSIS\n       sfmig3 < in.rsf hdr=head.rsf > mig.rsf n2= d2= o2= n3= d3= o3= n1= vel=\n       antialias=\n\nPARAMETERS\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       float  d2 = ®\n       float  d3 = ®\n       file   hdr =      auxiliary input file name\n       int    n1 = ®\n       int    n2 = ®\n       int    n3 = ®\n       float  o2 = ®\n       float  o3 = ®\n       float  vel =      migration velocity\nSOURCE\n       user/fomels/Mmig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmigsteep3-Tuple{}","page":"Home","title":"Madagascar.sfmigsteep3","text":"sfmigsteep3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmigsteep3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmigsteep3. See ?m8r for examples.\n\nRSF Documentation\n\nsfmigsteep3(1)                Madagascar Manuals                sfmigsteep3(1)\n\nNAME\n       sfmigsteep3 - 3-D Kirchhoff time migration for antialiased steep dips.\n\nSYNOPSIS\n       sfmigsteep3 < in.rsf hdr=head.rsf > mig.rsf n2= d2= o2= n3= d3= o3= n1=\n       vel=\n\nCOMMENTS\n       Combine with sfmig3 antialias=flat for the complete response.\n\nPARAMETERS\n       float  d2 = ®\n       float  d3 = ®\n       file   hdr =      auxiliary input file name\n       int    n1 = ®\n       int    n2 = ®\n       int    n3 = ®\n       float  o2 = ®\n       float  o3 = ®\n       float  vel =      migration velocity\nSOURCE\n       system/seismic/Mmigsteep3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmigsteep3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmin-Tuple{}","page":"Home","title":"Madagascar.sfmin","text":"sfmin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmin. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfminmax-Tuple{}","page":"Home","title":"Madagascar.sfminmax","text":"sfminmax(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfminmax on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfminmax. See ?m8r for examples.\n\nRSF Documentation\n\nsfminmax(1)                   Madagascar Manuals                   sfminmax(1)\n\nNAME\n       sfminmax - Element by element minimum or maximum of two RSF files.\n\nSYNOPSIS\n       sfminmax file1=file1.rsf file2=file2.rsf > out.rsf mode=\n\nCOMMENTS\n       file1 and file2 must have the same number of elements.\n\n       See also: sflistminmax, sfstack.\n\nPARAMETERS\n       string file1  =       RSF  filename  required,  data type must be float\n              (auxiliary input file name)\n       string file2 =      RSF filename required,  data  type  must  be  float\n              (auxiliary input file name)\n       string mode =      'min' (default) or 'max'\nSOURCE\n       user/jennings/Mminmax.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfminmax(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmisif-Tuple{}","page":"Home","title":"Madagascar.sfmisif","text":"sfmisif(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmisif on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmisif. See ?m8r for examples.\n\nRSF Documentation\n\nsfmisif(1)                    Madagascar Manuals                    sfmisif(1)\n\nNAME\n       sfmisif - Find MISSing Input values and Filter in 1-D.\n\nSYNOPSIS\n       sfmisif < in.rsf > out.rsf filtout=flt.rsf nmiss=n1 na=3 lag=1\n\nPARAMETERS\n       file   filtout =      auxiliary output file name\n       int    lag =1      filter lag\n       int    na =3      filter size\n       int    nmiss =n1      number of iterations\nSOURCE\n       user/gee/Mmisif.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmisif(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss-Tuple{}","page":"Home","title":"Madagascar.sfmiss","text":"sfmiss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss(1)                     Madagascar Manuals                     sfmiss(1)\n\nNAME\n       sfmiss - Multi-dimensional missing data interpolation.\n\nSYNOPSIS\n       sfmiss  <  in.rsf  filt=filt.rsf > out.rsf lag=lag.rsf mask=mask.rsf n=\n       prec=y niter=100 exact=y eps=0. padin=0 padout=0\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       bool   exact =y [y/n]     If y, preserve the known  data  values  (when\n              prec=y)\n       file   filt =      auxiliary input file name\n       string lag =      optional input file with filter lags (auxiliary input\n              file name)\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       ints   n =       [dim]\n       int    niter =100      Number of iterations\n       int    padin =0      Pad beginning\n       int    padout =0      Pad end\n       bool   prec =y [y/n]     If y, use preconditioning\nSOURCE\n       user/gee/Mmiss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmiss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss1-Tuple{}","page":"Home","title":"Madagascar.sfmiss1","text":"sfmiss1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss1. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss1(1)                    Madagascar Manuals                    sfmiss1(1)\n\nNAME\n       sfmiss1 - Missing data interpolation in 1-D.\n\nSYNOPSIS\n       sfmiss1 < in.rsf > out.rsf filtin=filt.rsf niter=n1 diter=niter step=\n\nPARAMETERS\n       int    diter =niter      iteration step\n       string filtin =      auxiliary input file name\n       int    niter =n1      number of iterations\n       string step =      linear solver type\nSOURCE\n       user/gee/Mmiss1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmiss1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss2-Tuple{}","page":"Home","title":"Madagascar.sfmiss2","text":"sfmiss2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss2(1)                    Madagascar Manuals                    sfmiss2(1)\n\nNAME\n       sfmiss2 - 2-D missing data interpolation.\n\nSYNOPSIS\n       sfmiss2  <  in.rsf  > out.rsf mask=mask.rsf niter=100 nliter=1 filt1=3.\n       filt2=filt1 eps=0.0001 shape=n force=y\n\nPARAMETERS\n       float  eps =0.0001      regularization parameter\n       float  filt1 =3.  ®\n       float  filt2 =filt1      smoothing radius\n       bool   force =y [y/n]     if y, keep known values\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\n       int    nliter =1      Number of reweighting iterations\n       bool   shape =n [y/n]     if y, estimate shaping\nSOURCE\n       system/generic/Mmiss2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmiss2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss3-Tuple{}","page":"Home","title":"Madagascar.sfmiss3","text":"sfmiss3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss3. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss3(1)                    Madagascar Manuals                    sfmiss3(1)\n\nNAME\n       sfmiss3 - Missing data interpolation (N-dimensional) using shaping reg‐\n       ularization.\n\nSYNOPSIS\n       sfmiss3 < in.rsf > out.rsf mask=mask.rsf niter=100 force=y\n\nPARAMETERS\n       bool   force =y [y/n]     if y, keep known values\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\nSOURCE\n       user/fomels/Mmiss3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmiss3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss4-Tuple{}","page":"Home","title":"Madagascar.sfmiss4","text":"sfmiss4(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss4 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss4. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss4(1)                    Madagascar Manuals                    sfmiss4(1)\n\nNAME\n       sfmiss4 - Missing data interpolation with adaptive PEFs.\n\nSYNOPSIS\n       sfmiss4 < in.rsf filt=fil.rsf > out.rsf mask=mask.rsf niter=100 exact=y\n       eps=0. verb=n\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       bool   exact =y [y/n]     If y, preserve the known data values\n       file   filt =      auxiliary input file name\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmiss4.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmiss4(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmiss43-Tuple{}","page":"Home","title":"Madagascar.sfmiss43","text":"sfmiss43(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmiss43 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmiss43. See ?m8r for examples.\n\nRSF Documentation\n\nsfmiss43(1)                   Madagascar Manuals                   sfmiss43(1)\n\nNAME\n       sfmiss43 - 3-D missing data interpolation with adaptive PEFs.\n\nSYNOPSIS\n       sfmiss43  <  in.rsf  filt=fil.rsf > out.rsf mask=mask.rsf niter=100 ex‐\n       act=y eps=0. verb=n\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       bool   exact =y [y/n]     If y, preserve the known data values\n       file   filt =      auxiliary input file name\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmiss43.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmiss43(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmkcmp-Tuple{}","page":"Home","title":"Madagascar.sfmkcmp","text":"sfmkcmp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmkcmp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmkcmp. See ?m8r for examples.\n\nRSF Documentation\n\nsfmkcmp(1)                    Madagascar Manuals                    sfmkcmp(1)\n\nNAME\n       sfmkcmp - Make a synthtic two-layer CMP gather with known t0\n\nSYNOPSIS\n       sfmkcmp  <  in.rsf  >  spcmp.rsf n1=1000 n2=20 dt=0.001 dx=50 o1=0 o2=0\n       v01=1000 v02=1000 t01=0.4 t02=0.8 verb=n\n\nPARAMETERS\n       float  dt =0.001      sampling on 1-th axis(time)\n       float  dx =50      sampling on 2-th axis(offset)\n       int    n1 =1000      number of n1\n       int    n2 =20      number of n2\n       float  o1 =0 ®\n       float  o2 =0 ®\n       float  t01 =0.4      t01 start point\n       float  t02 =0.8      t02 start point\n       float  v01 =1000      first event rms vel\n       float  v02 =1000      second event rms vel\n       bool   verb =n [y/n]     dimensions\nSOURCE\n       user/yliu/Mmkcmp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmkcmp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmkrcv-Tuple{}","page":"Home","title":"Madagascar.sfmkrcv","text":"sfmkrcv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmkrcv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmkrcv. See ?m8r for examples.\n\nRSF Documentation\n\nsfmkrcv(1)                    Madagascar Manuals                    sfmkrcv(1)\n\nNAME\n       sfmkrcv - Make topography mask / receiver list / record list for first-\n       arrival traveltime tomography\n\nSYNOPSIS\n       sfmkrcv < in.rsf > out.rsf  reco=reco.rsf  shot=shot.rsf  topo=topo.rsf\n       time=time.rsf  air=0.5  velocity=y order=2 fix=n plane=n offset1=0 off‐\n       set2=0 np=1 p0=0. dp=1.\n\nPARAMETERS\n       float  air =0.5      air velocity for thresholding topography\n       float  dp =1.       ray-parameter increment\n       bool   fix =n [y/n]     if y, fixed-spread; n, moving acquisition\n       int    np =1      ray-parameter number\n       int    offset1 =0      receiver offset inline\n       int    offset2 =0      receiver offset crossline\n       int    order =2      fast marching accuracy order\n       float  p0 =0.       ray-parameter start\n       bool   plane =n [y/n]     if y, plane-wave source; n, point source\n       file   reco =      auxiliary output file name\n       string shot =      auxiliary input file name\n       string time =      auxiliary output file name\n       string topo =      auxiliary output file name\n       bool   velocity =y [y/n]     if y, the input is velocity;  n,  slowness\n              squared\nSOURCE\n       user/llisiw/Mmkrcv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmkrcv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmlm-Tuple{}","page":"Home","title":"Madagascar.sfmlm","text":"sfmlm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmlm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmlm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmlm(1)                      Madagascar Manuals                      sfmlm(1)\n\nNAME\n       sfmlm - 2D Multistage median filtering.\n\nSYNOPSIS\n       sfmlm < in.rsf > out.rsf nfw= boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\nSOURCE\n       user/yliu/Mmlm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfmlm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmlwm-Tuple{}","page":"Home","title":"Madagascar.sfmlwm","text":"sfmlwm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmlwm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmlwm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmlwm(1)                     Madagascar Manuals                     sfmlwm(1)\n\nNAME\n       sfmlwm - 2D Multistage weighted median filtering.\n\nSYNOPSIS\n       sfmlwm < in.rsf > out.rsf weights=weights.rsf nfw= boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\n       file   weights =      auxiliary input file name\nSOURCE\n       user/yliu/Mmlwm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmlwm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmms1dexp-Tuple{}","page":"Home","title":"Madagascar.sfmms1dexp","text":"sfmms1dexp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmms1dexp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmms1dexp. See ?m8r for examples.\n\nRSF Documentation\n\nsfmms1dexp(1)                 Madagascar Manuals                 sfmms1dexp(1)\n\nNAME\n       sfmms1dexp - 1D method of manufactured solution using Gaussian pulsa\n\nSYNOPSIS\n       sfmms1dexp  <  Fvel.rsf  dvel=Fdvel.rsf  den=Fden.rsf  velhf=Fvelhf.rsf\n       dvelhf=Fdvelhf.rsf denhf=Fdenhf.rsf  presrc=Fpsrc.rsf  velsrc=Fvsrc.rsf\n       preinit=Fpint.rsf  velinit=Fvint.rsf  >  Fmms.rsf nt= dt= slx=nx*dx*0.5\n       alpha=1.0e-2\n\nPARAMETERS\n       float  alpha =1.0e-2      source parameter\n       file   den =      auxiliary input file name\n       file   denhf =      auxiliary input file name\n       float  dt =      time step\n       file   dvel =      auxiliary input file name\n       file   dvelhf =      auxiliary input file name\n       int    nt =      number of time step\n       file   preinit =      auxiliary output file name\n       file   presrc =      auxiliary output file name\n       float  slx =nx*dx*0.5      center of source location: x\n       file   velhf =      auxiliary input file name\n       file   velinit =      auxiliary output file name\n       file   velsrc =      auxiliary output file name\nSOURCE\n       user/fangg/Mmms1dexp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmms1dexp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmmssrc-Tuple{}","page":"Home","title":"Madagascar.sfmmssrc","text":"sfmmssrc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmmssrc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmmssrc. See ?m8r for examples.\n\nRSF Documentation\n\nsfmmssrc(1)                   Madagascar Manuals                   sfmmssrc(1)\n\nNAME\n       sfmmssrc - Source for the method of manufactured solution\n\nSYNOPSIS\n       sfmmssrc  <  Fvel.rsf  >  Fsrc.rsf  mslt=Fslt.rsf nt= dt= slx=nx*dx*0.5\n       slz=nz*dz*0.5 alpha=1.0e-2 beta=1.0\n\nPARAMETERS\n       float  alpha =1.0e-2      source parameter\n       float  beta =1.0      source parameter\n       float  dt =      time step\n       file   mslt =      auxiliary output file name\n       int    nt =      number of time step\n       float  slx =nx*dx*0.5      center of source location: x\n       float  slz =nz*dz*0.5      center of source location: z\nSOURCE\n       user/fangg/Mmmssrc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmmssrc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmmssrc1-Tuple{}","page":"Home","title":"Madagascar.sfmmssrc1","text":"sfmmssrc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmmssrc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmmssrc1. See ?m8r for examples.\n\nRSF Documentation\n\nsfmmssrc1(1)                  Madagascar Manuals                  sfmmssrc1(1)\n\nNAME\n       sfmmssrc1 - 1D Source for the method of manufactured solution\n\nSYNOPSIS\n       sfmmssrc1 < Fvel.rsf > Fsrc.rsf mslt=Fslt.rsf nt= dt= slx=nx*dx*0.5 al‐\n       pha=1.0e-2 beta=1.0\n\nPARAMETERS\n       float  alpha =1.0e-2      source parameter\n       float  beta =1.0      source parameter\n       float  dt =      time step\n       file   mslt =      auxiliary output file name\n       int    nt =      number of time step\n       float  slx =nx*dx*0.5      center of source location: x\nSOURCE\n       user/fangg/Mmmssrc1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmmssrc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodatten1-Tuple{}","page":"Home","title":"Madagascar.sfmodatten1","text":"sfmodatten1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodatten1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodatten1. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodatten1(1)                Madagascar Manuals                sfmodatten1(1)\n\nNAME\n       sfmodatten1  -  1D  attenuation  modeling  according to modified Kolsky\n       model.\n\nSYNOPSIS\n       sfmodatten1 > out.rsf at= q= n1=1000 d1=0.001 o1=0. nc=1 fm=40 mag=1.\n\nPARAMETERS\n       ints   at =      (at=[at1,at2,...] layer quality factor) [nc]\n       float  d1 =0.001      sampling on time axis\n       int    fm =40      dominant frequency of Ricker wavelet\n       float  mag =1.       min-phase\n       int    n1 =1000      size of time axis\n       int    nc =1      number of layer\n       float  o1 =0.       origin on time axis\n       floats q =      (q=[q1,q2,...] layer quality factor) [nc]\nSOURCE\n       user/yliu/Mmodatten1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmodatten1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodelcreate-Tuple{}","page":"Home","title":"Madagascar.sfmodelcreate","text":"sfmodelcreate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodelcreate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodelcreate. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodelcreate(1)              Madagascar Manuals              sfmodelcreate(1)\n\nNAME\n       sfmodelcreate  - Create a dipping layer model for HTI testing purposes.\n       Has fixed velocity structure, but can change dip of layer and degree of\n       anisotropy.\n\nSYNOPSIS\n       sfmodelcreate  <  Fu.rsf  > Fc.rsf ompchunk=1 verb=y aniso=n allaniso=n\n       ein=.1 din=.1 gin=.2 rho=2. d=n3/6. a=1 b=1\n\nPARAMETERS\n       float  a =1      Parameter in dipping plane: ax+by+cz+d=0\n       bool   allaniso =n [y/n]     flag (y/N) whether entire model is  aniso‐\n              tropic\n       bool   aniso =n [y/n]     flag (y/N) for anisotropic layer #2\n       float  b =1      Parameter in dipping plane: ax+by+cz+d=0\n       float  d =n3/6.       Parameter in dipping plane: ax+by+cz+d=0\n       float  din =.1      delta anisotropy parameter\n       float  ein =.1      epsilon anisotropy parameter\n       float  gin =.2      gamma anisotropy parameter\n       int    ompchunk =1      set the omp chunk size\n       float  rho =2.       Background Density model\n       bool   verb =y [y/n]     verbose or note (Y/n)\nSOURCE\n       user/jeff/Mmodelcreate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmodelcreate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodeling2d-Tuple{}","page":"Home","title":"Madagascar.sfmodeling2d","text":"sfmodeling2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodeling2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodeling2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodeling2d(1)               Madagascar Manuals               sfmodeling2d(1)\n\nNAME\n       sfmodeling2d - 2-D forward modeling to generate shot records\n\nSYNOPSIS\n       sfmodeling2d < vinit.rsf > shots.rsf time=time.rsf check=check.rsf chk=\n       kt=100 amp=1000 fm=10 dt= nt= ns= ng= jsx=  jsz=0  jgx=1  jgz=0  sxbeg=\n       szbeg= gxbeg= gzbeg= csdgather=n\n\nCOMMENTS\n       Note: Clayton-Enquist absorbing boundary condition (A2) is applied!\n\nPARAMETERS\n       float  amp =1000      maximum amplitude of ricker\n       file   check =      auxiliary output file name\n       bool   chk = [y/n]\n       bool   csdgather =n [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =10      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =100      check it at it=100\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       file   time =      auxiliary output file name\nSOURCE\n       user/pyang/Mmodeling2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmodeling2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodrefl-Tuple{}","page":"Home","title":"Madagascar.sfmodrefl","text":"sfmodrefl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodrefl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodrefl. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodrefl(1)                  Madagascar Manuals                  sfmodrefl(1)\n\nNAME\n       sfmodrefl - Normal reflectivity modeling.\n\nSYNOPSIS\n       sfmodrefl < depth.rsf vp=vp.rsf vs=vs.rsf rho=rho.rsf > dat.rsf nt= dt=\n       nw=4\n\nPARAMETERS\n       float  dt =      time sampling\n       int    nt =      time samples\n       int    nw =4      interpolation length\n       file   rho =      auxiliary input file name\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\nSOURCE\n       system/seismic/Mmodrefl.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmodrefl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodrefl2-Tuple{}","page":"Home","title":"Madagascar.sfmodrefl2","text":"sfmodrefl2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodrefl2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodrefl2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodrefl2(1)                 Madagascar Manuals                 sfmodrefl2(1)\n\nNAME\n       sfmodrefl2 - Normal reflectivity modeling.\n\nSYNOPSIS\n       sfmodrefl2 < in.rsf > out.rsf nt= dt= nw=4\n\nCOMMENTS\n       In  this version, the input contains Vp, Vs, and density into one file.\n       The output contains PP intercept, PP gradient, and PS gradient.\n\nPARAMETERS\n       float  dt =      time sampling\n       int    nt =      time samples\n       int    nw =4      interpolation length\nSOURCE\n       system/seismic/Mmodrefl2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmodrefl2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodrefl3-Tuple{}","page":"Home","title":"Madagascar.sfmodrefl3","text":"sfmodrefl3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodrefl3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodrefl3. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodrefl3(1)                 Madagascar Manuals                 sfmodrefl3(1)\n\nNAME\n       sfmodrefl3 - Normal reflectivity modeling.\n\nSYNOPSIS\n       sfmodrefl3  <  in.rsf > out.rsf sparse=10 moveout=y nt= dt= np= dp= p0=\n       eps=0.01\n\nCOMMENTS\n       In this version, the input contains Vp, Vs, and density into one  file.\n       The output contains PP and PS tau-p seismograms.\n\nPARAMETERS\n       float  dp =      slope sampling\n       float  dt =      time sampling\n       float  eps =0.01      stretch regularization\n       bool   moveout =y [y/n]     if apply moveout\n       int    np =      slope samples\n       int    nt =      time samples\n       float  p0 =      slope origin\n       int    sparse =10      sparseness of reflectivity\nSOURCE\n       system/seismic/Mmodrefl3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmodrefl3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmodtraceq-Tuple{}","page":"Home","title":"Madagascar.sfmodtraceq","text":"sfmodtraceq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmodtraceq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmodtraceq. See ?m8r for examples.\n\nRSF Documentation\n\nsfmodtraceq(1)                Madagascar Manuals                sfmodtraceq(1)\n\nNAME\n       sfmodtraceq - Generate single trace with Q attenuation for viscoelastic\n       media.\n\nSYNOPSIS\n       sfmodtraceq > out.rsf at= q= verb=n n1=1000 d1=0.001 o1=0. nc=1 fm=50\n\nPARAMETERS\n       ints   at =      (at=[at1,at2,...] layer quality factor) [nc]\n       float  d1 =0.001      sampling on time axis\n       int    fm =50      dominant frequency of Ricker wavelet\n       int    n1 =1000      size of time axis\n       int    nc =1      number of layer\n       float  o1 =0.       origin on time axis\n       ints   q =      (q=[q1,q2,...] layer quality factor) [nc]\n       bool   verb =n [y/n]     basic parameters\nSOURCE\n       user/yliu/Mmodtraceq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmodtraceq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmonof-Tuple{}","page":"Home","title":"Madagascar.sfmonof","text":"sfmonof(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmonof on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmonof. See ?m8r for examples.\n\nRSF Documentation\n\nsfmonof(1)                    Madagascar Manuals                    sfmonof(1)\n\nNAME\n       sfmonof - Mono-frequency wavelet estimation.\n\nSYNOPSIS\n       sfmonof < in.rsf > out.rsf ma=ma.rsf a0=1. niter=100 verb=n\n\nPARAMETERS\n       float  a0 =1.       starting sharpness\n       file   ma =      auxiliary output file name\n       int    niter =100      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/generic/Mmonof.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmonof(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmonof2-Tuple{}","page":"Home","title":"Madagascar.sfmonof2","text":"sfmonof2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmonof2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmonof2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmonof2(1)                   Madagascar Manuals                   sfmonof2(1)\n\nNAME\n       sfmonof2 - Gaussian wavelet estimation in 2-D.\n\nSYNOPSIS\n       sfmonof2  <  in.rsf  >  out.rsf  ma=ma.rsf  a0=1. b0=0. c0=1. niter=100\n       nliter=1 verb=n\n\nPARAMETERS\n       float  a0 =1.       starting sharpness in xx\n       float  b0 =0.       starting sharpness in xy\n       float  c0 =1.       starting sharpness in yy\n       file   ma =      auxiliary output file name\n       int    niter =100      number of iterations\n       int    nliter =1      number of reweighting iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/generic/Mmonof2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmonof2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmorph-Tuple{}","page":"Home","title":"Madagascar.sfmorph","text":"sfmorph(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmorph on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmorph. See ?m8r for examples.\n\nRSF Documentation\n\nsfmorph(1)                    Madagascar Manuals                    sfmorph(1)\n\nNAME\n       sfmorph - Morphological operations on binary images\n\nSYNOPSIS\n       sfmorph < inp.rsf > out.rsf what=\n\nPARAMETERS\n       string what  =       what  operation  to perform (dilation,closing,ero‐\n              sion,opening,skeleton)\nSOURCE\n       user/fomels/Mmorph.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmorph(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmoveout-Tuple{}","page":"Home","title":"Madagascar.sfmoveout","text":"sfmoveout(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmoveout on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmoveout. See ?m8r for examples.\n\nRSF Documentation\n\nsfmoveout(1)                  Madagascar Manuals                  sfmoveout(1)\n\nNAME\n       sfmoveout - Put spikes at an arbitrary moveout\n\nSYNOPSIS\n       sfmoveout < warp.rsf > out.rsf n1= d1=1. o1=0. eps=0.1 nw=10\n\nPARAMETERS\n       float  d1 =1.       time sampling\n       float  eps =0.1      stretch regularization\n       int    n1 =      time samples\n       int    nw =10      wavelet length\n       float  o1 =0.       time origin\nSOURCE\n       system/seismic/Mmoveout.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmoveout(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpi-Tuple{}","page":"Home","title":"Madagascar.sfmpi","text":"sfmpi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpi(1)                      Madagascar Manuals                      sfmpi(1)\n\nNAME\n       sfmpi - MPI wrapper for embarassingly parallel jobs.\n\nSYNOPSIS\n       sfmpi split=ndim join=axis\n\nPARAMETERS\n       int    join =axis      axis to join (0 means add)\n       int    split =ndim      axis to split\nSOURCE\n       system/main/mpi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfmpi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiafdfwi2d-Tuple{}","page":"Home","title":"Madagascar.sfmpiafdfwi2d","text":"sfmpiafdfwi2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiafdfwi2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiafdfwi2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiafdfwi2d(1)              Madagascar Manuals              sfmpiafdfwi2d(1)\n\nNAME\n       sfmpiafdfwi2d  - 2D Visco-acoustic Forward Modeling, FWI, and RTM based\n       on SLS model\n\nSYNOPSIS\n       sfmpiafdfwi2d Fwfl1=Fwfl1.rsf Fwfl2=Fwfl2.rsf Fres=Fres.rsf Fvel=Fv.rsf\n       Fq=Fq.rsf      Fwavelet=Fw.rsf      output=Fdat.rsf     output=Finv.rsf\n       Fgrad=Fgrad.rsf output=Fimg.rsf Fsrc=Fsrc.rsf Fmwt=Fmwt.rsf  ompchunk=1\n       ompnth=0  inv=n  onlysrc=n  onlyvel=n  sw=n  ctr=n  precsrc=n hidesrc=n\n       nitersrc=1 ngrp=1 size=0 rectzsrc=1 rectxsrc=1 recttsrc=50  repeatsrc=1\n       perc=1.0f  hard=0.1f  media=1  function=2  verb=n nb=100 coef=0.003 ac‐\n       qui_type=1 ns= ds= s0= sz=5 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=1\n       f0=   interval=1   fhi=0.5/acpar->dt  flo=0.  onlygrad=n  wt1=acpar->t0\n       wt2=acpar->t0+(acpar->nt-1)*acpar->dt     woff1=acpar->r0     woff2=ac‐\n       par->r0+(acpar->nr-1)*acpar->dr   oreo=n  waterz=51  grectx=3  grectz=3\n       niter= conv_error= c1=1e-4 c2=0.9 v1=0. v2=10. onlygrad=n wt1=acpar->t0\n       wt2=acpar->t0+(acpar->nt-1)*acpar->dt     woff1=acpar->r0     woff2=ac‐\n       par->r0+(acpar->nr-1)*acpar->dr  oreo=n  waterz=0  waterzb=0   grectx=3\n       grectz=3 niter= repeat=1 conv_error= c1=1e-4 c2=0.9 v1=0. v2=10.\n\nPARAMETERS\n       file   Fgrad =      auxiliary output file name\n       file   Fmwt =      auxiliary output file name\n       file   Fq =      auxiliary input file name\n       file   Fres =      auxiliary output file name\n       file   Fsrc =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       file   Fwfl1 =      auxiliary output file name\n       file   Fwfl2 =      auxiliary output file name\n       int    acqui_type  =1      if 1, fixed acquisition; if 2, marine acqui‐\n              sition; if 3, symmetric acquisition\n       float  c1 =1e-4 ®\n       float  c2 =0.9 ®\n       float  coef =0.003      absorbing boundary coefficient\n       float  conv_error =      final convergence error\n       bool   ctr =n [y/n]     cross-correlation time-reversal imaging\n       float  dr =acpar->dx      receiver interval\n       float  ds =      shot interval\n       float  f0 =      reference frequency\n       float  fhi =0.5/acpar->dt ®\n       float  flo =0.  ®\n       int    function =2      if 1, forward modeling; if 2, FWI; if 3, RTM\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       float  hard =0.1f      hard thresholding for masking\n       bool   hidesrc =n [y/n]     hide source footprint in fwi\n       int    interval =1      wavefield storing interval\n       bool   inv =n [y/n]     inversion flag\n       int    media =1      if 1, acoustic media; if 2, visco-acoustic media\n       int    nb =100      boundary width\n       int    ngrp =1      number of sub-groups of receivers\n       int    niter =      iteration number\n       int    nitersrc =1      num of iter'ns for source inversion\n       int    nr =acpar->nx      number of receiver\n       int    ns =      shot number\n       int    ompchunk =1 ®\n       int    ompnth =0 ®\n       bool   onlygrad =n [y/n]     only want gradident\n       bool   onlysrc =n [y/n]     only invert for source (vel known),  active\n              when inv=y\n       bool   onlyvel  =n [y/n]     only invert for vel (source known), active\n              when inv=y\n       bool   oreo =n [y/n]     keep oreo or keep cream\n       file   output =      auxiliary output file name\n       float  perc =1.0f      padding percentatge for swnorm\n       bool   precsrc =n [y/n]     source inversion preconditioning\n       float  r0 =acpar->x0      receiver origin\n       int    recttsrc =50      source smoothing in t before masking\n       int    rectxsrc =1      source smoothing in x before masking\n       int    rectzsrc =1      source smoothing in z before masking\n       int    repeat =1      repeat resetting alpha\n       int    repeatsrc =1      source smoothing repeatation times\n       int    rz =1      receiver depth\n       float  s0 =      shot origin\n       int    size =0      sliding window radius\n       bool   sw =n [y/n]     sliding window normalization\n       int    sz =5      source depth\n       float  v1 =0.  ®\n       float  v2 =10.  ®\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =0      water layer depth\n       int    waterzb =0      water layer depth from bottom up\n       float  woff1 =acpar->r0 ®\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr ®\n       float  wt1 =acpar->t0 ®\n       float  wt2 =acpar->t0+(acpar->nt-1)*acpar->dt ®\nSOURCE\n       user/chenyk/Mmpiafdfwi2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpiafdfwi2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpicfftrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpicfftrtm","text":"sfmpicfftrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpicfftrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpicfftrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpicfftrtm(1)               Madagascar Manuals               sfmpicfftrtm(1)\n\nNAME\n       sfmpicfftrtm  -  Lowrank  decomposition for 3-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfmpicfftrtm verb=false  migr=false  roll=false  dabc=false  snap=false\n       mute=false    sill=false   nb=0   cb=1.0   nbell=1   jsnap=100   jump=1\n       seed=time(NULL  npk=20  eps=1.e-4  media=0  taper=0  thres=1  sou_t0=0.\n       vel_w=1500. revolve_snaps=64 info=0 sht_set=0 sht_num=sht_num_total\n\nPARAMETERS\n       cb     =1.0      abc strength\n       dabc   =false      absorbing boundary\n       eps    =1.e-4      tolerance/accuracy\n       info   =0      verbosity of output info about revolve\n       jsnap  =100      snapshot interval\n       jump   =1      subsampling rate for lowrank decomposition\n       media  =0      media: 0-> iso, 1-> tti\n       migr   =false      adjoint(migration) flag\n       mute   =false      mute first arrival (modeling or imaging)\n       nb     =0      abc width\n       nbell  =1      source position z\n       npk    =20      maximum rank\n       revolve_snaps\n              =64      maximum num of snapshots allowed to be saved\n       roll   =false      rolling v.s. fixed-spread acquisition geometry\n       seed   =time(NULL ®\n       sht_num\n              =sht_num_total      shot number to process\n       sht_set\n              =0      starting shot index\n       sill   =false      source illumination for rtm\n       snap   =false      output wavefield snapshots\n       sou_t0 =0.       source delay\n       taper  =0      tapering interval for tti\n       thres  =1      tapering threshold for tti\n       vel_w  =1500.       water velocity\n       verb   =false      verbosity\nSOURCE\n       user/jsun/Mmpicfftrtm.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmpicfftrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpictshiftlr-Tuple{}","page":"Home","title":"Madagascar.sfmpictshiftlr","text":"sfmpictshiftlr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpictshiftlr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpictshiftlr. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpictshiftlr(1)             Madagascar Manuals             sfmpictshiftlr(1)\n\nNAME\n       sfmpictshiftlr - Correct time-shift gathers with two-step lowrank prop‐\n       agator\n\nSYNOPSIS\n       sfmpictshiftlr left=left.rsf right=right.rsf  dt=0.001  nb=60  par=0.01\n       cmplx=n abc=y pad1=1 taper=y thresh=0.92\n\nPARAMETERS\n       bool   abc =y [y/n]     absorbing boundary condition\n       bool   cmplx =n [y/n]     use complex FFT\n       float  dt =0.001      time interval\n       file   left =      auxiliary input file name\n       int    nb =60      boundary width\n       int    pad1 =1      padding factor on the first axis\n       float  par =0.01      absorbing boundary coefficient\n       file   right =      auxiliary input file name\n       bool   taper =y [y/n]     tapering\n       float  thresh =0.92      thresholding\nSOURCE\n       user/zhiguang/Mmpictshiftlr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfmpictshiftlr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpidfwi-Tuple{}","page":"Home","title":"Madagascar.sfmpidfwi","text":"sfmpidfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpidfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpidfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpidfwi(1)                  Madagascar Manuals                  sfmpidfwi(1)\n\nNAME\n       sfmpidfwi - Variable-density acoustic Forward Modeling, FWI, and RTM\n\nSYNOPSIS\n       sfmpidfwi  Fvel=Fv.rsf  Fd=Fd.rsf  Fwavelet=Fw.rsf output=Fdat.rsf out‐\n       put=Finv.rsf   Ferr=Ferr.rsf   Fmod=Fmod.rsf    Fgrad=Fgrad.rsf    out‐\n       put=Fimg.rsf  function=2  para_type=1 verb=n nb=20 coef=5. acqui_type=1\n       ns= ds= s0= sz=3 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=3 interval=1\n       fhi=0.5/acpar->dt   flo=0.  frectx=2  frectz=2  onlygrad=n  grad_type=1\n       rfwi=0  wt1=acpar->t0  wt2=acpar->t0+(acpar->nt-1)*acpar->dt  woff1=ac‐\n       par->r0  woff2=acpar->r0+(acpar->nr-1)*acpar->dr  v0=1.5  t0=-1. gain=1\n       waterz=51  grectx=3  grectz=3  v1=0.  v2=10.  den1=0.  den2=10.  niter=\n       conv_error= npair=20 nls=20 factor=10 repeat=5\n\nPARAMETERS\n       file   Fd =      auxiliary input file name\n       file   Ferr =      auxiliary output file name\n       file   Fgrad =      auxiliary output file name\n       file   Fmod =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type  =1      if 1, fixed acquisition; if 2, marine acqui‐\n              sition; if 3, symmetric acquisition\n       float  coef =5.       maximum velocity of the medium\n       float  conv_error =      final convergence error\n       float  den1 =0.       lower limit of estimated density or impedance\n       float  den2 =10.       upper limit of estimated density or impedance\n       float  dr =acpar->dx      receiver interval\n       float  ds =      shot interval\n       float  factor =10      step length increase factor\n       float  fhi =0.5/acpar->dt       high  frequency  in  band,  default  is\n              Nyquist\n       float  flo =0.       low frequency in band, default is zero\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    function =2      if 1, forward modeling; if 2, FWI; if 3, RTM\n       float  gain =1      vertical gain power of data residual\n       int    grad_type =1      if 1, velocity; if 2, impedance or density\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       int    interval =1      wavefield storing interval\n       int    nb =20      PML boundary width\n       int    niter =      iteration number\n       int    nls =20      line search number\n       int    npair =20      number of l-BFGS pairs\n       int    nr =acpar->nx      number of receiver\n       int    ns =      shot number\n       bool   onlygrad =n [y/n]     only calculate gradident or not\n       file   output =      auxiliary output file name\n       int    para_type =1      if 1, velocity and density; if 2, velocity and\n              impedance\n       float  r0 =acpar->x0      receiver origin\n       int    repeat =5      after how many iterations the  step  length  goes\n              back to 1\n       int    rfwi  =0      if 0, fwi gradient; if 1, rfwi gradient with Vp-Ip\n              scale separation\n       int    rz =3      receiver depth\n       float  s0 =      shot origin\n       int    sz =3      source depth\n       float  t0 =-1.       starting time for cutting direct wave\n       float  v0 =1.5      surface velocity for cutting direct wave\n       float  v1 =0.       lower limit of estimated velocity\n       float  v2 =10.       upper limit of estimated velocity\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =51      water layer depth\n       float  woff1 =acpar->r0      window data residual: rmin\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr      window data resid‐\n              ual: rmax\n       float  wt1 =acpar->t0      window data residual: tmin\n       float  wt2  =acpar->t0+(acpar->nt-1)*acpar->dt       window data resid‐\n              ual: tmax\nSOURCE\n       user/zhiguang/Mmpidfwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpidfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpidip2-Tuple{}","page":"Home","title":"Madagascar.sfmpidip2","text":"sfmpidip2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpidip2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpidip2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpidip2(1)                  Madagascar Manuals                  sfmpidip2(1)\n\nNAME\n       sfmpidip2  - 2-D dip estimation by plane wave destruction with MPI par‐\n       allelization.\n\nSYNOPSIS\n       sfmpidip2 dip0=dip0.rsf mask=mask.rsf niter=5 liter=20 rect1=1  rect2=1\n       p0=0. order=1 nj1=1 verb=n pmin=-FLT_MAX pmax=+FLT_MAX eps=0.0f\n\nPARAMETERS\n       string dip0 =      auxiliary input file name\n       float  eps =0.0f      regularization\n       int    liter =20      number of linear iterations\n       string mask =      auxiliary input file name\n       int    niter =5      number of iterations\n       int    nj1 =1      antialiasing\n       int    order =1      accuracy order\n       float  p0 =0.       initial dip\n       float  pmax =+FLT_MAX      maximum dip\n       float  pmin =-FLT_MAX      minimum dip\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/zhiguang/Mmpidip2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpidip2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiencode-Tuple{}","page":"Home","title":"Madagascar.sfmpiencode","text":"sfmpiencode(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiencode on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiencode. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiencode(1)                Madagascar Manuals                sfmpiencode(1)\n\nNAME\n       sfmpiencode  - shot encoding with arbitrary phase and amplitude weights\n       using MPI on a distributed cluster\n\nSYNOPSIS\n       sfmpiencode encode=Fencode.rsf verb=n dprefix= eprefix=\n\nCOMMENTS\n       * axes are x-y-w\n\nPARAMETERS\n       string dprefix =      printf like statement that can  be  evaluated  to\n              find the data files corresponding to shot records\n       file   encode =      auxiliary input file name\n       string eprefix  =       printf like statement that can be evaluated for\n              the output encodings\n       bool   verb =n [y/n]\nSOURCE\n       user/cwp/Mmpiencode.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpiencode(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiewertm-Tuple{}","page":"Home","title":"Madagascar.sfmpiewertm","text":"sfmpiewertm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiewertm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiewertm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiewertm(1)                Madagascar Manuals                sfmpiewertm(1)\n\nNAME\n       sfmpiewertm  -  2-D two-components elastic wavefield modeling operators\n       with lowrank approximation.\n\nSYNOPSIS\n       sfmpiewertm input=Fvp0.rsf pleft=Fpl.rsf  pright=Fpr.rsf  sleft=Fsl.rsf\n       sright=Fsr.rsf     output=Fo1.rsf     Recordx=Fo2.rsf    Pwavez=Fpz.rsf\n       Pwavex=Fpx.rsf  Swavez=Fsz.rsf  Swavex=Fsx.rsf  ImagePP=Fimgpp.rsf  Im‐\n       agePS=Fimgps.rsf  ImageSP=Fimgsp.rsf  ImageSS=Fimgss.rsf  mig=n  nt=301\n       dt=0.001 snpint=10 abc=n nbt= nbb=nbt nbl=nbt nbr=nbt ct=  cb=ct  cl=ct\n       cr=ct isx=nx/2 isz= t0=0.04 f0=30.0 A=1.0 src=1 shtbgn= shtend= shtint=\n       gpz=nbt+5 cmplx=n pad1=1 verb=n mute=n wd=5 vref=1500\n\nPARAMETERS\n       float  A =1.0      wavelet amplitude\n       string ImagePP =      auxiliary output file name\n       string ImagePS =      auxiliary output file name\n       string ImageSP =      auxiliary output file name\n       string ImageSS =      auxiliary output file name\n       string Pwavex =      auxiliary output file name\n       string Pwavez =      auxiliary output file name\n       file   Recordx =      auxiliary output file name\n       string Swavex =      auxiliary output file name\n       string Swavez =      auxiliary output file name\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cr =ct ®\n       float  ct = ®\n       float  dt =0.001 ®\n       float  f0 =30.0      wavelet peak freq\n       int    gpz =nbt+5      geophone depth\n       file   input =      auxiliary input file name\n       int    isx =nx/2 ®\n       int    isz = ®\n       bool   mig =n [y/n]     migration flag\n       bool   mute =n [y/n]     muting first arrival\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt =301 ®\n       file   output =      auxiliary output file name\n       int    pad1 =1      padding factor on the first axis\n       file   pleft =      auxiliary input file name\n       file   pright =      auxiliary input file name\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       file   sleft =      auxiliary input file name\n       int    snpint =10      absorbing boundary condition\n       int    src =1      source mode: 1 - exploding force; 2  -  equil-energy\n              force\n       file   sright =      auxiliary input file name\n       float  t0 =0.04      wavelet time lag\n       bool   verb =n [y/n]     padding factor on the first axis\n       float  vref =1500      water velocity\n       int    wd =5      muting width\nSOURCE\n       user/jsun/Mmpiewertm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpiewertm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpifd2d-Tuple{}","page":"Home","title":"Madagascar.sfmpifd2d","text":"sfmpifd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpifd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpifd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpifd2d(1)                  Madagascar Manuals                  sfmpifd2d(1)\n\nNAME\n       sfmpifd2d - Acoustic wave equation forward modeling with MPI and OpenMP\n\nSYNOPSIS\n       sfmpifd2d  rho=Frho.rsf  wavelet=Fw.rsf verb=n ns= ds= s0= sz=5 nr= dr=\n       r0= rz=sz nb=80 coef=0.003 rectx=2 rectz=2\n\nPARAMETERS\n       float  coef =0.003      absorbing boundary coefficient\n       float  dr =      receiver interval\n       float  ds =      shot interval\n       int    nb =80      boundary width\n       int    nr =      number of receiver\n       int    ns =      shot number\n       float  r0 =      receiver origin\n       int    rectx =2      source smooothing parameter\n       int    rectz =2      source smooothing parameter\n       file   rho =      auxiliary input file name\n       int    rz =sz      receiver depth\n       float  s0 =      shot origin\n       int    sz =5      source depth\n       bool   verb =n [y/n]     verbosity flag\n       file   wavelet =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mmpifd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpifd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpifdlsrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpifdlsrtm","text":"sfmpifdlsrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpifdlsrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpifdlsrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpifdlsrtm(1)               Madagascar Manuals               sfmpifdlsrtm(1)\n\nNAME\n       sfmpifdlsrtm - 2-D prestack reverse time migration and its adjoint with\n       MPI for full coverage\n\nSYNOPSIS\n       sfmpifdlsrtm  input=in.rsf  velocity=vel.rsf  wavelet=wavelet.rsf  out‐\n       put=out.rsf  snapshot=snapshot.rsf  adj=y verb=n snap=n nr= dr= r0= ns=\n       ds= s0= zr=0.0 zs=0.0 jt=100 padz=nz padx=nz\n\nPARAMETERS\n       bool   adj =y [y/n]\n       float  dr = ®\n       float  ds = ®\n       file   input =      auxiliary input file name\n       int    jt =100 ®\n       int    nr = ®\n       int    ns = ®\n       file   output =      auxiliary output file name\n       int    padx =nz ®\n       int    padz =nz ®\n       float  r0 = ®\n       float  s0 = ®\n       bool   snap =n [y/n]\n       file   snapshot =      auxiliary output file name\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]\n       file   wavelet =      auxiliary input file name\n       float  zr =0.0 ®\n       float  zs =0.0 ®\nSOURCE\n       user/zhiguang/Mmpifdlsrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmpifdlsrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiffdrtmto-Tuple{}","page":"Home","title":"Madagascar.sfmpiffdrtmto","text":"sfmpiffdrtmto(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiffdrtmto on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiffdrtmto. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiffdrtmto(1)              Madagascar Manuals              sfmpiffdrtmto(1)\n\nNAME\n       sfmpiffdrtmto - 2-D FFD RTM: MPI + OMP\n\nSYNOPSIS\n       sfmpiffdrtmto  geo=geo.rsf  vel=vel.rsf  source=source.rsf opt=y topo=y\n       dt= nt= jr=1 jm=20  nr=  isz=  irz=isz  err=0.00001  alpha=-0.7  nbt=44\n       nbb=44 nbl=44 nbr=44 ct=0.01 cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 fac‐\n       tor=2.0/3.0 sht=0 tskip=0 left=2400 right=800\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       float  dt = ®\n       float  err =0.00001 ®\n       float  factor =2.0/3.0      suppress HF parameter\n       file   geo =      auxiliary input file name\n       int    irz =isz ®\n       int    isz = ®\n       int    jm =20 ®\n       int    jr =1 ®\n       int    left =2400 ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       int    nr =      streamer total length\n       int    nt =      if (!sf_getint(\"r0\",&r0)) r0=0;\n       bool   opt =y [y/n]\n       int    right =800 ®\n       int    sht =0      Time shift parameter\n       file   source =      auxiliary input file name\n       bool   topo =y [y/n]     if y, determine optimal size for efficiency\n       int    tskip =0      Time shift parameter\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mmpiffdrtmto.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpiffdrtmto(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpifwi-Tuple{}","page":"Home","title":"Madagascar.sfmpifwi","text":"sfmpifwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpifwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpifwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpifwi(1)                   Madagascar Manuals                   sfmpifwi(1)\n\nNAME\n       sfmpifwi  - Time domain full waveform inversion using MPI parallel pro‐\n       gramming\n\nSYNOPSIS\n       sfmpifwi  vinit=vinit.rsf  shots=shots.rsf  grads=grads.rsf  illums=il‐\n       lums.rsf objs=objs.rsf verb=y precon=n niter=100 rbell=2\n\nCOMMENTS\n       Note:     Clayton-Enquist absorbing boundary condition (A2) is applied!\n\nPARAMETERS\n       file   grads =      auxiliary output file name\n       file   illums =      auxiliary output file name\n       int    niter =100      number of iterations\n       file   objs =      auxiliary output file name\n       bool   precon =n [y/n]     precondition or not\n       int    rbell =2      radius of bell smooth\n       file   shots =      auxiliary input file name\n       bool   verb =y [y/n]     vebosity\n       file   vinit =      auxiliary input file name\nSOURCE\n       user/pyang/Mmpifwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmpifwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpifwigrad-Tuple{}","page":"Home","title":"Madagascar.sfmpifwigrad","text":"sfmpifwigrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpifwigrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpifwigrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpifwigrad(1)               Madagascar Manuals               sfmpifwigrad(1)\n\nNAME\n       sfmpifwigrad  -  Calculate  acoustic FWI gradient with the prepared ad‐\n       joint source\n\nSYNOPSIS\n       sfmpifwigrad Fvel=Fv.rsf Fwavelet=Fw.rsf Fadj=Fadj.rsf  Fgrad=Fgrad.rsf\n       Fwfl1=Fwfl1.rsf Fwfl2=Fwfl2.rsf ns= ds= s0= sz=5 nr=nx dr=dx r0=x0 rz=5\n       frectx=2 frectz=2 nb=100 coef=0.002\n\nPARAMETERS\n       file   Fadj =      auxiliary input file name\n       file   Fgrad =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       file   Fwfl1 =      auxiliary output file name\n       file   Fwfl2 =      auxiliary output file name\n       float  coef =0.002      absorbing boundary coefficient\n       float  dr =dx      receiver interval\n       float  ds =      shot interval\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    nb =100      boundary width\n       int    nr =nx      number of receiver\n       int    ns =      shot number\n       float  r0 =x0      receiver origin\n       int    rz =5      receiver depth\n       float  s0 =      shot origin\n       int    sz =5      source depth\nSOURCE\n       user/zhiguang/Mmpifwigrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmpifwigrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpifwigradlr-Tuple{}","page":"Home","title":"Madagascar.sfmpifwigradlr","text":"sfmpifwigradlr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpifwigradlr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpifwigradlr. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpifwigradlr(1)             Madagascar Manuals             sfmpifwigradlr(1)\n\nNAME\n       sfmpifwigradlr - Conventional FWI misfit and gradient calculation using\n       one-step low-rank wave extrapolation\n\nSYNOPSIS\n       sfmpifwigradlr     Fvel=Fvel.rsf     Fsrc=Fsrc.rsf      Fleft=Fleft.rsf\n       Fright=Fright.rsf  Fdat=Fdat.rsf  Fmisfit=Fmisfit.rsf Fleftb=Fleftb.rsf\n       Frightb=Frightb.rsf     Fq=Fq.rsf     Fgrad=Fgrad.rsf     Fwav=Fwav.rsf\n       Fwav2=Fwav2.rsf  Fres=Fres.rsf function=3 ns= ds= s0= sz=5 nr=rnx dr=dx\n       r0=x0 rz=5 verb=n scomp=n adjtest=n  pad1=1  nb=  w0=  rectx=3  rectz=3\n       scalet=1\n\nPARAMETERS\n       file   Fdat =      auxiliary output file name\n       file   Fgrad =      auxiliary output file name\n       file   Fleft =      auxiliary input file name\n       file   Fleftb =      auxiliary input file name\n       file   Fmisfit =      auxiliary output file name\n       file   Fq =      auxiliary input file name\n       file   Fres =      auxiliary output file name\n       file   Fright =      auxiliary input file name\n       file   Frightb =      auxiliary input file name\n       file   Fsrc =      auxiliary input file name\n       file   Fvel =      auxiliary input file name\n       file   Fwav =      auxiliary output file name\n       file   Fwav2 =      auxiliary output file name\n       bool   adjtest =n [y/n]     test of adjointness\n       float  dr =dx      receiver interval\n       float  ds =      shot interval\n       int    function  =3       if  1, forward modeling; if 2, only calculate\n              misfit; if 3, calculate gradient\n       int    nb = ®\n       int    nr =rnx      number of receiver\n       int    ns =      shot number\n       int    pad1 =1      padding factor on the first axis\n       float  r0 =x0      receiver origin\n       int    rectx =3 ®\n       int    rectz =3 ®\n       int    rz =5      receiver depth\n       float  s0 =      shot origin\n       int    scalet =1      time interval\n       bool   scomp =n [y/n]     source wavefield compensation flag\n       int    sz =5      source depth\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =      reference frequency\nSOURCE\n       user/zhiguang/Mmpifwigradlr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfmpifwigradlr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpignfwi-Tuple{}","page":"Home","title":"Madagascar.sfmpignfwi","text":"sfmpignfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpignfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpignfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpignfwi(1)                 Madagascar Manuals                 sfmpignfwi(1)\n\nNAME\n       sfmpignfwi - Acoustic FWI using Gauss-Newton optimization\n\nSYNOPSIS\n       sfmpignfwi  Fvel=Fv.rsf Fwavelet=Fw.rsf output=Fdat.rsf output=Finv.rsf\n       Ferr=Ferr.rsf Fmod=Fmod.rsf Fgrad=Fgrad.rsf  function=2  verb=n  nb=100\n       coef=0.002  acqui_type=1  ns=  ds=  s0=  sz=3 nr=acpar->nx dr=acpar->dx\n       r0=acpar->x0 rz=3 fhi=0.5/acpar->dt flo=0. frectx=2 frectz=2 onlygrad=n\n       wt1=acpar->t0   wt2=acpar->t0+(acpar->nt-1)*acpar->dt   woff1=acpar->r0\n       woff2=acpar->r0+(acpar->nr-1)*acpar->dr   gain=1   waterz=51   grectx=3\n       grectz=3  drectx=1  drectz=1  nrepeat=1  tangent=0  sigma1=-1 sigma2=-1\n       v1=0. v2=10. lniter=10 niter=  conv_error=  nls=20  factor=10  repeat=5\n       err_type=0\n\nPARAMETERS\n       file   Ferr =      auxiliary output file name\n       file   Fgrad =      auxiliary output file name\n       file   Fmod =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type  =1      if 1, fixed acquisition; if 2, marine acqui‐\n              sition; if 3, symmetric acquisition\n       float  coef =0.002      absorbing boundary coefficient\n       float  conv_error =      final convergence error\n       float  dr =acpar->dx      receiver interval\n       int    drectx =1      smoothing kernel radius in x\n       int    drectz =1      smoothing kernel radius in z\n       float  ds =      shot interval\n       int    err_type =0      if 0, true misfit function; if 1, both  smooth‐\n              ing kernel and original L2 norm misfits\n       float  factor =10      step length increase factor\n       float  fhi  =0.5/acpar->dt       high  frequency  in  band,  default is\n              Nyquist\n       float  flo =0.       low frequency in band, default is zero\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    function =2      if 1, forward modeling; if 2, FWI\n       float  gain =1      vertical gain power of data residual\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       int    lniter =10      CG iteration number\n       int    nb =100      boundary width\n       int    niter =      iteration number\n       int    nls =20      line search number\n       int    nr =acpar->nx      number of receiver\n       int    nrepeat =1      smoothing kernel repeat number\n       int    ns =      shot number\n       bool   onlygrad =n [y/n]     only calculate gradident or not\n       file   output =      auxiliary output file name\n       float  r0 =acpar->x0      receiver origin\n       int    repeat =5      after how many iterations the  step  length  goes\n              back to 1\n       int    rz =3      receiver depth\n       float  s0 =      shot origin\n       float  sigma1 =-1      smoothing kernel radius moving step in z\n       float  sigma2 =-1      smoothing kernel radius moving step in x\n       int    sz =3      source depth\n       int    tangent =0      if 1, calculate prediction corrector\n       float  v1 =0.       lower limit of estimated velocity\n       float  v2 =10.       upper limit of estimated velocity\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =51      water layer depth\n       float  woff1 =acpar->r0      window data residual: rmin\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr      window data resid‐\n              ual: rmax\n       float  wt1 =acpar->t0      window data residual: tmin\n       float  wt2 =acpar->t0+(acpar->nt-1)*acpar->dt      window  data  resid‐\n              ual: tmax\nSOURCE\n       user/zhiguang/Mmpignfwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpignfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpigpufwi-Tuple{}","page":"Home","title":"Madagascar.sfmpigpufwi","text":"sfmpigpufwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpigpufwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpigpufwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpigpufwi(1)                Madagascar Manuals                sfmpigpufwi(1)\n\nNAME\n       sfmpigpufwi - CUDA based FWI using Enquist absorbing boundary condition\n\nSYNOPSIS\n       sfmpigpufwi  < vinit.rsf shots=shots.rsf > vupdates.rsf grads=grads.rsf\n       objs=objs.rsf illums=illums.rsf verb=y precon=n niter=100 rbell=2\n\nCOMMENTS\n       Note: You can try other complex boundary condition but we do not recom‐\n       mend  to  do so. The main reason is that FWI is to recover the low-fre‐\n       quency information of the earth model. Low-freq means  that  exact  ab‐\n       sorbing  is  not  necessarilly needed. The result will be improved with\n       the optimization precedure.  Furthermore,  complex  boundary  condition\n       (such as sponge ABC or PML) implies more computational cost, which will\n       degrade the efficiency of FWI.\n\nPARAMETERS\n       file   grads =      auxiliary output file name\n       file   illums =      auxiliary output file name\n       int    niter =100      number of iterations\n       file   objs =      auxiliary output file name\n       bool   precon =n [y/n]     precondition or not\n       int    rbell =2      radius of bell smooth\n       file   shots =      auxiliary input file name\n       bool   verb =y [y/n]     vebosity\nSOURCE\n       user/pyang/Mmpigpufwi.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpigpufwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpihello-Tuple{}","page":"Home","title":"Madagascar.sfmpihello","text":"sfmpihello(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpihello on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpihello. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpihello(1)                 Madagascar Manuals                 sfmpihello(1)\n\nNAME\n       sfmpihello - MPI example, summation of vectors c = a + b\n\nSYNOPSIS\n       sfmpihello b=bin.rsf\n\nPARAMETERS\n       file   b =      auxiliary input file name\nSOURCE\n       user/bash/Mmpihello.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpihello(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpikirmodnewton-Tuple{}","page":"Home","title":"Madagascar.sfmpikirmodnewton","text":"sfmpikirmodnewton(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpikirmodnewton on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpikirmodnewton. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpikirmodnewton(1)          Madagascar Manuals          sfmpikirmodnewton(1)\n\nNAME\n       sfmpikirmodnewton  - Kirchhoff 2-D/2.5-D modeling in layered media with\n       bending ray tracing.\n\nSYNOPSIS\n       sfmpikirmodnewton    input=modl.rsf    output=data.rsf    curv=curv.rsf\n       refl=refl.rsf aniso=vti.rsf velocity= xgradient= zgradient= xref= zref=\n       newton=y lin=n adj=n absoff=n nt=  dt=0.004  t0=0.  ns=nx  s0=x0  ds=dx\n       nh=nx  h0=0.  dh=dx  verb=n  r0=1. debug=n fwdxini=n vstatus= niter=500\n       tol=0.00001 order=3 twod=n cmp=n freq=0.2/dt vel= gradx=  gradz=  velz=\n       eta= refx= refz= vel2= gradx2= gradz2= rgrad= dip= type= type2=\n\nPARAMETERS\n       bool   absoff =n [y/n]     y - h0 is not in shot coordinate system\n       bool   adj =n [y/n]     adjoint flag\n       file   aniso =      auxiliary input file name\n       bool   cmp =n [y/n]     compute CMP instead of shot gathers\n       file   curv =      auxiliary input file name\n       bool   debug =n [y/n]     debug flag\n       float  dh =dx      offset increment\n       string dip =      reflector dip file\n       float  ds =dx      shot/midpoint increment\n       float  dt =0.004      time sampling\n       float  eta =      parameter for VTI anisotropy\n       float  freq =0.2/dt      peak frequency for Ricker wavelet\n       bool   fwdxini  =n [y/n]     use the result of previous iteration to be\n              the xinitial of the next one\n       float  gradx =      horizontal velocity gradient\n       float  gradx2 =      converted velocity, horizontal gradient\n       float  gradz =      vertical velocity gradient\n       float  gradz2 =      converted velocity, vertical gradient\n       float  h0 =0.       first offset\n       file   input =      auxiliary input file name\n       bool   lin =n [y/n]     if linear operator\n       bool   newton =y [y/n]     To switch between analytical and newton kir‐\n              mod\n       int    nh =nx      number of offsets\n       int    niter =500      The number of iterations\n       int    ns =nx      number of shots (midpoints if cmp=y)\n       int    nt =      time samples\n       int    order =3      Interpolation order\n       file   output =      auxiliary output file name\n       float  r0 =1.       normal reflectivity (if constant)\n       string refl =      auxiliary input file name\n       float  refx =      reference x-coordinate for velocity\n       float  refz =      reference z-coordinate for velocity\n       string rgrad =      AVO gradient file (B/A)\n       float  s0 =x0      first shot (midpoint if cmp=y)\n       float  t0 =0.       time origin\n       double tol =0.00001      Assign a default value for tolerance\n       bool   twod =n [y/n]     2-D or 2.5-D\n       string type  =      type of velocity, 'c': constant, 's': linear sloth,\n              'v': linear velocity, 'a': VTI anisotropy\n       string type2 =      type of velocity for the converted (receiver  side)\n              branch\n       float  vel =      velocity\n       float  vel2 =      converted velocity\n       floats velocity =      Assign velocity km/s [nc]\n       float  velz =      vertical velocity for VTI anisotropy\n       bool   verb =n [y/n]     verbosity flag\n       int    vstatus  =      Velocity status (0 for constant v,1 for gradient\n              v, and 2 for vti)\n       floats xgradient =       [nc]\n       floats xref =      Assign x-reference point [nc]\n       floats zgradient =       [nc]\n       floats zref =      Assign z-reference point [nc]\nSOURCE\n       user/zone/Mmpikirmodnewton.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sfmpikirmodnewton(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilrmodel-Tuple{}","page":"Home","title":"Madagascar.sfmpilrmodel","text":"sfmpilrmodel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilrmodel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilrmodel. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilrmodel(1)               Madagascar Manuals               sfmpilrmodel(1)\n\nNAME\n       sfmpilrmodel - One-step lowrank modeling\n\nSYNOPSIS\n       sfmpilrmodel  Fwfld=Fwfld.rsf Fpadvel=Fvel.rsf wantwf=n pad1=1 nb= src‐\n       trunc=0.4 rectx=2 rectz=2 repeat=2 scalet=1 snap=100 snapshot=0 ns= ds=\n       s0= rnx= nr=rnx ndr=1 nr0=0 gpz= spx= spz= path1= path2=\n\nPARAMETERS\n       file   Fpadvel =      auxiliary input file name\n       file   Fwfld =      auxiliary output file name\n       float  ds =      shot interval\n       int    gpz =      depth of geophone\n       int    nb =      boundary width\n       int    ndr =1      receiver interval\n       int    nr =rnx      receiver number\n       int    nr0 =0      receiver origin\n       int    ns =      shot number\n       int    pad1 =1      padding factor on the first axis\n       string path1 =      path of left matrices './mat/left'\n       string path2 =      path of right matrices './mat/left'\n       int    rectx =2      source smoothing in x-direction\n       int    rectz =2      source smoothing in z-direction\n       int    repeat =2      repeat numbers of source smoothing\n       int    rnx =      coverage area of one shot\n       float  s0 =      shot origin\n       int    scalet =1      wavefield storage interval\n       int    snap =100      wavefield output interval when wantwf=y\n       int    snapshot =0      print out the wavefield snapshots of this shot\n       int    spx =      horizontal location of source\n       int    spz =      depth of source\n       float  srctrunc =0.4      source truncation\n       bool   wantwf =n [y/n]     want wavefield or not\nSOURCE\n       user/zhiguang/Mmpilrmodel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmpilrmodel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilrrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpilrrtm","text":"sfmpilrrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilrrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilrrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilrrtm(1)                 Madagascar Manuals                 sfmpilrrtm(1)\n\nNAME\n       sfmpilrrtm - 2-D Low-rank One-step Reverse-Time-Migration (simultaneous\n       sources data and incomplete data)\n\nSYNOPSIS\n       sfmpilrrtm  src=Fsrc.rsf  rec=Frcd.rsf  left=left.rsf   right=right.rsf\n       leftb=leftb.rsf    rightb=rightb.rsf    vel=Fvel.rsf   tmpwf=Ftmpwf.rsf\n       mask=mask.rsf verb=n adj=y wantwf=n wantrecord=y  illum=n  roll=y  fm=n\n       incom=n  shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snapinter=1\n       wfint=50 srctrunc=0.4 rectz=2 rectx=2  repeat=2  top=40  bot=40  lft=40\n       rht=40 nsource=1 dsource=0 tdelay=0 choose=nsource pad1=1\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       int    choose =nsource      Set I/O file\n       int    dsource =0 ®\n       bool   fm =n [y/n]     if n, Born modelling\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       bool   incom =n [y/n]     if n, use complete data\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       file   mask =      auxiliary input file name\n       int    nsource =1 ®\n       int    pad1 =1      padding factor on the first axis\n       file   rec =      auxiliary output file name\n       int    rectx =2 ®\n       int    rectz =2 ®\n       int    repeat =2      abc parameters\n       int    rht =40      simultaneous sources parameter\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll  =y [y/n]     if n, receiver is independent of source loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       float  tdelay =0 ®\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord =y [y/n]     if n, using  record  data  generated  by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\n       int    wfint =50      snap interval\nSOURCE\n       user/zhiguang/Mmpilrrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpilrrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilrrtm_ts-Tuple{}","page":"Home","title":"Madagascar.sfmpilrrtm_ts","text":"sfmpilrrtm_ts(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilrrtm_ts on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilrrtm_ts. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilrrtmts(1)              Madagascar Manuals              sfmpilrrtmts(1)\n\nNAME\n       sfmpilrrtm_ts - One-step lowrank RTM with time-shift imaging condition\n\nSYNOPSIS\n       sfmpilrrtm_ts     Fimg2=Fimg2.rsf     Fsrc=Fsrc.rsf    Fpadvel=Fvel.rsf\n       Ffwf=Ffwf.rsf Fbwf=Fbwf.rsf taper=0 thresh=0.92 wantwf=n verb=n  pad1=1\n       nb=  srctrunc=0.4 rectx=2 rectz=2 repeat=2 scalet=1 snap=100 snapshot=0\n       nds= gpz= spx= spz= rnx= ndr=1 nr0=0 ntau= dtau=  tau0=  ncut=0  path1=\n       path2=\n\nPARAMETERS\n       file   Fbwf =      auxiliary output file name\n       file   Ffwf =      auxiliary output file name\n       file   Fimg2 =      auxiliary output file name\n       file   Fpadvel =      auxiliary input file name\n       file   Fsrc =      auxiliary input file name\n       float  dtau =      interval of time-shift\n       int    gpz =      depth of geophone\n       int    nb =      padded boundary width\n       int    ncut  =0      number of cutting samples for generating non-nega‐\n              tive source wavelet\n       int    ndr =1      receiver interval\n       int    nds =      source interval in number of dx\n       int    nr0 =0      receiver starting point in rnx\n       int    ntau =      number of time-shift\n       int    pad1 =1      padding factor on the first axis\n       string path1 =      path of left matrices './mat/left'\n       string path2 =      path of right matrices './mat/left'\n       int    rectx =2      source smoothing in x-direction\n       int    rectz =2      source smoothing in z-direction\n       int    repeat =2      repeat numbers of source smoothing\n       int    rnx =      coverage area of one shot\n       int    scalet =1      wavefield storage interval\n       int    snap =100      wavefield output interval when wantwf=y\n       int    snapshot =0      print out the wavefield snapshots of this shot\n       int    spx =      horizontal location of source\n       int    spz =      depth of source\n       float  srctrunc =0.4      source truncation\n       int    taper =0      if not 0, tapering in the frequency domain\n       float  tau0 =      origin of time-shift\n       float  thresh =0.92      tapering threshold\n       bool   verb =n [y/n]     verbosity flag\n       bool   wantwf =n [y/n]     if  true,  output  wavefield  of  a  certain\n              (snapshot=) shot\nSOURCE\n       user/zhiguang/Mmpilrrtm_ts.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpilrrtm_ts(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilsLU-Tuple{}","page":"Home","title":"Madagascar.sfmpilsLU","text":"sfmpilsLU(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilsLU on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilsLU. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilsLU(1)                  Madagascar Manuals                  sfmpilsLU(1)\n\nNAME\n       sfmpilsLU - Local similarity filter (solving with band matrix LU decom‐\n       position and parallelization)\n\nSYNOPSIS\n       sfmpilsLU  obs=dat.rsf   input=mat.rsf   output=flt.rsf   adj1=adj1.rsf\n       adj2=adj2.rsf verb=y shift=n adjsrc=n rect1=50 nw= dw= w0=\n\nPARAMETERS\n       file   adj1 =      auxiliary output file name\n       file   adj2 =      auxiliary output file name\n       bool   adjsrc =n [y/n]     use shift instead of stretch\n       float  dw =      omega sampling\n       file   input =      auxiliary input file name\n       int    nw =      number of omega values\n       file   obs =      auxiliary input file name\n       file   output =      auxiliary output file name\n       int    rect1 =50      smoothing along first axis\n       bool   shift =n [y/n]     use shift instead of stretch\n       bool   verb =y [y/n]     verbosity flag\n       float  w0 =      omega origin\nSOURCE\n       user/zhiguang/MmpilsLU.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpilsLU(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilsrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpilsrtm","text":"sfmpilsrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilsrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilsrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilsrtm(1)                 Madagascar Manuals                 sfmpilsrtm(1)\n\nNAME\n       sfmpilsrtm  - 2-D Low-rank One-step Least Pre-stack Reverse-Time-Migra‐\n       tion in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sfmpilsrtm  src=Fsrc.rsf  rec=Frcd.rsf  left=left.rsf   right=right.rsf\n       leftb=leftb.rsf  rightb=rightb.rsf vel=Fvel.rsf tmpwf=Ftmpwf.rsf verb=n\n       adj=y wantwf=n wantrecord=y illum=n roll=n shtbgn= sht0=shtbgn  shtend=\n       shtint=  spz=  gpz=  gpl=  snapinter=1 srctrunc=0.4 rectz=1 rectx=1 re‐\n       peat=0 top=40 bot=40 lft=40 rht=40 pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    pad1 =1      padding factor on the first axis\n       file   rec =      auxiliary output file name\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40      Set I/O file\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll =n [y/n]     if n, receiver is independent of source  loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord  =y  [y/n]     if  n,  using record data generated by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\nSOURCE\n       user/jsun/Mmpilsrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpilsrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilsrtmcg-Tuple{}","page":"Home","title":"Madagascar.sfmpilsrtmcg","text":"sfmpilsrtmcg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilsrtmcg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilsrtmcg. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilsrtmcg(1)               Madagascar Manuals               sfmpilsrtmcg(1)\n\nNAME\n       sfmpilsrtmcg  -  2-D  Low-rank One-step Least-square Pre-stack Reverse-\n       Time-Migration using CG in the complex domain (both img  and  data  are\n       complex valued)\n\nSYNOPSIS\n       sfmpilsrtmcg src=Fsrc.rsf left=left.rsf right=right.rsf leftb=leftb.rsf\n       rightb=rightb.rsf vel=Fvel.rsf start=Fstart.rsf verb=n  niter=1  mode=0\n       illum=n roll=n shtbgn= sht0=shtbgn shtend= shtint= spz= gpz= gpl= snap‐\n       inter=1 srctrunc=0.4 rectz=1  rectx=1  repeat=0  top=40  bot=40  lft=40\n       rht=40 pad1=1\n\nPARAMETERS\n       int    bot =40 ®\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    mode =0 ®\n       int    niter =1 ®\n       int    pad1 =1      padding factor on the first axis\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40      Set I/O file\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll  =n [y/n]     if n, receiver is independent of source loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       string start =      auxiliary input file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mmpilsrtmcg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmpilsrtmcg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpilsrtmgmres-Tuple{}","page":"Home","title":"Madagascar.sfmpilsrtmgmres","text":"sfmpilsrtmgmres(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpilsrtmgmres on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpilsrtmgmres. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpilsrtmgmres(1)            Madagascar Manuals            sfmpilsrtmgmres(1)\n\nNAME\n       sfmpilsrtmgmres  -  2-D Low-rank One-step Least Pre-stack Reverse-Time-\n       Migration in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sfmpilsrtmgmres     src=Fsrc.rsf     left=left.rsf      right=right.rsf\n       leftb=leftb.rsf  rightb=rightb.rsf vel=Fvel.rsf start=Fstart.rsf verb=n\n       adj=y gmres=n niter=5  mem=5  laplac=y  mode=  illum=n  roll=n  shtbgn=\n       sht0=shtbgn  shtend=  shtint=  spz=  gpz= gpl= snapinter=1 srctrunc=0.4\n       rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       bool   gmres =n [y/n]     invoke gmres(m) iterations\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       bool   laplac =y [y/n]     laplacian filtering\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    mem =5 ®\n       int    mode = ®\n       int    niter =5 ®\n       int    pad1 =1      padding factor on the first axis\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40      Set I/O file\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll =n [y/n]     if n, receiver is independent of source  loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       string start =      auxiliary input file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mmpilsrtmgmres.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfmpilsrtmgmres(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpipaint2-Tuple{}","page":"Home","title":"Madagascar.sfmpipaint2","text":"sfmpipaint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpipaint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpipaint2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpipaint2(1)                Madagascar Manuals                sfmpipaint2(1)\n\nNAME\n       sfmpipaint2  -  2-D painting by plane-wave construction with MPI paral‐\n       lelization.\n\nSYNOPSIS\n       sfmpipaint2 verb=n eps=0.01 i0=0 order=1\n\nPARAMETERS\n       float  eps =0.01      regularization\n       int    i0 =0      reference trace\n       int    order =1      accuracy order\n       bool   verb =n [y/n]\nSOURCE\n       user/zhiguang/Mmpipaint2.c\nVERSION\n       4.2-git Mflat.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                    sfmpipaint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpipfwi-Tuple{}","page":"Home","title":"Madagascar.sfmpipfwi","text":"sfmpipfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpipfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpipfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpipfwi(1)                  Madagascar Manuals                  sfmpipfwi(1)\n\nNAME\n       sfmpipfwi  - Visco-acoustic Forward Modeling, FWI, and RTM based on SLS\n       model\n\nSYNOPSIS\n       sfmpipfwi Fvel=Fv.rsf Fq=Fq.rsf  Fwavelet=Fw.rsf  output=Fdat.rsf  out‐\n       put=Finv.rsf      Fgrad=Fgrad.rsf     output=Fimg.rsf     Fsrc=Fsrc.rsf\n       Fmwt=Fmwt.rsf media=1 function=2 verb=n nb=100 coef=0.003  acqui_type=1\n       ns= ds= s0= sz=5 nr=acpar->nx dr=acpar->dx r0=acpar->x0 rz=1 f0= inter‐\n       val=1  fhi=0.5/acpar->dt  flo=0.   onlygrad=n   wt1=acpar->t0   wt2=ac‐\n       par->t0+(acpar->nt-1)*acpar->dt   woff1=acpar->r0  woff2=acpar->r0+(ac‐\n       par->nr-1)*acpar->dr oreo=n waterz=51 grectx=3 grectz=3 niter= conv_er‐\n       ror=  c1=1e-4  c2=0.9  v1=0.  v2=10.  onlygrad=n  wt1=acpar->t0 wt2=ac‐\n       par->t0+(acpar->nt-1)*acpar->dt  woff1=acpar->r0   woff2=acpar->r0+(ac‐\n       par->nr-1)*acpar->dr oreo=n waterz=0 waterzb=0 grectx=3 grectz=3 niter=\n       repeat=1 conv_error= c1=1e-4 c2=0.9 v1=0. v2=10.\n\nPARAMETERS\n       file   Fgrad =      auxiliary output file name\n       file   Fmwt =      auxiliary output file name\n       file   Fq =      auxiliary input file name\n       file   Fsrc =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type =1      if 1, fixed acquisition; if 2, marine  acqui‐\n              sition; if 3, symmetric acquisition\n       float  c1 =1e-4 ®\n       float  c2 =0.9 ®\n       float  coef =0.003      absorbing boundary coefficient\n       float  conv_error =      final convergence error\n       float  dr =acpar->dx      receiver interval\n       float  ds =      shot interval\n       float  f0 =      reference frequency\n       float  fhi =0.5/acpar->dt ®\n       float  flo =0.  ®\n       int    function =2      if 1, forward modeling; if 2, FWI; if 3, RTM\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       int    interval =1      wavefield storing interval\n       int    media =1      if 1, acoustic media; if 2, visco-acoustic media\n       int    nb =100      boundary width\n       int    niter =      iteration number\n       int    nr =acpar->nx      number of receiver\n       int    ns =      shot number\n       bool   onlygrad =n [y/n]     only want gradident\n       bool   oreo =n [y/n]     keep oreo or keep cream\n       file   output =      auxiliary output file name\n       float  r0 =acpar->x0      receiver origin\n       int    repeat =1      repeat resetting alpha\n       int    rz =1      receiver depth\n       float  s0 =      shot origin\n       int    sz =5      source depth\n       float  v1 =0.  ®\n       float  v2 =10.  ®\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =0      water layer depth\n       int    waterzb =0      water layer depth from bottom up\n       float  woff1 =acpar->r0 ®\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr ®\n       float  wt1 =acpar->t0 ®\n       float  wt2 =acpar->t0+(acpar->nt-1)*acpar->dt ®\nSOURCE\n       user/jsun/Mmpipfwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpipfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiprertm2d-Tuple{}","page":"Home","title":"Madagascar.sfmpiprertm2d","text":"sfmpiprertm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiprertm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiprertm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiprertm2d(1)              Madagascar Manuals              sfmpiprertm2d(1)\n\nNAME\n       sfmpiprertm2d  -  2-D  prestack  reverse-time migration and its adjoint\n       with MPI\n\nSYNOPSIS\n       sfmpiprertm2d  input=in.rsf   output=out.rsf   velocity=vel.rsf   wave‐\n       let=wavelet.rsf  snapshot=snapshot.rsf  adj=y verb=n snap=n nr= dr= r0=\n       ns= ds= s0= zr=0.0 zs=0.0 jt=100 nx= padz= padx=\n\nPARAMETERS\n       bool   adj =y [y/n]\n       float  dr = ®\n       float  ds = ®\n       file   input =      auxiliary input file name\n       int    jt =100 ®\n       int    nr = ®\n       int    ns = ®\n       int    nx = ®\n       file   output =      auxiliary output file name\n       int    padx = ®\n       int    padz = ®\n       float  r0 = ®\n       float  s0 = ®\n       bool   snap =n [y/n]\n       file   snapshot =      auxiliary output file name\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]\n       file   wavelet =      auxiliary input file name\n       float  zr =0.0 ®\n       float  zs =0.0 ®\nSOURCE\n       user/zhiguang/Mmpiprertm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpiprertm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpipsp-Tuple{}","page":"Home","title":"Madagascar.sfmpipsp","text":"sfmpipsp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpipsp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpipsp. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpipsp(1)                   Madagascar Manuals                   sfmpipsp(1)\n\nNAME\n       sfmpipsp  -  Parallel  Sweeping  Preconditioner  (PSP)  for  solving 3D\n       Helmholtz equations.\n\nSYNOPSIS\n       sfmpipsp  velocity=in.rsf  source=src.rsf  solution=out.rsf   n1=origNx\n       n2=origNy n3=origNz freq= sigma=1.5 pmlSize=5\n\nPARAMETERS\n       freq   =      frequency in HZ\n       n1     =origNx ®\n       n2     =origNy ®\n       n3     =origNz ®\n       pmlSize\n              =5      number of grid points of PML\n       sigma  =1.5      magnitude of PML stretching\n       file   solution =      auxiliary output file name\n       file   source =      auxiliary input file name\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/poulsonj/Mmpipsp.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmpipsp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiqfwi-Tuple{}","page":"Home","title":"Madagascar.sfmpiqfwi","text":"sfmpiqfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiqfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiqfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiqfwi(1)                  Madagascar Manuals                  sfmpiqfwi(1)\n\nNAME\n       sfmpiqfwi - Visco-acoustic (SLS) Forward Modeling, FWI, and RTM\n\nSYNOPSIS\n       sfmpiqfwi  Fvel=Fv.rsf  Fq=Fq.rsf  Ftau=Ftau.rsf  Fwavelet=Fw.rsf  out‐\n       put=Fdat.rsf   output=Finv.rsf   Ferr=Ferr.rsf   Fgrad=Fgrad.rsf   out‐\n       put=Fimg.rsf  function=2  verb=n f0= nb=100 coef=0.002 acqui_type=1 ns=\n       ds= s0= sz=5 nr=acpar->nx  dr=acpar->dx  r0=acpar->x0  rz=5  interval=1\n       fhi=0.5/acpar->dt   flo=0.  frectx=2  frectz=2  onlygrad=n  grad_type=1\n       wt1=acpar->t0   wt2=acpar->t0+(acpar->nt-1)*acpar->dt   woff1=acpar->r0\n       woff2=acpar->r0+(acpar->nr-1)*acpar->dr   gain=1   waterz=51   grectx=3\n       grectz=3 v1=0. v2=10.  tau1=0.  tau2=0.2  niter=  conv_error=  npair=20\n       nls=20 factor=10 repeat=5\n\nPARAMETERS\n       file   Ferr =      auxiliary output file name\n       file   Fgrad =      auxiliary output file name\n       file   Fq =      auxiliary input file name\n       file   Ftau =      auxiliary input file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type  =1      if 1, fixed acquisition; if 2, marine acqui‐\n              sition; if 3, symmetric acquisition\n       float  coef =0.002      absorbing boundary coefficient\n       float  conv_error =      final convergence error\n       float  dr =acpar->dx      receiver interval\n       float  ds =      shot interval\n       float  f0 =      reference frequency\n       float  factor =10      step length increase factor\n       float  fhi =0.5/acpar->dt       high  frequency  in  band,  default  is\n              Nyquist\n       float  flo =0.       low frequency in band, default is zero\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    function =2      if 1, forward modeling; if 2, FWI; if 3, RTM\n       float  gain =1      vertical gain power of data residual\n       int    grad_type =1      if 1, velocity; if 2, Q; if 3, velocity and Q\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       int    interval =1      wavefield storing interval\n       int    nb =100      boundary width\n       int    niter =      iteration number\n       int    nls =20      line search number\n       int    npair =20      number of l-BFGS pairs\n       int    nr =acpar->nx      number of receiver\n       int    ns =      shot number\n       bool   onlygrad =n [y/n]     only calculate gradident or not\n       file   output =      auxiliary output file name\n       float  r0 =acpar->x0      receiver origin\n       int    repeat  =5       after  how many iterations the step length goes\n              back to 1\n       int    rz =5      receiver depth\n       float  s0 =      shot origin\n       int    sz =5      source depth\n       float  tau1 =0.       lower limit of estimated tau\n       float  tau2 =0.2      upper limit of estimated tau\n       float  v1 =0.       lower limit of estimated velocity\n       float  v2 =10.       upper limit of estimated velocity\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =51      water layer depth\n       float  woff1 =acpar->r0      window data residual: rmin\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr      window data resid‐\n              ual: rmax\n       float  wt1 =acpar->t0      window data residual: tmin\n       float  wt2  =acpar->t0+(acpar->nt-1)*acpar->dt       window data resid‐\n              ual: tmax\nSOURCE\n       user/zhiguang/Mmpiqfwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpiqfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpiqrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpiqrtm","text":"sfmpiqrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpiqrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpiqrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpiqrtm(1)                  Madagascar Manuals                  sfmpiqrtm(1)\n\nNAME\n       sfmpiqrtm  -  2-D Low-rank One-step Least Pre-stack Reverse-Time-Migra‐\n       tion in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sfmpiqrtm src=Fsrc.rsf  left=left.rsf  right=right.rsf  leftb=leftb.rsf\n       rightb=rightb.rsf  vel=Fvel.rsf  norm=Fnorm.rsf  tmpwf=Ftmpwf.rsf  tmp‐\n       wfb=Ftmpwfb.rsf verb=n  adj=y  mode=  illum=n  roll=n  stable=0  sdiv=n\n       reg=0.0f  niter=100 eps=SF_EPS perc=0.1 freq_scal=n eps=SF_EPS perc=0.1\n       shtbgn= sht0=shtbgn shtend= shtint= spz=  gpz=  gpl=  snapinter=1  src‐\n       trunc=0.4  rectz=1 rectx=1 repeat=0 top=40 bot=40 lft=40 rht=40 shtid=0\n       pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       float  eps =SF_EPS      padding\n       bool   freq_scal =n [y/n]     frequency amplitude spectrum scaling\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       int    mode = ®\n       int    niter =100      smooth division maximum iterations\n       string norm =      auxiliary output file name\n       int    pad1 =1      padding factor on the first axis\n       float  perc =0.1      percentage of maximum for padding\n       int    rectx =1 ®\n       int    rectz =1 ®\n       float  reg =0.0f      regularization\n       int    repeat =0      abc parameters\n       int    rht =40      shot output id\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll =n [y/n]     if n, receiver is independent of source  loca‐\n              tion and gpl=nx\n       bool   sdiv =n [y/n]     smooth division\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtid =0      Set I/O file\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       int    stable  =0       stable = 0 -> conventional imaging condition; 1\n              -> stable imaging condition for Q-compensation with global noma‐\n              lization;  2  ->  shot-by-shot  normalization; 3 -> snapshot-by-\n              snapshot compensation (most intensive); 4 -> deconvolution imag‐\n              ing condition\n       string tmpwf =      auxiliary output file name\n       string tmpwfb =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mmpiqrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpiqrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpircvrtm-Tuple{}","page":"Home","title":"Madagascar.sfmpircvrtm","text":"sfmpircvrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpircvrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpircvrtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpircvrtm(1)                Madagascar Manuals                sfmpircvrtm(1)\n\nNAME\n       sfmpircvrtm - 2-D Low-rank One-step Least Pre-stack Reverse-Time-Migra‐\n       tion in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sfmpircvrtm input=Frcd.rsf src=Fsrc.rsf  output=Fimg.rsf  left=left.rsf\n       right=right.rsf   leftb=leftb.rsf  rightb=rightb.rsf  vel=Fvel.rsf  tm‐\n       pwf=Ftmpwf.rsf  rec2=Frcd2.rsf  spx=  verb=n  adj=y   rmig=n   rcvint=1\n       rcvbgn=0 rcvend=-1 wantwf=n wantrecord=y illum=n roll=n stack=y shtbgn=\n       sht0=shtbgn shtend= shtint= spz=  gpz=  gpl=  snapinter=1  srctrunc=0.4\n       rectz=1  rectx=1  repeat=0 top=40 bot=40 lft=40 rht=40 mute=n vref=1500\n       wd=5 depth=gpz pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       int    bot =40 ®\n       int    depth =gpz      muting source depth -> receiver depth  according\n              reciprocity\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       file   input =      auxiliary input file name\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       bool   mute =n [y/n]     muting in the receiver gather\n       file   output =      auxiliary output file name\n       int    pad1 =1      padding factor on the first axis\n       int    rcvbgn =0 ®\n       int    rcvend =-1 ®\n       int    rcvint =1 ®\n       file   rec2 =      auxiliary output file name\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40 ®\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   rmig =n [y/n]     receiver domain migration\n       bool   roll  =n [y/n]     if n, receiver is independent of source loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       ints   spx =       [num_of_shots]\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       bool   stack =y [y/n]     if y, outputs stacked image\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500 ®\n       bool   wantrecord =y [y/n]     if n, using  record  data  generated  by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\n       int    wd =5 ®\nSOURCE\n       user/jsun/Mmpircvrtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpircvrtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpirfwigrad-Tuple{}","page":"Home","title":"Madagascar.sfmpirfwigrad","text":"sfmpirfwigrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpirfwigrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpirfwigrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpirfwigrad(1)              Madagascar Manuals              sfmpirfwigrad(1)\n\nNAME\n       sfmpirfwigrad  -  Calculate  acoustic  Reflection FWI gradient with the\n       prepared adjoint source (velocity-impedance scale separation)\n\nSYNOPSIS\n       sfmpirfwigrad   Fvel=Fv.rsf   Fd=Fd.rsf   Fd0=Fd0.rsf   Fwavelet=Fw.rsf\n       Fadj=Fadj.rsf  Fgrad=Fgrad.rsf  ns= ds= s0= sz=3 nr=nx dr=dx r0=x0 rz=3\n       verb=n frectx=2 frectz=2 nb=20 coef=5. interval=1 acqui_type=1\n\nPARAMETERS\n       file   Fadj =      auxiliary input file name\n       file   Fd =      auxiliary input file name\n       file   Fd0 =      auxiliary input file name\n       file   Fgrad =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type =1      acquisition type\n       float  coef =5.       maximum velocity of the medium\n       float  dr =dx      receiver interval\n       float  ds =      shot interval\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    interval =1      wavefield storing interval\n       int    nb =20      PML boundary width\n       int    nr =nx      number of receiver\n       int    ns =      shot number\n       float  r0 =x0      receiver origin\n       int    rz =3      receiver depth\n       float  s0 =      shot origin\n       int    sz =3      source depth\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/zhiguang/Mmpirfwigrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpirfwigrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpirtmiso-Tuple{}","page":"Home","title":"Madagascar.sfmpirtmiso","text":"sfmpirtmiso(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpirtmiso on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpirtmiso. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpirtmiso(1)                Madagascar Manuals                sfmpirtmiso(1)\n\nNAME\n       sfmpirtmiso - isotropic reverse-time migration\n\nSYNOPSIS\n       sfmpirtmiso  velo=fvelo.rsf  sour=fsour.rsf nz= nz= tz= dz= dz= dt= z0=\n       x0= bzl= bzh= bxl= bxh= czl= czh= cxl= cxh= j3= nh= ns= dh= ds= h0= s0=\n       zr= zs= nH= nC= dH= dC= C0= mode= tau=\n\nPARAMETERS\n       int    C0 = ®\n       int    bxh = ®\n       int    bxl = ®\n       int    bzh = ®\n       int    bzl = ®\n       float  cxh = ®\n       float  cxl = ®\n       float  czh = ®\n       float  czl = ®\n       int    dC = ®\n       int    dH = ®\n       float  dh = ®\n       float  ds = ®\n       float  dt = ®\n       float  dz = ®\n       float  h0 = ®\n       int    j3 = ®\n       int    mode = ®\n       int    nC = ®\n       int    nH = ®\n       int    nh = ®\n       int    ns = ®\n       int    nz = ®\n       float  s0 = ®\n       file   sour =      auxiliary input file name\n       int    tau = ®\n       int    tz = ®\n       file   velo =      auxiliary input file name\n       float  x0 = ®\n       float  z0 = ®\n       float  zr = ®\n       float  zs = ®\nSOURCE\n       user/xuxin/Mmpirtmiso.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpirtmiso(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpirtmop-Tuple{}","page":"Home","title":"Madagascar.sfmpirtmop","text":"sfmpirtmop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpirtmop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpirtmop. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpirtmop(1)                 Madagascar Manuals                 sfmpirtmop(1)\n\nNAME\n       sfmpirtmop  - 2-D Low-rank One-step Least Pre-stack Reverse-Time-Migra‐\n       tion in the complex domain (both img and data are complex valued)\n\nSYNOPSIS\n       sfmpirtmop src=Fsrc.rsf left=left.rsf  right=right.rsf  leftb=leftb.rsf\n       rightb=rightb.rsf  vel=Fvel.rsf tmpwf=Ftmpwf.rsf verb=n justrec=n adj=y\n       wantwf=n illum=n roll=n born=n shtbgn= sht0=shtbgn shtend= shtint= spz=\n       gpz=  gpl=  snapinter=1  srctrunc=0.4  rectz=1  rectx=1 repeat=0 top=40\n       bot=40 lft=40 rht=40 mute=y vref=1500 wd=5 pad1=1\n\nCOMMENTS\n       img :  crosscorrelation with source normalization (stdout)\n\nPARAMETERS\n       bool   adj =y [y/n]     migration\n       bool   born =n [y/n]     use exact born approximation\n       int    bot =40 ®\n       int    gpl = ®\n       int    gpz = ®\n       bool   illum =n [y/n]     if n, no source illumination applied\n       bool   justrec =n [y/n]     just model for the seismic record\n       file   left =      auxiliary input file name\n       file   leftb =      auxiliary input file name\n       int    lft =40 ®\n       bool   mute =y [y/n]     muting direct arrival\n       int    pad1 =1      padding factor on the first axis\n       int    rectx =1 ®\n       int    rectz =1 ®\n       int    repeat =0      abc parameters\n       int    rht =40      muting for migration after modeling\n       file   right =      auxiliary input file name\n       file   rightb =      auxiliary input file name\n       bool   roll =n [y/n]     if n, receiver is independent of source  loca‐\n              tion and gpl=nx\n       int    sht0 =shtbgn      actual shot origin on grid\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snapinter =1      snap interval\n       int    spz = ®\n       file   src =      auxiliary input file name\n       float  srctrunc =0.4 ®\n       file   tmpwf =      auxiliary output file name\n       int    top =40 ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500 ®\n       bool   wantwf =n [y/n]     output forward and backward wavefield\n       int    wd =5 ®\nSOURCE\n       user/jsun/Mmpirtmop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpirtmop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpirtmvti-Tuple{}","page":"Home","title":"Madagascar.sfmpirtmvti","text":"sfmpirtmvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpirtmvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpirtmvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpirtmvti(1)                Madagascar Manuals                sfmpirtmvti(1)\n\nNAME\n       sfmpirtmvti - VTI reverse-time migration\n\nSYNOPSIS\n       sfmpirtmvti\n\nSOURCE\n       user/xuxin/Mmpirtmvti.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpirtmvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpisfwi-Tuple{}","page":"Home","title":"Madagascar.sfmpisfwi","text":"sfmpisfwi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpisfwi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpisfwi. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpisfwi(1)                  Madagascar Manuals                  sfmpisfwi(1)\n\nNAME\n       sfmpisfwi  -  Acoustic  Forward Modeling, FWI, and RTM (FWI has the op‐\n       tions  of  seislet  regularization,  smoothing  kernels,   simultaneous\n       source, and static phase encoding)\n\nSYNOPSIS\n       sfmpisfwi  Fvel=Fv.rsf  Fwavelet=Fw.rsf  Fdip=Fdip.rsf  Fcode=Fcode.rsf\n       output=Fdat.rsf     output=Finv.rsf     Ferr=Ferr.rsf     Fmod=Fmod.rsf\n       Fgrad=Fgrad.rsf  output=Fimg.rsf  function=2  seislet=0 encode=0 verb=n\n       nb=100 coef=0.002 acqui_type=1 ns= ds=  s0=  sz=5  nr=acpar->nx  dr=ac‐\n       par->dx  r0=acpar->x0 rz=5 interval=1 fhi=0.5/acpar->dt flo=0. frectx=2\n       frectz=2  nsource=1  dsource=0  pclip=15  order=1  eps=0.1   onlygrad=n\n       wt1=acpar->t0   wt2=acpar->t0+(acpar->nt-1)*acpar->dt   woff1=acpar->r0\n       woff2=acpar->r0+(acpar->nr-1)*acpar->dr   gain=1   waterz=51   grectx=3\n       grectz=3  drectx=1  drectz=1  nrepeat=1  tangent=0  sigma1=-1 sigma2=-1\n       v1=0. v2=10. niter=  conv_error=  npair=20  nls=20  factor=10  repeat=5\n       err_type=0 seislet_type=\n\nPARAMETERS\n       file   Fcode =      auxiliary input file name\n       file   Fdip =      auxiliary input file name\n       file   Ferr =      auxiliary output file name\n       file   Fgrad =      auxiliary output file name\n       file   Fmod =      auxiliary output file name\n       file   Fvel =      auxiliary input file name\n       file   Fwavelet =      auxiliary input file name\n       int    acqui_type  =1      if 1, fixed acquisition; if 2, marine acqui‐\n              sition; if 3, symmetric acquisition\n       float  coef =0.002      absorbing boundary coefficient\n       float  conv_error =      final convergence error\n       float  dr =acpar->dx      receiver interval\n       int    drectx =1      smoothing kernel radius in x\n       int    drectz =1      smoothing kernel radius in z\n       float  ds =      shot interval\n       int    dsource =0      interval of sources in a supershot\n       int    encode =0      if 0, no phase encoding; if 1, phase encoding\n       float  eps =0.1      seislet regularization parameter\n       int    err_type =0      if 0, true misfit function; if 1, both  smooth‐\n              ing kernel and original L2 norm misfits\n       float  factor =10      step length increase factor\n       float  fhi  =0.5/acpar->dt       high  frequency  in  band,  default is\n              Nyquist\n       float  flo =0.       low frequency in band, default is zero\n       int    frectx =2      source smoothing in x\n       int    frectz =2      source smoothing in z\n       int    function =2      if 1, forward modeling; if 2, FWI; if 3, RTM\n       float  gain =1      vertical gain power of data residual\n       int    grectx =3      gradient smoothing radius in x\n       int    grectz =3      gradient smoothing radius in z\n       int    interval =1      wavefield storing interval\n       int    nb =100      boundary width\n       int    niter =      iteration number\n       int    nls =20      line search number\n       int    npair =20      number of l-BFGS pairs\n       int    nr =acpar->nx      number of receiver\n       int    nrepeat =1      smoothing kernel repeat number\n       int    ns =      shot number\n       int    nsource =1      number of sources in a supershot\n       bool   onlygrad =n [y/n]     only calculate gradident or not\n       int    order =1      accuracy order of seislet transform\n       file   output =      auxiliary output file name\n       float  pclip =15      soft thresholding parameter\n       float  r0 =acpar->x0      receiver origin\n       int    repeat =5      after how many iterations the  step  length  goes\n              back to 1\n       int    rz =5      receiver depth\n       float  s0 =      shot origin\n       int    seislet  =0       if 0, no seislet regularization; if 1, seislet\n              regularization\n       string seislet_type =      [haar, linear, biorthogonal]\n       float  sigma1 =-1      smoothing kernel radius moving step in z\n       float  sigma2 =-1      smoothing kernel radius moving step in x\n       int    sz =5      source depth\n       int    tangent =0      if 1, calculate prediction corrector\n       float  v1 =0.       lower limit of estimated velocity\n       float  v2 =10.       upper limit of estimated velocity\n       bool   verb =n [y/n]     verbosity flag\n       int    waterz =51      water layer depth\n       float  woff1 =acpar->r0      window data residual: rmin\n       float  woff2 =acpar->r0+(acpar->nr-1)*acpar->dr      window data resid‐\n              ual: rmax\n       float  wt1 =acpar->t0      window data residual: tmin\n       float  wt2  =acpar->t0+(acpar->nt-1)*acpar->dt       window data resid‐\n              ual: tmax\nSOURCE\n       user/zhiguang/Mmpisfwi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmpisfwi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpisglrrtm2-Tuple{}","page":"Home","title":"Madagascar.sfmpisglrrtm2","text":"sfmpisglrrtm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpisglrrtm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpisglrrtm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpisglrrtm2(1)              Madagascar Manuals              sfmpisglrrtm2(1)\n\nNAME\n       sfmpisglrrtm2  -  Paralleled stagger-grid lowrank RTM modified based on\n       sfsglfdrtm2 (serial program)\n\nSYNOPSIS\n       sfmpisglrrtm2  img2=Fimg2.rsf  fvel=Ffvel.rsf  fden=Ffden.rsf  bvel=Fb‐\n       vel.rsf      bden=Fbden.rsf      record=Frcd.rsf     tmpfwf=Ftmpfwf.rsf\n       tmpbwf=Ftmpbwf.rsf  Gx=FGx.rsf  Gz=FGz.rsf  sxx=Fsxx.rsf   sxz=Fsxz.rsf\n       szx=Fszx.rsf szz=Fszz.rsf verb=y wantrecord=n wantwf=n onlyrecord=n sr‐\n       cdecay=y srcrange=3 srctrunc=0.2 srcalpha=0.5 pmlsize=30 nfd= pmld0=200\n       shtnmb=  shtinv=  shtbgn=0  snapturn=1 ginv=1 wfinv=1 spz=6 gp=0 ntau=1\n       dtau=wfdt tau0=0\n\nPARAMETERS\n       file   Gx =      auxiliary input file name\n       file   Gz =      auxiliary input file name\n       file   bden =      auxiliary input file name\n       file   bvel =      auxiliary input file name\n       float  dtau =wfdt ®\n       file   fden =      auxiliary input file name\n       file   fvel =      auxiliary input file name\n       int    ginv =1 ®\n       int    gp =0 ®\n       file   img2 =      auxiliary output file name\n       int    nfd = ®\n       int    ntau =1 ®\n       bool   onlyrecord =n [y/n]\n       float  pmld0 =200 ®\n       int    pmlsize =30 ®\n       file   record =      auxiliary input file name\n       int    shtbgn =0 ®\n       int    shtinv = ®\n       int    shtnmb = ®\n       int    snapturn =1 ®\n       int    spz =6 ®\n       float  srcalpha =0.5 ®\n       bool   srcdecay =y [y/n]\n       int    srcrange =3 ®\n       float  srctrunc =0.2 ®\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       float  tau0 =0 ®\n       file   tmpbwf =      auxiliary output file name\n       file   tmpfwf =      auxiliary output file name\n       bool   verb =y [y/n]\n       bool   wantrecord =n [y/n]\n       bool   wantwf =n [y/n]\n       int    wfinv =1 ®\nSOURCE\n       user/zhiguang/Mmpisglrrtm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfmpisglrrtm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpistack-Tuple{}","page":"Home","title":"Madagascar.sfmpistack","text":"sfmpistack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpistack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpistack. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpistack(1)                 Madagascar Manuals                 sfmpistack(1)\n\nNAME\n       sfmpistack - stacks rsf files of the same dimensionality using mpi\n\nSYNOPSIS\n       sfmpistack mode=0 verb=n seq=n nf= jf=1 of=0 shots= prefix= oname=\n\nCOMMENTS\n       Mode specifies whether to add, multiply, divide or subtract.\n\n       mode=0 - add mode=1 - multiply\n\n       If useprefix is set, then:\n\n       assume that files are commonly named sequentially, e.g.:\n\n       File001.rsf File002.rsf File003.rsf ...  FileN.rsf\n\n       Such  that  all files can be represented as a prefix, which is a printf\n       like statement that will be evaluated for all files to be included in a\n       range.\n\n       For the above example the prefix would be:\n\n       prefix=\"File%03d.rsf\"\n\n       The  nf,  jf,  and of parameters specify a range of numbers to evaluate\n       the prefix for, giving the program filenames to be used for summing to‐\n       gether.  For example:\n\n       nf=10,of=0,jf=1   -->   (0,1,2,3,4,5,6,7,8,9,10)   nf=10,of=5,jf=2  -->\n       (5,7,9,11,13,15,17,19,21,23)\n\n       If there are more files than processes, then this program  will  subdi‐\n       vide  the  files  onto various processes, and run multiple rounds until\n       everything is done.\n\n       This program does not care about dimensionality!  It treats every  file\n       as  a  1D array and writes out a 1D array, and then modifies the header\n       to match the input file size.\n\nPARAMETERS\n       int    jf =1      delta between files\n       int    mode =0      operation for stack\n       int    nf =      number of files to stack\n       int    of =0      origin of files\n       string oname =      name of output file\n       string prefix =      printf like prefix (printf like prefix)\n       bool   seq =n [y/n]     not sequentially ordered files\n       string shots = ®\n       bool   verb =n [y/n]\nSOURCE\n       user/cwp/Mmpistack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmpistack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmpitransp-Tuple{}","page":"Home","title":"Madagascar.sfmpitransp","text":"sfmpitransp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmpitransp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmpitransp. See ?m8r for examples.\n\nRSF Documentation\n\nsfmpitransp(1)                Madagascar Manuals                sfmpitransp(1)\n\nNAME\n       sfmpitransp - Large rectangular matrix in-place transpose with MPI\n\nSYNOPSIS\n       sfmpitransp indat=Fin.rsf transp=Fout.rsf\n\nPARAMETERS\n       file   indat =      auxiliary input file name\n       file   transp =      auxiliary output file name\nSOURCE\n       user/hwang/Mmpitransp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfmpitransp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmqrbf-Tuple{}","page":"Home","title":"Madagascar.sfmqrbf","text":"sfmqrbf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmqrbf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmqrbf. See ?m8r for examples.\n\nRSF Documentation\n\nsfmqrbf(1)                    Madagascar Manuals                    sfmqrbf(1)\n\nNAME\n       sfmqrbf -\n\nSYNOPSIS\n       sfmqrbf  <  cubea.rsf > rbf_out.rsf < othera.rsf xl= il= eps= boundary=\n       other=\n\nCOMMENTS\n       Inverse Multiquadratic Radial Basis Function\n\n       1/sqrt(1 + (eps*r)^2) where r is distance from source\n\nPARAMETERS\n       int    boundary =      Scalar factor\n       float  eps =      Scalar factor\n       int    il =      n3 location of source\n       string other =      Boundary map\n       int    xl =      n2 location of source\nSOURCE\n       user/sbader/Mmqrbf.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmqrbf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmshots-Tuple{}","page":"Home","title":"Madagascar.sfmshots","text":"sfmshots(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmshots on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmshots. See ?m8r for examples.\n\nRSF Documentation\n\nsfmshots(1)                   Madagascar Manuals                   sfmshots(1)\n\nNAME\n       sfmshots  -  2-D  prestack forward modeling using sponge ABC using 4-th\n       order FD\n\nSYNOPSIS\n       sfmshots < vinit.rsf > shots.rsf amp=1000 fm=10 nb=30 dt= nt=  ns=  ng=\n       jsx=  jsz=0  jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=n mute=n\n       vmute=1500 tdmute=2.0/(fm*dt)\n\nCOMMENTS\n       NB: prepare high quality prestack seismic data for LSRTM  and  FWI  Top\n       boundary is free surface (no ABC applied)!\n\nPARAMETERS\n       float  amp =1000      maximum amplitude of ricker\n       bool   csdgather =n [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =10      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       bool   mute =n [y/n]     if yes, muting the direct arrivals\n       int    nb =30      thickness of sponge ABC\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       int    tdmute =2.0/(fm*dt)      number of deleyed time samples to mute\n       float  vmute =1500      muting velocity to remove  the  low-freq  arti‐\n              facts, unit=m/s\nSOURCE\n       user/pyang/Mmshots.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmshots(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmsmiss-Tuple{}","page":"Home","title":"Madagascar.sfmsmiss","text":"sfmsmiss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmsmiss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmsmiss. See ?m8r for examples.\n\nRSF Documentation\n\nsfmsmiss(1)                   Madagascar Manuals                   sfmsmiss(1)\n\nNAME\n       sfmsmiss - Multiscale missing data interpolation (N-dimensional).\n\nSYNOPSIS\n       sfmsmiss < in.rsf filt=filt.rsf > out.rsf mask=mask.rsf niter=100 lag=\n\nPARAMETERS\n       file   filt =      auxiliary input file name\n       string lag =      optional input file with filter lags\n       string mask  =       optional input mask file for known data (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\nSOURCE\n       user/gee/Mmsmiss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmsmiss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmspef-Tuple{}","page":"Home","title":"Madagascar.sfmspef","text":"sfmspef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmspef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmspef. See ?m8r for examples.\n\nRSF Documentation\n\nsfmspef(1)                    Madagascar Manuals                    sfmspef(1)\n\nNAME\n       sfmspef - Multi-scale PEF estimation.\n\nSYNOPSIS\n       sfmspef  <  in.rsf  > pef.rsf maskin=mask.rsf a= center= gap= jump= ns=\n       niter=nh*2 lag= maskout=\n\nPARAMETERS\n       ints   a =       [dim]\n       ints   center =       [dim]\n       ints   gap =       [dim]\n       ints   jump =       [ns]\n       string lag =      output file for filter lags\n       string maskin =      optional input mask  file  (auxiliary  input  file\n              name)\n       string maskout =      optional output mask file\n       int    niter =nh*2 ®\n       int    ns =      number of scales\nSOURCE\n       user/gee/Mmspef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmspef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmtm-Tuple{}","page":"Home","title":"Madagascar.sfmtm","text":"sfmtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmtm. See ?m8r for examples.\n\nRSF Documentation\n\nsfmtm(1)                      Madagascar Manuals                      sfmtm(1)\n\nNAME\n       sfmtm - 1-D and 2-D modified-trimmed-mean (MTM) filtering.\n\nSYNOPSIS\n       sfmtm < in.rsf > out.rsf nfw1= nfw2=1 pclip= boundary=n verb=n type=\n\nCOMMENTS\n       Also  called  range-trimmed-mean  filter  1D filter (nfw2=1); 2D filter\n       (otherwise) median filter (pclip=0.); mean filter (pclip=100.)\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw1 =      filter-window length in n1 direction  (positive  and\n              odd integer)\n       int    nfw2 =1      filter-window length in n2 direction (default=1, 1D\n              case)\n       float  pclip =      0.0 <= pclip <= 100.0:  median  filter  (pclip=0.);\n              mean filter (pclip=100.)\n       string type  =      [rectangular,cross] 2-D window type, the default is\n              rectangular\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfmtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmtres-Tuple{}","page":"Home","title":"Madagascar.sfmtres","text":"sfmtres(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmtres on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmtres. See ?m8r for examples.\n\nRSF Documentation\n\nsfmtres(1)                    Madagascar Manuals                    sfmtres(1)\n\nNAME\n       sfmtres - Calculate apparent resistivity and phase of MT data.\n\nSYNOPSIS\n       sfmtres  <  in.rsf Ey=Ey.rsf Hx=Hx.rsf Hy=Hy.rsf > out.rsf opt=y comp=y\n       verb=n phase=n\n\nPARAMETERS\n       file   Ey =      auxiliary input file name\n       file   Hx =      auxiliary input file name\n       file   Hy =      auxiliary input file name\n       bool   comp =y [y/n]     component selection\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       bool   phase =n [y/n]     if y, calculate apparent resistivity,  other‐\n              wise calculate phase\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmtres.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmtres(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmul-Tuple{}","page":"Home","title":"Madagascar.sfmul","text":"sfmul(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmul on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmul. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmulawefd2d-Tuple{}","page":"Home","title":"Madagascar.sfmulawefd2d","text":"sfmulawefd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmulawefd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmulawefd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmulawefd2d(1)               Madagascar Manuals               sfmulawefd2d(1)\n\nNAME\n       sfmulawefd2d  -  2D  multisource  acoustic  time-domain FD modeling for\n       testing\n\nSYNOPSIS\n       sfmulawefd2d  <  Fwav.rsf  vel=Fvel.rsf  sou1=Fsou1.rsf  sou2=Fsou2.rsf\n       rec=Frec.rsf  > Fdat.rsf wfl=Fwfl.rsf den=Fden.rsf verb=n snap=n free=n\n       dabc=n cden=n jdata=1 jsnap=nt nqz=sf_n(az)  nqx=sf_n(ax)  oqz=sf_o(az)\n       oqx=sf_o(ax)\n\nCOMMENTS\n       4th  order  in space, 2nd order in time. Absorbing boundary conditions.\n       Invisible parameter due to self-doc parsing bug: nb=[2]  Boundary  pad‐\n       ding in grid points\n\nPARAMETERS\n       bool   cden =n [y/n]     Constant density\n       bool   dabc =n [y/n]     Absorbing BC\n       file   den =      auxiliary input file name\n       bool   free =n [y/n]     Free surface flag\n       int    jdata =1      # of t steps at which to save receiver data\n       int    jsnap =nt      # of t steps at which to save wavefield\n       int    nqx =sf_n(ax)      Saved wfld window nx\n       int    nqz =sf_n(az)      Saved wfld window nz\n       float  oqx =sf_o(ax)      Saved wfld window ox\n       float  oqz =sf_o(az)      Saved wfld window oz\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     Wavefield snapshots flag\n       file   sou1 =      auxiliary input file name\n       file   sou2 =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/chenyk/Mmulawefd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmulawefd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmulticheck-Tuple{}","page":"Home","title":"Madagascar.sfmulticheck","text":"sfmulticheck(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmulticheck on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmulticheck. See ?m8r for examples.\n\nRSF Documentation\n\nsfmulticheck(1)               Madagascar Manuals               sfmulticheck(1)\n\nNAME\n       sfmulticheck  - Check whether all values in a dataset are a multiple of\n       a factor or not\n\nSYNOPSIS\n       sfmulticheck < in.rsf i_fac=\n\nPARAMETERS\n       int    i_fac = ®\nSOURCE\n       user/ivlad/Mmulticheck.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfmulticheck(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmultiple-Tuple{}","page":"Home","title":"Madagascar.sfmultiple","text":"sfmultiple(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmultiple on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmultiple. See ?m8r for examples.\n\nRSF Documentation\n\nsfmultiple(1)                 Madagascar Manuals                 sfmultiple(1)\n\nNAME\n       sfmultiple - 2-D shot gather multiple prediction (SRMP)\n\nSYNOPSIS\n       sfmultiple < in.rsf > out.rsf dif=dif.rsf verb=n stack=n both=n jumpo=1\n       jumps=1\n\nCOMMENTS\n       The axes in the input are {offset,shot,frequency} The axes in the  out‐\n       put  are  {prediction(if  stack=n),offset,shot,frequency}  Requirement:\n       offset interval = shot interval\n\nPARAMETERS\n       bool   both =n [y/n]     receiver flag, if y, receiver with both sides\n       string dif =      auxiliary input file name\n       int    jumpo =1      jump in offset dimension, only for stack=n\n       int    jumps =1      jump in shot dimension, only for stack=n\n       bool   stack =n [y/n]     stack flag, if y, no common multiple gather\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mmultiple.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmultiple(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmultmask-Tuple{}","page":"Home","title":"Madagascar.sfmultmask","text":"sfmultmask(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmultmask on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmultmask. See ?m8r for examples.\n\nRSF Documentation\n\nsfmultmask(1)                 Madagascar Manuals                 sfmultmask(1)\n\nNAME\n       sfmultmask - Create a data mask using multiple muting curve from MRKE\n\nSYNOPSIS\n       sfmultmask  <  in.rsf  mask=mask.rsf  >  out.rsf  start=n smooth=n nw=0\n       shift=n verb=n\n\nPARAMETERS\n       file   mask =      auxiliary input file name\n       int    nw =0      smoothing window length must be odd\n       bool   shift =n [y/n]     shift\n       bool   smooth =n [y/n]     smoothed mask [raised cosine]\n       bool   start =n [y/n]     mask from starting sample to index  value  in\n              mask\n       bool   verb =n [y/n]\nSOURCE\n       user/lcasasan/Mmultmask.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmultmask(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmute-Tuple{}","page":"Home","title":"Madagascar.sfmute","text":"sfmute(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmute on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmute. See ?m8r for examples.\n\nRSF Documentation\n\nsfmute(1)                     Madagascar Manuals                     sfmute(1)\n\nNAME\n       sfmute - Mute a triangle region\n\nSYNOPSIS\n       sfmute < in.rsf > out.rsf t1=t0 v1=v0+(n2-1)*dv band=20*dt\n\nPARAMETERS\n       float  band =20*dt      start time\n       float  t1 =t0      start time\n       float  v1 =v0+(n2-1)*dv      end velocity\nSOURCE\n       user/dmerzlikin/Mmute.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmute(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmutter-Tuple{}","page":"Home","title":"Madagascar.sfmutter","text":"sfmutter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmutter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmutter. See ?m8r for examples.\n\nRSF Documentation\n\nsfmutter(1)                   Madagascar Manuals                   sfmutter(1)\n\nNAME\n       sfmutter - Muting.\n\nSYNOPSIS\n       sfmutter  <  in.rsf  >  out.rsf offset=offset.rsf half=y nan=n tp=0.150\n       t0=0. v0=1.45 slope0=1./v0 slopep=slope0 x0=0. abs=y inner=n hyper=n\n\nCOMMENTS\n       Data is smoothly weighted inside the mute zone.  The weight is zero for\n       t  <        (x-x0)  *  slope0 The weight is one  for t >  tp + (x-x0) *\n       slopep\n\n       The signs are reversed for inner=y.\n\n       July 2015 program of  the  month:  http://ahay.org/blog/2015/07/10/pro‐\n       gram-of-the-month-sfmutter/\n\nPARAMETERS\n       bool   abs =y [y/n]     if y, use absolute value |x-x0|\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       bool   hyper =n [y/n]     if y, do hyperbolic mute\n       bool   inner =n [y/n]     if y, do inner muter\n       bool   nan =n [y/n]     if y, put nans instead of zeros\n       string offset =      auxiliary input file name\n       float  slope0 =1./v0      slope\n       float  slopep =slope0      end slope\n       float  t0 =0.       starting time\n       float  tp =0.150      end time\n       float  v0 =1.45      velocity\n       float  x0 =0.       starting space\nUSED IN\n       bei/dpmv/krchdmo\n       bei/sg/denmark\n       bei/vela/vscan\n       bei/wvs/vscan\n       data/alaska/line31-81-m8r\nSOURCE\n       system/generic/Mmutter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmutter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmutter3-Tuple{}","page":"Home","title":"Madagascar.sfmutter3","text":"sfmutter3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmutter3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmutter3. See ?m8r for examples.\n\nRSF Documentation\n\nsfmutter3(1)                  Madagascar Manuals                  sfmutter3(1)\n\nNAME\n       sfmutter3 - 3D muting of scalor or vector data\n\nSYNOPSIS\n       sfmutter3  <  Finp.rsf sou=Fsou.rsf rec=Frec.rsf > Fout.rsf verb=n t0=0\n       velw=1.5 eps=1000.\n\nPARAMETERS\n       float  eps =1000.       decay parameter\n       file   rec =      auxiliary input file name\n       file   sou =      auxiliary input file name\n       float  t0 =0      source delay time\n       float  velw =1.5      water velocity\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jsun/Mmutter3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfmutter3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmv-Tuple{}","page":"Home","title":"Madagascar.sfmv","text":"sfmv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmv. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmvo-Tuple{}","page":"Home","title":"Madagascar.sfmvo","text":"sfmvo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmvo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmvo. See ?m8r for examples.\n\nRSF Documentation\n\nsfmvo(1)                      Madagascar Manuals                      sfmvo(1)\n\nNAME\n       sfmvo - Calculate MVO and PVO curve of CSEM data.\n\nSYNOPSIS\n       sfmvo < in.rsf > out.rsf opt=y log=y mvo=y f=0.08 nnw=1600 n=1\n\nPARAMETERS\n       float  f =0.08      calculate frequency\n       bool   log =y [y/n]     if y, calculate logarithm of MVO\n       bool   mvo =y [y/n]     if y, MVO curve; otherwise, PVO curve\n       int    n =1      number of window period\n       int    nnw =1600      sample window\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\nSOURCE\n       user/yliu/Mmvo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfmvo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmvo1-Tuple{}","page":"Home","title":"Madagascar.sfmvo1","text":"sfmvo1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmvo1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmvo1. See ?m8r for examples.\n\nRSF Documentation\n\nsfmvo1(1)                     Madagascar Manuals                     sfmvo1(1)\n\nNAME\n       sfmvo1 - Calculate MVO and PVO curve of CSEM data (another version).\n\nSYNOPSIS\n       sfmvo1 < in.rsf > out.rsf opt=y log=y mvo=y f=0.08 nnw=1600 n=1\n\nPARAMETERS\n       float  f =0.08      calculate frequency\n       bool   log =y [y/n]     if y, calculate logarithm of MVO\n       bool   mvo =y [y/n]     if y, MVO curve; otherwise, PVO curve\n       int    n =1      number of window period\n       int    nnw =1600      sample window\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\nSOURCE\n       user/yliu/Mmvo1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfmvo1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmwni2d-Tuple{}","page":"Home","title":"Madagascar.sfmwni2d","text":"sfmwni2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmwni2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmwni2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfmwni2d(1)                   Madagascar Manuals                   sfmwni2d(1)\n\nNAME\n       sfmwni2d - 2-D bandlimited minimum weighted-norm interpolation (MWNI)\n\nSYNOPSIS\n       sfmwni2d   <   Fin.rsf   mask=Fmask.rsf  >  Fout.rsf  verb=n  niter=100\n       tol=1.0e-6\n\nCOMMENTS\n       implemented with conjugate gradient least squares (CGLS) method\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    niter =100      total number iterations\n       float  tol =1.0e-6      iteration tolerance\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mmwni2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfmwni2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmyradon2-Tuple{}","page":"Home","title":"Madagascar.sfmyradon2","text":"sfmyradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmyradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmyradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfmyradon2(1)                 Madagascar Manuals                 sfmyradon2(1)\n\nNAME\n       sfmyradon2  -  Linear/parabolic radon transform frequency domain imple‐\n       mentation\n\nSYNOPSIS\n       sfmyradon2 < in.rsf  >  out.rsf  adj=y  inv=n  np=  dp=  p0=  niter=100\n       eps=0.01 nx= ox= dx= parab=n x0=1. invmode=\n\nCOMMENTS\n       Also  referred to as high-resolution radon transform Note: I borrowed a\n       lot from /system/seismic/radon+Mradon.c. The distinction:  I  am  using\n       FFTW because I am inexperienced in invoking kiss_fft.\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, perform adjoint operation\n       float  dp =      p sampling (if adj=y)\n       float  dx =      sampling interval in x\n       float  eps =0.01      regularization parameter\n       bool   inv =n [y/n]     if y, perform inverse operation\n       string invmode =      inverse method: 'ls' if least-squares; 'toeplitz'\n              if use FFT\n       int    niter =100      number of CGLS iterations\n       int    np =      number of p values (if adj=y)\n       int    nx =      number of offsets (if adj=n)\n       float  ox =      x origin\n       float  p0 =      p origin (if adj=y)\n       bool   parab =n [y/n]     if y, parabolic Radon transform\n       float  x0 =1.       reference offset\nSOURCE\n       user/pyang/Mmyradon2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmyradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmysnr-Tuple{}","page":"Home","title":"Madagascar.sfmysnr","text":"sfmysnr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmysnr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmysnr. See ?m8r for examples.\n\nRSF Documentation\n\nsfmysnr(1)                    Madagascar Manuals                    sfmysnr(1)\n\nNAME\n       sfmysnr - print out signal-to-noise ratio in decibel (dB)\n\nSYNOPSIS\n       sfmysnr < in.rsf ref=ref.rsf > out.rsf\n\nPARAMETERS\n       file   ref =      auxiliary input file name\nSOURCE\n       user/pyang/Mmysnr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfmysnr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfmythresh-Tuple{}","page":"Home","title":"Madagascar.sfmythresh","text":"sfmythresh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfmythresh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfmythresh. See ?m8r for examples.\n\nRSF Documentation\n\nsfmythresh(1)                 Madagascar Manuals                 sfmythresh(1)\n\nNAME\n       sfmythresh - Generalized thresholding operator\n\nSYNOPSIS\n       sfmythresh < in.rsf > out.rsf pclip=99. p=0.35 mode=\n\nPARAMETERS\n       string mode =      thresholding mode='hard', 'soft','pthresh' or 'exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',   generalized   quasi-p;   'exp',  exponential\n              shrinkage\n       float  p =0.35      norm=p, where 0<p<=1\n       float  pclip =99.       percentage to clip\nSOURCE\n       user/pyang/Mmythresh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfmythresh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnconv-Tuple{}","page":"Home","title":"Madagascar.sfnconv","text":"sfnconv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnconv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnconv. See ?m8r for examples.\n\nRSF Documentation\n\nsfnconv(1)                    Madagascar Manuals                    sfnconv(1)\n\nNAME\n       sfnconv - Non-stationary convolution\n\nSYNOPSIS\n       sfnconv < inp.rsf filt=flt.rsf > out.rsf lag=(ntau+1)/2 adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   filt =      auxiliary input file name\n       int    lag =(ntau+1)/2      filter lag\nSOURCE\n       user/fomels/Mnconv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfnconv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfndecon-Tuple{}","page":"Home","title":"Madagascar.sfndecon","text":"sfndecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfndecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfndecon. See ?m8r for examples.\n\nRSF Documentation\n\nsfndecon(1)                   Madagascar Manuals                   sfndecon(1)\n\nNAME\n       sfndecon - Random noise removal by nonstationary deconvolution\n\nSYNOPSIS\n       sfndecon  <  inp.rsf  >  out.rsf  filt=fil.rsf  weight=wht.rsf eps=1.0f\n       niter=10\n\nPARAMETERS\n       float  eps =1.0f      regularization parameter\n       file   filt =      auxiliary input file name\n       int    niter =10      number of iterations\n       string weight =      auxiliary input file name\nSOURCE\n       user/yliu/Mndecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfndecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnderiv-Tuple{}","page":"Home","title":"Madagascar.sfnderiv","text":"sfnderiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnderiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnderiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfnderiv(1)                   Madagascar Manuals                   sfnderiv(1)\n\nNAME\n       sfnderiv -\n\nSYNOPSIS\n       sfnderiv < Fin.rsf > Fout.rsf order=1 length=5 scale=y axis=1\n\nCOMMENTS\n       This  program  implements Fornberg, 1988 paper for digital differentia‐\n       tors of arbitrary order.\n\n       So, it computes first, second, n derivative along axis 1,2 or 3.\n\nPARAMETERS\n       int    axis =1      apply differentiator along axis,  default  is  fast\n              axis\n       int    length  =5       filter  length, the lengthier the accurate, but\n              also gets costlier\n       int    order =1      order of the derivative, default first derivative\n       bool   scale =y [y/n]     scales by 1/d^order\nSOURCE\n       user/ediazp/Mnderiv.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfnderiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfndix-Tuple{}","page":"Home","title":"Madagascar.sfndix","text":"sfndix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfndix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfndix. See ?m8r for examples.\n\nRSF Documentation\n\nsfndix(1)                     Madagascar Manuals                     sfndix(1)\n\nNAME\n       sfndix - Convert RMS to interval velocity using LS and shaping regular‐\n       ization with non-stationary smoothing\n\nSYNOPSIS\n       sfndix  <  vrms.rsf  >  vint.rsf   weight=weight.rsf   vrmsout=vout.rsf\n       niter=100 rect#= shift#=\n\nPARAMETERS\n       int    niter =100      maximum number of iterations\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\n       string vrmsout =      optionally, output predicted vrms (auxiliary out‐\n              put file name)\n       string weight =      auxiliary input file name\nSOURCE\n       user/reem/Mndix.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfndix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfndsmooth-Tuple{}","page":"Home","title":"Madagascar.sfndsmooth","text":"sfndsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfndsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfndsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfndsmooth(1)                 Madagascar Manuals                 sfndsmooth(1)\n\nNAME\n       sfndsmooth - N-D non-stationary triangle smoothing derivative.\n\nSYNOPSIS\n       sfndsmooth < in.rsf > out.rsf ider=1 repeat=1 nderiv=6 rect#= shift#=\n\nPARAMETERS\n       int    ider =1      direction of the derivative (0 means no derivative)\n       int    nderiv =6      derivative filter accuracy\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       int    repeat =1      repeat smoothing several times\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\nSOURCE\n       user/reem/Mndsmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfndsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnfmiss-Tuple{}","page":"Home","title":"Madagascar.sfnfmiss","text":"sfnfmiss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnfmiss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnfmiss. See ?m8r for examples.\n\nRSF Documentation\n\nsfnfmiss(1)                   Madagascar Manuals                   sfnfmiss(1)\n\nNAME\n       sfnfmiss - Missing data interpolation in freq domain.\n\nSYNOPSIS\n       sfnfmiss  < in.rsf > out.rsf filt=filt.rsf mask=mask.rsf exact=y verb=n\n       niter=n1 ty=\n\nPARAMETERS\n       bool   exact =y [y/n]     If y, preserve the known data values\n       file   filt =      auxiliary input file name\n       string mask =      optional input mask file for known  data  (auxiliary\n              input file name)\n       int    niter =n1      number of iterations\n       string ty =      Prediction type: all=backward+forward\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/gchliu/Mnfmiss.c\nVERSION\n       4.2-git Mmiss1.c 7107 2011-04-10 02:04:14Z ivlad\n\nMadagascar                         JULY 2024                       sfnfmiss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnhcrssurf-Tuple{}","page":"Home","title":"Madagascar.sfnhcrssurf","text":"sfnhcrssurf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnhcrssurf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnhcrssurf. See ?m8r for examples.\n\nRSF Documentation\n\nsfnhcrssurf(1)                Madagascar Manuals                sfnhcrssurf(1)\n\nNAME\n       sfnhcrssurf - Version 1.0 - Build Non-Hyperbolic CRS approximation sur‐\n       face giver RN, RNIP and BETA parameters.\n\nSYNOPSIS\n       sfnhcrssurf < in.rsf param=par.rsf > out.rsf m0=0 v0=1.5 t0=1.5 verb=0\n\nCOMMENTS\n       Programer: Rodolfo A. C. Neves (Dirack) 19/09/2019\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       float  m0 =0      central CMP of the approximation (Km)\n       file   param =      auxiliary input file name\n       float  t0 =1.5      Normal ray traveltime (s)\n       float  v0 =1.5      Near surface velocity (Km/s)\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mnhcrssurf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfnhcrssurf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnhelicon-Tuple{}","page":"Home","title":"Madagascar.sfnhelicon","text":"sfnhelicon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnhelicon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnhelicon. See ?m8r for examples.\n\nRSF Documentation\n\nsfnhelicon(1)                 Madagascar Manuals                 sfnhelicon(1)\n\nNAME\n       sfnhelicon - Non-stationary helix convolution and deconvolution.\n\nSYNOPSIS\n       sfnhelicon  <  in.rsf  >  out.rsf filt=filt.rsf nh=fnh.rsf pch=fpch.rsf\n       adj=n div=n lag=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint operation\n       bool   div =n [y/n]     if y, do inverse operation (deconvolution)\n       file   filt =      auxiliary input file name\n       string lag = ®\n       string nh =      auxiliary input file name\n       string pch =      auxiliary input file name\nSOURCE\n       user/gee/Mnhelicon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnhelicon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnlm1-Tuple{}","page":"Home","title":"Madagascar.sfnlm1","text":"sfnlm1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnlm1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnlm1. See ?m8r for examples.\n\nRSF Documentation\n\nsfnlm1(1)                     Madagascar Manuals                     sfnlm1(1)\n\nNAME\n       sfnlm1 - 1D non-local median filtering.\n\nSYNOPSIS\n       sfnlm1 < in.rsf > out.rsf t=5 f=2 h=0.5 boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    f =2      radio of similarity window\n       float  h =0.5      degree of filtering\n       int    t =5      radio of search window\nSOURCE\n       user/chenyk/Mnlm1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnlm1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnlm2-Tuple{}","page":"Home","title":"Madagascar.sfnlm2","text":"sfnlm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnlm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnlm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfnlm2(1)                     Madagascar Manuals                     sfnlm2(1)\n\nNAME\n       sfnlm2 - 2D non-local median filtering.\n\nSYNOPSIS\n       sfnlm2 < in.rsf > out.rsf t1=5 t2=5 f1=2 f2=2 h=0.5 boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    f1 =2      radio of similarity window\n       int    f2 =2      radio of similarity window\n       float  h =0.5      degree of filtering\n       int    t1 =5      radio of search window\n       int    t2 =5      radio of search window\nSOURCE\n       user/chenyk/Mnlm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnlm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo-Tuple{}","page":"Home","title":"Madagascar.sfnmo","text":"sfnmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo(1)                      Madagascar Manuals                      sfnmo(1)\n\nNAME\n       sfnmo - Normal moveout.\n\nSYNOPSIS\n       sfnmo  < cmp.rsf velocity=velocity.rsf > nmod.rsf s=het.rsf offset=off‐\n       set.rsf  mask=msk.rsf  half=y  str=0.5  mute=12   CDPtype=   slowness=n\n       squared=n h0=0. extend=4 a=\n\nCOMMENTS\n       Compatible with sfvscan.\n\n       April  2013  program of the month: http://ahay.org/blog/2013/04/08/pro‐\n       gram-of-the-month-sfnmo/\n\nPARAMETERS\n       int    CDPtype = ®\n       string a = ®\n       int    extend =4      trace extension\n       float  h0 =0.       reference offset\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       string mask =      auxiliary input file name\n       int    mute =12      mute zone\n       string offset =      auxiliary input file name\n       string s =      auxiliary input file name\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  str =0.5      maximum stretch allowed\n       file   velocity =      auxiliary input file name\nUSED IN\n       bei/dpmv/krchdmo\n       bei/vela/strat\n       bei/vela/vscan\n       bei/wvs/vscan\n       data/alaska/line31-81-m8r\nSOURCE\n       system/seismic/Mnmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfnmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3-Tuple{}","page":"Home","title":"Madagascar.sfnmo3","text":"sfnmo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3(1)                     Madagascar Manuals                     sfnmo3(1)\n\nNAME\n       sfnmo3 - 3-D Normal moveout.\n\nSYNOPSIS\n       sfnmo3  <  cmp.rsf > nmod.rsf velocity=vel.rsf offset=offset.rsf half=y\n       eps=0.01 mute=12 extend=8\n\nCOMMENTS\n       input data has gathers along *4th* axis; velocity file  contains  slow‐\n       ness  squared  with  n2=3  (wx,wy,wxy); offset file contains x,y offset\n       pairs for input data\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half =y [y/n]     if y, the second and third axes are  half-off‐\n              set instead of full offset\n       int    mute =12      mute zone\n       string offset =      auxiliary input file name\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mnmo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnmo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3_ort-Tuple{}","page":"Home","title":"Madagascar.sfnmo3_ort","text":"sfnmo3_ort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3_ort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3_ort. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3ort(1)                 Madagascar Manuals                 sfnmo3ort(1)\n\nNAME\n       sfnmo3_ort - 3-D Normal moveout using orthogonal parametrization\n\nSYNOPSIS\n       sfnmo3_ort  <  cmp.rsf  >  nmod.rsf  velocity=vel.rsf offset=offset.rsf\n       half=y eps=0.01 mute=12 extend=8\n\nCOMMENTS\n       input data has gathers along *4th* axis; velocity file  contains  slow‐\n       ness  squared with n2=3 (Wavg,Wcos,Wsin); offset file contains x,y off‐\n       set pairs for input data\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half =y [y/n]     if y, the second and third axes are  half-off‐\n              set instead of full offset\n       int    mute =12      mute zone\n       string offset =      auxiliary input file name\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mnmo3_ort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnmo3_ort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3gma_adj-Tuple{}","page":"Home","title":"Madagascar.sfnmo3gma_adj","text":"sfnmo3gma_adj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3gma_adj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3gma_adj. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3gmaadj(1)              Madagascar Manuals              sfnmo3gmaadj(1)\n\nNAME\n       sfnmo3gma_adj  -  Fwd-Adj  of  3D  NMO GMA for iterative LS coefficient\n       solve\n\nSYNOPSIS\n       sfnmo3gma_adj < inp.rsf  >  out.rsf  gather=gather.rsf  mod=inicoef.rsf\n       t0sq=t0sqf.rsf adj=y nw=16\n\nPARAMETERS\n       bool   adj =y [y/n]\n       file   gather =      auxiliary input file name\n       file   mod =      auxiliary input file name\n       int    nw =16      16 parameters of 3D GMA\n       file   t0sq =      auxiliary input file name\nSOURCE\n       system/seismic/Mnmo3gma_adj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfnmo3gma_adj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3gmafit-Tuple{}","page":"Home","title":"Madagascar.sfnmo3gmafit","text":"sfnmo3gmafit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3gmafit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3gmafit. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3gmafit(1)               Madagascar Manuals               sfnmo3gmafit(1)\n\nNAME\n       sfnmo3gmafit - 3D NMO GMA  linearized operator preparation for lsfit\n\nSYNOPSIS\n       sfnmo3gmafit  <  inp.rsf  coef=inicoef.rsf  >  out.rsf fit=fit.rsf off‐\n       setx=offsx.rsf offsety=offsy.rsf verb=n gather=n\n\nPARAMETERS\n       file   coef =      auxiliary input file name\n       file   fit =      auxiliary output file name\n       bool   gather =n [y/n]     Memory allocation\n       file   offsetx =      auxiliary input file name\n       file   offsety =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/zone/Mnmo3gmafit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfnmo3gmafit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3gmaprep-Tuple{}","page":"Home","title":"Madagascar.sfnmo3gmaprep","text":"sfnmo3gmaprep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3gmaprep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3gmaprep. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3gmaprep(1)              Madagascar Manuals              sfnmo3gmaprep(1)\n\nNAME\n       sfnmo3gmaprep - 3D NMO GMA  linearized operator preparation for lsfit\n\nSYNOPSIS\n       sfnmo3gmaprep < inp.rsf coef=inicoef.rsf > out.rsf fit=fit.rsf\n\nPARAMETERS\n       file   coef =      auxiliary input file name\n       file   fit =      auxiliary output file name\nSOURCE\n       user/zone/Mnmo3gmaprep.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfnmo3gmaprep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3mcmc-Tuple{}","page":"Home","title":"Madagascar.sfnmo3mcmc","text":"sfnmo3mcmc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3mcmc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3mcmc. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3mcmc(1)                 Madagascar Manuals                 sfnmo3mcmc(1)\n\nNAME\n       sfnmo3mcmc  - 3D NMO GMA MCMC inversion with Metropolis rule (Mosegaard\n       and Tarantola, 1995)\n\nSYNOPSIS\n       sfnmo3mcmc < inp.rsf t0sq=t0sqf.rsf rangecoef=rangecoeff.rsf >  out.rsf\n       seed=time(NULL) sigma=1.0 saveiter=20 prior=n nmodel=1000\n\nPARAMETERS\n       int    nmodel =1000      Get the number of MC models\n       bool   prior =n [y/n]     generate prior or posterior\n       file   rangecoef =      auxiliary input file name\n       int    saveiter =20      save state every iter\n       int    seed =time(NULL)      random seed\n       float  sigma =1.0      noise variance\n       file   t0sq =      auxiliary input file name\nSOURCE\n       user/zone/Mnmo3mcmc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnmo3mcmc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmo3mcmcspiral-Tuple{}","page":"Home","title":"Madagascar.sfnmo3mcmcspiral","text":"sfnmo3mcmcspiral(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmo3mcmcspiral on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmo3mcmcspiral. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmo3mcmcspiral(1)           Madagascar Manuals           sfnmo3mcmcspiral(1)\n\nNAME\n       sfnmo3mcmcspiral  -  3D NMO GMA MCMC inversion for spiral sorted gather\n       with Metropolis rule (Mosegaard and Tarantola, 1995)\n\nSYNOPSIS\n       sfnmo3mcmcspiral < inp.rsf t0sq=t0sqf.rsf rangecoef=rangecoeff.rsf off‐\n       setx=ofx.rsf   offsety=ofy.rsf   >  out.rsf  seed=time(NULL)  sigma=1.0\n       saveiter=20 prior=n rational=n nmodel=1000\n\nPARAMETERS\n       int    nmodel =1000      Get the number of MC models\n       file   offsetx =      auxiliary input file name\n       file   offsety =      auxiliary input file name\n       bool   prior =n [y/n]     generate prior or posterior\n       file   rangecoef =      auxiliary input file name\n       bool   rational =n [y/n]     use rational approximation form of GMA\n       int    saveiter =20      save state every iter\n       int    seed =time(NULL)      random seed\n       float  sigma =1.0      noise variance\n       file   t0sq =      auxiliary input file name\nSOURCE\n       user/zone/Mnmo3mcmcspiral.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfnmo3mcmcspiral(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmodips-Tuple{}","page":"Home","title":"Madagascar.sfnmodips","text":"sfnmodips(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmodips on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmodips. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmodips(1)                  Madagascar Manuals                  sfnmodips(1)\n\nNAME\n       sfnmodips - Slopes for constant-velocity normal moveout.\n\nSYNOPSIS\n       sfnmodips < cmp.rsf > dip.rsf offset=offset.rsf half=y nv= v0= dv= CDP‐\n       type= slowness=n squared=n h0=0. extend=4\n\nPARAMETERS\n       int    CDPtype = ®\n       float  dv =      step in velocity\n       int    extend =4      trace extension\n       float  h0 =0.       reference offset\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       int    nv =      number of velocities\n       string offset =      auxiliary input file name\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  v0 =      first velocity\nSOURCE\n       system/seismic/Mnmodips.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnmodips(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmostretch-Tuple{}","page":"Home","title":"Madagascar.sfnmostretch","text":"sfnmostretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmostretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmostretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmov-Tuple{}","page":"Home","title":"Madagascar.sfnmov","text":"sfnmov(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmov on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmov. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmov(1)                     Madagascar Manuals                     sfnmov(1)\n\nNAME\n       sfnmov  -  Least-squares  fitting  of  t^2-t_0^2 surfaces for isotropic\n       V_{nmo}.\n\nSYNOPSIS\n       sfnmov < inp.rsf > out.rsf\n\nSOURCE\n       system/seismic/Mnmov.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnmov(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmow-Tuple{}","page":"Home","title":"Madagascar.sfnmow","text":"sfnmow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmow. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmow(1)                     Madagascar Manuals                     sfnmow(1)\n\nNAME\n       sfnmow  -  Least-squares  fitting  of t^2-t_0^2 surfaces for elliptical\n       slowness matrix, W.\n\nSYNOPSIS\n       sfnmow < inp.rsf > out.rsf offset=offset.rsf half=y nw=3\n\nPARAMETERS\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       int    nw =3 ®\n       string offset  =       If  offset  file  is provided, it must be of the\n              form:(auxiliary input file name)\nSOURCE\n       system/seismic/Mnmow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnmow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmow_adj-Tuple{}","page":"Home","title":"Madagascar.sfnmow_adj","text":"sfnmow_adj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmow_adj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmow_adj. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmowadj(1)                 Madagascar Manuals                 sfnmowadj(1)\n\nNAME\n       sfnmow_adj - None\n\nSYNOPSIS\n       sfnmow_adj < inp.rsf > out.rsf gather=gather.rsf adj=n nw=3\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   gather =      auxiliary input file name\n       int    nw =3 ®\nSOURCE\n       system/seismic/Mnmow_adj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnmow_adj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmradon-Tuple{}","page":"Home","title":"Madagascar.sfnmradon","text":"sfnmradon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmradon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmradon. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmradon(1)                  Madagascar Manuals                  sfnmradon(1)\n\nNAME\n       sfnmradon - Nonstationary-matching Radon transform.\n\nSYNOPSIS\n       sfnmradon < in.rsf > out.rsf filt=fil.rsf weight=weight.rsf adj=n inv=n\n       verb=n np= dp= p0= nx= dx= ox= freq=y parab=n x0=1. rho=y anti=1. p1=0.\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, perform adjoint operation\n       float  anti =1.       antialiasing, only when freq=n\n       float  dp =      p sampling\n       float  dx =      x sampling\n       file   filt =      auxiliary input file name\n       bool   freq =y [y/n]     if y, parabolic Radon transform\n       bool   inv =n [y/n]     if y, perform inverse operation\n       int    np =      number of p values\n       int    nx =      number of x values\n       float  ox =      x origin\n       float  p0 =      p origin\n       float  p1 =0.       reference slope, only when freq=n\n       bool   parab =n [y/n]     if y, parabolic Radon  transform,  only  when\n              freq=y\n       bool   rho =y [y/n]     rho filtering, only when freq=n\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary input file name\n       float  x0 =1.       reference offset\nSOURCE\n       user/yliu/Mnmradon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnmradon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnmult-Tuple{}","page":"Home","title":"Madagascar.sfnmult","text":"sfnmult(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnmult on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnmult. See ?m8r for examples.\n\nRSF Documentation\n\nsfnmult(1)                    Madagascar Manuals                    sfnmult(1)\n\nNAME\n       sfnmult - Multiplication with nonstationary filter\n\nSYNOPSIS\n       sfnmult < inp.rsf > out.rsf filt=fil.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   filt =      auxiliary input file name\nSOURCE\n       user/yliu/Mnmult.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfnmult(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnnint-Tuple{}","page":"Home","title":"Madagascar.sfnnint","text":"sfnnint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnnint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnnint. See ?m8r for examples.\n\nRSF Documentation\n\nsfnnint(1)                    Madagascar Manuals                    sfnnint(1)\n\nNAME\n       sfnnint - Natural neighbor interpolation (2-D)\n\nSYNOPSIS\n       sfnnint  <  ord.rsf coord=coord.rsf > grid.rsf velocity=vel.rsf n1= n2=\n       d1= d2= o1=0. o2=0. order=2 vel=y dist=n voro=n repeat=1\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       float  d1 = ®\n       float  d2 =      sampling\n       bool   dist =n [y/n]     if output distance\n       int    n1 = ®\n       int    n2 =      dimensions\n       float  o1 =0.  ®\n       float  o2 =0.       origin\n       int    order =2 [1,2]     Accuracy order for distance calculation\n       int    repeat =1 ®\n       bool   vel =y [y/n]     if  y,  the  input  is  velocity;  n,  slowness\n              squared\n       string velocity =      auxiliary input file name\n       bool   voro =n [y/n]     if output Voronoi diagram\nSOURCE\n       user/fomels/Mnnint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfnnint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnnshape-Tuple{}","page":"Home","title":"Madagascar.sfnnshape","text":"sfnnshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnnshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnnshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfnnshape(1)                  Madagascar Manuals                  sfnnshape(1)\n\nNAME\n       sfnnshape  -  2-D  irregular data interpolation using natural neighbors\n       and shaping regularization.\n\nSYNOPSIS\n       sfnnshape < in.rsf > out.rsf  coord=coord.rsf  pattern=pattern.rsf  n1=\n       n2=  d1=1.  d2=1. o1=0. o2=0. niter=10 niter=niter rect1=1 rect2=1 nw=2\n       sym=n tol=1e-3\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       float  d1 =1.  ®\n       float  d2 =1.  ®\n       int    n1 = ®\n       int    n2 = ®\n       int    niter =niter      GMRES memory\n       int    nw =2      interpolator size\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       string pattern =      pattern file for output dimensions (auxiliary in‐\n              put file name)\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing regularization\n       bool   sym =n [y/n]     if y, use symmetric shaping\n       float  tol =1e-3      tolerance for stopping iteration\nSOURCE\n       user/fomels/Mnnshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnnshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnnshapet-Tuple{}","page":"Home","title":"Madagascar.sfnnshapet","text":"sfnnshapet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnnshapet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnnshapet. See ?m8r for examples.\n\nRSF Documentation\n\nsfnnshapet(1)                 Madagascar Manuals                 sfnnshapet(1)\n\nNAME\n       sfnnshapet  -  2-D irregular data interpolation of traces using natural\n       neighbors and shaping regularization.\n\nSYNOPSIS\n       sfnnshapet  <  in.rsf  >  out.rsf  coord=coord.rsf  pattern=pattern.rsf\n       weight=weight.rsf  n1= n2= d1=1. d2=1. o1=0. o2=0. niter=10 niter=niter\n       eps=1.0e-6 rect1=1 rect2=1 rect3=1 nw=2 sym=n tol=1e-3\n\nPARAMETERS\n       file   coord =      auxiliary input file name\n       float  d1 =1.  ®\n       float  d2 =1.  ®\n       float  eps =1.0e-6      division parameter\n       int    n1 = ®\n       int    n2 = ®\n       int    niter =niter      GMRES memory\n       int    nw =2      interpolator size\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       string pattern =      pattern file for output dimensions (auxiliary in‐\n              put file name)\n       int    rect1 =1 ®\n       int    rect2 =1 ®\n       int    rect3 =1      smoothing regularization\n       bool   sym =n [y/n]     if y, use symmetric shaping\n       float  tol =1e-3      tolerance for stopping iteration\n       string weight =      auxiliary input file name\nSOURCE\n       user/fomels/Mnnshapet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnnshapet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnoise-Tuple{}","page":"Home","title":"Madagascar.sfnoise","text":"sfnoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfnoise(1)                    Madagascar Manuals                    sfnoise(1)\n\nNAME\n       sfnoise - Add random noise to the data.\n\nSYNOPSIS\n       sfnoise  <  in.rsf  > out.rsf seed=time(NULL) type=y var= range= mean=0\n       rep=n\n\nCOMMENTS\n       July 2011 program of  the  month:  http://ahay.org/blog/2011/07/03/pro‐\n       gram-of-the-month-sfnoise/\n\nPARAMETERS\n       float  mean =0      noise mean\n       float  range =      noise range (default=1)\n       bool   rep =n [y/n]     if y, replace data with noise\n       int    seed =time(NULL) ®\n       bool   type =y [y/n]     noise distribution, y: normal, n: uniform\n       float  var =      noise variance\nUSED IN\n       bei/ft1/autocor\n       chen/test/xtime\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/generic/Mnoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfnoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnonloc-Tuple{}","page":"Home","title":"Madagascar.sfnonloc","text":"sfnonloc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnonloc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnonloc. See ?m8r for examples.\n\nRSF Documentation\n\nsfnonloc(1)                   Madagascar Manuals                   sfnonloc(1)\n\nNAME\n       sfnonloc - Non-local (Bilateral) smoothing.\n\nSYNOPSIS\n       sfnonloc < inp.rsf > out.rsf ns= bx= gauss=n repeat=1 ax=\n\nCOMMENTS\n       Tomasi,  C.,  and  R.  Manduchi, 1998, Bilateral filtering for gray and\n       color images: Proceedings of the 1998 IEEE International Conference  on\n       Computer Vision, IEEE, 836-846\n\nPARAMETERS\n       float  ax =      Gaussian weight for the range distance\n       float  bx  =      exponential weight for the domain distance (different\n              if gaussian)\n       bool   gauss =n  [y/n]     if  y,  Gaussian  weight,  whereas  Triangle\n              weight\n       int    ns =      spray radius\n       int    repeat =1      repeat filtering several times\nSOURCE\n       user/yliu/Mnonloc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfnonloc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnorm-Tuple{}","page":"Home","title":"Madagascar.sfnorm","text":"sfnorm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnorm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnorm. See ?m8r for examples.\n\nRSF Documentation\n\nsfnorm(1)                     Madagascar Manuals                     sfnorm(1)\n\nNAME\n       sfnorm - Normalize the data.\n\nSYNOPSIS\n       sfnorm > outp.rsf < inp.rsf apply=apply.rsf max=\n\nCOMMENTS\n       Normalize by dividing the data set by its absolute maximum value.\n\nPARAMETERS\n       file   apply =      auxiliary input file name\n       float  max = ®\nSOURCE\n       user/chenyk/Mnorm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnorm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnorm2-Tuple{}","page":"Home","title":"Madagascar.sfnorm2","text":"sfnorm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnorm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnorm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfnorm2(1)                    Madagascar Manuals                    sfnorm2(1)\n\nNAME\n       sfnorm2 - Computes square of L-2 norm in double precision.\n\nSYNOPSIS\n       sfnorm2 < in.rsf\n\nSOURCE\n       user/jeff/Mnorm2.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfnorm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnormalize-Tuple{}","page":"Home","title":"Madagascar.sfnormalize","text":"sfnormalize(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnormalize on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnormalize. See ?m8r for examples.\n\nRSF Documentation\n\nsfnormalize(1)                Madagascar Manuals                sfnormalize(1)\n\nNAME\n       sfnormalize - Normalization of data batches up to a given axis.\n\nSYNOPSIS\n       sfnormalize < in.rsf > out.rsf axis=1 type=\n\nCOMMENTS\n       Can  either  normalize  to be between [0,1] with type=m or have mean=0,\n       std dev = 1 with type=s\n\nPARAMETERS\n       int    axis =1      normalize so axes groups up to this dimension  have\n              mean 0, std deviation 1\n       string type =      'm' means data are biased and scaled to be between 0\n              and 1\n                     's' means data are biased and scaled to have mean=0,  std\n              dev = 1\nSOURCE\n       user/luke/Mnormalize.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfnormalize(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnorsar-Tuple{}","page":"Home","title":"Madagascar.sfnorsar","text":"sfnorsar(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnorsar on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnorsar. See ?m8r for examples.\n\nRSF Documentation\n\nsfnorsar(1)                   Madagascar Manuals                   sfnorsar(1)\n\nNAME\n       sfnorsar  -  Traveltime  and  amplitude estimation using wavefront con‐\n       struction.\n\nSYNOPSIS\n       sfnorsar   <   inp.rsf   ampl=ampl.rsf   time=time.rsf    dirx=dirx.rsf\n       dirz=dirz.rsf  srcx=srcx.rsf  srcz=srcz.rsf  invgeo=invgeo.rsf  nang=10\n       rays=0 wfront=0 gap=1 inter=1 DSmax=5 dt=0.0005 nt=5 nrmax=2000  lomx=1\n       first=1 nou=6 gnx=nx gnz=nz gdx=dx gdz=dz gox=ox goz=oz N=3 TETAMAX=1.5\n       alpha2=4.0 freq=100. prcube=0 pr=0 ds=1. os=0. depth=dz\n\nPARAMETERS\n       float  DSmax =5      Maximum distance between  contiguos  points  of  a\n              wavefront\n       int    N =3      Number of control points\n       float  TETAMAX =1.5      Truncation parameter\n       float  alpha2 =4.0      Width of gaussian weighting function\n       file   ampl =      auxiliary output file name\n       float  depth =dz      Depth location of sources\n       file   dirx =      auxiliary output file name\n       file   dirz =      auxiliary output file name\n       float  ds =1.       interval between sources\n       float  dt =0.0005      time step\n       int    first =1      Obtain first arrivals only\n       float  freq =100.       Pseudo-frequency of waverays\n       int    gap =1      Draw wavefronts every gap intervals\n       float  gdx =dx ®\n       float  gdz =dz ®\n       int    gnx =nx      Coordinates of output grid\n       int    gnz =nz ®\n       float  gox =ox ®\n       float  goz =oz      GET LOMAX SPECIFIC PARAMETERS\n       int    inter =1      If use linear interpolation\n       file   invgeo =      auxiliary output file name\n       int    lomx =1      Use Lomax's waveray method\n       int    nang =10      Number of take-off angles\n       int    nou =6      GET GRIDDING PARAMETERS\n       int    nrmax  =2000       Maximum  number of points that define a wave‐\n              front\n       int    nt =5      Number of time steps between wavefronts\n       float  os =0.       first source location\n       int    pr =0      For debugging porpouses\n       int    prcube =0      For debugging porpouses\n       int    rays =0      If draw rays\n       file   srcx =      auxiliary output file name\n       file   srcz =      auxiliary output file name\n       file   time =      auxiliary output file name\n       int    wfront =0      If draw wavefronts\nSOURCE\n       user/urdaneta/Mnorsar.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfnorsar(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnpef-Tuple{}","page":"Home","title":"Madagascar.sfnpef","text":"sfnpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnpef. See ?m8r for examples.\n\nRSF Documentation\n\nsfnpef(1)                     Madagascar Manuals                     sfnpef(1)\n\nNAME\n       sfnpef - Estimate Non-stationary PEF in N dimensions.\n\nSYNOPSIS\n       sfnpef < in.rsf > flt.rsf maskin=mask.rsf pch=patch.rsf filt=reg.rsf a=\n       center= gap= niter=100 epsilon=0.01 lag= maskout= filt_pch= filt_lag=\n\nPARAMETERS\n       ints   a =       [dim]\n       ints   center =       [dim]\n       float  epsilon =0.01      regularization parameter\n       file   filt =      auxiliary input file name\n       string filt_lag =      input file for double-helix filter lags\n       string filt_pch = ®\n       ints   gap =       [dim]\n       string lag =      output file for filter lags\n       string maskin =      optional input mask  file  (auxiliary  input  file\n              name)\n       string maskout =      optional output mask file\n       int    niter =100      number of iterations\n       string pch =      auxiliary input file name\nSOURCE\n       user/gee/Mnpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfnpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnpef5_recon-Tuple{}","page":"Home","title":"Madagascar.sfnpef5_recon","text":"sfnpef5_recon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnpef5_recon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnpef5_recon. See ?m8r for examples.\n\nRSF Documentation\n\nsfnpef5recon(1)              Madagascar Manuals              sfnpef5recon(1)\n\nNAME\n       sfnpef5_recon  -  5-D  missing  data  interpolation with non-stationary\n       PEFs.\n\nSYNOPSIS\n       sfnpef5_recon < in.rsf filt=fil.rsf > out.rsf  mask=mask.rsf  niter=100\n       exact=y eps=0. verb=n\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       bool   exact =y [y/n]     If y, preserve the known data values\n       file   filt =      auxiliary input file name\n       string mask  =       optional input mask file for known data (auxiliary\n              input file name)\n       int    niter =100      Number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chenyk/Mnpef5_recon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfnpef5_recon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnpyConv-Tuple{}","page":"Home","title":"Madagascar.sfnpyConv","text":"sfnpyConv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnpyConv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnpyConv. See ?m8r for examples.\n\nRSF Documentation\n\nsfnpyConv(1)                  Madagascar Manuals                  sfnpyConv(1)\n\nNAME\n       sfnpyConv -\n\nSYNOPSIS\n       sfnpyConv < Fa.rsf flt=Fb.rsf > Fc.rsf norm=n mode=same\n\nCOMMENTS\n       Implements conv(a,b) along the fast axis a [file] : is taken from stdin\n       b [file] : is taken from  \"flt\" Requires both files to  have  the  same\n       sampling interval\n\n       mode [string]:\n\nPARAMETERS\n       file   flt =      auxiliary input file name\n       string mode =same ®\n       bool   norm =n [y/n]     normalize output\nSOURCE\n       user/ediazp/MnpyConv.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnpyConv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnpyCorr-Tuple{}","page":"Home","title":"Madagascar.sfnpyCorr","text":"sfnpyCorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnpyCorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnpyCorr. See ?m8r for examples.\n\nRSF Documentation\n\nsfnpyCorr(1)                  Madagascar Manuals                  sfnpyCorr(1)\n\nNAME\n       sfnpyCorr -\n\nSYNOPSIS\n       sfnpyCorr < Fa.rsf flt=Fb.rsf > Fc.rsf norm=n nc=100\n\nCOMMENTS\n       Implements corr(a,b) along the fast axis a [file] : is taken from stdin\n       b [file] : is taken from  \"flt\" Requires both files to  have  the  same\n       sampling interval\n\nPARAMETERS\n       file   flt =      auxiliary input file name\n       int    nc =100      number of correlation lags\n       bool   norm =n [y/n]     normalize output\nSOURCE\n       user/ediazp/MnpyCorr.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnpyCorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnshape-Tuple{}","page":"Home","title":"Madagascar.sfnshape","text":"sfnshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfnshape(1)                   Madagascar Manuals                   sfnshape(1)\n\nNAME\n       sfnshape - Nonstationary autoregressive shaping\n\nSYNOPSIS\n       sfnshape < inp.rsf > out.rsf filt=fil.rsf eps=1.0f rect=1\n\nPARAMETERS\n       float  eps =1.0f      regularization parameter\n       file   filt =      auxiliary input file name\n       int    rect =1      shaping radius\nSOURCE\n       user/yliu/Mnshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfnshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnsmooth-Tuple{}","page":"Home","title":"Madagascar.sfnsmooth","text":"sfnsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfnsmooth(1)                  Madagascar Manuals                  sfnsmooth(1)\n\nNAME\n       sfnsmooth - N-D non-stationary smoothing.\n\nSYNOPSIS\n       sfnsmooth < in.rsf > out.rsf repeat=1 rect#= shift#=\n\nPARAMETERS\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       int    repeat =1      repeat filtering several times\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\nSOURCE\n       user/fomels/Mnsmooth.c\nVERSION\n       4.2-git Msmooth.c 691 2004-07-04 19:28:08Z fomels\n\nMadagascar                         JULY 2024                      sfnsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnsmooth1-Tuple{}","page":"Home","title":"Madagascar.sfnsmooth1","text":"sfnsmooth1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnsmooth1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnsmooth1. See ?m8r for examples.\n\nRSF Documentation\n\nsfnsmooth1(1)                 Madagascar Manuals                 sfnsmooth1(1)\n\nNAME\n       sfnsmooth1 - 1-D non-stationary smoothing.\n\nSYNOPSIS\n       sfnsmooth1  <  in.rsf  >  out.rsf rect=rect.rsf sift=sift.rsf adj=n re‐\n       peat=1\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjoint flag\n       file   rect =      auxiliary input file name\n       int    repeat =1      repeat filtering several times\n       string sift =      auxiliary input file name\nSOURCE\n       user/fomels/Mnsmooth1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfnsmooth1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfnxtfftn-Tuple{}","page":"Home","title":"Madagascar.sfnxtfftn","text":"sfnxtfftn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfnxtfftn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfnxtfftn. See ?m8r for examples.\n\nRSF Documentation\n\nsfnxtfftn(1)                  Madagascar Manuals                  sfnxtfftn(1)\n\nNAME\n       sfnxtfftn - Look For next FFT number\n\nSYNOPSIS\n       sfnxtfftn nx=\n\nPARAMETERS\n       int    nx = ®\nSOURCE\n       user/songxl/Mnxtfftn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfnxtfftn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoclet-Tuple{}","page":"Home","title":"Madagascar.sfoclet","text":"sfoclet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoclet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoclet. See ?m8r for examples.\n\nRSF Documentation\n\nsfoclet(1)                    Madagascar Manuals                    sfoclet(1)\n\nNAME\n       sfoclet  - Seislet transform in log-stretched frequency-offset-midpoint\n       domain\n\nSYNOPSIS\n       sfoclet < in.rsf > out.rsf inv=y adj=y unit=n verb=n type=\n\nCOMMENTS\n       Forward transform  (adj=y  inv=y)    m=T[d]  Adjoint  transform  (adj=y\n       inv=n)   m=T^(-1)'[d] Inverse transform (adj=n inv=y/n) d=T^(-1)[m]\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, do adjoint transform\n       bool   inv =y [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Moclet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfoclet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfocor3d-Tuple{}","page":"Home","title":"Madagascar.sfocor3d","text":"sfocor3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfocor3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfocor3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfocor3d(1)                   Madagascar Manuals                   sfocor3d(1)\n\nNAME\n       sfocor3d -\n\nSYNOPSIS\n       sfocor3d  <  Fwfl.rsf  opr=Fopr.rsf  >  Fcor.rsf  verb=n adj=n ocox=0.0\n       ocoy=0.0 ocoz=0.0 ntlag=100 nxlag=0 nylag=0 nzlag=0\n\nCOMMENTS\n       Oriented correlation wfl [file] : is taken from stdin opr [file]  :  is\n       taken  from  \"opr\" requires both files to have the same dimensions cor‐\n       relation is computed at coordinates (ocox,ocoy,ocoz)  the  (half)  lags\n       are: ntlag, nxlag, nylag, nzlag\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    ntlag =100 ®\n       int    nxlag =0 ®\n       int    nylag =0 ®\n       int    nzlag =0 ®\n       float  ocox =0.0 ®\n       float  ocoy =0.0 ®\n       float  ocoz =0.0 ®\n       file   opr =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mocor3d.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfocor3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfocparcel-Tuple{}","page":"Home","title":"Madagascar.sfocparcel","text":"sfocparcel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfocparcel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfocparcel. See ?m8r for examples.\n\nRSF Documentation\n\nsfocparcel(1)                 Madagascar Manuals                 sfocparcel(1)\n\nNAME\n       sfocparcel - Patching test for out-of-core patching.\n\nSYNOPSIS\n       sfocparcel < in.rsf > out.rsf w= k=\n\nPARAMETERS\n       ints   k =       [dim]\n       ints   w =       [dim]\nSOURCE\n       user/fomels/Mocparcel.c\nVERSION\n       4.2-git Mparcel.c 691 2004-07-04 19:28:08Z fomels\n\nMadagascar                         JULY 2024                     sfocparcel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoctentwt-Tuple{}","page":"Home","title":"Madagascar.sfoctentwt","text":"sfoctentwt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoctentwt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoctentwt. See ?m8r for examples.\n\nRSF Documentation\n\nsfoctentwt(1)                 Madagascar Manuals                 sfoctentwt(1)\n\nNAME\n       sfoctentwt - Tent-like weight for out-of-core patching.\n\nSYNOPSIS\n       sfoctentwt > wallwt.rsf windwt=windwt.rsf w= k= a= center= dim=2\n\nPARAMETERS\n       ints   a =      filter size [dim]\n       ints   center =       [dim]\n       int    dim =2      number of dimensions\n       ints   k =      number of windows [dim]\n       ints   w =      window size [dim]\n       file   windwt =      auxiliary output file name\nSOURCE\n       user/fomels/Moctentwt.c\nVERSION\n       4.2-git Mtentwt.c 691 2004-07-04 19:28:08Z fomels\n\nMadagascar                         JULY 2024                     sfoctentwt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfodip-Tuple{}","page":"Home","title":"Madagascar.sfodip","text":"sfodip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfodip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfodip. See ?m8r for examples.\n\nRSF Documentation\n\nsfodip(1)                     Madagascar Manuals                     sfodip(1)\n\nNAME\n       sfodip - omnidirectional dip estimation\n\nSYNOPSIS\n       sfodip  < in.rsf > out.rsf m=1 n=1 rect1=0 rect2=0 niter=5 liter=20 ra‐\n       dius=1.0 eta=0.5 dip0=0.0 verb=n slope=n interp=\n\nPARAMETERS\n       float  dip0 =0.0      starting dip\n       float  eta =0.5      steps for iteration\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    liter =20      number of linear iterations\n       int    m =1      b[-m, ... ,n]\n       int    n =1      b[-m, ... ,n]\n       int    niter =5      number of iterations\n       float  radius =1.0      interpolating radius for opwd\n       int    rect1 =0      dip smoothness on 1st axis\n       int    rect2 =0      dip smoothness on 2nd axis\n       bool   slope =n [y/n]     slope (y) or dip (n) estimation\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/chen/Modip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfodip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfodip2-Tuple{}","page":"Home","title":"Madagascar.sfodip2","text":"sfodip2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfodip2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfodip2. See ?m8r for examples.\n\nRSF Documentation\n\nsfodip2(1)                    Madagascar Manuals                    sfodip2(1)\n\nNAME\n       sfodip2 - 2-D dip estimation by omnidirectional plane wave destruction.\n\nSYNOPSIS\n       sfodip2  <  in.rsf  >  out.rsf  sin=sn.rsf  cos=cs.rsf niter=5 liter=50\n       rect1=1 rect2=1 a0=0. order=1 verb=y\n\nPARAMETERS\n       float  a0 =0.       initial dip\n       string cos =      initial dip (cosine) (auxiliary input file name)\n       int    liter =50      number of linear iterations\n       int    niter =5      number of iterations\n       int    order =1      accuracy order\n       int    rect1 =1      dip smoothness on 1st axis\n       int    rect2 =1      dip smoothness on 2nd axis\n       string sin =      initial dip (sine) (auxiliary input file name)\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/pwd/Modip2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfodip2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd1-Tuple{}","page":"Home","title":"Madagascar.sfofd1","text":"sfofd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd1(1)                     Madagascar Manuals                     sfofd1(1)\n\nNAME\n       sfofd1 - 1-D Optimized finite-difference wave extrapolation\n\nSYNOPSIS\n       sfofd1 < in.rsf G=Gmatrix.rsf vel=vel.rsf > out.rsf isx=(int)(nx/2) nt=\n       dt=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx =(int)(nx/2) ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfofd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd1_5-Tuple{}","page":"Home","title":"Madagascar.sfofd1_5","text":"sfofd1_5(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd1_5 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd1_5. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd15(1)                   Madagascar Manuals                   sfofd15(1)\n\nNAME\n       sfofd1_5 - 1-D Optimized finite-difference wave extrapolation\n\nSYNOPSIS\n       sfofd1_5 < in.rsf G=Gmatrix.rsf vel=vel.rsf > out.rsf nt= dt=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd1_5.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfofd1_5(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_10-Tuple{}","page":"Home","title":"Madagascar.sfofd2_10","text":"sfofd2_10(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_10 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_10. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd210(1)                  Madagascar Manuals                  sfofd210(1)\n\nNAME\n       sfofd2_10  - 2-D Fourth-order Optimized Finite-difference wave extrapo‐\n       lation\n\nSYNOPSIS\n       sfofd2_10 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd2_10.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfofd2_10(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_13-Tuple{}","page":"Home","title":"Madagascar.sfofd2_13","text":"sfofd2_13(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_13 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_13. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd213(1)                  Madagascar Manuals                  sfofd213(1)\n\nNAME\n       sfofd2_13  - 2-D Fourth-order Optimized Finite-difference wave extrapo‐\n       lation\n\nSYNOPSIS\n       sfofd2_13 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd2_13.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfofd2_13(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_25-Tuple{}","page":"Home","title":"Madagascar.sfofd2_25","text":"sfofd2_25(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_25 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_25. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd225(1)                  Madagascar Manuals                  sfofd225(1)\n\nNAME\n       sfofd2_25  - 2-D Fourth-order Optimized Finite-difference wave extrapo‐\n       lation\n\nSYNOPSIS\n       sfofd2_25 > out.rsf  vel=vel.rsf  <  source.rsf  G=G.rsf  s1=files1.rsf\n       s2=files2.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   s1 =      auxiliary input file name\n       file   s2 =      auxiliary input file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd2_25.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfofd2_25(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_5-Tuple{}","page":"Home","title":"Madagascar.sfofd2_5","text":"sfofd2_5(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_5 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_5. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd25(1)                   Madagascar Manuals                   sfofd25(1)\n\nNAME\n       sfofd2_5 - 2-D Fourth-order Optimized Finite-difference wave extrapola‐\n       tion\n\nSYNOPSIS\n       sfofd2_5 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd2_5.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfofd2_5(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_7-Tuple{}","page":"Home","title":"Madagascar.sfofd2_7","text":"sfofd2_7(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_7 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_7. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd27(1)                   Madagascar Manuals                   sfofd27(1)\n\nNAME\n       sfofd2_7 - 2-D Fourth-order Optimized Finite-difference wave extrapola‐\n       tion\n\nSYNOPSIS\n       sfofd2_7 > out.rsf vel=vel.rsf < source.rsf G=G.rsf dt= nt= isx= isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mofd2_7.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfofd2_7(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofd2_test-Tuple{}","page":"Home","title":"Madagascar.sfofd2_test","text":"sfofd2_test(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofd2_test on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofd2_test. See ?m8r for examples.\n\nRSF Documentation\n\nsfofd2test(1)                Madagascar Manuals                sfofd2test(1)\n\nNAME\n       sfofd2_test - 2-D Fourth-order Optimized Finite-difference wave extrap‐\n       olation\n\nSYNOPSIS\n       sfofd2_test > out.rsf vel=vel.rsf < source.rsf  G=G.rsf  dt=  nt=  isx=\n       isz=\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nt = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/jsun/Mofd2_test.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfofd2_test(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoff2abs-Tuple{}","page":"Home","title":"Madagascar.sfoff2abs","text":"sfoff2abs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoff2abs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoff2abs. See ?m8r for examples.\n\nRSF Documentation\n\nsfoff2abs(1)                  Madagascar Manuals                  sfoff2abs(1)\n\nNAME\n       sfoff2abs - Transform vector-offset to absolute-offset\n\nSYNOPSIS\n       sfoff2abs < Fd.rsf > Fm.rsf verb=n nw=4 nh=nhx + ohx/dhx oh=0 dh=dhx\n\nCOMMENTS\n       h = sqrt(hx^2+hy^2+hz^2) pcs 2005\n\nPARAMETERS\n       float  dh =dhx ®\n       int    nh =nhx + ohx/dhx ®\n       int    nw =4      spline order\n       float  oh =0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Moff2abs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfoff2abs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoff2abs3-Tuple{}","page":"Home","title":"Madagascar.sfoff2abs3","text":"sfoff2abs3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoff2abs3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoff2abs3. See ?m8r for examples.\n\nRSF Documentation\n\nsfoff2abs3(1)                 Madagascar Manuals                 sfoff2abs3(1)\n\nNAME\n       sfoff2abs3 - Transform vector-offset to absolute-offset\n\nSYNOPSIS\n       sfoff2abs3  <  Fm.rsf > Fd.rsf verb=n nw=4 nh=nhx + ohx/dhx oh=0 dh=dhx\n       na=180 oa=0. da=2. nb=180 ob=0. db=2.\n\nCOMMENTS\n       h = sqrt(hx^2+hy^2+hz^2) pcs 2005\n\nPARAMETERS\n       float  da =2.  ®\n       float  db =2.  ®\n       float  dh =dhx ®\n       int    na =180 ®\n       int    nb =180 ®\n       int    nh =nhx + ohx/dhx ®\n       int    nw =4      spline order\n       float  oa =0.  ®\n       float  ob =0.  ®\n       float  oh =0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Moff2abs3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfoff2abs3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofilp-Tuple{}","page":"Home","title":"Madagascar.sfofilp","text":"sfofilp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofilp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofilp. See ?m8r for examples.\n\nRSF Documentation\n\nsfofilp(1)                    Madagascar Manuals                    sfofilp(1)\n\nNAME\n       sfofilp - 2-D missing data interpolation by differential offset contin‐\n       uation.\n\nSYNOPSIS\n       sfofilp < in.rsf > out.rsf known=known.rsf niter=10 simple=n\n\nPARAMETERS\n       file   known =      auxiliary input file name\n       int    niter =10      number of iterations\n       bool   simple =n [y/n]     if y, use simple h derivative  for  regular‐\n              ization\nSOURCE\n       user/fomels/Mofilp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfofilp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofpwd-Tuple{}","page":"Home","title":"Madagascar.sfofpwd","text":"sfofpwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofpwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofpwd. See ?m8r for examples.\n\nRSF Documentation\n\nsfofpwd(1)                    Madagascar Manuals                    sfofpwd(1)\n\nNAME\n       sfofpwd - Objective function of dip estimation with PWD filters.\n\nSYNOPSIS\n       sfofpwd  <  in.rsf  > of.rsf np=100 p0= dp=2*p0/(1.-np) drift=n order=1\n       nj=1\n\nPARAMETERS\n       float  dp =2*p0/(1.-np)      dip sampling\n       bool   drift =n [y/n]     if shift filter\n       int    nj =1      antialiasing\n       int    np =100      number of dips\n       int    order =1 [1,2,3]   accuracy order\n       float  p0 =      dip origin\nSOURCE\n       user/pwd/Mofpwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfofpwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofpwd2-Tuple{}","page":"Home","title":"Madagascar.sfofpwd2","text":"sfofpwd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofpwd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofpwd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfofpwd2(1)                   Madagascar Manuals                   sfofpwd2(1)\n\nNAME\n       sfofpwd2 - Objective function of two dips estimation with PWD filters.\n\nSYNOPSIS\n       sfofpwd2  <  in.rsf  >  of.rsf  np=100  p0=  dp=2*p0/(1.-np) nq=100 q0=\n       dq=2*q0/(1.-nq) order=1 nj=1 drift=n\n\nPARAMETERS\n       float  dp =2*p0/(1.-np)      first dip sampling\n       float  dq =2*q0/(1.-nq)      second dip sampling\n       bool   drift =n [y/n]     if shift filter\n       int    nj =1      antialiasing\n       int    np =100      number of dips\n       int    nq =100      number of dips\n       int    order =1 [1,2,3]   accuracy order\n       float  p0 =      first dip origin\n       float  q0 =      second dip origin\nSOURCE\n       user/pwd/Mofpwd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfofpwd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfofsemb-Tuple{}","page":"Home","title":"Madagascar.sfofsemb","text":"sfofsemb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfofsemb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfofsemb. See ?m8r for examples.\n\nRSF Documentation\n\nsfofsemb(1)                   Madagascar Manuals                   sfofsemb(1)\n\nNAME\n       sfofsemb - Objective function of dip estimation with semblance.\n\nSYNOPSIS\n       sfofsemb < in.rsf > of.rsf np=100 p0= dp=2*p0/(1.-np)\n\nPARAMETERS\n       float  dp =2*p0/(1.-np)      dip sampling\n       int    np =100      number of dips\n       float  p0 =      dip origin\nSOURCE\n       user/fomels/Mofsemb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfofsemb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfomp-Tuple{}","page":"Home","title":"Madagascar.sfomp","text":"sfomp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfomp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfomp. See ?m8r for examples.\n\nRSF Documentation\n\nsfomp(1)                      Madagascar Manuals                      sfomp(1)\n\nNAME\n       sfomp - OpenMP wrapper for embarassingly parallel jobs.\n\nSYNOPSIS\n       sfomp < inp.rsf > out.rsf split=ndim join=axis\n\nPARAMETERS\n       int    join =axis      axis to join (0 means add)\n       int    split =ndim      axis to split\nSOURCE\n       system/main/omp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfomp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfonelayer-Tuple{}","page":"Home","title":"Madagascar.sfonelayer","text":"sfonelayer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfonelayer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfonelayer. See ?m8r for examples.\n\nRSF Documentation\n\nsfonelayer(1)                 Madagascar Manuals                 sfonelayer(1)\n\nNAME\n       sfonelayer - One layer NN training.\n\nSYNOPSIS\n       sfonelayer  < x_train_obj.rsf ytrain=y_train_obj.rsf xval=x_val_obj.rsf\n       yval=y_val_obj.rsf > loss_train_obj.rsf lossval=loss_val_obj.rsf\n\nCOMMENTS\n       Reproducing  the   training   process   of   the   following   example:\n       https://github.com/seg/tutorials-2018/tree/master/1808_Neural_networks\n       This is a minimal one-layer network: x -> a -> z == y The training uses\n       L2 loss function.\n\nPARAMETERS\n       file   lossval =      auxiliary output file name\n       file   xval =      auxiliary input file name\n       file   ytrain =      auxiliary input file name\n       file   yval =      auxiliary input file name\nSOURCE\n       user/fomels/Monelayer.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfonelayer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopame2d-Tuple{}","page":"Home","title":"Madagascar.sfopame2d","text":"sfopame2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopame2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopame2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfopame2d(1)                  Madagascar Manuals                  sfopame2d(1)\n\nNAME\n       sfopame2d  - 2-D opam for elastic wave modeling and vector field decom‐\n       postion\n\nSYNOPSIS\n       sfopame2d  vp=fvelp.rsf  vs=fvels.rsf  <   fsource.rsf   >   fwavup.rsf\n       wavwp=fwavwp.rsf   wavus=fwavus.rsf   wavws=fwavws.rsf   wavu=fwavu.rsf\n       wavw=fwavw.rsf   Guxxl=Guxxl.rsf   Guxxr=Guxxr.rsf    Gwxzpl=Gwxzpl.rsf\n       Gwxzpr=Gwxzpr.rsf  Guxzpl=Guxzpl.rsf  Guxzpr=Guxzpr.rsf Gwzzl=Gwzzl.rsf\n       Gwzzr=Gwzzr.rsf   Guzzl=Guzzl.rsf   Guzzr=Guzzr.rsf   Gwxzsl=Gwxzsl.rsf\n       Gwxzsr=Gwxzsr.rsf   Gwxxl=Gwxxl.rsf  Gwxxr=Gwxxr.rsf  Guxzsl=Guxzsl.rsf\n       Guxzsr=Guxzsr.rsf opt=0 dt= nt= isx= isz= nbt=44 nbb=44  nxl=44  nxr=44\n       czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 cmplx=n pad1=1 snap=1\n\nPARAMETERS\n       file   Guxxl =      auxiliary input file name\n       file   Guxxr =      auxiliary input file name\n       file   Guxzpl =      auxiliary input file name\n       file   Guxzpr =      auxiliary input file name\n       file   Guxzsl =      auxiliary input file name\n       file   Guxzsr =      auxiliary input file name\n       file   Guzzl =      auxiliary input file name\n       file   Guzzr =      auxiliary input file name\n       file   Gwxxl =      auxiliary input file name\n       file   Gwxxr =      auxiliary input file name\n       file   Gwxzpl =      auxiliary input file name\n       file   Gwxzpr =      auxiliary input file name\n       file   Gwxzsl =      auxiliary input file name\n       file   Gwxzsr =      auxiliary input file name\n       file   Gwzzl =      auxiliary input file name\n       file   Gwzzr =      auxiliary input file name\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       int    nxl =44 ®\n       int    nxr =44      assume ABC pars are the same\n       int    opt =0      if y, determine optimal size for efficiency\n       int    pad1 =1      padding factor on the first axis\n       int    snap =1 ®\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\n       file   wavu =      auxiliary output file name\n       file   wavus =      auxiliary output file name\n       file   wavw =      auxiliary output file name\n       file   wavwp =      auxiliary output file name\n       file   wavws =      auxiliary output file name\nSOURCE\n       user/junyan/Mopame2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfopame2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopame2dckxx-Tuple{}","page":"Home","title":"Madagascar.sfopame2dckxx","text":"sfopame2dckxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopame2dckxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopame2dckxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfopame2dckxx(1)              Madagascar Manuals              sfopame2dckxx(1)\n\nNAME\n       sfopame2dckxx - 2-D opam for elastic wave modeling and vector field de‐\n       compostion */\n\nSYNOPSIS\n       sfopame2dckxx  <  vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mopame2dckxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfopame2dckxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopame2dckxz-Tuple{}","page":"Home","title":"Madagascar.sfopame2dckxz","text":"sfopame2dckxz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopame2dckxz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopame2dckxz. See ?m8r for examples.\n\nRSF Documentation\n\nsfopame2dckxz(1)              Madagascar Manuals              sfopame2dckxz(1)\n\nNAME\n       sfopame2dckxz - 2-D opam for elastic wave modeling and vector field de‐\n       compostion */\n\nSYNOPSIS\n       sfopame2dckxz  <  vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mopame2dckxz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfopame2dckxz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopame2dckzz-Tuple{}","page":"Home","title":"Madagascar.sfopame2dckzz","text":"sfopame2dckzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopame2dckzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopame2dckzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfopame2dckzz(1)              Madagascar Manuals              sfopame2dckzz(1)\n\nNAME\n       sfopame2dckzz - 2-D opam for elastic wave modeling and vector field de‐\n       compostion */\n\nSYNOPSIS\n       sfopame2dckzz  <  vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mopame2dckzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfopame2dckzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopoti2d-Tuple{}","page":"Home","title":"Madagascar.sfopoti2d","text":"sfopoti2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopoti2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopoti2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfopoti2d(1)                  Madagascar Manuals                  sfopoti2d(1)\n\nNAME\n       sfopoti2d  -  Modeling  of  pure acoustic wave in 2-D transversely iso‐\n       tropic meida using optimized pseudo-Laplacian operator\n\nSYNOPSIS\n       sfopoti2d  >  out.rsf  vel=vel.rsf  sigma=fsigma.rsf   delta=fdelta.rsf\n       seta=fseta.rsf  <  source.rsf Gxxl=Gxxl.rsf Gxxr=Gxxr.rsf Gzzl=Gzzl.rsf\n       Gzzr=Gzzr.rsf  Gxxxxl=Gxxxxl.rsf  Gxxxxr=Gxxxxr.rsf   Gzzzzl=Gzzzzl.rsf\n       Gzzzzr=Gzzzzr.rsf Gxzzzl=Gxzzzl.rsf Gxzzzr=Gxzzzr.rsf Gxxxzl=Gxxxzl.rsf\n       Gxxxzr=Gxxxzr.rsf Gxxzzl=Gxxzzl.rsf  Gxxzzr=Gxxzzr.rsf  opt=1  dt=  nt=\n       isx=  isz=  nbt=30  nbb=30  nxl=30  nxr=30  czt=0.01  czb=0.01 cxl=0.01\n       cxr=0.01 ax=5.0 az=5.0 factor=5.0/6.0 cmplx=n pad1=1 snap=1\n\nPARAMETERS\n       file   Gxxl =      auxiliary input file name\n       file   Gxxr =      auxiliary input file name\n       file   Gxxxxl =      auxiliary input file name\n       file   Gxxxxr =      auxiliary input file name\n       file   Gxxxzl =      auxiliary input file name\n       file   Gxxxzr =      auxiliary input file name\n       file   Gxxzzl =      auxiliary input file name\n       file   Gxxzzr =      auxiliary input file name\n       file   Gxzzzl =      auxiliary input file name\n       file   Gxzzzr =      auxiliary input file name\n       file   Gzzl =      auxiliary input file name\n       file   Gzzr =      auxiliary input file name\n       file   Gzzzzl =      auxiliary input file name\n       file   Gzzzzr =      auxiliary input file name\n       float  ax =5.0      suppress HF parameter\n       float  az =5.0      suppress HF parameter\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       file   delta =      auxiliary input file name\n       float  dt = ®\n       float  factor =5.0/6.0      suppress HF parameter\n       int    isx = ®\n       int    isz = ®\n       int    nbb =30 ®\n       int    nbt =30 ®\n       int    nt = ®\n       int    nxl =30 ®\n       int    nxr =30      assume ABC pars are the same\n       int    opt =1      if y, determine optimal size for efficiency\n       int    pad1 =1      padding factor on the first axis\n       file   seta =      auxiliary input file name\n       file   sigma =      auxiliary input file name\n       int    snap =1 ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/junyan/Mopoti2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfopoti2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopoti3d-Tuple{}","page":"Home","title":"Madagascar.sfopoti3d","text":"sfopoti3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopoti3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopoti3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfopoti3d(1)                  Madagascar Manuals                  sfopoti3d(1)\n\nNAME\n       sfopoti3d  -  Modeling  of  pure acoustic wave in 3-D transversely iso‐\n       tropic meida using optimized pseudo-Laplacian operator\n\nSYNOPSIS\n       sfopoti3d  >  out.rsf  vel=vel.rsf  sigma=fsigma.rsf   delta=fdelta.rsf\n       seta=fseta.rsf  phi=fphi.rsf  <  source.rsf Gxxl=Gxxl.rsf Gxxr=Gxxr.rsf\n       Gyyl=Gyyl.rsf Gyyr=Gyyr.rsf Gzzl=Gzzl.rsf  Gzzr=Gzzr.rsf  Gxyl=Gxyl.rsf\n       Gxyr=Gxyr.rsf  Gxzl=Gxzl.rsf  Gxzr=Gxzr.rsf Gyzl=Gyzl.rsf Gyzr=Gyzr.rsf\n       Gxxxxl=Gxxxxl.rsf Gxxxxr=Gxxxxr.rsf Gyyyyl=Gyyyyl.rsf Gyyyyr=Gyyyyr.rsf\n       Gzzzzl=Gzzzzl.rsf Gzzzzr=Gzzzzr.rsf Gxxxyl=Gxxxyl.rsf Gxxxyr=Gxxxyr.rsf\n       Gxxxzl=Gxxxzl.rsf Gxxxzr=Gxxxzr.rsf Gxyyyl=Gxyyyl.rsf Gxyyyr=Gxyyyr.rsf\n       Gyyyzl=Gyyyzl.rsf Gyyyzr=Gyyyzr.rsf Gxzzzl=Gxzzzl.rsf Gxzzzr=Gxzzzr.rsf\n       Gyzzzl=Gyzzzl.rsf Gyzzzr=Gyzzzr.rsf Gxxyyl=Gxxyyl.rsf Gxxyyr=Gxxyyr.rsf\n       Gxxzzl=Gxxzzl.rsf Gxxzzr=Gxxzzr.rsf Gyyzzl=Gyyzzl.rsf Gyyzzr=Gyyzzr.rsf\n       Gxxyzl=Gxxyzl.rsf Gxxyzr=Gxxyzr.rsf Gxyyzl=Gxyyzl.rsf Gxyyzr=Gxyyzr.rsf\n       Gxyzzl=Gxyzzl.rsf Gxyzzr=Gxyzzr.rsf opt=1 dt= nt= isx= isy= isz= nbt=30\n       nbb=30 nxl=30 nxr=30 nyl=30 nyr=30 czt=0.01 czb=0.01 cxl=0.01  cxr=0.01\n       cmplx=n pad1=1 snap=1\n\nPARAMETERS\n       file   Gxxl =      auxiliary input file name\n       file   Gxxr =      auxiliary input file name\n       file   Gxxxxl =      auxiliary input file name\n       file   Gxxxxr =      auxiliary input file name\n       file   Gxxxyl =      auxiliary input file name\n       file   Gxxxyr =      auxiliary input file name\n       file   Gxxxzl =      auxiliary input file name\n       file   Gxxxzr =      auxiliary input file name\n       file   Gxxyyl =      auxiliary input file name\n       file   Gxxyyr =      auxiliary input file name\n       file   Gxxyzl =      auxiliary input file name\n       file   Gxxyzr =      auxiliary input file name\n       file   Gxxzzl =      auxiliary input file name\n       file   Gxxzzr =      auxiliary input file name\n       file   Gxyl =      auxiliary input file name\n       file   Gxyr =      auxiliary input file name\n       file   Gxyyyl =      auxiliary input file name\n       file   Gxyyyr =      auxiliary input file name\n       file   Gxyyzl =      auxiliary input file name\n       file   Gxyyzr =      auxiliary input file name\n       file   Gxyzzl =      auxiliary input file name\n       file   Gxyzzr =      auxiliary input file name\n       file   Gxzl =      auxiliary input file name\n       file   Gxzr =      auxiliary input file name\n       file   Gxzzzl =      auxiliary input file name\n       file   Gxzzzr =      auxiliary input file name\n       file   Gyyl =      auxiliary input file name\n       file   Gyyr =      auxiliary input file name\n       file   Gyyyyl =      auxiliary input file name\n       file   Gyyyyr =      auxiliary input file name\n       file   Gyyyzl =      auxiliary input file name\n       file   Gyyyzr =      auxiliary input file name\n       file   Gyyzzl =      auxiliary input file name\n       file   Gyyzzr =      auxiliary input file name\n       file   Gyzl =      auxiliary input file name\n       file   Gyzr =      auxiliary input file name\n       file   Gyzzzl =      auxiliary input file name\n       file   Gyzzzr =      auxiliary input file name\n       file   Gzzl =      auxiliary input file name\n       file   Gzzr =      auxiliary input file name\n       file   Gzzzzl =      auxiliary input file name\n       file   Gzzzzr =      auxiliary input file name\n       bool   cmplx =n [y/n]     use complex FFT\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       file   delta =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isy = ®\n       int    isz = ®\n       int    nbb =30 ®\n       int    nbt =30 ®\n       int    nt = ®\n       int    nxl =30 ®\n       int    nxr =30 ®\n       int    nyl =30 ®\n       int    nyr =30      assume ABC pars are the same\n       int    opt =1      if y, determine optimal size for efficiency\n       int    pad1 =1      padding factor on the first axis\n       file   phi =      auxiliary input file name\n       file   seta =      auxiliary input file name\n       file   sigma =      auxiliary input file name\n       int    snap =1 ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/junyan/Mopoti3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfopoti3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopsmigrk-Tuple{}","page":"Home","title":"Madagascar.sfopsmigrk","text":"sfopsmigrk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopsmigrk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopsmigrk. See ?m8r for examples.\n\nRSF Documentation\n\nsfopsmigrk(1)                 Madagascar Manuals                 sfopsmigrk(1)\n\nNAME\n       sfopsmigrk - Shot-recorder Oriented prestack migration data is (shots x\n       recs x time).\n\nSYNOPSIS\n       sfopsmigrk  <   dist.rsf   time=time.rsf   dept=dept.rsf   >   imag.rsf\n       data=data.rsf tolz=2.0 is_offset=n\n\nPARAMETERS\n       file   data =      auxiliary input file name\n       file   dept =      auxiliary input file name\n       bool   is_offset =n [y/n]\n       file   time =      auxiliary input file name\n       float  tolz =2.0 ®\nSOURCE\n       user/roman/Mopsmigrk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfopsmigrk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfopwd2-Tuple{}","page":"Home","title":"Madagascar.sfopwd2","text":"sfopwd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfopwd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfopwd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfopwd2(1)                    Madagascar Manuals                    sfopwd2(1)\n\nNAME\n       sfopwd2 - 2-D omnidirectional plane wave destruction.\n\nSYNOPSIS\n       sfopwd2 < in.rsf dip=ang.rsf > out.rsf order=1\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       int    order =1      accuracy\nSOURCE\n       user/pwd/Mopwd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfopwd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforientation-Tuple{}","page":"Home","title":"Madagascar.sforientation","text":"sforientation(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforientation on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforientation. See ?m8r for examples.\n\nRSF Documentation\n\nsforientation(1)              Madagascar Manuals              sforientation(1)\n\nNAME\n       sforientation - orientation estimation by structural gradient tensor\n\nSYNOPSIS\n       sforientation  < in.rsf > out.rsf weight=wgt.rsf azimuth=az.rsf rect1=0\n       rect2=0 rect3=0 order=2 interp= filt=\n\nPARAMETERS\n       string azimuth =      auxiliary output file name\n       string filt =      filter type : ls, tls, tensor\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    order =2      approximating order of finite difference\n       int    rect1 =0      smoothness on 1st axis\n       int    rect2 =0      smoothness on 2nd axis\n       int    rect3 =0      smoothness on 3rd axis\n       string weight =      auxiliary input file name\nSOURCE\n       user/chen/Morientation.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sforientation(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sformatrix-Tuple{}","page":"Home","title":"Madagascar.sformatrix","text":"sformatrix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sformatrix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sformatrix. See ?m8r for examples.\n\nRSF Documentation\n\nsformatrix(1)                 Madagascar Manuals                 sformatrix(1)\n\nNAME\n       sformatrix  -  Lowrank decomposition for 3-D orthorhombic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sformatrix   <   velz.rsf   fft=fft.rsf   >   middle.rsf    app=app.rsf\n       real=real.rsf seed=time(NULL eps=1.e-4 npk=20 xx1= xx2= xx3= dt=\n\nPARAMETERS\n       file   app =      auxiliary output file name\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       npk    =20      maximum rank\n       file   real =      auxiliary output file name\n       seed   =time(NULL ®\n       xx1    =      x location\n       xx2    =      x location\n       xx3    =      x location\nSOURCE\n       user/songxl/Mormatrix.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sformatrix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforp-Tuple{}","page":"Home","title":"Madagascar.sforp","text":"sforp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforp. See ?m8r for examples.\n\nRSF Documentation\n\nsforp(1)                      Madagascar Manuals                      sforp(1)\n\nNAME\n       sforp - 2-D 10th-order Finite-difference dispersion\n\nSYNOPSIS\n       sforp  >  out.rsf  < vel.rsf vx=2.1 vy=2.05 vz=2.0 e1=0.3 e2=0.1 e3=1.0\n       phi=45.0\n\nPARAMETERS\n       float  e1 =0.3 ®\n       float  e2 =0.1 ®\n       float  e3 =1.0 ®\n       float  phi =45.0 ®\n       float  vx =2.1 ®\n       float  vy =2.05 ®\n       float  vz =2.0 ®\nSOURCE\n       user/songxl/Morp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sforp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfort3de-Tuple{}","page":"Home","title":"Madagascar.sfort3de","text":"sfort3de(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfort3de on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfort3de. See ?m8r for examples.\n\nRSF Documentation\n\nsfort3de(1)                   Madagascar Manuals                   sfort3de(1)\n\nNAME\n       sfort3de  -  3-D three-components wavefield modeling using elastic wave\n       equation in tilted ORT media.\n\nSYNOPSIS\n       sfort3de  <   Fvp0.rsf   vs0=Fvs0.rsf   epsi1=Fep1.rsf   epsi2=Fep2.rsf\n       del1=Fde1.rsf  del2=Fde2.rsf  del3=Fde3.rsf gam1=Fga1.rsf gam2=Fga2.rsf\n       the=Falpha.rsf the=Fthe.rsf phi=Fphi.rsf >  Fo1.rsf  FDElasticy=Fo2.rsf\n       FDElasticz=Fo3.rsf ns=301 dt=0.001\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng and Tengfei Wang\n\n       This  code  is  first written by Tengfei Wang at Tongji University, and\n       then optimzied by Jiubing Cheng for Madagascar version at BEG,  Univer‐\n       sity of Texas at Austin.\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   FDElasticy =      auxiliary output file name\n       file   FDElasticz =      auxiliary output file name\n       file   del1 =      auxiliary input file name\n       file   del2 =      auxiliary input file name\n       file   del3 =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi1 =      auxiliary input file name\n       file   epsi2 =      auxiliary input file name\n       file   gam1 =      auxiliary input file name\n       file   gam2 =      auxiliary input file name\n       int    ns =301 ®\n       file   phi =      auxiliary input file name\n       file   the =      auxiliary input file name\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mort3de.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfort3de(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfort3devectorlrkspace_double-Tuple{}","page":"Home","title":"Madagascar.sfort3devectorlrkspace_double","text":"sfort3devectorlrkspace_double(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfort3devectorlrkspace_double on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfort3devectorlrkspace_double. See ?m8r for examples.\n\nRSF Documentation\n\nsfort3devectorlrkspacedouble(Madagascar Manuasfort3devectorlrkspacedouble(1)\n\nNAME\n       sfort3devectorlrkspace_double - None\n\nSYNOPSIS\n       sfort3devectorlrkspace_double  <  vp0.rsf > Elasticx.rsf Elasticy=Elas‐\n       ticy.rsf Elasticz=Elasticz.rsf ElasticPx=ElasticPx.rsf  ElasticPy=Elas‐\n       ticPy.rsf    ElasticPz=ElasticPz.rsf    ElasticSx=ElasticSx.rsf   Elas‐\n       ticSy=ElasticSy.rsf  ElasticSz=ElasticSz.rsf  seed=time(NULL  eps=1.e-6\n       npk=20 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPy =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSy =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Elasticy =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mort3devectorlrkspace_double.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024  sfort3devectorlrkspace_double(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfort3dhomodevK-Tuple{}","page":"Home","title":"Madagascar.sfort3dhomodevK","text":"sfort3dhomodevK(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfort3dhomodevK on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfort3dhomodevK. See ?m8r for examples.\n\nRSF Documentation\n\nsfort3dhomodevK(1)            Madagascar Manuals            sfort3dhomodevK(1)\n\nNAME\n       sfort3dhomodevK  -  3D three-components projection deviation correction\n       operators calculation in\n\nSYNOPSIS\n       sfort3dhomodevK  >  Fo1.rsf  apvy=Fo2.rsf  apvz=Fo3.rsf   taper=Fo4.rsf\n       vp0=3000.0  vs0=1500.0  de1=0.05  de2=-0.05  de3=0.15  ep1=0.2 ep2=0.05\n       ga1=0.1 ga2=0.1 alpha=0. the=0. phi=0. hnx=250 hny=250  hnz=250  dx=10.\n       dy=10. dz=10. itaper=1\n\nCOMMENTS\n       *  homogeneous orthorhombic media Copyright (C) 2012 Tongji University,\n       Shanghai, China\n\n       Authors: Jiubing Cheng and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       float  alpha =0.  ®\n       file   apvy =      auxiliary output file name\n       file   apvz =      auxiliary output file name\n       float  de1 =0.05 ®\n       float  de2 =-0.05 ®\n       float  de3 =0.15 ®\n       float  dx =10.  ®\n       float  dy =10.  ®\n       float  dz =10.  ®\n       float  ep1 =0.2 ®\n       float  ep2 =0.05 ®\n       float  ga1 =0.1 ®\n       float  ga2 =0.1 ®\n       int    hnx =250 ®\n       int    hny =250 ®\n       int    hnz =250 ®\n       int    itaper =1 ®\n       float  phi =0.  ®\n       file   taper =      auxiliary output file name\n       float  the =0.  ®\n       float  vp0 =3000.0 ®\n       float  vs0 =1500.0 ®\nSOURCE\n       user/chengjb/Mort3dhomodevK.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfort3dhomodevK(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfort3dhomodevcK-Tuple{}","page":"Home","title":"Madagascar.sfort3dhomodevcK","text":"sfort3dhomodevcK(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfort3dhomodevcK on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfort3dhomodevcK. See ?m8r for examples.\n\nRSF Documentation\n\nsfort3dhomodevcK(1)           Madagascar Manuals           sfort3dhomodevcK(1)\n\nNAME\n       sfort3dhomodevcK  -  Correct  projection  deviation in K-domian for 3-D\n       pseudo-pure P-wave field in homogeneous ORT media.\n\nSYNOPSIS\n       sfort3dhomodevcK   <   Fix.rsf   apvy=Fiy.rsf   apvz=Fiz.rsf   PseudoP‐\n       urePx=Fi1.rsf PseudoPurePy=Fi2.rsf PseudoPurePz=Fi3.rsf > Fo1.rsf Pseu‐\n       doPureSepP=Fo2.rsf\n\nCOMMENTS\n       Refernces: Cheng et al. (15th IWSA, 2012);  Cheng  and  Kang  (SEG  Ab‐\n       stract,  2012); Kang and Cheng (SEG Abstract, 2012) Wang et al.(SEG Ab‐\n       stract, 2012)\n\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This code is first written by Tengfei Wang at  Tongji  University,  and\n       then  optimzied by Jiubing Cheng for Madagascar version at BEG, Univer‐\n       sity of Texas at Austin.\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPurePx =      auxiliary input file name\n       file   PseudoPurePy =      auxiliary input file name\n       file   PseudoPurePz =      auxiliary input file name\n       file   PseudoPureSepP =      auxiliary output file name\n       file   apvy =      auxiliary input file name\n       file   apvz =      auxiliary input file name\nSOURCE\n       user/chengjb/Mort3dhomodevcK.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfort3dhomodevcK(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfort3dpseudophomo-Tuple{}","page":"Home","title":"Madagascar.sfort3dpseudophomo","text":"sfort3dpseudophomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfort3dpseudophomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfort3dpseudophomo. See ?m8r for examples.\n\nRSF Documentation\n\nsfort3dpseudophomo(1)         Madagascar Manuals         sfort3dpseudophomo(1)\n\nNAME\n       sfort3dpseudophomo  -  3-D  three-components  wavefield  modeling using\n       pseudo-pure mode P-wave equation in tilted ORT media.\n\nSYNOPSIS\n       sfort3dpseudophomo > Fo1.rsf PseudoPurePy=Fo2.rsf  PseudoPurePz=Fo3.rsf\n       ns=301  ny=101  nx=101  nz=101 dt=0.001 dx=0.0 dy=0.0 dz=0.0 vp0=3000.0\n       vs0=1500.0  epsi1=0.2  epsi2=0.067  del1=0.1  del2=-0.0422   del3=0.125\n       gam1=0.1 gam2=0.047 bd=20\n\nCOMMENTS\n       Refernces:  Cheng  et  al.  (15th  IWSA, 2012); Cheng and Kang (SEG Ab‐\n       stract, 2012); Kang and Cheng (SEG Abstract, 2012) Wang et al.(SEG  Ab‐\n       stract, 2012)\n\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This  code  is  first written by Tengfei Wang at Tongji University, and\n       then optimzied by Jiubing Cheng for Madagascar version at BEG,  Univer‐\n       sity of Texas at Austin.\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPurePy =      auxiliary output file name\n       file   PseudoPurePz =      auxiliary output file name\n       int    bd =20 ®\n       float  del1 =0.1 ®\n       float  del2 =-0.0422 ®\n       float  del3 =0.125 ®\n       float  dt =0.001 ®\n       float  dx =0.0 ®\n       float  dy =0.0 ®\n       float  dz =0.0 ®\n       float  epsi1 =0.2 ®\n       float  epsi2 =0.067 ®\n       float  gam1 =0.1 ®\n       float  gam2 =0.047 ®\n       int    ns =301 ®\n       int    nx =101 ®\n       int    ny =101 ®\n       int    nz =101 ®\n       float  vp0 =3000.0 ®\n       float  vs0 =1500.0 ®\nSOURCE\n       user/chengjb/Mort3dpseudophomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sfort3dpseudophomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortho-Tuple{}","page":"Home","title":"Madagascar.sfortho","text":"sfortho(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortho on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortho. See ?m8r for examples.\n\nRSF Documentation\n\nsfortho(1)                    Madagascar Manuals                    sfortho(1)\n\nNAME\n       sfortho - Orthogonolize signal and noise.\n\nSYNOPSIS\n       sfortho  <  fnoi.rsf  sig=fsig.rsf > fnoi2.rsf sig2=fsig2.rsf niter=100\n       verb=y eps=0.0f rect#=(1,1,...)\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       file   sig =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mortho.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfortho(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthoa-Tuple{}","page":"Home","title":"Madagascar.sforthoa","text":"sforthoa(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthoa on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthoa. See ?m8r for examples.\n\nRSF Documentation\n\nsforthoa(1)                   Madagascar Manuals                   sforthoa(1)\n\nNAME\n       sforthoa - Accelerated local orthogonalization\n\nSYNOPSIS\n       sforthoa  <  fnoi.rsf  sig=fsig.rsf w=fw.rsf > fnoi2.rsf sig2=fsig2.rsf\n       ifns=y  verb=y  ifsm=y  ifnm=y  nrad=1  alpha=0.0  beta=0.0   gamma=0.0\n       n1win=n1 n2win=n2 n3win=n3 r1=0.5 r2=0.5 r3=0.5 rect#= shift#=\n\nPARAMETERS\n       float  alpha =0.0      Regularization in t direction\n       float  beta =0.0      Regularization in x direction\n       float  gamma =0.0      Regularization in y direction\n       bool   ifnm =y [y/n]     if normalize the weight\n       bool   ifns =y [y/n]     if apply the non-stationary smoothing radius\n       bool   ifsm =y [y/n]     if smooth the weight\n       int    n1win =n1      first window length\n       int    n2win =n2      second window length\n       int    n3win =n3      second window length\n       int    nrad =1      NO of smoothing\n       float  r1 =0.5      first overlapping ratio\n       float  r2 =0.5      second overlapping ratio\n       float  r3 =0.5      third overlapping ratio\n       string rect#  =       size  of  the smoothing stencil in #-th dimension\n              /auxiliary input file/\n       string shift# =      shifting of the smoothing stencil in  #-th  dimen‐\n              sion /auxiliary input file/\n       file   sig =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\n       file   w =      auxiliary output file name\nSOURCE\n       user/chenyk/Morthoa.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sforthoa(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthol-Tuple{}","page":"Home","title":"Madagascar.sforthol","text":"sforthol(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthol on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthol. See ?m8r for examples.\n\nRSF Documentation\n\nsforthol(1)                   Madagascar Manuals                   sforthol(1)\n\nNAME\n       sforthol - Local signal-and-noise orthogonalization.\n\nSYNOPSIS\n       sforthol  <  fnoi.rsf sig=fsig.rsf > fnoi2.rsf sig2=fsig2.rsf niter=100\n       verb=y eps=0.0f rect#=(1,1,...)\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       file   sig =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chenyk/Morthol.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sforthol(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthollr-Tuple{}","page":"Home","title":"Madagascar.sforthollr","text":"sforthollr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthollr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthollr. See ?m8r for examples.\n\nRSF Documentation\n\nsforthollr(1)                 Madagascar Manuals                 sforthollr(1)\n\nNAME\n       sforthollr  -  Lowrank decomposition for 3-D orthorhombic wave propaga‐\n       tion with linearization.\n\nSYNOPSIS\n       sforthollr  <   velz.rsf   fft=fft.rsf   >   middle.rsf   left=left.rsf\n       right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       file   right =      auxiliary output file name\n       seed   =time(NULL ®\nSOURCE\n       user/songxl/Morthollr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sforthollr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortholr-Tuple{}","page":"Home","title":"Madagascar.sfortholr","text":"sfortholr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortholr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortholr. See ?m8r for examples.\n\nRSF Documentation\n\nsfortholr(1)                  Madagascar Manuals                  sfortholr(1)\n\nNAME\n       sfortholr  -  Lowrank  decomposition for 3-D orthorhombic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfortholr   <   velz.rsf   fft=fft.rsf   >   middle.rsf   left=left.rsf\n       right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       file   right =      auxiliary output file name\n       seed   =time(NULL ®\nSOURCE\n       user/songxl/Mortholr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfortholr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortholr3-Tuple{}","page":"Home","title":"Madagascar.sfortholr3","text":"sfortholr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortholr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortholr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfortholr3(1)                 Madagascar Manuals                 sfortholr3(1)\n\nNAME\n       sfortholr3  -  Lowrank decomposition for 3-D orthorhombic wave propaga‐\n       tion (Real).\n\nSYNOPSIS\n       sfortholr3  <  c11.rsf  seta1=seta1.rsf  fft=fft.rsf  left=left.rsf   >\n       right.rsf  seed=time(NULL  eps=1.e-4  npk=20  dt= mode=0 tilt=false ap‐\n       prox=2\n\nPARAMETERS\n       approx =2       Type  of  approximation  (0=exact   1=zone   2=acoustic\n              3=tsvankin)\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0       '0'  means  quasi-P  (default),  '1' means quasi-S, '2'\n              means quasi-S2\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   seta1 =      auxiliary input file name\n       tilt   =false ®\nSOURCE\n       user/jsun/Mortholr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfortholr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortholrzone-Tuple{}","page":"Home","title":"Madagascar.sfortholrzone","text":"sfortholrzone(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortholrzone on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortholrzone. See ?m8r for examples.\n\nRSF Documentation\n\nsfortholrzone(1)              Madagascar Manuals              sfortholrzone(1)\n\nNAME\n       sfortholrzone  - Lowrank decomposition for 3-D orthorhombic wave propa‐\n       gation with zone's approximation.\n\nSYNOPSIS\n       sfortholrzone < c11.rsf  seta1=seta1.rsf  fft=fft.rsf  left=left.rsf  >\n       right.rsf  seed=time(NULL  eps=1.e-4  npk=20  dt= mode=0 tilt=false ap‐\n       prox=false reduce=false\n\nPARAMETERS\n       approx =false      if true, use zone's approximation instead  of  exact\n              phase velocity\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0       '0'  means  quasi-P  (default),  '1' means quasi-S, '2'\n              means quasi-S2\n       npk    =20      maximum rank\n       reduce =false      if true, use the expirical linear  relationship  be‐\n              tween qv and qh\n       seed   =time(NULL ®\n       file   seta1 =      auxiliary input file name\n       tilt   =false ®\nSOURCE\n       user/jsun/Mortholrzone.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfortholrzone(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthon-Tuple{}","page":"Home","title":"Madagascar.sforthon","text":"sforthon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthon. See ?m8r for examples.\n\nRSF Documentation\n\nsforthon(1)                   Madagascar Manuals                   sforthon(1)\n\nNAME\n       sforthon - Non-stationary orthogonalization\n\nSYNOPSIS\n       sforthon  <  fnoi.rsf sig=fsig.rsf > fnoi2.rsf sig2=fsig2.rsf niter=100\n       verb=y eps=0.0f rect#= shift#=\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       file   sig =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chenyk/Morthon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sforthon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthonc-Tuple{}","page":"Home","title":"Madagascar.sforthonc","text":"sforthonc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthonc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthonc. See ?m8r for examples.\n\nRSF Documentation\n\nsforthonc(1)                  Madagascar Manuals                  sforthonc(1)\n\nNAME\n       sforthonc - Non-stationary orthogonalization for complex value\n\nSYNOPSIS\n       sforthonc  < fnoi.rsf sig=fsig.rsf > fnoi2.rsf sig2=fsig2.rsf niter=100\n       verb=y eps=0.0f rect#= shift#=\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       file   sig =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/chenyk/Morthonc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sforthonc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sforthowave-Tuple{}","page":"Home","title":"Madagascar.sforthowave","text":"sforthowave(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sforthowave on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sforthowave. See ?m8r for examples.\n\nRSF Documentation\n\nsforthowave(1)                Madagascar Manuals                sforthowave(1)\n\nNAME\n       sforthowave - Simple 3-D wave propagation\n\nSYNOPSIS\n       sforthowave  < Fw.rsf > Fo.rsf ref=Fr.rsf snaps=snaps.rsf left=left.rsf\n       right=right.rsf mid=mid.rsf verb=y cmplx=n pad1=1 snap=0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   left =      auxiliary input file name\n       file   mid =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/songxl/Morthowave.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sforthowave(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortllr-Tuple{}","page":"Home","title":"Madagascar.sfortllr","text":"sfortllr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortllr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortllr. See ?m8r for examples.\n\nRSF Documentation\n\nsfortllr(1)                   Madagascar Manuals                   sfortllr(1)\n\nNAME\n       sfortllr  - Lowrank decomposition for 3-D orthorhombic wave propagation\n       with linearization.\n\nSYNOPSIS\n       sfortllr   <   velz.rsf   fft=fft.rsf   >   middle.rsf    left=left.rsf\n       right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       file   right =      auxiliary output file name\n       seed   =time(NULL ®\nSOURCE\n       user/songxl/Mortllr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfortllr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfortlr-Tuple{}","page":"Home","title":"Madagascar.sfortlr","text":"sfortlr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfortlr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfortlr. See ?m8r for examples.\n\nRSF Documentation\n\nsfortlr(1)                    Madagascar Manuals                    sfortlr(1)\n\nNAME\n       sfortlr - Lowrank decomposition for 3-D orthorhombic wave propagation.\n\nSYNOPSIS\n       sfortlr    <    velz.rsf   fft=fft.rsf   >   middle.rsf   left=left.rsf\n       right=right.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       file   right =      auxiliary output file name\n       seed   =time(NULL ®\nSOURCE\n       user/songxl/Mortlr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfortlr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckxx-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckxx","text":"sfosam2dckxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckxx(1)               Madagascar Manuals               sfosam2dckxx(1)\n\nNAME\n       sfosam2dckxx  -  Lowrank  decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckxx  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam2dckxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckxxxx-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckxxxx","text":"sfosam2dckxxxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckxxxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckxxxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckxxxx(1)             Madagascar Manuals             sfosam2dckxxxx(1)\n\nNAME\n       sfosam2dckxxxx  - Lowrank decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckxxxx  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckxxxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam2dckxxxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckxxxz-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckxxxz","text":"sfosam2dckxxxz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckxxxz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckxxxz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckxxxz(1)             Madagascar Manuals             sfosam2dckxxxz(1)\n\nNAME\n       sfosam2dckxxxz  - Lowrank decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckxxxz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckxxxz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam2dckxxxz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckxxzz-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckxxzz","text":"sfosam2dckxxzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckxxzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckxxzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckxxzz(1)             Madagascar Manuals             sfosam2dckxxzz(1)\n\nNAME\n       sfosam2dckxxzz  - Lowrank decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckxxzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckxxzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam2dckxxzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckxzzz-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckxzzz","text":"sfosam2dckxzzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckxzzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckxzzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckxzzz(1)             Madagascar Manuals             sfosam2dckxzzz(1)\n\nNAME\n       sfosam2dckxzzz  - Lowrank decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckxzzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckxzzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam2dckxzzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckzz-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckzz","text":"sfosam2dckzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckzz(1)               Madagascar Manuals               sfosam2dckzz(1)\n\nNAME\n       sfosam2dckzz  -  Lowrank  decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckzz  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam2dckzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam2dckzzzz-Tuple{}","page":"Home","title":"Madagascar.sfosam2dckzzzz","text":"sfosam2dckzzzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam2dckzzzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam2dckzzzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam2dckzzzz(1)             Madagascar Manuals             sfosam2dckzzzz(1)\n\nNAME\n       sfosam2dckzzzz  - Lowrank decomposition for 2-D isotropic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfosam2dckzzzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam2dckzzzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam2dckzzzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxx-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxx","text":"sfosam3dckxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxx(1)               Madagascar Manuals               sfosam3dckxx(1)\n\nNAME\n       sfosam3dckxx  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxx  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxxxx-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxxxx","text":"sfosam3dckxxxx(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxxxx on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxxxx. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxxxx(1)             Madagascar Manuals             sfosam3dckxxxx(1)\n\nNAME\n       sfosam3dckxxxx  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxxxx  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxxxx.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxxxx(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxxxy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxxxy","text":"sfosam3dckxxxy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxxxy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxxxy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxxxy(1)             Madagascar Manuals             sfosam3dckxxxy(1)\n\nNAME\n       sfosam3dckxxxy  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxxxy  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxxxy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxxxy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxxxz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxxxz","text":"sfosam3dckxxxz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxxxz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxxxz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxxxz(1)             Madagascar Manuals             sfosam3dckxxxz(1)\n\nNAME\n       sfosam3dckxxxz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxxxz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxxxz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxxxz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxxyy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxxyy","text":"sfosam3dckxxyy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxxyy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxxyy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxxyy(1)             Madagascar Manuals             sfosam3dckxxyy(1)\n\nNAME\n       sfosam3dckxxyy  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxxyy  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxxyy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxxyy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxxyz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxxyz","text":"sfosam3dckxxyz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxxyz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxxyz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxxyz(1)             Madagascar Manuals             sfosam3dckxxyz(1)\n\nNAME\n       sfosam3dckxxyz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxxyz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxxyz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxxyz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxy","text":"sfosam3dckxy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxy(1)               Madagascar Manuals               sfosam3dckxy(1)\n\nNAME\n       sfosam3dckxy  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxy  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckxy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxyyy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxyyy","text":"sfosam3dckxyyy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxyyy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxyyy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxyyy(1)             Madagascar Manuals             sfosam3dckxyyy(1)\n\nNAME\n       sfosam3dckxyyy  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxyyy  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxyyy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxyyy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxyyz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxyyz","text":"sfosam3dckxyyz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxyyz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxyyz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxyyz(1)             Madagascar Manuals             sfosam3dckxyyz(1)\n\nNAME\n       sfosam3dckxyyz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxyyz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxyyz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxyyz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxyzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxyzz","text":"sfosam3dckxyzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxyzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxyzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxyzz(1)             Madagascar Manuals             sfosam3dckxyzz(1)\n\nNAME\n       sfosam3dckxyzz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxyzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxyzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxyzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxz","text":"sfosam3dckxz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxz(1)               Madagascar Manuals               sfosam3dckxz(1)\n\nNAME\n       sfosam3dckxz  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxz  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckxz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckxzzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckxzzz","text":"sfosam3dckxzzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckxzzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckxzzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckxzzz(1)             Madagascar Manuals             sfosam3dckxzzz(1)\n\nNAME\n       sfosam3dckxzzz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckxzzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckxzzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckxzzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyy","text":"sfosam3dckyy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyy(1)               Madagascar Manuals               sfosam3dckyy(1)\n\nNAME\n       sfosam3dckyy  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyy  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckyy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyyyy-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyyyy","text":"sfosam3dckyyyy(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyyyy on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyyyy. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyyyy(1)             Madagascar Manuals             sfosam3dckyyyy(1)\n\nNAME\n       sfosam3dckyyyy  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyyyy  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyyyy.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckyyyy(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyyyz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyyyz","text":"sfosam3dckyyyz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyyyz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyyyz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyyyz(1)             Madagascar Manuals             sfosam3dckyyyz(1)\n\nNAME\n       sfosam3dckyyyz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyyyz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyyyz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckyyyz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyyzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyyzz","text":"sfosam3dckyyzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyyzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyyzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyyzz(1)             Madagascar Manuals             sfosam3dckyyzz(1)\n\nNAME\n       sfosam3dckyyzz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyyzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyyzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckyyzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyz","text":"sfosam3dckyz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyz(1)               Madagascar Manuals               sfosam3dckyz(1)\n\nNAME\n       sfosam3dckyz  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyz  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckyz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckyzzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckyzzz","text":"sfosam3dckyzzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckyzzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckyzzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckyzzz(1)             Madagascar Manuals             sfosam3dckyzzz(1)\n\nNAME\n       sfosam3dckyzzz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckyzzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckyzzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckyzzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckzz","text":"sfosam3dckzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckzz(1)               Madagascar Manuals               sfosam3dckzz(1)\n\nNAME\n       sfosam3dckzz  -  Lowrank  decomposition  for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckzz  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfosam3dckzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfosam3dckzzzz-Tuple{}","page":"Home","title":"Madagascar.sfosam3dckzzzz","text":"sfosam3dckzzzz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfosam3dckzzzz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfosam3dckzzzz. See ?m8r for examples.\n\nRSF Documentation\n\nsfosam3dckzzzz(1)             Madagascar Manuals             sfosam3dckzzzz(1)\n\nNAME\n       sfosam3dckzzzz  -  Lowrank decomposition for 3-D transversely isotropic\n       wave propagation.\n\nSYNOPSIS\n       sfosam3dckzzzz  <  vel.rsf  fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/junyan/Mosam3dckzzzz.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfosam3dckzzzz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoshift1-Tuple{}","page":"Home","title":"Madagascar.sfoshift1","text":"sfoshift1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoshift1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoshift1. See ?m8r for examples.\n\nRSF Documentation\n\nsfoshift1(1)                  Madagascar Manuals                  sfoshift1(1)\n\nNAME\n       sfoshift1 - Generate shifts with offset for 1-D regularized autoregres‐\n       sion.\n\nSYNOPSIS\n       sfoshift1 < in.rsf > shift.rsf ns= nf=1\n\nPARAMETERS\n       int    nf =1      offset of first shift\n       int    ns =      number of shifts\nSOURCE\n       user/yliu/Moshift1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfoshift1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfotsu-Tuple{}","page":"Home","title":"Madagascar.sfotsu","text":"sfotsu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfotsu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfotsu. See ?m8r for examples.\n\nRSF Documentation\n\nsfotsu(1)                     Madagascar Manuals                     sfotsu(1)\n\nNAME\n       sfotsu  -  Compute  a threshold value from histogram using Otsu's algo‐\n       rithm.\n\nSYNOPSIS\n       sfotsu < in.rsf\n\nSOURCE\n       system/generic/Motsu.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfotsu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfovc-Tuple{}","page":"Home","title":"Madagascar.sfovc","text":"sfovc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfovc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfovc. See ?m8r for examples.\n\nRSF Documentation\n\nsfovc(1)                      Madagascar Manuals                      sfovc(1)\n\nNAME\n       sfovc - Oriented velocity continuation.\n\nSYNOPSIS\n       sfovc < in.rsf > out.rsf eps=0.1 nv=1 lagrange=n v0=0. vmax=\n\nCOMMENTS\n       Axis order: t, p, x\n\nPARAMETERS\n       float  eps =0.1      stretch regularization\n       bool   lagrange =n [y/n]     Use Lagrangian method\n       int    nv =1      number of velocity steps\n       float  v0 =0.       starting velocity\n       float  vmax =      end velocity\nSOURCE\n       system/seismic/Movc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfovc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfovcco-Tuple{}","page":"Home","title":"Madagascar.sfovcco","text":"sfovcco(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfovcco on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfovcco. See ?m8r for examples.\n\nRSF Documentation\n\nsfovcco(1)                    Madagascar Manuals                    sfovcco(1)\n\nNAME\n       sfovcco - Prestack (common-offset) 2-D oriented velocity continuation.\n\nSYNOPSIS\n       sfovcco < in.rsf > out.rsf verb=y nv= dv= v0=\n\nCOMMENTS\n       Axes: (Omega,h,k,p) -> (Omega,v,k,p)\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Movcco.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfovcco(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfovczo-Tuple{}","page":"Home","title":"Madagascar.sfovczo","text":"sfovczo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfovczo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfovczo. See ?m8r for examples.\n\nRSF Documentation\n\nsfovczo(1)                    Madagascar Manuals                    sfovczo(1)\n\nNAME\n       sfovczo - Post-stack 2-D oriented velocity continuation.\n\nSYNOPSIS\n       sfovczo < in.rsf > out.rsf verb=y nv= dv= v0=\n\nCOMMENTS\n       Axes: (Omega,k,p) -> (Omega,v,k,p)\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Movczo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfovczo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfovczop-Tuple{}","page":"Home","title":"Madagascar.sfovczop","text":"sfovczop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfovczop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfovczop. See ?m8r for examples.\n\nRSF Documentation\n\nsfovczop(1)                   Madagascar Manuals                   sfovczop(1)\n\nNAME\n       sfovczop  -  Post-stack 2-D oriented velocity continuation, with OpenMP\n       Parallelism on frequency loop\n\nSYNOPSIS\n       sfovczop < in.rsf > out.rsf verb=y nv= dv= v0=\n\nCOMMENTS\n       Axes: (Omega,k,p) -> (Omega,v,k,p)\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/luke/Movczop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfovczop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfoway1-Tuple{}","page":"Home","title":"Madagascar.sfoway1","text":"sfoway1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfoway1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfoway1. See ?m8r for examples.\n\nRSF Documentation\n\nsfoway1(1)                    Madagascar Manuals                    sfoway1(1)\n\nNAME\n       sfoway1 - Oriented one-way wave equation.\n\nSYNOPSIS\n       sfoway1 < in.rsf > out.rsf velocity=vel.rsf vgrad=vgrad.rsf eps=0.1 la‐\n       grange=n\n\nCOMMENTS\n       Axis order: x, p, t\n\nPARAMETERS\n       float  eps =0.1      stretch regularization\n       bool   lagrange =n [y/n]     Use Lagrangian method\n       file   velocity =      auxiliary input file name\n       file   vgrad =      auxiliary input file name\nSOURCE\n       system/seismic/Moway1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfoway1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpad-Tuple{}","page":"Home","title":"Madagascar.sfpad","text":"sfpad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpad. See ?m8r for examples.\n\nRSF Documentation\n\nsfpad(1)                      Madagascar Manuals                      sfpad(1)\n\nNAME\n       sfpad - Pad a dataset with zeros.\n\nSYNOPSIS\n       sfpad < in.rsf > out.rsf beg#=0 end#=0 n#=\n\nCOMMENTS\n       n#out is equivalent to n#, both of them overwrite end#.\n\n       Other  parameters from the command line are passed to the output (simi‐\n       lar to sfput).\n\nPARAMETERS\n       int    beg# =0      the number of zeros to add before the beginning  of\n              #-th axis\n       int    end#  =0       the  number of zeros to add after the end of #-th\n              axis\n       int    n# =      the output length of #-th axis - padding at the end\nUSED IN\n       bei/dwnc/sigmoid\n       bei/ft1/autocor\n       bei/ft1/brad\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       4 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       pad.html\nSOURCE\n       system/main/pad.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfpad\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpad2-Tuple{}","page":"Home","title":"Madagascar.sfpad2","text":"sfpad2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpad2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpad2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpad2(1)                     Madagascar Manuals                     sfpad2(1)\n\nNAME\n       sfpad2 - Pad boundary\n\nSYNOPSIS\n       sfpad2 < Fin.rsf > Fout.rsf top=0 bottom=0 left=0 right=0\n\nPARAMETERS\n       int    bottom =0 ®\n       int    left =0 ®\n       int    right =0 ®\n       int    top =0 ®\nSOURCE\n       user/zhiguang/Mpad2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpad2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpad2nextfastsize-Tuple{}","page":"Home","title":"Madagascar.sfpad2nextfastsize","text":"sfpad2nextfastsize(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpad2nextfastsize on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpad2nextfastsize. See ?m8r for examples.\n\nRSF Documentation\n\nsfpad2nextfastsize(1)         Madagascar Manuals         sfpad2nextfastsize(1)\n\nNAME\n       sfpad2nextfastsize  -  How much to pad to get to next fast c2c FFT size\n       (factors: 2,3 and 5)\n\nSYNOPSIS\n       sfpad2nextfastsize n=\n\nCOMMENTS\n       Wrapper for kiss_fft_next_fast_size.\n\nPARAMETERS\n       int    n = ®\nSOURCE\n       user/ivlad/Mpad2nextfastsize.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sfpad2nextfastsize(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpadfault-Tuple{}","page":"Home","title":"Madagascar.sfpadfault","text":"sfpadfault(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpadfault on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpadfault. See ?m8r for examples.\n\nRSF Documentation\n\nsfpadfault(1)                 Madagascar Manuals                 sfpadfault(1)\n\nNAME\n       sfpadfault - Horizontally pad fault\n\nSYNOPSIS\n       sfpadfault    <    in.rsf   slip=slip.rsf   >   out.rsf   mask=mask.rsf\n       bound=bound.rsf dip=dip.rsf shift=shift.rsf newdip=newdip.rsf ppbig=pp‐\n       big.rsf extend=y mode=y conf=1 order=2\n\nPARAMETERS\n       file   bound =      auxiliary output file name\n       int    conf =1 ®\n       file   dip =      auxiliary input file name\n       bool   extend =y [y/n]\n       file   mask =      auxiliary output file name\n       bool   mode =y [y/n]\n       file   newdip =      auxiliary output file name\n       int    order =2 ®\n       file   ppbig =      auxiliary output file name\n       file   shift =      auxiliary input file name\n       file   slip =      auxiliary input file name\nSOURCE\n       user/zhiguang/Mpadfault.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpadfault(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpadpt3D-Tuple{}","page":"Home","title":"Madagascar.sfpadpt3D","text":"sfpadpt3D(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpadpt3D on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpadpt3D. See ?m8r for examples.\n\nRSF Documentation\n\nsfpadpt3D(1)                  Madagascar Manuals                  sfpadpt3D(1)\n\nNAME\n       sfpadpt3D -\n\nSYNOPSIS\n       sfpadpt3D < Fin.rsf > Fou.rsf verb=n modTin= topoW= topo=\n\nCOMMENTS\n       Write data datumed to windowed point cloud to original point cloud Cre‐\n       ated by: Dylan Hickson, Colorado School of Mines  Created  on:  Mar  9,\n       2022\n\nPARAMETERS\n       string modTin = ®\n       string topo =      Local functions\n       string topoW = ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mpadpt3D.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpadpt3D(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpadzero-Tuple{}","page":"Home","title":"Madagascar.sfpadzero","text":"sfpadzero(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpadzero on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpadzero. See ?m8r for examples.\n\nRSF Documentation\n\nsfpadzero(1)                  Madagascar Manuals                  sfpadzero(1)\n\nNAME\n       sfpadzero  -  Interpolation from a coarser grid to finer grid with zero\n       padded\n\nSYNOPSIS\n       sfpadzero < in.rsf > out.rsf scalex= scalez=\n\nPARAMETERS\n       int    scalex = ®\n       int    scalez = ®\nSOURCE\n       user/zhiguang/Mpadzero.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpadzero(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpame2d-Tuple{}","page":"Home","title":"Madagascar.sfpame2d","text":"sfpame2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpame2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpame2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpame2d(1)                   Madagascar Manuals                   sfpame2d(1)\n\nNAME\n       sfpame2d  - 2-D elasitc wave modeling and vector field decompostion us‐\n       ing pseudo-analytical method\n\nSYNOPSIS\n       sfpame2d  vp=fvelp.rsf  vs=fvels.rsf   <   fsource.rsf   >   fwavup.rsf\n       wavwp=fwavwp.rsf   wavus=fwavus.rsf   wavws=fwavws.rsf   wavu=fwavu.rsf\n       wavw=fwavw.rsf opt=0 dt= nt= isx=  isz=  nbt=44  nbb=44  nxl=44  nxr=44\n       czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1\n\nPARAMETERS\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       int    nxl =44 ®\n       int    nxr =44      assume ABC pars are the same\n       int    opt =0      if y, determine optimal size for efficiency\n       int    snap =1 ®\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\n       file   wavu =      auxiliary output file name\n       file   wavus =      auxiliary output file name\n       file   wavw =      auxiliary output file name\n       file   wavwp =      auxiliary output file name\n       file   wavws =      auxiliary output file name\nSOURCE\n       user/junyan/Mpame2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpame2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpamti2d-Tuple{}","page":"Home","title":"Madagascar.sfpamti2d","text":"sfpamti2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpamti2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpamti2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpamti2d(1)                  Madagascar Manuals                  sfpamti2d(1)\n\nNAME\n       sfpamti2d  -  Modeling  of  pure acoustic wave in 3-D transversely iso‐\n       tropic media with psuedo-analytic method\n\nSYNOPSIS\n       sfpamti2d  >  out.rsf  vel=vel.rsf  sigma=fsigma.rsf   delta=fdelta.rsf\n       seta=fseta.rsf  <  source.rsf  opt=1  dt=  nt=  isx= isz= nbt=44 nbb=44\n       nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1\n\nPARAMETERS\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       file   delta =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       int    nxl =44 ®\n       int    nxr =44      assume ABC pars are the same\n       int    opt =1      if y, determine optimal size for efficiency\n       file   seta =      auxiliary input file name\n       file   sigma =      auxiliary input file name\n       int    snap =1 ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/junyan/Mpamti2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpamti2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfparcel-Tuple{}","page":"Home","title":"Madagascar.sfparcel","text":"sfparcel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfparcel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfparcel. See ?m8r for examples.\n\nRSF Documentation\n\nsfparcel(1)                   Madagascar Manuals                   sfparcel(1)\n\nNAME\n       sfparcel - Patching test.\n\nSYNOPSIS\n       sfparcel < in.rsf > out.rsf w= k=\n\nPARAMETERS\n       ints   k =       [dim]\n       ints   w =       [dim]\nSOURCE\n       user/gee/Mparcel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfparcel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpassive2d-Tuple{}","page":"Home","title":"Madagascar.sfpassive2d","text":"sfpassive2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpassive2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpassive2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpassive2d(1)                Madagascar Manuals                sfpassive2d(1)\n\nNAME\n       sfpassive2d - 2-D passive seismic RTM and its adjoint\n\nSYNOPSIS\n       sfpassive2d  <  in.rsf  > out.rsf velocity=vel.rsf wave=wave.rsf verb=n\n       adj=n pas=n abc=n snap=0 depth=0 nt= dt= cb=0.0f\n\nPARAMETERS\n       bool   abc =n [y/n]     absorbing boundary condition\n       bool   adj =n [y/n]     adjoint flag, 0: modeling, 1: migration\n       float  cb =0.0f ®\n       int    depth =0      surface\n       float  dt = ®\n       int    nt = ®\n       bool   pas =n [y/n]     passive flag, 0: exploding  reflector  rtm,  1:\n              passive seismic imaging\n       int    snap =0      wavefield snapshot flag\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wave =      auxiliary output file name\nSOURCE\n       user/jsun/Mpassive2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpassive2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpatch-Tuple{}","page":"Home","title":"Madagascar.sfpatch","text":"sfpatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpatch. See ?m8r for examples.\n\nRSF Documentation\n\nsfpatch(1)                    Madagascar Manuals                    sfpatch(1)\n\nNAME\n       sfpatch - Patching (N-dimensional).\n\nSYNOPSIS\n       sfpatch < in.rsf > out.rsf n0= w= p= inv=n verb=n weight=n dim=dim0\n\nCOMMENTS\n       w  is  window  size  (defaults to n1,n2,...)  p is number of patches in\n       different dimensions (defaults to 1,1,...)\n\n       If inv=n, the number of output dimensions is twice the number of  input\n       dimensions.  If inv=y, the number of output dimensions is half the num‐\n       ber of input dimensions.\n\n       September        2013        program        of        the        month:\n       http://ahay.org/blog/2013/09/14/program-of-the-month-sfpatch/\n\nPARAMETERS\n       int    dim =dim0 ®\n       bool   inv =n [y/n]     inverse or forward operation\n       ints   n0 =      data dimensions (for inv=y) [dim]\n       ints   p =      number of windows [dim]\n       bool   verb =n [y/n]     verbosity flag\n       ints   w =      window size [dim]\n       bool   weight =n [y/n]     if y, apply weighting to each patch\nUSED IN\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\nSOURCE\n       user/fomels/Mpatch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpatch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpathmin-Tuple{}","page":"Home","title":"Madagascar.sfpathmin","text":"sfpathmin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpathmin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpathmin. See ?m8r for examples.\n\nRSF Documentation\n\nsfpathmin(1)                  Madagascar Manuals                  sfpathmin(1)\n\nNAME\n       sfpathmin  -  Program  for  iteratively  determining  the  optimal path\n       through a cost function input array.  Input file's second dimension  is\n       a  parameter  that  can vary along the path, and the first dimension is\n       \"time\", or a coordinate that the output path, R(t), will be a  function\n       of.  Dimensions  greater than 2 in the input array represent additional\n       panels to calculate the path through. To use this program for picking a\n       path  maximizing  an  objective function, first transform the objective\n       function lpha by exp(-1*lpha) and feed the resulting output  to  this\n       program. Path integral minimization is in the manner of \"Path Optimiza‐\n       tion with Application to Tunneling\", Dorothea  M.  Einarsdottir,  Andri\n       Arnaldsson, Finnbogi Oskarsson, and Hannes Jonsson, 2010\n\nSYNOPSIS\n       sfpathmin  < _in.rsf > _out.rsf k=1 kink=1 lr=.3 g=.1 knots=11 niter=10\n       damp=.5 shove=1000 aniso1=D[1]/D[0] dorder=6 srad=2 nsmooth=1 eps=0.\n\nPARAMETERS\n       float  aniso1 =D[1]/D[0]      anisotropy of 2nd axis relative to first\n       float  damp =.5      if the path goes out of  bounds,  we  reflect  and\n              dampen the rate of change by this much\n       int    dorder =6      derivative order (stencil size) for gradient (dS)\n              calculation\n       float  eps =0.       if the  change  and  gradient  are  simultaneously\n              lower than this, terminate early\n       float  g  =.1      scale the momentum for updating the path at each it‐\n              eration by how much before applying?\n       float  k =1      stiffness relative to attraction\n       float  kink =1      resistance to kinks\n       int    knots =11      number of knots\n       float  lr =.3      learning rate\n       int    niter =10      number of iterations\n       int    nsmooth =1      number of input panel gradient (dS) smoothings\n       float  shove =1000      size of initial random lateral shove\n       int    srad =2      smoothing radius for input panel gradient (dS)\nSOURCE\n       user/luke/Mpathmin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpathmin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpathmin-mov-Tuple{}","page":"Home","title":"Madagascar.sfpathmin-mov","text":"sfpathmin-mov(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpathmin-mov on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpathmin-mov. See ?m8r for examples.\n\nRSF Documentation\n\nsfpathmin-mov(1)              Madagascar Manuals              sfpathmin-mov(1)\n\nNAME\n       sfpathmin-mov  -  Program  for iteratively determining the optimal path\n       through a cost function input array.  Input file's second dimension  is\n       a  parameter  that  can vary along the path, and the first dimension is\n       \"time\", or a coordinate that the output path, R(t), will be a  function\n       of.  Dimensions  greater than 2 in the input array represent additional\n       panels to calculate the path through. To use this program for picking a\n       path  maximizing  an  objective function, first transform the objective\n       function lpha by exp(-1*lpha) and feed the resulting output  to  this\n       program. Path integral minimization is in the manner of \"Path Optimiza‐\n       tion with Application to Tunneling\", Dorothea  M.  Einarsdottir,  Andri\n       Arnaldsson, Finnbogi Oskarsson, and Hannes Jonsson, 2010\n\nSYNOPSIS\n       sfpathmin-mov  <  _in.rsf  >  _out.rsf  k=1  kink=1 lr=.3 g=.1 knots=11\n       niter=10 damp=.5 shove=1000 movie= aniso1=D[1]/D[0] dorder=6 srad=2 ns‐\n       mooth=1 eps=0.\n\nPARAMETERS\n       float  aniso1 =D[1]/D[0]      anisotropy of 2nd axis relative to first\n       float  damp  =.5       if  the  path goes out of bounds, we reflect and\n              dampen the rate of change by this much\n       int    dorder =6      derivative order (stencil size) for gradient (dS)\n              calculation\n       float  eps  =0.        if  the  change  and gradient are simultaneously\n              lower than this, terminate early\n       float  g =.1      scale the momentum for updating the path at each  it‐\n              eration by how much before applying?\n       float  k =1      stiffness relative to attraction\n       float  kink =1      resistance to kinks\n       int    knots =11      number of knots\n       float  lr =.3      learning rate\n       int    movie = ®\n       int    niter =10      number of iterations\n       int    nsmooth =1      number of input panel gradient (dS) smoothings\n       float  shove =1000      size of initial random lateral shove\n       int    srad =2      smoothing radius for input panel gradient (dS)\nSOURCE\n       user/luke/Mpathmin-mov.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpathmin-mov(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpca-Tuple{}","page":"Home","title":"Madagascar.sfpca","text":"sfpca(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpca on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpca. See ?m8r for examples.\n\nRSF Documentation\n\nsfpca(1)                      Madagascar Manuals                      sfpca(1)\n\nNAME\n       sfpca - KL transform.\n\nSYNOPSIS\n       sfpca < in.rsf > out.rsf verb=y nc=n1 eta=0.9\n\nPARAMETERS\n       float  eta =0.9      energy ratio for signal subspace [ 0 eta < 1 ]\n       int    nc =n1      number of components [ 0 < nc < n1 ]\n       bool   verb =y [y/n]     verbosity\nUSED IN\n       chen/test/fpca\nSOURCE\n       user/chen/Mpca.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpca(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpchain-Tuple{}","page":"Home","title":"Madagascar.sfpchain","text":"sfpchain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpchain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpchain. See ?m8r for examples.\n\nRSF Documentation\n\nsfpchain(1)                   Madagascar Manuals                   sfpchain(1)\n\nNAME\n       sfpchain - Nonstationary Prony by chain of PEFs\n\nSYNOPSIS\n       sfpchain  <  inp.rsf  pef=pef.rsf  > out.rsf nc=1 verb=(bool) (1 == nt)\n       niter=0 liter=50 rect=1\n\nPARAMETERS\n       int    liter =50      number of linear iterations\n       int    nc =1      number of components\n       int    niter =0      number of iterations\n       file   pef =      auxiliary output file name\n       int    rect =1      smoothing in time\n       bool   verb =(bool) (1 == nt) [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mpchain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpchain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpchain1-Tuple{}","page":"Home","title":"Madagascar.sfpchain1","text":"sfpchain1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpchain1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpchain1. See ?m8r for examples.\n\nRSF Documentation\n\nsfpchain1(1)                  Madagascar Manuals                  sfpchain1(1)\n\nNAME\n       sfpchain1 - Nonstationary Prony by chain of PEFs - linear operator\n\nSYNOPSIS\n       sfpchain1 < inp.rsf pef=pef.rsf sig=sig.rsf > out.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   pef =      auxiliary input file name\n       file   sig =      auxiliary input file name\nSOURCE\n       user/fomels/Mpchain1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpchain1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpclip-Tuple{}","page":"Home","title":"Madagascar.sfpclip","text":"sfpclip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpclip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpclip. See ?m8r for examples.\n\nRSF Documentation\n\nsfpclip(1)                    Madagascar Manuals                    sfpclip(1)\n\nNAME\n       sfpclip - Percentile clip. Shell for sfclip(sfquantile(input)).\n\nSYNOPSIS\n       sfpclip inp= out= verb=n pclip=99\n\nPARAMETERS\n       string inp =      input file\n       string out =      output file\n       float  pclip =99      percentile clip\n       bool   verb =n [y/n]     if y, print system commands, outputs\nSOURCE\n       user/ivlad/Mpclip.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpclip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpclipc2-Tuple{}","page":"Home","title":"Madagascar.sfpclipc2","text":"sfpclipc2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpclipc2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpclipc2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpclipc2(1)                  Madagascar Manuals                  sfpclipc2(1)\n\nNAME\n       sfpclipc2 - One-or Two-sided Percentile Data clipping (C language).\n\nSYNOPSIS\n       sfpclipc2 < in.rsf > out.rsf upclip=99 lpclip=0\n\nCOMMENTS\n       For    example:    A=1,2,3,...,100    sfpclipc2    upclip=98   lpclip=3\n       A'=3,3,3,...,98,98,98\n\nPARAMETERS\n       float  lpclip =0      percentile lower cliping value\n       float  upclip =99      percentile upper cliping value\nSOURCE\n       user/chenyk/Mpclipc2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpclipc2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpcrdata2-Tuple{}","page":"Home","title":"Madagascar.sfpcrdata2","text":"sfpcrdata2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpcrdata2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpcrdata2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpcrdata2(1)                 Madagascar Manuals                 sfpcrdata2(1)\n\nNAME\n       sfpcrdata2 - Prepare data for 2-D angle-domain migration.\n\nSYNOPSIS\n       sfpcrdata2 < data.rsf > out.rsf verb=n absoff=n filter=y KMAH=y diff=y\n\nPARAMETERS\n       bool   KMAH =y [y/n]     y - account for phase shifts due to KMAH index\n       bool   absoff  =n  [y/n]     y - absolute offset (default - relative to\n              shot axis)\n       bool   diff =y [y/n]     y - apply half-order differentiation\n       bool   filter =y [y/n]     y - antialiasing filter for data\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cram/Mpcrdata2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpcrdata2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpcrdata3-Tuple{}","page":"Home","title":"Madagascar.sfpcrdata3","text":"sfpcrdata3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpcrdata3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpcrdata3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpcrdata3(1)                 Madagascar Manuals                 sfpcrdata3(1)\n\nNAME\n       sfpcrdata3 - Prepare data for 3-D angle-domain migration.\n\nSYNOPSIS\n       sfpcrdata3 < data.rsf > out.rsf verb=n erefl=n filter=y KMAH=y diff=y\n\nPARAMETERS\n       bool   KMAH =y [y/n]     y - account for phase shifts due to KMAH index\n       bool   diff =y [y/n]     y - apply differentiation\n       bool   erefl  =n  [y/n]     y  - assume data modeled with exploding re‐\n              flector\n       bool   filter =y [y/n]     y - antialiasing filter for data\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cram/Mpcrdata3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpcrdata3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpcrsurv3-Tuple{}","page":"Home","title":"Madagascar.sfpcrsurv3","text":"sfpcrsurv3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpcrsurv3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpcrsurv3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpcrsurv3(1)                 Madagascar Manuals                 sfpcrsurv3(1)\n\nNAME\n       sfpcrsurv3 - Prepare survey info for 3-D angle-domain migration.\n\nSYNOPSIS\n       sfpcrsurv3  <  data.rsf > survey.rsf sxsy=sxsy.rsf gxgy=gxgy.rsf verb=n\n       tri=n esmax=0.2 ehmax=0.1\n\nPARAMETERS\n       float  ehmax =0.1      Maximum edge length in the  receiver  triangula‐\n              tion\n       float  esmax =0.2      Maximum edge length in the shot triangulation\n       string gxgy =      File with receiver coordinates (auxiliary input file\n              name)\n       string sxsy =      File with shot  coordinates  (auxiliary  input  file\n              name)\n       bool   tri =n [y/n]     triangulation flag\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cram/Mpcrsurv3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpcrsurv3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpde2dadp-Tuple{}","page":"Home","title":"Madagascar.sfpde2dadp","text":"sfpde2dadp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpde2dadp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpde2dadp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpde2dadp(1)                 Madagascar Manuals                 sfpde2dadp(1)\n\nNAME\n       sfpde2dadp  -  Numerical  solution  of linear pde 2-d (X-Z-a) for phase\n       space escape positions, angle and traveltime\n\nSYNOPSIS\n       sfpde2dadp   <   in.rsf   >   out.rsf   slow=slow.rsf   slowz=slowz.rsf\n       slowx=slowx.rsf  iq=  method=  method_2d= niter=100 ixsmooth= izsmooth=\n       xsmooth= zsmooth= is_xinf= is_zinf= tol=0.000002*nx*nz cvgce=\n\nPARAMETERS\n       string cvgce =      output file for convergence\n       int    iq =      switch for escape variable 0=x, 1=a, 2=t, 3=z\n       int    is_xinf = ®\n       int    is_zinf = ®\n       int    ixsmooth = ®\n       int    izsmooth = ®\n       int    method = ®\n       int    method_2d = ®\n       int    niter =100      number of Gauss-Seidel iterations\n       file   slow =      auxiliary input file name\n       file   slowx =      auxiliary input file name\n       file   slowz =      auxiliary input file name\n       float  tol =0.000002*nx*nz      accuracy tolerance\n       float  xsmooth = ®\n       float  zsmooth = ®\nSOURCE\n       user/browaeys/Mpde2dadp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpde2dadp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpdr2d-Tuple{}","page":"Home","title":"Madagascar.sfpdr2d","text":"sfpdr2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpdr2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpdr2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpdr2d(1)                    Madagascar Manuals                    sfpdr2d(1)\n\nNAME\n       sfpdr2d - 2D Parametric Development of Reflections\n\nSYNOPSIS\n       sfpdr2d  <  dataFile.rsf  > outFile.rsf aux=auxFile.rsf vel=velFile.rsf\n       po=shotStart_ pn=recNum_ pd=recStep_ wh=11\n\nPARAMETERS\n       string aux =      output file  containing  semblance  measure  of  CIGs\n              stacking (auxiliary output file name)\n       float  pd =recStep_      increment of positions in stack section\n       int    pn =recNum_      number of positions in stack section\n       float  po =shotStart_      start position in stack section\n       string vel  =      velocity model file (velocity in m/s) (auxiliary in‐\n              put file name)\n       int    wh =11      height of a vertical window for  semblance  calcula‐\n              tion\nSOURCE\n       user/aklokov/Mpdr2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpdr2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpdrscan2d-Tuple{}","page":"Home","title":"Madagascar.sfpdrscan2d","text":"sfpdrscan2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpdrscan2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpdrscan2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpdrscan2d(1)                Madagascar Manuals                sfpdrscan2d(1)\n\nNAME\n       sfpdrscan2d - Velocity Scan by 2D Parametric Development of Reflections\n\nSYNOPSIS\n       sfpdrscan2d  < dataFile.rsf > outFile.rsf aux=auxFile.rsf po=shotStart_\n       pn=recNum_ pd=recStep_ vn=1 vo=1500 vd=50 wh=11\n\nPARAMETERS\n       string aux =      output file  containing  semblance  measure  of  CIGs\n              stacking (auxiliary output file name)\n       float  pd =recStep_      increment of positions in stack section\n       int    pn =recNum_      number of positions in stack section\n       float  po =shotStart_      start position in stack section\n       float  vd =50      increment of velocities\n       int    vn =1      number of scanned velocities\n       float  vo =1500      start velocity\n       int    wh  =11       height of a vertical window for semblance calcula‐\n              tion\nSOURCE\n       user/aklokov/Mpdrscan2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpdrscan2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpef-Tuple{}","page":"Home","title":"Madagascar.sfpef","text":"sfpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpef. See ?m8r for examples.\n\nRSF Documentation\n\nsfpef(1)                      Madagascar Manuals                      sfpef(1)\n\nNAME\n       sfpef - Wiener predictive error filtering\n\nSYNOPSIS\n       sfpef   <  inp.rsf  >  out.rsf  wiener=wien.rsf  mix=  minlag=  maxlag=\n       pnoise=0.001 nmix=1 mincorr= maxcorr=\n\nPARAMETERS\n       float  maxcorr =      end of autocorrelation window in sec\n       float  maxlag =      last lag of prediction filter (sec)\n       float  mincorr =      start of autocorrelation window in sec\n       float  minlag =      first lag of prediction filter (sec)\n       floats mix =      weights for moving average  of  the  autocorrelations\n              [nmix]\n       int    nmix =1      number of weights (floats) for moving averages\n       float  pnoise =0.001      relative additive noise level\n       string wiener  =       file  to  output Wiener filter (auxiliary output\n              file name)\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       su/main/pef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpefdeburst-Tuple{}","page":"Home","title":"Madagascar.sfpefdeburst","text":"sfpefdeburst(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpefdeburst on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpefdeburst. See ?m8r for examples.\n\nRSF Documentation\n\nsfpefdeburst(1)               Madagascar Manuals               sfpefdeburst(1)\n\nNAME\n       sfpefdeburst - Burst noise removal using PEF.\n\nSYNOPSIS\n       sfpefdeburst < in.rsf > out.rsf na=3 niter=10\n\nPARAMETERS\n       int    na =3      PEF length\n       int    niter =10      number of iterations\nSOURCE\n       user/gee/Mpefdeburst.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpefdeburst(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpermlr1-Tuple{}","page":"Home","title":"Madagascar.sfpermlr1","text":"sfpermlr1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpermlr1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpermlr1. See ?m8r for examples.\n\nRSF Documentation\n\nsfpermlr1(1)                  Madagascar Manuals                  sfpermlr1(1)\n\nNAME\n       sfpermlr1  -  Lowrank decomposition for prestack exploding reflector in\n       v(z).\n\nSYNOPSIS\n       sfpermlr1   <   vel.rsf   fft=fft.rsf   left=left.rsf   right=right.rsf\n       size=size.rsf seed=time(NULL eps=1.e-4 npk=5 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =5      maximum rank\n       file   right =      auxiliary output file name\n       seed   =time(NULL ®\n       file   size =      auxiliary output file name\nSOURCE\n       user/fomels/Mpermlr1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpermlr1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpermlr2-Tuple{}","page":"Home","title":"Madagascar.sfpermlr2","text":"sfpermlr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpermlr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpermlr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpermlr2(1)                  Madagascar Manuals                  sfpermlr2(1)\n\nNAME\n       sfpermlr2  - Lowrank decomposition for 2-D prestack exploding reflector\n       in V(z)\n\nSYNOPSIS\n       sfpermlr2   <   vel.rsf   fft=fft.rsf   left=left.rsf    >    right.rsf\n       seed=time(NULL tol=1.e-4 npk=20 dt= nh=\n\nPARAMETERS\n       dt     =      time step\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nh     = ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       tol    =1.e-4      tolerance\nSOURCE\n       user/fomels/Mpermlr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpermlr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpermlr2ddti-Tuple{}","page":"Home","title":"Madagascar.sfpermlr2ddti","text":"sfpermlr2ddti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpermlr2ddti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpermlr2ddti. See ?m8r for examples.\n\nRSF Documentation\n\nsfpermlr2ddti(1)              Madagascar Manuals              sfpermlr2ddti(1)\n\nNAME\n       sfpermlr2ddti - None\n\nSYNOPSIS\n       sfpermlr2ddti\n\nSOURCE\n       user/hwang/Mpermlr2ddti.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpermlr2ddti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpermlr3-Tuple{}","page":"Home","title":"Madagascar.sfpermlr3","text":"sfpermlr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpermlr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpermlr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpermlr3(1)                  Madagascar Manuals                  sfpermlr3(1)\n\nNAME\n       sfpermlr3  - Lowrank decomposition for 2-D prestack exploding reflector\n       in V(x,z)\n\nSYNOPSIS\n       sfpermlr3   <   vel.rsf   fft=fft.rsf   left=left.rsf    >    right.rsf\n       seed=time(NULL tol=1.e-4 npk=20 dt= eps=0.0 nh= equation=3 sub=true\n\nPARAMETERS\n       dt     =      time step\n       eps    =0.0      regularization\n       equation\n              =3      equation type\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nh     = ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       sub    =true      if subtract one\n       tol    =1.e-4      tolerance\nSOURCE\n       user/fomels/Mpermlr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpermlr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpermwave2d-Tuple{}","page":"Home","title":"Madagascar.sfpermwave2d","text":"sfpermwave2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpermwave2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpermwave2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpermwave2d(1)               Madagascar Manuals               sfpermwave2d(1)\n\nNAME\n       sfpermwave2d - Wavefield Extrapolation for 2D PERM\n\nSYNOPSIS\n       sfpermwave2d    <   data.rsf   >   image.rsf   wavelet=wavelet_file.rsf\n       left=left.rsf right=right.rsf mig=n nz= dz= imageit=0\n\nPARAMETERS\n       float  dz = ®\n       int    imageit =0      time for extracting image\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nz =      depth axis\n       file   right =      auxiliary input file name\n       file   wavelet =      auxiliary input file name\nSOURCE\n       user/hwang/Mpermwave2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpermwave2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpetscawefd2d-Tuple{}","page":"Home","title":"Madagascar.sfpetscawefd2d","text":"sfpetscawefd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpetscawefd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpetscawefd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpetscawefd2d(1)             Madagascar Manuals             sfpetscawefd2d(1)\n\nNAME\n       sfpetscawefd2d  - Implicit solution of 2-D acoustic wave equation, com‐\n       patibility interface with sfawefd2d\n\nSYNOPSIS\n       sfpetscawefd2d  <  Fwav.rsf  vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       wfl=Fwfl.rsf > Fdat.rsf den=Fden.rsf verb=n snap=n free=n expl=n dabc=n\n       jdata=1 jsnap=nt nqz=sf_n (az) nqx=sf_n  (ax)  oqz=sf_o  (az)  oqx=sf_o\n       (ax)\n\nPARAMETERS\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n (ax) ®\n       int    nqz =sf_n (az) ®\n       float  oqx =sf_o (ax) ®\n       float  oqz =sf_o (az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/petsc/Mpetscawefd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfpetscawefd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpfactor2-Tuple{}","page":"Home","title":"Madagascar.sfpfactor2","text":"sfpfactor2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpfactor2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpfactor2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpfactor2(1)                 Madagascar Manuals                 sfpfactor2(1)\n\nNAME\n       sfpfactor2 - Plane prediction filter on a helix.\n\nSYNOPSIS\n       sfpfactor2  >  filt.rsf  nt=  nx=  p= q= niter=20 na=25 eps=FLT_EPSILON\n       fixed=y lag=\n\nPARAMETERS\n       float  eps =FLT_EPSILON      compression tolerance\n       bool   fixed =y [y/n]     if fixed size\n       string lag = ®\n       int    na =25      filter size\n       int    niter =20      number of factorization iterations\n       int    nt = ®\n       int    nx = ®\n       float  p = ®\n       float  q = ®\nSOURCE\n       user/gee/Mpfactor2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpfactor2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpgreywfl-Tuple{}","page":"Home","title":"Madagascar.sfpgreywfl","text":"sfpgreywfl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpgreywfl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpgreywfl. See ?m8r for examples.\n\nRSF Documentation\n\nsfpgreywfl(1)                 Madagascar Manuals                 sfpgreywfl(1)\n\nNAME\n       sfpgreywfl - Plot wavefields over a background image\n\nSYNOPSIS\n       sfpgreywfl bg=None savefile= title= pclip=100 absclip=n scalebar=y bar‐\n       label=  timetext=y   bgcmap=viridis   wflcmap=gray   jsnap=1   aspect=1\n       tmin=None   tmax=None   figx=10  figy=8  xints=None  yints=None  fps=15\n       speedup=10 dpi=90 fontsize=16 verb=n\n\nCOMMENTS\n       Common usage examples      * Plot to screen  using  default  parameters\n                 sfpgreywfl  <  wavefield.rsf  bg=velocity.rsf       * Save to\n       file  using  custom  parameters            sfpgreywfl  <  wavefield.rsf\n       bg=velocity.rsf  jsnap=10  bgcmap=gray  wflcmap=seismic  fps=10  verb=y\n       savefile=output.mp4\n\nPARAMETERS\n       bool   absclip =n [y/n]     Clipping is done  for  all  gathers  rather\n              than per frame (y/n)\n       int    aspect =1      Aspect ratio\n       string barlabel =      Colorbar label\n       string bg =None      Background for animation. Zero if not supplied\n       string bgcmap   =viridis       Background  colormap.  See  https://mat‐\n              plotlib.org/users/colormaps.html\n       float  dpi =90      DPI\n       float  figx =10      Figure x size in inches\n       float  figy =8      Figure y size in inches\n       float  fontsize =16      Font size\n       float  fps =15      Frames per second (when saving file)\n       int    jsnap =1      Number of timesteps at which to plot wavefield\n       float  pclip =100      Clip amplitude percentage from (0-100)\n       string savefile =      Save animation to file. If not present,  display\n              animation.\n       bool   scalebar =y [y/n]     Colorbar\n       float  speedup  =10      Delay between frames (in milliseconds) will be\n              speedup*dt\n       bool   timetext =y [y/n]     Time text\n       string title =      Plot title\n       float  tmax =None      Maximum time\n       float  tmin =None      Minimum time\n       bool   verb =n [y/n]     Verbosity flag\n       string wflcmap =gray      Wavefield colormap (should be sequential)\n       int    xints =None      Max number of x intervals\n       int    yints =None      Max number of y intervals\nSOURCE\n       user/cdacosta/Mpgreywfl.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpgreywfl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfphaserot-Tuple{}","page":"Home","title":"Madagascar.sfphaserot","text":"sfphaserot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfphaserot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfphaserot. See ?m8r for examples.\n\nRSF Documentation\n\nsfphaserot(1)                 Madagascar Manuals                 sfphaserot(1)\n\nNAME\n       sfphaserot - Non-stationary phase rotation.\n\nSYNOPSIS\n       sfphaserot < inp.rsf phase=pha.rsf > out.rsf na=721 da=1.0 a0=-360. or‐\n       der=100 ref=1.\n\nPARAMETERS\n       float  a0 =-360.       first angle\n       float  da =1.0      angle increment\n       int    na =721      number of angles\n       int    order =100      Hilbert transformer order\n       file   phase =      auxiliary input file name\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\nSOURCE\n       user/fomels/Mphaserot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfphaserot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfphasescan-Tuple{}","page":"Home","title":"Madagascar.sfphasescan","text":"sfphasescan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfphasescan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfphasescan. See ?m8r for examples.\n\nRSF Documentation\n\nsfphasescan(1)                Madagascar Manuals                sfphasescan(1)\n\nNAME\n       sfphasescan - Multicomponent data registration analysis.\n\nSYNOPSIS\n       sfphasescan < in.rsf > warped.rsf other=other.rsf verb=y ng=1 g0= dg=g0\n       rect1=1 rect2=1 rect3=1 rect4=1 niter=10 accuracy=\n\nPARAMETERS\n       int    accuracy = [1-4]     interpolation accuracy\n       float  dg =g0      gamma sampling\n       float  g0 =      gamma origin\n       int    ng =1      number of gamma values\n       int    niter =10      number of iterations\n       file   other =      auxiliary input file name\n       int    rect1 =1      vertical smoothing\n       int    rect2 =1      gamma smoothing\n       int    rect3 =1      in-line smoothing\n       int    rect4 =1      cross-line smoothing\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/songxl/Mphasescan.c\nVERSION\n       4.2-git Mphasescan.c 744 2004-08-17 18:46:07Z songxl\n\nMadagascar                         JULY 2024                    sfphasescan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpiazpwdmig3-Tuple{}","page":"Home","title":"Madagascar.sfpiazpwdmig3","text":"sfpiazpwdmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpiazpwdmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpiazpwdmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpiazpwdmig3(1)              Madagascar Manuals              sfpiazpwdmig3(1)\n\nNAME\n       sfpiazpwdmig3  -  Least-Squares  3D  Path-Summation Integral, Azimuthal\n       Plane-Wave Destruction and Kirchhoff Modeling/Migration Chain of Opera‐\n       tors\n\nSYNOPSIS\n       sfpiazpwdmig3    <    inp.rsf   >   out.rsf   dip=dip.rsf   az=azin.rsf\n       vel=velFile.rsf adj=n  v_1=  v_2=  v_3=  v_4=  passthr=0.001  eps=0.001\n       epst2=0.001  pad=nt  vel=  rho=1.-1./nt apt=nx angle=90.0 order=1 nj1=1\n       nj2=1 sm=y domod=y dopi=y doomp=n antialias=\n\nPARAMETERS\n       bool   adj =n [y/n]     Adjoint flag\n       float  angle =90.0      angle aperture\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       file   az =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       bool   domod =y [y/n]     if perform Kirchhoff modeling/migration\n       bool   doomp =n [y/n]     OpenMP\n       bool   dopi =y [y/n]     if perform PI filtering\n       float  eps =0.001      Damper for pi\n       float  epst2 =0.001      Damper for t2warp\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      Threshold for tail elimination\n       float  rho =1.-1./nt      Leaky integration constant\n       bool   sm =y [y/n]     if perform AzPWD filtering\n       float  v_1 =      Path-integral range\n       float  v_2 = ®\n       float  v_3 = ®\n       float  v_4 = ®\n       float  vel =      migration velocity for Kirchhoff\nSOURCE\n       user/dmerzlikin/Mpiazpwdmig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpiazpwdmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpick-Tuple{}","page":"Home","title":"Madagascar.sfpick","text":"sfpick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpick. See ?m8r for examples.\n\nRSF Documentation\n\nsfpick(1)                     Madagascar Manuals                     sfpick(1)\n\nNAME\n       sfpick - Automatic picking from semblance-like panels.\n\nSYNOPSIS\n       sfpick  <  scn.rsf  >  pik.rsf  vel0=o2 niter=100 an=1. gate=3 smooth=y\n       norm=n back=n rect#=(1,1,...) rect1=1 rect2=1 ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\n       Theory in Appendix B of: S. Fomel, 2009,  Velocity  analysis  using  AB\n       semblance:  Geophysical Prospecting, v. 57, 311-321.  Reproducible ver‐\n       sion  in   RSFSRC/book/tccs/avo   http://ahay.org/RSF/book/tccs/avo/pa‐\n       per_html/\n\n       August  2012 program of the month: http://ahay.org/blog/2012/08/01/pro‐\n       gram-of-the-month-sfpick/\n\nPARAMETERS\n       float  an =1.       axes anisotropy\n       bool   back =n [y/n]     if run backward\n       int    gate =3      picking gate\n       int    niter =100      number of iterations\n       bool   norm =n [y/n]     if apply normalization (0.~1.)\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   smooth =y [y/n]     if apply smoothing\n       float  vel0 =o2      surface velocity\nUSED IN\n       bei/vela/vscan\n       bei/wvs/vscan\n       data/alaska/line31-81-m8r\nSOURCE\n       user/fomels/Mpick.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfpick\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpick2-Tuple{}","page":"Home","title":"Madagascar.sfpick2","text":"sfpick2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpick2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpick2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpick2(1)                    Madagascar Manuals                    sfpick2(1)\n\nNAME\n       sfpick2 - Automatic picking from semblance-like panels (3-D input).\n\nSYNOPSIS\n       sfpick2  <  scn.rsf > pik.rsf slice=0 vel0=o2 rect1=1 rect2=1 niter=100\n       an=1. gate=3\n\nPARAMETERS\n       float  an =1.       axes anisotropy\n       int    gate =3      picking gate\n       int    niter =100      number of iterations\n       int    rect1 =1      smoothing radius on the first axis\n       int    rect2 =1      smoothing radius on the second axis\n       int    slice =0      if only one kind of slicing (1: inline, 2: time)\n       float  vel0 =o2      surface velocity\nSOURCE\n       user/fomels/Mpick2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpick2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpick2d-Tuple{}","page":"Home","title":"Madagascar.sfpick2d","text":"sfpick2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpick2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpick2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpick2d(1)                   Madagascar Manuals                   sfpick2d(1)\n\nNAME\n       sfpick2d - 2D picking\n\nSYNOPSIS\n       sfpick2d < dataFile_.rsf > outFile_.rsf eps=0 xApp=1\n\nCOMMENTS\n       Input: dataFile_.rsf - parameter spectrum (semblance) panel\n\n       Output: outFile_.rsf - picked optimal values\n\nPARAMETERS\n       float  eps =0      smoothness measure\n       int    xApp =1      x-aperture\nSOURCE\n       user/aklokov/Mpick2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpick2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpick3-Tuple{}","page":"Home","title":"Madagascar.sfpick3","text":"sfpick3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpick3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpick3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpick3(1)                    Madagascar Manuals                    sfpick3(1)\n\nNAME\n       sfpick3 - Automatic picking  from 3-D semblance-like panels.\n\nSYNOPSIS\n       sfpick3  <  scn.rsf  > pik.rsf vel1=o2 vel2=o3 rect1=1 niter=100 an1=1.\n       an2=1. gate1=3 gate2=3 smooth=y\n\nPARAMETERS\n       float  an1 =1.  ®\n       float  an2 =1.       axes anisotropy\n       int    gate1 =3 ®\n       int    gate2 =3      picking gate\n       int    niter =100      number of iterations\n       int    rect1 =1      smoothing radius\n       bool   smooth =y [y/n]     if apply smoothing\n       float  vel1 =o2 ®\n       float  vel2 =o3      surface velocity\nSOURCE\n       user/fomels/Mpick3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpick3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpick31-Tuple{}","page":"Home","title":"Madagascar.sfpick31","text":"sfpick31(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpick31 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpick31. See ?m8r for examples.\n\nRSF Documentation\n\nsfpick31(1)                   Madagascar Manuals                   sfpick31(1)\n\nNAME\n       sfpick31  -  Automatic picking from 3D semblance-like panels plus addi‐\n       tional axis.\n\nSYNOPSIS\n       sfpick31 < scn.rsf > pik.rsf vel1=o2 vel2=o3 rect1=1  niter=100  an1=1.\n       an2=1. gate1=3 gate2=3 smooth=y verb=y\n\nPARAMETERS\n       float  an1 =1.  ®\n       float  an2 =1.       axes anisotropy\n       int    gate1 =3 ®\n       int    gate2 =3      picking gate\n       int    niter =100      number of iterations\n       int    rect1 =1      smoothing radius\n       bool   smooth =y [y/n]     if apply smoothing\n       float  vel1 =o2 ®\n       float  vel2 =o3      surface velocity\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/yliu/Mpick31.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpick31(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpickmaxima-Tuple{}","page":"Home","title":"Madagascar.sfpickmaxima","text":"sfpickmaxima(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpickmaxima on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpickmaxima. See ?m8r for examples.\n\nRSF Documentation\n\nsfpickmaxima(1)               Madagascar Manuals               sfpickmaxima(1)\n\nNAME\n       sfpickmaxima  -  Picking  local  maxima  on  the first axis with evenly\n       spaced windows.\n\nSYNOPSIS\n       sfpickmaxima    <    in.rsf    >    out.rsf     semblance=semblance.rsf\n       npicks=npicks.rsf min=o1 max=o1+(n1-1)*d1 np=n1 nw=1 space=100. parab=n\n       removal=y\n\nPARAMETERS\n       float  max =o1+(n1-1)*d1      maximum value of time\n       float  min =o1      minimum value of time\n       int    np =n1      maximum number of picks\n       file   npicks =      auxiliary output file name\n       int    nw =1      number of windows\n       bool   parab =n [y/n]     if y, parabolic interpolation\n       bool   removal =y [y/n]     if y, remove adjacent events based on  sem‐\n              blance\n       file   semblance =      auxiliary input file name\n       float  space =100.       minimum distance bewteen picked events\nSOURCE\n       user/zhiguang/Mpickmaxima.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpickmaxima(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpickprint-Tuple{}","page":"Home","title":"Madagascar.sfpickprint","text":"sfpickprint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpickprint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpickprint. See ?m8r for examples.\n\nRSF Documentation\n\nsfpickprint(1)                Madagascar Manuals                sfpickprint(1)\n\nNAME\n       sfpickprint - Write predictive painting result into a txt file\n\nSYNOPSIS\n       sfpickprint   <  in.rsf  pick=pick.rsf  npick=npick.rsf  semblance=sem‐\n       blance.rsf verb=y cut=0.\n\nPARAMETERS\n       float  cut =0.       muting value in boundary\n       file   npick =      auxiliary input file name\n       file   pick =      auxiliary input file name\n       file   semblance =      auxiliary input file name\n       bool   verb =y [y/n]     if y, print icdp/ncdp during operation\nSOURCE\n       user/zhiguang/Mpickprint.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpickprint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpicks2rsf-Tuple{}","page":"Home","title":"Madagascar.sfpicks2rsf","text":"sfpicks2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpicks2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpicks2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfpicks2rsf(1)                Madagascar Manuals                sfpicks2rsf(1)\n\nNAME\n       sfpicks2rsf - Creates a mask from horizons:\n\nSYNOPSIS\n       sfpicks2rsf < in.rsf > out.rsf ntic=5 tmask=y extend=n above=n picks=\n\nCOMMENTS\n       horizon format:\n\n       x1 h1 x2 h2 x3 h3 x4 h4 xn hn\n\n       xn> ... >x4 >x3 >x2>x1\n\n       picks  (file)   ascii  file  with two columns (x and h(x)) the x values\n       must be increasing order, you can easily achieve that by doing:\n\n       sort -k 1  unsorted_picks.txt > sorted_picks.txt\n\n       stdin             2D file from which  the  axes  will  be  read  extend\n       [false]     Extends picks to the boundaries of the axis n Do not extend\n       y Extend to boundary\n\n       tmask [true]     write a mask (1 if z>h(x)) false     put a tic on  the\n       horizon\n\n       above [false] put 1 above the horizon true   put 1 below the horizon\n\n       ntic  [1]      works  with  tmask=false;  put 1 around ntic grid points\n       above and below the horizon.\n\n       stdout       It writes a file with the same dimensions as stdin with  a\n       mask function, 1 below the horizon 0 above\n\nPARAMETERS\n       bool   above =n [y/n]\n       bool   extend =n [y/n]\n       int    ntic =5 ®\n       string picks =      parameters from input file\n       bool   tmask =y [y/n]\nSOURCE\n       user/ediazp/Mpicks2rsf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpicks2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpipwdmig2-Tuple{}","page":"Home","title":"Madagascar.sfpipwdmig2","text":"sfpipwdmig2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpipwdmig2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpipwdmig2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpipwdmig2(1)                Madagascar Manuals                sfpipwdmig2(1)\n\nNAME\n       sfpipwdmig2 - Chain of Path Integral, Plane-Wave Destruction and Kirch‐\n       hoff migration (based on sfmig2)\n\nSYNOPSIS\n       sfpipwdmig2 < inp.rsf > out.rsf vel=fvel.rsf dip=dip.rsf adj=n sm=y do‐\n       mod=y  pi=y  verb=n  doomp=y  apt=nx  angle=90.0  hd=y ps=y dd=y half=y\n       rho=1.-1./nt v_1= v_2= v_3= v_4=  passthr=0.001  eps=0.001  epst2=0.001\n       pad=nt order=1 nj1=1 antialias=\n\nCOMMENTS\n       works only for zero offset\n\n       make sure nh = 1 dh = 1.0 h0 = 0.0 offset file is not used\n\n       there  are flags to disable PWD (Plane-Wave Destruction), P (Path-Inte‐\n       gral Filter) and L (Kirchhoff modelling/migration)\n\n       no regularization\n\n       can be expressed for forward as: data = P PWD L (  reflections  +  dif‐\n       fractions ) or as a matrix\n\n       | P PWD L   P PWD L | |              | = | data |\n\n       can be expressed for adjoint as:\n\n       adjoint reflections = L^T PWD^T P^T data\n\n       adjoint diffractions = L^T PWD^T P^T data or as a matrix\n\n       |   reflections    |     |  L^T  PWD^T  P^T  |  |               |  =  |\n       | | data | | diffractions |   | L^T PWD^T P^T |\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  angle =90.0      angle aperture\n       string antialias =      antialiasing type [triangle,flat,steep,none]\n       int    apt =nx      integral aperture\n       bool   dd =y [y/n]     differentiation in the data domain\n       file   dip =      auxiliary input file name\n       bool   domod =y [y/n]     if perform modeling via  Kirchhoff  (if  dis‐\n              abled -> chain = P PWD)\n       bool   doomp =y [y/n]     OMP flag - currently hard-coded to y\n       float  eps =0.001      damper for pi\n       float  epst2 =0.001      damper for t2warp\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       bool   hd =y [y/n]     half derivative\n       int    nj1 =1      antialiasing\n       int    order =1 [1,2,3]   accuracy order\n       int    pad =nt      output time samples\n       float  passthr =0.001      threshold for tail elimination\n       bool   pi =y [y/n]     if perform Path-Integral filtering (if  disabled\n              -> chain = PWD L)\n       bool   ps =y [y/n]     amplitude correction\n       float  rho =1.-1./nt      leaky integration constant\n       bool   sm  =y  [y/n]     if perform Plane-Wave destruction (if disabled\n              -> chain = P L)\n       float  v_1 =      no pass velocity\n       float  v_2 =      first pass velocity\n       float  v_3 =      second pass velocity\n       float  v_4 =      no pass velocity\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbose flag\nSOURCE\n       user/dmerzlikin/Mpipwdmig2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpipwdmig2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplane-Tuple{}","page":"Home","title":"Madagascar.sfplane","text":"sfplane(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplane on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplane. See ?m8r for examples.\n\nRSF Documentation\n\nsfplane(1)                    Madagascar Manuals                    sfplane(1)\n\nNAME\n       sfplane - Generating plane waves with steering filters.\n\nSYNOPSIS\n       sfplane < inp.rsf > out.rsf p=0.7 a1=2 b1=1 hyp=n lag=\n\nPARAMETERS\n       int    a1 =2      filter length\n       int    b1 =1      denominator length\n       bool   hyp =n [y/n]     generate hyperbolas\n       string lag = ®\n       float  p =0.7      plane wave slope\nSOURCE\n       user/fomels/Mplane.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfplane(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanemis2-Tuple{}","page":"Home","title":"Madagascar.sfplanemis2","text":"sfplanemis2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanemis2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanemis2. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanemis2(1)                Madagascar Manuals                sfplanemis2(1)\n\nNAME\n       sfplanemis2  -  Missing  data interpolation in 2-D using plane-wave de‐\n       struction.\n\nSYNOPSIS\n       sfplanemis2 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100  or‐\n       der=1 nj1=1 nj2=1 drift=n prec=n verb=n\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    nj1 =1      antialiasing for first dip\n       int    nj2 =1      antialiasing for second dip\n       int    order =1      accuracy order\n       bool   prec =n [y/n]     if y, apply preconditioning\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mplanemis2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfplanemis2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanemis3-Tuple{}","page":"Home","title":"Madagascar.sfplanemis3","text":"sfplanemis3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanemis3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanemis3. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanemis3(1)                Madagascar Manuals                sfplanemis3(1)\n\nNAME\n       sfplanemis3  -  Missing  data interpolation in 3-D using plane-wave de‐\n       struction.\n\nSYNOPSIS\n       sfplanemis3 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100  or‐\n       der=1 nj1=1 nj2=1 drift=n verb=n seed=time(NULL) var=0.\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    nj1 =1 ®\n       int    nj2 =1      antialiasing\n       int    order =1 [1,2,3]   accuracy order\n       int    seed =time(NULL)      random seed\n       float  var =0.       noise variance\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mplanemis3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfplanemis3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanereg2-Tuple{}","page":"Home","title":"Madagascar.sfplanereg2","text":"sfplanereg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanereg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanereg2. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanereg2(1)                Madagascar Manuals                sfplanereg2(1)\n\nNAME\n       sfplanereg2 - Data regularization in 2-D using plane-wave destruction.\n\nSYNOPSIS\n       sfplanereg2  <  in.rsf > out.rsf dip=dip.rsf interp=2 niter=100 order=1\n       drift=n verb=n eps=0.01 head=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.01      regularization parameter\n       string head = ®\n       int    interp =2      interpolation length\n       int    niter =100      number of iterations\n       int    order =1 [1,2,3]   accuracy order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mplanereg2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfplanereg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanereg3-Tuple{}","page":"Home","title":"Madagascar.sfplanereg3","text":"sfplanereg3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanereg3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanereg3. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanereg3(1)                Madagascar Manuals                sfplanereg3(1)\n\nNAME\n       sfplanereg3 - Data regularization in 3-D using plane-wave destruction.\n\nSYNOPSIS\n       sfplanereg3  <  in.rsf  >  out.rsf  dip=dip.rsf  xkey=  ykey=  interp=2\n       niter=100 eps=0.01 order=1 nj1=1 nj2=1 drift=n verb=n head=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.01      regularization parameter\n       string head = ®\n       int    interp =2      interpolation length\n       int    niter =100      number of iterations\n       int    nj1 =1 ®\n       int    nj2 =1      antialiasing\n       int    order =1 [1,2,3]   accuracy order\n       bool   verb =n [y/n]     verbosity flag\n       int    xkey =      x key number\n       int    ykey =      y key number\nSOURCE\n       user/pwd/Mplanereg3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfplanereg3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanesig-Tuple{}","page":"Home","title":"Madagascar.sfplanesig","text":"sfplanesig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanesig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanesig. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanesig(1)                 Madagascar Manuals                 sfplanesig(1)\n\nNAME\n       sfplanesig - Signal separation using plane-wave destruction filters.\n\nSYNOPSIS\n       sfplanesig  < in.rsf dips=dips.rsf > out.rsf eps= niter=50 order=1 nj=1\n       drift=n verb=n\n\nPARAMETERS\n       file   dips =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       floats eps =       [nc]\n       int    niter =50      maximum number of iterations\n       int    nj =1      antialiasing\n       int    order =1 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mplanesig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfplanesig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanesignoi-Tuple{}","page":"Home","title":"Madagascar.sfplanesignoi","text":"sfplanesignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanesignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanesignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanesignoi(1)              Madagascar Manuals              sfplanesignoi(1)\n\nNAME\n       sfplanesignoi  -  Signal and noise separation using plane-wave destruc‐\n       tion filters.\n\nSYNOPSIS\n       sfplanesignoi < in.rsf ndip=ndip.rsf sdip=sdip.rsf >  out.rsf  niter=50\n       eps=1. order=1 nj1=1 nj2=1 drift=n verb=n\n\nCOMMENTS\n       If  n3=1  in the output, outputs both signal and noise. Otherwise, only\n       signal.\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       float  eps =1.       regularization parameter\n       file   ndip =      auxiliary input file name\n       int    niter =50      maximum number of iterations\n       int    nj1 =1      antialiasing for noise dip\n       int    nj2 =1      antialiasing for signal dip\n       int    order =1 [1,2,3]   accuracy order\n       file   sdip =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mplanesignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfplanesignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplanewave-Tuple{}","page":"Home","title":"Madagascar.sfplanewave","text":"sfplanewave(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplanewave on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplanewave. See ?m8r for examples.\n\nRSF Documentation\n\nsfplanewave(1)                Madagascar Manuals                sfplanewave(1)\n\nNAME\n       sfplanewave - None\n\nSYNOPSIS\n       sfplanewave\n\nSOURCE\n       trip/iwave/trace/main/planewave.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfplanewave(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplas-Tuple{}","page":"Home","title":"Madagascar.sfplas","text":"sfplas(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplas on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplas. See ?m8r for examples.\n\nRSF Documentation\n\nsfplas(1)                     Madagascar Manuals                     sfplas(1)\n\nNAME\n       sfplas - Plot Assembler - convert ascii to vplot.\n\nSYNOPSIS\n       sfplas\n\nCOMMENTS\n       November 2015 program of the month: http://ahay.org/blog/2015/11/16/\n\nSOURCE\n       plot/main/plas.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfplas(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpldb-Tuple{}","page":"Home","title":"Madagascar.sfpldb","text":"sfpldb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpldb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpldb. See ?m8r for examples.\n\nRSF Documentation\n\nsfpldb(1)                     Madagascar Manuals                     sfpldb(1)\n\nNAME\n       sfpldb - Plot Debugger - convert vplot to ascii.\n\nSYNOPSIS\n       sfpldb\n\nCOMMENTS\n       November 2015 program of the month: http://ahay.org/blog/2015/11/16/\n\n       See also vplotdiff.\n\nSOURCE\n       plot/main/pldb.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpldb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplotrays-Tuple{}","page":"Home","title":"Madagascar.sfplotrays","text":"sfplotrays(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplotrays on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplotrays. See ?m8r for examples.\n\nRSF Documentation\n\nsfplotrays(1)                 Madagascar Manuals                 sfplotrays(1)\n\nNAME\n       sfplotrays - Plot rays.\n\nSYNOPSIS\n       sfplotrays frame=frame.rsf nt=n1*n2 jr=1 < rays.rsf > plot.vpl\n\nCOMMENTS\n       Run \"sfdoc stdplot\" for more parameters.\n\nPARAMETERS\n       string frame =      auxiliary input file name\n       int    jr =1      skip rays\n       int    nt =n1*n2      maximum ray length\nSOURCE\n       plot/main/plotrays.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfplotrays(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfplsurf-Tuple{}","page":"Home","title":"Madagascar.sfplsurf","text":"sfplsurf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfplsurf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfplsurf. See ?m8r for examples.\n\nRSF Documentation\n\nsfplsurf(1)                   Madagascar Manuals                   sfplsurf(1)\n\nNAME\n       sfplsurf - Generate a surface plot.\n\nSYNOPSIS\n       sfplsurf  < in.rsf wantaxis=y wantaxis1=y wantaxis2=y wantaxis3=y want‐\n       title=y labelsz=8.0  titlesz=10.0  labelfat=1  titlefat=1  font=2  min‐\n       val=SF_HUGE  maxval=-SF_HUGE  alt=35.0  az=25.0  mesh=y meshc=VP_YELLOW\n       sides=n bcontour=n scontour=n nc=10 faceted=n label1=  label2=  label3=\n       unit1= unit2= unit3= title= wheretitle= color=\n\nPARAMETERS\n       float  alt =35.0      altitude [0;90]\n       float  az =25.0      azimuth\n       bool   bcontour =n [y/n]     draw contour lines at the bottom\n       string color =      color scheme (default is i)\n       bool   faceted  =n  [y/n]     each cell is faceted on the surface (sur‐\n              face mode only)\n       int    font =2      font\n       string label1 = ®\n       string label2 = ®\n       string label3 = ®\n       int    labelfat =1      label fatness\n       float  labelsz =8.0      label font size\n       float  maxval =-SF_HUGE      maximum value for the vertical  axis  (de‐\n              fault is data maximum)\n       bool   mesh =y [y/n]     what to draw: true - mesh, false - shaded sur‐\n              face\n       int    meshc =VP_YELLOW      mesh color or surface contour color\n       float  minval =SF_HUGE      minimum value for the  vertical  axis  (de‐\n              fault is data minimum)\n       int    nc =10      number of contour lines\n       bool   scontour =n [y/n]     draw contour lines on the surface (surface\n              mode only)\n       bool   sides =n [y/n]     draw sides\n       string title = ®\n       int    titlefat =1      title fatness\n       float  titlesz =10.0      title font size\n       string unit1 = ®\n       string unit2 = ®\n       string unit3 = ®\n       bool   wantaxis =y [y/n]     if generate axes with ticks and labels\n       bool   wantaxis1 =y [y/n]\n       bool   wantaxis2 =y [y/n]\n       bool   wantaxis3 =y [y/n]\n       bool   wanttitle =y [y/n]     if include title\n       string wheretitle =      where to put title (top,bottom)\nSOURCE\n       plot/plplot/plsurf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfplsurf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpmig-Tuple{}","page":"Home","title":"Madagascar.sfpmig","text":"sfpmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfpmig(1)                     Madagascar Manuals                     sfpmig(1)\n\nNAME\n       sfpmig - Slope-based prestack time migration.\n\nSYNOPSIS\n       sfpmig  <  cmp.rsf  xdip=xdip.rsf  hdip=hdip.rsf > mig.rsf half=y mzo=n\n       eps=1.0\n\nPARAMETERS\n       float  eps =1.0      stretch regularization\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       file   hdip =      auxiliary input file name\n       bool   mzo =n [y/n]     do migration to zero offset\n       file   xdip =      auxiliary input file name\nSOURCE\n       system/seismic/Mpmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpmig1-Tuple{}","page":"Home","title":"Madagascar.sfpmig1","text":"sfpmig1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpmig1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpmig1. See ?m8r for examples.\n\nRSF Documentation\n\nsfpmig1(1)                    Madagascar Manuals                    sfpmig1(1)\n\nNAME\n       sfpmig1 - Slope-based prestack (t,xs,h) time migration .\n\nSYNOPSIS\n       sfpmig1  <  csg.rsf  sdip=sdip.rsf  hdip=hdip.rsf > mig.rsf half=y nw=4\n       mzo=n\n\nPARAMETERS\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       file   hdip =      auxiliary input file name\n       bool   mzo =n [y/n]     do migration to zero offset\n       int    nw =4      interpolator size (2,3,4,6,8)\n       file   sdip =      auxiliary input file name\nSOURCE\n       user/lcasasan/Mpmig1.c\nVERSION\n       4.2-git Mpmig.c 4796 2009-09-29 19:39:07Z ivlad\n\nMadagascar                         JULY 2024                        sfpmig1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpmod-Tuple{}","page":"Home","title":"Madagascar.sfpmod","text":"sfpmod(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpmod on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpmod. See ?m8r for examples.\n\nRSF Documentation\n\nsfpmod(1)                     Madagascar Manuals                     sfpmod(1)\n\nNAME\n       sfpmod - Random plane wave modeling.\n\nSYNOPSIS\n       sfpmod  <  inp.rsf  >  out.rsf  np=1  gauss=0  type=1 ampmax=1. rc1=0.2\n       rc2=0.2  h1=200.  h2=150.  v1=2000.  v2=3000.   pmax=0.000332   phi=0.1\n       xloc=200. seed=time(NULL)\n\nPARAMETERS\n       float  ampmax =1.  ®\n       int    gauss =0 ®\n       float  h1 =200.  ®\n       float  h2 =150.  ®\n       int    np =1 ®\n       float  phi =0.1 ®\n       float  pmax =0.000332 ®\n       float  rc1 =0.2 ®\n       float  rc2 =0.2 ®\n       int    seed =time(NULL)      random seed\n       int    type =1      1 single plane layer\n                     2 two plane layers\n                     3 point diffractor\n       float  v1 =2000.  ®\n       float  v2 =3000.  ®\n       float  xloc =200.  ®\nSOURCE\n       user/rickettj/Mpmod.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpmod(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpmshape2-Tuple{}","page":"Home","title":"Madagascar.sfpmshape2","text":"sfpmshape2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpmshape2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpmshape2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpmshape2(1)                 Madagascar Manuals                 sfpmshape2(1)\n\nNAME\n       sfpmshape2  -  Missing  data  interpolation in 2-D using plane-wave de‐\n       struction and shaping regularization.\n\nSYNOPSIS\n       sfpmshape2 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf  niter=100  or‐\n       der=1 rect1=3 rect2=3\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    order =1      accuracy order\n       int    rect1 =3 ®\n       int    rect2 =3      smoothing radius\nSOURCE\n       user/pwd/Mpmshape2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpmshape2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpnmo-Tuple{}","page":"Home","title":"Madagascar.sfpnmo","text":"sfpnmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpnmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpnmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfpnmo(1)                     Madagascar Manuals                     sfpnmo(1)\n\nNAME\n       sfpnmo - Slope-based normal moveout.\n\nSYNOPSIS\n       sfpnmo  <  cmp.rsf dip=dip.rsf > nmod.rsf vel=vel.rsf offset=offset.rsf\n       crv=crv.rsf eta=eta.rsf half=y eps=0.01\n\nPARAMETERS\n       string crv =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       float  eps =0.01      stretch regularization\n       file   eta =      auxiliary output file name\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       string offset =      auxiliary input file name\n       file   vel =      auxiliary output file name\nSOURCE\n       system/seismic/Mpnmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpnmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpnmo3d-Tuple{}","page":"Home","title":"Madagascar.sfpnmo3d","text":"sfpnmo3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpnmo3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpnmo3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpnmo3d(1)                   Madagascar Manuals                   sfpnmo3d(1)\n\nNAME\n       sfpnmo3d - Slope-based normal moveout for 3-D CMP geometry.\n\nSYNOPSIS\n       sfpnmo3d  <  cmp.rsf dipx=dipx.rsf dipy=dipy.rsf > nmod.rsf vel=vel.rsf\n       half=y eps=0.01 extend=8\n\nPARAMETERS\n       file   dipx =      auxiliary input file name\n       file   dipy =      auxiliary input file name\n       float  eps =0.01      stretch regularization\n       int    extend =8      trace extension\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       file   vel =      auxiliary output file name\nSOURCE\n       system/seismic/Mpnmo3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpnmo3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpnmomf-Tuple{}","page":"Home","title":"Madagascar.sfpnmomf","text":"sfpnmomf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpnmomf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpnmomf. See ?m8r for examples.\n\nRSF Documentation\n\nsfpnmomf(1)                   Madagascar Manuals                   sfpnmomf(1)\n\nNAME\n       sfpnmomf - Normal moveout.\n\nSYNOPSIS\n       sfpnmomf  <  cmp.rsf  velocity=velocity.rsf  >  nmod.rsf s=het.rsf off‐\n       set=offset.rsf mask=msk.rsf half=y str=0.5 mute=12 CDPtype=  slowness=n\n       squared=n h0=0. extend=4 a=\n\nCOMMENTS\n       Compatible with sfvscan.\n\n       Copyright (C) 2004 University of Texas at Austin\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       int    CDPtype = ®\n       string a = ®\n       int    extend =4      trace extension\n       float  h0 =0.       reference offset\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       string mask =      auxiliary input file name\n       int    mute =12      mute zone\n       string offset =      auxiliary input file name\n       string s =      auxiliary input file name\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  str =0.5      maximum stretch allowed\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/chenyk/Mpnmomf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpnmomf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpocs-Tuple{}","page":"Home","title":"Madagascar.sfpocs","text":"sfpocs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpocs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpocs. See ?m8r for examples.\n\nRSF Documentation\n\nsfpocs(1)                     Madagascar Manuals                     sfpocs(1)\n\nNAME\n       sfpocs - n-D POCS interpolation using a hard thresholding\n\nSYNOPSIS\n       sfpocs < in.rsf > out.rsf mask=Fmask.rsf verb=n niter=100 pclip=10. n#=\n\nCOMMENTS\n       Note: Acquistion geometry specified by mask operator.\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    n# =      size of #-th axis\n       int    niter =100      total number iterations\n       float  pclip =10.       starting data clip percentile (default is 99)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mpocs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpocs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpocs3d-Tuple{}","page":"Home","title":"Madagascar.sfpocs3d","text":"sfpocs3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpocs3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpocs3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpocs3d(1)                   Madagascar Manuals                   sfpocs3d(1)\n\nNAME\n       sfpocs3d - POCS for 3D missing data interpolation\n\nSYNOPSIS\n       sfpocs3d < Fin.rsf mask=Fmask.rsf > Fout.rsf verb=n niter=100 pclip=99.\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    niter =100      total number of POCS iterations\n       float  pclip =99.       starting data clip percentile (default is 99)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mpocs3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpocs3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpocsseislet-Tuple{}","page":"Home","title":"Madagascar.sfpocsseislet","text":"sfpocsseislet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpocsseislet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpocsseislet. See ?m8r for examples.\n\nRSF Documentation\n\nsfpocsseislet(1)              Madagascar Manuals              sfpocsseislet(1)\n\nNAME\n       sfpocsseislet - Seislet-based POCS interpolation (2d validation)\n\nSYNOPSIS\n       sfpocsseislet < Fin.rsf mask=Fmask.rsf > Fout.rsf dip=Fdip.rsf eps=0.01\n       order=1 pscale=25 verb=n niter=10 pclip=99 p=0.35 type= mode=\n\nCOMMENTS\n       POCS=projection onto convex sets\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       string mode =      thresholding mode: 'hard', 'soft','pthresh','exp';\n                     'hard', hard thresholding;  'soft', soft thresholding;\n                     'pthresh',  generalized   quasi-p;   'exp',   exponential\n              shrinkage\n       int    niter =10      total number iterations\n       int    order =1      accuracy order for seislet transform\n       float  p =0.35      norm=p, where 0<p<=1\n       float  pclip =99      starting data clip percentile (default is 99)\n       float  pscale  =25       percentile of small scale to be preserved (de‐\n              fault is 25)\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pyang/Mpocsseislet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpocsseislet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpocssemb-Tuple{}","page":"Home","title":"Madagascar.sfpocssemb","text":"sfpocssemb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpocssemb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpocssemb. See ?m8r for examples.\n\nRSF Documentation\n\nsfpocssemb(1)                 Madagascar Manuals                 sfpocssemb(1)\n\nNAME\n       sfpocssemb  - POCS using semblance thresholding or amplitude threshold‐\n       ing.\n\nSYNOPSIS\n       sfpocssemb   <   inp.rsf   mask=m.rsf   >   outp.rsf    spec2=spec2.rsf\n       spec1=spec1.rsf  snr=snr.rsf  true=trued.rsf  niter=10  ifsnr=0 pmin=-2\n       pmax=2 np=nx type=\n\nPARAMETERS\n       int    ifsnr =0      If compute SNR during iteration\n       file   mask =      auxiliary input file name\n       int    niter =10      Get the number of iterations\n       int    np =nx      number of p\n       float  pmax =2      maximum p\n       float  pmin =-2      minimum p\n       file   snr =      auxiliary output file name\n       string spec1 =      auxiliary output file name\n       string spec2 =      auxiliary output file name\n       string true =      auxiliary input file name\n       string type =      [amplitude, semblance] thresholding  type,  the  de‐\n              fault is amplitude thresholding\nSOURCE\n       user/chenyk/Mpocssemb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpocssemb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpoly-Tuple{}","page":"Home","title":"Madagascar.sfpoly","text":"sfpoly(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpoly on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpoly. See ?m8r for examples.\n\nRSF Documentation\n\nsfpoly(1)                     Madagascar Manuals                     sfpoly(1)\n\nNAME\n       sfpoly - From roots to polynomials\n\nSYNOPSIS\n       sfpoly < inp.rsf > out.rsf coef=coef.rsf n1= d1= o1=\n\nPARAMETERS\n       string coef =      (optional) coefficients (auxiliary output file name)\n       float  d1 =      sampling\n       int    n1 =      number of samples\n       float  o1 =      origin\nSOURCE\n       user/fomels/Mpoly.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpoly(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpolydiv-Tuple{}","page":"Home","title":"Madagascar.sfpolydiv","text":"sfpolydiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpolydiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpolydiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfpolydiv(1)                  Madagascar Manuals                  sfpolydiv(1)\n\nNAME\n       sfpolydiv - None\n\nSYNOPSIS\n       sfpolydiv\n\nSOURCE\n       trip/rvl/seq/main/polydiv.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpolydiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpolyfit-Tuple{}","page":"Home","title":"Madagascar.sfpolyfit","text":"sfpolyfit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpolyfit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpolyfit. See ?m8r for examples.\n\nRSF Documentation\n\nsfpolyfit(1)                  Madagascar Manuals                  sfpolyfit(1)\n\nNAME\n       sfpolyfit - Fitting a polynomial by least-squares.\n\nSYNOPSIS\n       sfpolyfit < inp.rsf > out.rsf coef=coef.rsf coord=coord.rsf reg=reg.rsf\n       eps=0.0f np=1 n1= d1= o1=\n\nPARAMETERS\n       string coef =      (optional) coefficients (auxiliary output file name)\n       string coord =      coordinates (auxiliary input file name)\n       float  d1 =      sampling for regularly sampled\n       float  eps =0.0f      regularization parameter\n       int    n1 =      number of samples for regularly sampled\n       int    np =1      polynomial order\n       float  o1 =      origin for regularly sampled\n       string reg =      (optional) regularly sampled (auxiliary  output  file\n              name)\nSOURCE\n       user/fomels/Mpolyfit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpolyfit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpolymask-Tuple{}","page":"Home","title":"Madagascar.sfpolymask","text":"sfpolymask(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpolymask on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpolymask. See ?m8r for examples.\n\nRSF Documentation\n\nsfpolymask(1)                 Madagascar Manuals                 sfpolymask(1)\n\nNAME\n       sfpolymask - Mask a polygon.\n\nSYNOPSIS\n       sfpolymask < inp.rsf > out.rsf poly=poly.rsf\n\nPARAMETERS\n       file   poly =      auxiliary input file name\nSOURCE\n       system/generic/Mpolymask.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpolymask(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpostfilter2-Tuple{}","page":"Home","title":"Madagascar.sfpostfilter2","text":"sfpostfilter2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpostfilter2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpostfilter2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpostfilter2(1)              Madagascar Manuals              sfpostfilter2(1)\n\nNAME\n       sfpostfilter2 - Convert B-spline coefficients to data in 2-D.\n\nSYNOPSIS\n       sfpostfilter2 < in.rsf > out.rsf nw= vert=y horz=y\n\nPARAMETERS\n       bool   horz =y [y/n]     include filter on the second axis\n       int    nw =      filter size\n       bool   vert =y [y/n]     include filter on the first axis\nSOURCE\n       system/generic/Mpostfilter2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpostfilter2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpostrtm2d-Tuple{}","page":"Home","title":"Madagascar.sfpostrtm2d","text":"sfpostrtm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpostrtm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpostrtm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpostrtm2d(1)                Madagascar Manuals                sfpostrtm2d(1)\n\nNAME\n       sfpostrtm2d - 2-D exploding-reflector RTM and its adjoint\n\nSYNOPSIS\n       sfpostrtm2d  <  in.rsf  >  out.rsf velocity=vel.rsf wave=wave.rsf adj=y\n       snap=n n0=0 jt=50 nt= dt= padx=nz/2 padz=nz/2\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag, 0: modeling, 1: migration\n       float  dt = ®\n       int    jt =50      time interval of wavefield snapshot\n       int    n0 =0      surface\n       int    nt = ®\n       int    padx =nz/2 ®\n       int    padz =nz/2 ®\n       bool   snap =n [y/n]     wavefield snapshot flag\n       file   velocity =      auxiliary input file name\n       file   wave =      auxiliary output file name\nSOURCE\n       user/zhiguang/Mpostrtm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpostrtm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpow-Tuple{}","page":"Home","title":"Madagascar.sfpow","text":"sfpow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpow. See ?m8r for examples.\n\nRSF Documentation\n\nsfpow(1)                      Madagascar Manuals                      sfpow(1)\n\nNAME\n       sfpow - Apply power gain.\n\nSYNOPSIS\n       sfpow < in.rsf > out.rsf tpow= pow#=(0,0,...)\n\nCOMMENTS\n       March         2013         program         of         the        month:\n       http://www.ahay.org/blog/2013/03/10/program-of-the-month-sfpow/\n\nPARAMETERS\n       float  pow# =(0,0,...)       power on #-th axis\n       float  tpow = ®\nUSED IN\n       bei/dpmv/matt\n       bei/dwnc/vofz\n       bei/fld/yc\n       bei/ft1/brad\n       bei/krch/sep73\n       bei/sg/denmark\n       bei/vela/stretch\n       bei/wvs/head\n       data/alaska/line31-81-m8r\n       data/bpmodel94/firstlook\nSOURCE\n       system/generic/Mpow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpp2psang-Tuple{}","page":"Home","title":"Madagascar.sfpp2psang","text":"sfpp2psang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpp2psang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpp2psang. See ?m8r for examples.\n\nRSF Documentation\n\nsfpp2psang(1)                 Madagascar Manuals                 sfpp2psang(1)\n\nNAME\n       sfpp2psang - Transform PP angle gathers to PS angle gathers.\n\nSYNOPSIS\n       sfpp2psang < in.rsf > out.rsf vpvs=vpvs.rsf nw=4 inv=n\n\nCOMMENTS\n       * (designed for absolute offsets)\n\nPARAMETERS\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    nw =4      accuracy level\n       file   vpvs =      auxiliary input file name\nSOURCE\n       system/seismic/Mpp2psang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpp2psang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpp2psang2-Tuple{}","page":"Home","title":"Madagascar.sfpp2psang2","text":"sfpp2psang2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpp2psang2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpp2psang2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpp2psang2(1)                Madagascar Manuals                sfpp2psang2(1)\n\nNAME\n       sfpp2psang2 - Transform PP angle gathers to PS angle gathers.\n\nSYNOPSIS\n       sfpp2psang2  <  in.rsf  > out.rsf vpvs=vpvs.rsf dip=dip.rsf verb=n nw=4\n       inv=n\n\nCOMMENTS\n       * (designed for horizontal offsets)\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    nw =4      accuracy level\n       bool   verb =n [y/n]\n       file   vpvs =      auxiliary input file name\nSOURCE\n       system/seismic/Mpp2psang2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpp2psang2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpp2pstsic-Tuple{}","page":"Home","title":"Madagascar.sfpp2pstsic","text":"sfpp2pstsic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpp2pstsic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpp2pstsic. See ?m8r for examples.\n\nRSF Documentation\n\nsfpp2pstsic(1)                Madagascar Manuals                sfpp2pstsic(1)\n\nNAME\n       sfpp2pstsic - Compute angle gathers for time-shift imaging condition\n\nSYNOPSIS\n       sfpp2pstsic  <  Fstk.rsf velocity=Fvel.rsf vpvs=Fgam.rsf dip=Fdip.rsf >\n       Fang.rsf na=nv da=1./(nv-1) a0=0. extend=4\n\nPARAMETERS\n       float  a0 =0.  ®\n       float  da =1./(nv-1) ®\n       file   dip =      auxiliary input file name\n       int    extend =4      tmp extension\n       int    na =nv ®\n       file   velocity =      auxiliary input file name\n       file   vpvs =      auxiliary input file name\nSOURCE\n       system/seismic/Mpp2pstsic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpp2pstsic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpreconstkirch-Tuple{}","page":"Home","title":"Madagascar.sfpreconstkirch","text":"sfpreconstkirch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpreconstkirch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpreconstkirch. See ?m8r for examples.\n\nRSF Documentation\n\nsfpreconstkirch(1)            Madagascar Manuals            sfpreconstkirch(1)\n\nNAME\n       sfpreconstkirch - Prestack Kirchhoff modeling/migration in constant ve‐\n       locity.\n\nSYNOPSIS\n       sfpreconstkirch < in.rsf > out.rsf inv=n zero=n aal=y nh= dh= h0= vel=\n\nCOMMENTS\n       Requires the input to be in (time,cmp x,cmp y,offset)\n\nPARAMETERS\n       bool   aal =y [y/n]     if y, apply antialiasing\n       float  dh =      offset sampling\n       float  h0 =      offset origin\n       bool   inv =n [y/n]     if y, modeling; if n, migration\n       int    nh =      number of offsets\n       float  vel =      velocity\n       bool   zero =n [y/n]     if y, stack in migration\nUSED IN\n       bei/dpmv/matt\n       bei/dpmv/yalei\n       bei/krch/sep73\n       bei/trimo/mig\n       bei/trimo/mod\nSOURCE\n       system/seismic/Mpreconstkirch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfpreconstkirch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpredict-Tuple{}","page":"Home","title":"Madagascar.sfpredict","text":"sfpredict(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpredict on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpredict. See ?m8r for examples.\n\nRSF Documentation\n\nsfpredict(1)                  Madagascar Manuals                  sfpredict(1)\n\nNAME\n       sfpredict - 2-D plane-wave prediction.\n\nSYNOPSIS\n       sfpredict < in.rsf dip=dip.rsf > out.rsf adj=n order=1\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   dip =      auxiliary input file name\n       int    order =1      accuracy order\nSOURCE\n       user/pwd/Mpredict.c\nVERSION\n       4.2-git Mtrismooth2.c 752 2004-08-22 21:57:40Z fomels\n\nMadagascar                         JULY 2024                      sfpredict(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpreerror-Tuple{}","page":"Home","title":"Madagascar.sfpreerror","text":"sfpreerror(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpreerror on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpreerror. See ?m8r for examples.\n\nRSF Documentation\n\nsfpreerror(1)                 Madagascar Manuals                 sfpreerror(1)\n\nNAME\n       sfpreerror - Prediction error\n\nSYNOPSIS\n       sfpreerror < in.rsf predict=pre.rsf > out.rsf type=1\n\nPARAMETERS\n       file   predict =      auxiliary input file name\n       int    type  =1       if compute relative error, 1: yes, 0: no, default\n              is yes.\nSOURCE\n       user/chenyk/Mpreerror.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpreerror(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprefilt-Tuple{}","page":"Home","title":"Madagascar.sfprefilt","text":"sfprefilt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprefilt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprefilt. See ?m8r for examples.\n\nRSF Documentation\n\nsfprefilt(1)                  Madagascar Manuals                  sfprefilt(1)\n\nNAME\n       sfprefilt - prefilter bank of pwd\n\nSYNOPSIS\n       sfprefilt  <  input.rsf  >  dip.rsf coef=coef.rsf pf=pf.rsf nf=1 iter=5\n       eta=0.05\n\nPARAMETERS\n       file   coef =      auxiliary output file name\n       float  eta =0.05 ®\n       int    iter =5 ®\n       int    nf =1 ®\n       file   pf =      auxiliary output file name\nSOURCE\n       user/chen/Mprefilt.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfprefilt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprekirch-Tuple{}","page":"Home","title":"Madagascar.sfprekirch","text":"sfprekirch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprekirch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprekirch. See ?m8r for examples.\n\nRSF Documentation\n\nsfprekirch(1)                 Madagascar Manuals                 sfprekirch(1)\n\nNAME\n       sfprekirch - 2-D Prestack Kirchhoff time migration with antialiasing.\n\nSYNOPSIS\n       sfprekirch  <  inp.rsf  vel=vel.rsf  >  mig.rsf  nz=nt  dz=dt z0=t0 an‐\n       tialias=1.0\n\nCOMMENTS\n       The axes in the input are {time,midpoint,offset} The axes in the output\n       are {time,midpoint}\n\nPARAMETERS\n       float  antialias =1.0      antialiasing\n       float  dz =dt ®\n       int    nz =nt ®\n       file   vel =      auxiliary input file name\n       float  z0 =t0 ®\nSOURCE\n       user/chenyk/Mprekirch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfprekirch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprekirchsr-Tuple{}","page":"Home","title":"Madagascar.sfprekirchsr","text":"sfprekirchsr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprekirchsr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprekirchsr. See ?m8r for examples.\n\nRSF Documentation\n\nsfprekirchsr(1)               Madagascar Manuals               sfprekirchsr(1)\n\nNAME\n       sfprekirchsr  - 2-D Prestack Kirchhoff time migration with antialiasing\n       in source-receiver domain.\n\nSYNOPSIS\n       sfprekirchsr vel=vel.rsf < inp.rsf > outp.rsf nz=nt dz=dt  z0=t0  adj=n\n       antialias=1.0\n\nCOMMENTS\n       The axes in the input are {time,receiver,source} The axes in the output\n       are      {time,receiver}       I(t0,x0)=int       (W(t0,y0,s,r)       *\n       u(s,r,T(s,t0,x0)+T(r,t0,x0)) dsdr\n\nPARAMETERS\n       bool   adj =n [y/n]\n       float  antialias =1.0      antialiasing\n       float  dz =dt ®\n       int    nz =nt ®\n       file   vel =      auxiliary input file name\n       float  z0 =t0 ®\nSOURCE\n       user/chenyk/Mprekirchsr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfprekirchsr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpremig-Tuple{}","page":"Home","title":"Madagascar.sfpremig","text":"sfpremig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpremig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpremig. See ?m8r for examples.\n\nRSF Documentation\n\nsfpremig(1)                   Madagascar Manuals                   sfpremig(1)\n\nNAME\n       sfpremig - Pseudo-spectral pre-stack source-receiver source independent\n       diffraction imaging\n\nSYNOPSIS\n       sfpremig < Fi.rsf  >  Fo.rsf  vel=Fv.rsf  dat_v=Fd_v.rsf  dat_2=Fi1.rsf\n       snaps=snaps.rsf spx= spz= f0= t0= A= snap=0 cmplx=y pad1=1 abc=n roll=n\n       born=n diff=n justrec=n nbt= nbb=nbt nbl=nbt nbr=nbt  ct=  cb=ct  cl=ct\n       cr=ct  verb=n  ps=n  adj=n  vref=1500  nt=  dt=  gpl=-1  gpl_v=-1 src=0\n       n_srcs=1  shtbgn=  shtend=  shtint=  which=0  gpx=-1  gpz=-1   gpx_v=-1\n       gpz_v=-1 offset=0 split=1\n\nPARAMETERS\n       floats A =      wavelet amplitude [n_srcs]\n       bool   abc =n [y/n]     absorbing flag\n       bool   adj =n [y/n]     use pseudo-spectral\n       bool   born =n [y/n]     born modeling flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =y [y/n]     use complex fft\n       float  cr =ct ®\n       float  ct = ®\n       file   dat_2 =      auxiliary input file name\n       string dat_v =      auxiliary input file name\n       bool   diff =n [y/n]     diffraction imaging flag\n       float  dt = ®\n       floats f0 =      wavelet peak freq [n_srcs]\n       int    gpl =-1      geophone length\n       int    gpl_v =-1      geophone height\n       int    gpx =-1      geophone position x\n       int    gpx_v =-1      geophone position x\n       int    gpz =-1      geophone position z\n       int    gpz_v =-1      geophone position z\n       bool   justrec  =n [y/n]     just need full waveform record (no born or\n              rtdm)\n       int    n_srcs =1      source type\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt = ®\n       int    offset =0      nearest offset\n       int    pad1 =1      padding factor on the first axis\n       bool   ps =n [y/n]     use pseudo-spectral\n       bool   roll =n [y/n]     if n, receiver is independent of source  loca‐\n              tion and gpl=nx\n       int    shtbgn = ®\n       int    shtend = ®\n       int    shtint = ®\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       int    split =1      receiver split\n       ints   spx =      shot position x [n_srcs]\n       ints   spz =      shot position z [n_srcs]\n       int    src =0      source type\n       floats t0 =      wavelet time lag [n_srcs]\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500      reference velocity (default using water)\n       int    which =0 ®\nSOURCE\n       user/jsun/Mpremig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpremig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprep4plot-Tuple{}","page":"Home","title":"Madagascar.sfprep4plot","text":"sfprep4plot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprep4plot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprep4plot. See ?m8r for examples.\n\nRSF Documentation\n\nsfprep4plot(1)                Madagascar Manuals                sfprep4plot(1)\n\nNAME\n       sfprep4plot  -  Resamples  a 2-D dataset to the desired picture resolu‐\n       tion, with antialias\n\nSYNOPSIS\n       sfprep4plot inp= out= verb=n h=768 w=1024 h= w= unit=px ppi= prar=y\n\nCOMMENTS\n       Only one of the h and w parameters needs to be specified.   If  prar=n,\n       no  action  will  be  taken  on axis for which h/w was not specified If\n       prar=y and only one par (h or w) is specified, the picture  will  scale\n       along both axes until it is of the specified dimension.\n\nPARAMETERS\n       string h = ®\n       string inp =      input file\n       string out =      output file\n       int    ppi =      outp. resolution (px/in). Necessary when unit!=px\n       bool   prar =y [y/n]     if y, PReserve Aspect Ratio of input\n       string unit =px      unit of h and w. Can be: px, mm, cm, in\n       bool   verb =n [y/n]     if y, print system commands, outputs\n       string w = ®\nSOURCE\n       user/ivlad/Mprep4plot.py\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfprep4plot\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfprep4plot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpresr-Tuple{}","page":"Home","title":"Madagascar.sfpresr","text":"sfpresr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpresr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpresr. See ?m8r for examples.\n\nRSF Documentation\n\nsfpresr(1)                    Madagascar Manuals                    sfpresr(1)\n\nNAME\n       sfpresr  - 2-D simplest-form post-stack Kirchhoff time modeling and mi‐\n       gration.\n\nSYNOPSIS\n       sfpresr < in.rsf > out.rsf vel=vel.rsf adj=y aa=n sw=0 v0=\n\nCOMMENTS\n       Suppose the input_image & output_data or input_data & output_image have\n       the same dimensions, samplings.  The dottest has been past.\n\nPARAMETERS\n       bool   aa =n [y/n]     yes: apply reciprocal antialiaising operator\n       bool   adj =y [y/n]     yes: migration, no: modeling\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       float  v0 =      constant velocity (if no velocity=)\n       string vel =      velocity file (auxiliary input file name)\nSOURCE\n       user/chenyk/Mpresr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpresr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprestolt-Tuple{}","page":"Home","title":"Madagascar.sfprestolt","text":"sfprestolt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprestolt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprestolt. See ?m8r for examples.\n\nRSF Documentation\n\nsfprestolt(1)                 Madagascar Manuals                 sfprestolt(1)\n\nNAME\n       sfprestolt - Prestack Stolt modeling/migration.\n\nSYNOPSIS\n       sfprestolt < in.rsf > out.rsf inv=n depth=n stack=y nh= dh= vel= pad=nt\n       extend=4\n\nPARAMETERS\n       bool   depth =n [y/n]     y: depth migration, n: time migration\n       float  dh =      offset sampling\n       int    extend =4      trace extension\n       bool   inv =n [y/n]     y: modeling, n: migration\n       int    nh =      number of offsets\n       int    pad =nt      padding on the time axis\n       bool   stack =y [y/n]     if y: stack migrated image\n       float  vel =      constant velocity\nSOURCE\n       system/seismic/Mprestolt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfprestolt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpresum-Tuple{}","page":"Home","title":"Madagascar.sfpresum","text":"sfpresum(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpresum on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpresum. See ?m8r for examples.\n\nRSF Documentation\n\nsfpresum(1)                   Madagascar Manuals                   sfpresum(1)\n\nNAME\n       sfpresum -\n\nSYNOPSIS\n       sfpresum < Fin.rsf > Fou.rsf verb=n nsum=1\n\nCOMMENTS\n       presum traces Paul Sava Copyright (C) 2022 Colorado School of Mines\n\nPARAMETERS\n       int    nsum =1      number of traces to sum\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mpresum.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpresum(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfprod-Tuple{}","page":"Home","title":"Madagascar.sfprod","text":"sfprod(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfprod on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfprod. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfproj-Tuple{}","page":"Home","title":"Madagascar.sfproj","text":"sfproj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfproj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfproj. See ?m8r for examples.\n\nRSF Documentation\n\nsfproj(1)                     Madagascar Manuals                     sfproj(1)\n\nNAME\n       sfproj - Projection filter.\n\nSYNOPSIS\n       sfproj  <  in.rsf  >  out.rsf  filt=filt.rsf  single=y  lag=1  eps=1.0f\n       niter=100 verb=n\n\nPARAMETERS\n       float  eps =1.0f      regularizion parameter\n       file   filt =      auxiliary input file name\n       int    lag =1      lag for internal convolution\n       int    niter =100      number of iterations\n       bool   single =y [y/n]     single channel or multichannel\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/gee/Mproj.c\nVERSION\n       4.2-git Mconv.c 7107 2011-04-10 02:04:14Z ivlad\n\nMadagascar                         JULY 2024                         sfproj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfps2d-Tuple{}","page":"Home","title":"Madagascar.sfps2d","text":"sfps2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfps2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfps2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfps2d(1)                     Madagascar Manuals                     sfps2d(1)\n\nNAME\n       sfps2d  -  2-D  attenuating  wavefield  simulation using Fourier Pseudo\n       Spectral method\n\nSYNOPSIS\n       sfps2d < Fv.rsf Qp=FQp.rsf > Fw.rsf nb=20 nt= dt= fm=20.0 kt=nt\n\nCOMMENTS\n       for computing fractional laplacian instead of fractional  time  deriva‐\n       tive\n\nPARAMETERS\n       file   Qp =      auxiliary input file name\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    kt =nt ®\n       int    nb =20      thickness of sponge ABC\n       int    nt =      number of time steps\nSOURCE\n       user/pyang/Mps2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfps2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfps_getstring-Tuple{}","page":"Home","title":"Madagascar.sfps_getstring","text":"sfps_getstring(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfps_getstring on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfps_getstring. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsgetstring(1)             Madagascar Manuals             sfpsgetstring(1)\n\nNAME\n       sfps_getstring - None\n\nSYNOPSIS\n       sfps_getstring\n\nSOURCE\n       trip/iwave/base/main/ps_getstring.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfps_getstring(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfps_strip-Tuple{}","page":"Home","title":"Madagascar.sfps_strip","text":"sfps_strip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfps_strip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfps_strip. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsstrip(1)                 Madagascar Manuals                 sfpsstrip(1)\n\nNAME\n       sfps_strip - None\n\nSYNOPSIS\n       sfps_strip\n\nSOURCE\n       trip/iwave/base/main/ps_strip.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfps_strip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsefd-Tuple{}","page":"Home","title":"Madagascar.sfpsefd","text":"sfpsefd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsefd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsefd. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsefd(1)                    Madagascar Manuals                    sfpsefd(1)\n\nNAME\n       sfpsefd - EFD phase shift wave extrapolation.\n\nSYNOPSIS\n       sfpsefd  <  data.rsf  >  imag.rsf vel=modl.rsf wave=wave.rsf jz=40 rz=0\n       nz=nz0-rz\n\nPARAMETERS\n       int    jz =40      depth step for wave data\n       int    nz =nz0-rz      depth number\n       int    rz =0      receiver depth\n       file   vel =      auxiliary input file name\n       file   wave =      auxiliary output file name\nSOURCE\n       user/chen/Mpsefd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpsefd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpseudo-Tuple{}","page":"Home","title":"Madagascar.sfpseudo","text":"sfpseudo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpseudo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpseudo. See ?m8r for examples.\n\nRSF Documentation\n\nsfpseudo(1)                   Madagascar Manuals                   sfpseudo(1)\n\nNAME\n       sfpseudo  - Generate rank-1 approximation for lowrank wave propagation:\n       prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfpseudo < fft.rsf > alpha.rsf flag= reg= nz= dz= z0= nx= dx= x0= seed=\n       eps= npk=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       eps    =      tolerance\n       flag   = ®\n       npk    =      maximum sample rows/columns\n       nx     = ®\n       nz     = ®\n       reg    = ®\n       seed   =      seed for random number generator\n       x0     =      Get lowrank parameters\n       z0     = ®\nSOURCE\n       user/jingwei/Mpseudo.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpseudo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpseudodepth-Tuple{}","page":"Home","title":"Madagascar.sfpseudodepth","text":"sfpseudodepth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpseudodepth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpseudodepth. See ?m8r for examples.\n\nRSF Documentation\n\nsfpseudodepth(1)              Madagascar Manuals              sfpseudodepth(1)\n\nNAME\n       sfpseudodepth - depth to vertical-time interpolation\n\nSYNOPSIS\n       sfpseudodepth  < Fin.rsf tau=Ftau.rsf > Fout.rsf inv=n linear=y n= o=0.\n       d=\n\nCOMMENTS\n       z to tau : pseudodepth < FZ.rsf inv=n tau=tau.rsf n=ntau o=otau  d=dtau\n       > FT.rsf tau to z : pseudodepth < FT.rsf inv=y tau=tau.rsf > FZ.rsf\n\nPARAMETERS\n       float  d =      tau d (>0)\n       bool   inv =n [y/n]     if y, tau to z; if n, tau to z\n       bool   linear  =y  [y/n]     if  y,  linear  spline; if n, cubic spline\n              (buggy)\n       int    n =      tau n\n       float  o =0.       tau o\n       file   tau =      auxiliary input file name\nSOURCE\n       user/xuxin/Mpseudodepth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpseudodepth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpseudolrexp-Tuple{}","page":"Home","title":"Madagascar.sfpseudolrexp","text":"sfpseudolrexp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpseudolrexp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpseudolrexp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpseudolrexp(1)              Madagascar Manuals              sfpseudolrexp(1)\n\nNAME\n       sfpseudolrexp - Generate rank-1 approximation for lowrank wave propaga‐\n       tion: lrexp\n\nSYNOPSIS\n       sfpseudolrexp < fft.rsf > alpha.rsf flag= gpz= nt= dt= t0= nz= dz=  z0=\n       nx= dx= x0= seed= eps= npk=\n\nPARAMETERS\n       dt     = ®\n       dx     = ®\n       dz     = ®\n       eps    =      tolerance\n       flag   = ®\n       gpz    = ®\n       npk    =      maximum sample rows/columns\n       nt     = ®\n       nx     = ®\n       nz     = ®\n       seed   =      seed for random number generator\n       t0     = ®\n       x0     =      Get lowrank parameters\n       z0     = ®\nSOURCE\n       user/jingwei/Mpseudolrexp.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpseudolrexp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpseudoprim-Tuple{}","page":"Home","title":"Madagascar.sfpseudoprim","text":"sfpseudoprim(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpseudoprim on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpseudoprim. See ?m8r for examples.\n\nRSF Documentation\n\nsfpseudoprim(1)               Madagascar Manuals               sfpseudoprim(1)\n\nNAME\n       sfpseudoprim - Generate pseudoprimaries using multiples\n\nSYNOPSIS\n       sfpseudoprim  <  in.rsf  >  out.rsf  mul=mul.rsf  verb=n stack=y both=n\n       jumpo=1 jumps=1\n\nCOMMENTS\n       The axes in the input are {offset,shot,frequency} The axes in the  out‐\n       put are {offset,shot,frequency} Requirement: offset interval = shot in‐\n       terval\n\nPARAMETERS\n       bool   both =n [y/n]     receiver flag, if y, receiver with both sides\n       int    jumpo =1      jump in offset dimension, only for stack=n\n       int    jumps =1      jump in shot dimension, only for stack=n\n       string mul =      auxiliary input file name\n       bool   stack =y [y/n]     stack flag, if  y,  no  common  pseudoprimary\n              gather\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mpseudoprim.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpseudoprim(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsmig-Tuple{}","page":"Home","title":"Madagascar.sfpsmig","text":"sfpsmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsmig(1)                    Madagascar Manuals                    sfpsmig(1)\n\nNAME\n       sfpsmig - 2-D Phase-shift modeling and migration.\n\nSYNOPSIS\n       sfpsmig < inp.rsf > out.rsf vel=vel.rsf adj=n nw= dw= eps=0.1f\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag, 0: modeling, 1: migration\n       float  dw = ®\n       float  eps =0.1f      stabilization parameter\n       int    nw = ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/chenyk/Mpsmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpsmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsovc-Tuple{}","page":"Home","title":"Madagascar.sfpsovc","text":"sfpsovc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsovc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsovc. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsovc(1)                    Madagascar Manuals                    sfpsovc(1)\n\nNAME\n       sfpsovc - Pre-stack 2-D oriented velocity continuation.\n\nSYNOPSIS\n       sfpsovc < in.rsf > out.rsf verb=y nv= dv= v0=\n\nCOMMENTS\n       Axes: (Omega,h,p,k) -> (Omega,v,p,k)\n\n       Make sure you use half-offsets for h.\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mpsovc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpsovc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsovcp-Tuple{}","page":"Home","title":"Madagascar.sfpsovcp","text":"sfpsovcp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsovcp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsovcp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsovcp(1)                   Madagascar Manuals                   sfpsovcp(1)\n\nNAME\n       sfpsovcp - Pre-stack 2-D oriented velocity continuation.\n\nSYNOPSIS\n       sfpsovcp < in.rsf > out.rsf verb=y nv= dv= v0=\n\nCOMMENTS\n       Axes: (Omega,h,k,p) -> (Omega,v,k,p)\n\n       Make sure you use half-offsets for h.\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/dmerzlikin/Mpsovcp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpsovcp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsp-Tuple{}","page":"Home","title":"Madagascar.sfpsp","text":"sfpsp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsp(1)                      Madagascar Manuals                      sfpsp(1)\n\nNAME\n       sfpsp - Pseudo-spectral wave extrapolation/migration using second-order\n       two-way wave equation\n\nSYNOPSIS\n       sfpsp < Fi.rsf > Fo.rsf dat=Fd.rsf dat_v=Fd_v.rsf snaps=snaps.rsf  spx=\n       spz=  f0=  t0=  A=  snap=0  cmplx=y  pad1=1  abc=n nbt= nbb=nbt nbl=nbt\n       nbr=nbt ct= cb=ct cl=ct cr=ct  verb=n  ps=n  mig=n  vref=1500  nt=  dt=\n       gpl=-1 gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1\n\nPARAMETERS\n       floats A =      wavelet amplitude [n_srcs]\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =y [y/n]     use complex fft\n       float  cr =ct ®\n       float  ct = ®\n       string dat =      auxiliary input file name\n       string dat_v =      auxiliary input file name\n       float  dt = ®\n       floats f0 =      wavelet peak freq [n_srcs]\n       int    gpl =-1      geophone length\n       int    gpl_v =-1      geophone height\n       int    gpx =-1      geophone position x\n       int    gpx_v =-1      geophone position x\n       int    gpz =-1      geophone position z\n       int    gpz_v =-1      geophone position z\n       bool   mig =n [y/n]     use pseudo-spectral\n       int    n_srcs =1      source type\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       bool   ps =n [y/n]     use pseudo-spectral\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       ints   spx =      shot position x [n_srcs]\n       ints   spz =      shot position z [n_srcs]\n       int    src =0      source type\n       floats t0 =      wavelet time lag [n_srcs]\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500      reference velocity (default using water)\nSOURCE\n       user/jsun/Mpsp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpsp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpspifcos2bs-Tuple{}","page":"Home","title":"Madagascar.sfpspifcos2bs","text":"sfpspifcos2bs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpspifcos2bs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpspifcos2bs. See ?m8r for examples.\n\nRSF Documentation\n\nsfpspifcos2bs(1)              Madagascar Manuals              sfpspifcos2bs(1)\n\nNAME\n       sfpspifcos2bs - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfpspifcos2bs  <  inp.rsf > out.rsf vel=vel.rsf source=source.rsf opt=y\n       dt= nt= nv= isx= isz= nb=30 c=0.01\n\nPARAMETERS\n       float  c =0.01      decaying parameter\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nb =30 ®\n       int    nt = ®\n       int    nv = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   source =      auxiliary input file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mpspifcos2bs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpspifcos2bs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpspig-Tuple{}","page":"Home","title":"Madagascar.sfpspig","text":"sfpspig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpspig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpspig. See ?m8r for examples.\n\nRSF Documentation\n\nsfpspig(1)                    Madagascar Manuals                    sfpspig(1)\n\nNAME\n       sfpspig - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfpspig < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf opt=y dt= nt= nv=\n       lmdv= lmdvx=\n\nPARAMETERS\n       float  dt = ®\n       file   grad =      auxiliary input file name\n       float  lmdv = ®\n       float  lmdvx =      if y, determine optimal size for efficiency\n       int    nt = ®\n       int    nv = ®\n       bool   opt =y [y/n]\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mpspig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpspig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpspmig-Tuple{}","page":"Home","title":"Madagascar.sfpspmig","text":"sfpspmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpspmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpspmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfpspmig(1)                   Madagascar Manuals                   sfpspmig(1)\n\nNAME\n       sfpspmig - Pseudo-spectral migration/de-migration adjoint operators us‐\n       ing second-order two-way wave equation\n\nSYNOPSIS\n       sfpspmig < Fi.rsf > Fo.rsf  vel=Fv.rsf  dat_v=Fd_v.rsf  snaps=snaps.rsf\n       spx=  spz=  f0=  t0= A= snap=0 cmplx=y pad1=1 abc=n born=n nbt= nbb=nbt\n       nbl=nbt nbr=nbt ct= cb=ct cl=ct cr=ct verb=n ps=n adj=n  vref=1500  nt=\n       dt= gpl=-1 gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1\n\nPARAMETERS\n       floats A =      wavelet amplitude [n_srcs]\n       bool   abc =n [y/n]     absorbing flag\n       bool   adj =n [y/n]     use pseudo-spectral\n       bool   born =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =y [y/n]     use complex fft\n       float  cr =ct ®\n       float  ct = ®\n       string dat_v =      auxiliary input file name\n       float  dt = ®\n       floats f0 =      wavelet peak freq [n_srcs]\n       int    gpl =-1      geophone length\n       int    gpl_v =-1      geophone height\n       int    gpx =-1      geophone position x\n       int    gpx_v =-1      geophone position x\n       int    gpz =-1      geophone position z\n       int    gpz_v =-1      geophone position z\n       int    n_srcs =1      source type\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       bool   ps =n [y/n]     use pseudo-spectral\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       ints   spx =      shot position x [n_srcs]\n       ints   spz =      shot position z [n_srcs]\n       int    src =0      source type\n       floats t0 =      wavelet time lag [n_srcs]\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500      reference velocity (default using water)\nSOURCE\n       user/jsun/Mpspmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpspmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpspp-Tuple{}","page":"Home","title":"Madagascar.sfpspp","text":"sfpspp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpspp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpspp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpspp(1)                     Madagascar Manuals                     sfpspp(1)\n\nNAME\n       sfpspp  -  Pseudo-spectral  wave extrapolation for second-order two-way\n       wave equation using wavefield injection for passive imaging\n\nSYNOPSIS\n       sfpspp < Fi.rsf >  Fo.rsf  wave=Fw.rsf  dat_v=Fd_v.rsf  snaps=snaps.rsf\n       spx=  spz=  f0= t0= A= snap=0 cmplx=y pad1=1 abc=n nbt= nbb=nbt nbl=nbt\n       nbr=nbt ct= cb=ct cl=ct cr=ct verb=n  ps=n  vref=1500  nt=  dt=  gpl=-1\n       gpl_v=-1 src=0 n_srcs=1 gpx=-1 gpz=-1 gpx_v=-1 gpz_v=-1\n\nPARAMETERS\n       floats A =      wavelet amplitude [n_srcs]\n       bool   abc =n [y/n]     absorbing flag\n       float  cb =ct ®\n       float  cl =ct ®\n       bool   cmplx =y [y/n]     use complex fft\n       float  cr =ct ®\n       float  ct = ®\n       string dat_v =      auxiliary output file name\n       float  dt = ®\n       floats f0 =      wavelet peak freq [n_srcs]\n       int    gpl =-1      geophone length\n       int    gpl_v =-1      geophone height\n       int    gpx =-1      geophone position x\n       int    gpx_v =-1      geophone position x\n       int    gpz =-1      geophone position z\n       int    gpz_v =-1      geophone position z\n       int    n_srcs =1      source type\n       int    nbb =nbt ®\n       int    nbl =nbt ®\n       int    nbr =nbt ®\n       int    nbt = ®\n       int    nt = ®\n       int    pad1 =1      padding factor on the first axis\n       bool   ps =n [y/n]     use pseudo-spectral\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       ints   spx =      shot position x [n_srcs]\n       ints   spz =      shot position z [n_srcs]\n       int    src =0      source type\n       floats t0 =      wavelet time lag [n_srcs]\n       bool   verb =n [y/n]     verbosity\n       float  vref =1500      reference velocity (default using water)\n       string wave =      auxiliary input file name\nSOURCE\n       user/jsun/Mpspp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpspp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsss-Tuple{}","page":"Home","title":"Madagascar.sfpsss","text":"sfpsss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsss. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsss(1)                     Madagascar Manuals                     sfpsss(1)\n\nNAME\n       sfpsss - phase shift wave extrapolation.\n\nSYNOPSIS\n       sfpsss  <  data.rsf  >  imag.rsf  vel=modl.rsf wave=wave.rsf jz=40 rz=0\n       nz=nz0-rz\n\nPARAMETERS\n       int    jz =40      depth step for wave data\n       int    nz =nz0-rz      depth number\n       int    rz =0      receiver depth\n       file   vel =      auxiliary input file name\n       file   wave =      auxiliary output file name\nSOURCE\n       user/chen/Mpsss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpsss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsti2d-Tuple{}","page":"Home","title":"Madagascar.sfpsti2d","text":"sfpsti2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsti2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsti2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsti2d(1)                   Madagascar Manuals                   sfpsti2d(1)\n\nNAME\n       sfpsti2d - Modeling of pure acoustic wave in 2-D transversely isotropic\n       meida using psuedospectral method\n\nSYNOPSIS\n       sfpsti2d  >  out.rsf  vel=vel.rsf   sigma=fsigma.rsf   delta=fdelta.rsf\n       seta=fseta.rsf  <  source.rsf  opt=1  dt=  nt=  isx= isz= nbt=44 nbb=44\n       nxl=44 nxr=44 czt=0.01 czb=0.01 cxl=0.01 cxr=0.01 snap=1\n\nPARAMETERS\n       float  cxl =0.01      decaying parameter\n       float  cxr =0.01      decaying parameter\n       float  czb =0.01      decaying parameter\n       float  czt =0.01      decaying parameter\n       file   delta =      auxiliary input file name\n       float  dt = ®\n       int    isx = ®\n       int    isz = ®\n       int    nbb =44 ®\n       int    nbt =44 ®\n       int    nt = ®\n       int    nxl =44 ®\n       int    nxr =44      assume ABC pars are the same\n       int    opt =1      if y, determine optimal size for efficiency\n       file   seta =      auxiliary input file name\n       file   sigma =      auxiliary input file name\n       int    snap =1 ®\n       file   vel =      auxiliary input file name\nSOURCE\n       user/junyan/Mpsti2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfpsti2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpsvp-Tuple{}","page":"Home","title":"Madagascar.sfpsvp","text":"sfpsvp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpsvp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpsvp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpsvp(1)                     Madagascar Manuals                     sfpsvp(1)\n\nNAME\n       sfpsvp - Ps to vplot\n\nSYNOPSIS\n       sfpsvp sep=\n\nPARAMETERS\n       string sep =      cmd separater\nSOURCE\n       user/chen/Mpsvp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpsvp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfptaupmo-Tuple{}","page":"Home","title":"Madagascar.sfptaupmo","text":"sfptaupmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfptaupmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfptaupmo. See ?m8r for examples.\n\nRSF Documentation\n\nsfptaupmo(1)                  Madagascar Manuals                  sfptaupmo(1)\n\nNAME\n       sfptaupmo - Slope-based tau-p moveout.\n\nSYNOPSIS\n       sfptaupmo  < inp.rsf dip=dip.rsf dipt=dipt.rsf > nmod.rsf vel2=vel2.rsf\n       eps=0.01 v0=0. type=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       file   dipt =      auxiliary input file name\n       float  eps =0.01      stretch regularization\n       string type =      transform type\n       float  v0 =0.       initial velocity\n       file   vel2 =      auxiliary output file name\nSOURCE\n       system/seismic/Mptaupmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfptaupmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfptaupmo3-Tuple{}","page":"Home","title":"Madagascar.sfptaupmo3","text":"sfptaupmo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfptaupmo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfptaupmo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfptaupmo3(1)                 Madagascar Manuals                 sfptaupmo3(1)\n\nNAME\n       sfptaupmo3 - Slope-based tau-p 3D moveout.\n\nSYNOPSIS\n       sfptaupmo3   <   inp.rsf   dip1=dip1.rsf   dip2=dip2.rsf   >   nmod.rsf\n       tau0=tau0.rsf eps=0.01\n\nPARAMETERS\n       string dip1 =      slope field mesaure along dimension 2(auxiliary  in‐\n              put file name)\n       string dip2  =      slope field mesaure along dimension 3(auxiliary in‐\n              put file name)\n       float  eps =0.01      stretch regularization\n       string tau0 =      tau0(tau,p) (auxiliary output file name)\nSOURCE\n       system/seismic/Mptaupmo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfptaupmo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfptaupmoVTI-Tuple{}","page":"Home","title":"Madagascar.sfptaupmoVTI","text":"sfptaupmoVTI(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfptaupmoVTI on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfptaupmoVTI. See ?m8r for examples.\n\nRSF Documentation\n\nsfptaupmoVTI(1)               Madagascar Manuals               sfptaupmoVTI(1)\n\nNAME\n       sfptaupmoVTI - Slope-based tau-p moveout in VTI.\n\nSYNOPSIS\n       sfptaupmoVTI   <   inp.rsf   dip=dip.rsf   ddip=ddip.rsf   >   nmod.rsf\n       tau0=tau0.rsf cos2=cos2.rsf eps=0.01\n\nPARAMETERS\n       file   cos2 =      auxiliary output file name\n       string ddip =      curvature field (auxiliary input file name)\n       string dip =      slope field (auxiliary input file name)\n       float  eps =0.01      stretch regularization\n       string tau0 =      tau0(tau,p) (auxiliary output file name)\nSOURCE\n       system/seismic/MptaupmoVTI.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfptaupmoVTI(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfput-Tuple{}","page":"Home","title":"Madagascar.sfput","text":"sfput(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfput on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfput. See ?m8r for examples.\n\nRSF Documentation\n\nsfput(1)                      Madagascar Manuals                      sfput(1)\n\nNAME\n       sfput - Input parameters into a header.\n\nSYNOPSIS\n       sfput < in.rsf > out.rsf [parameter=value list]\n\nUSED IN\n       bei/ft1/ft2d\n\n       bei/trimo/all\n\n       bei/trimo/subsamp\n\n       bei/trimo/veltran\n\n       carrot/test/modeling\n\n       chen/test/wavmod\n\n       cup/rna2d/real\n\n       cup/rna2d/shot\n\n       cup/rna2d/simple\n\n       cup/rna3d/real\n\n       cup/rna3d/shot\n\n       cup/rna3d/sin\n\n       cwp/geo2006TimeShiftImagingCondition/flat\n\n       cwp/geo2006TimeShiftImagingCondition/icomp\n\n       cwp/geo2006TimeShiftImagingCondition/zicig\n\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n\n       cwp/geo2008InterferometricImagingCondition/circle\n\n       cwp/geo2008InterferometricImagingCondition/sact1\n\n       cwp/geo2008InterferometricImagingCondition/sigs2\n\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n\n       cwp/geo2009TTIModeSeparation/fold\n\n       cwp/geo2009TTIModeSeparation/marmousi2\n\n       23 more examples listed in:\n\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       put.html\n\nSOURCE\n       system/main/put.c\n\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfput\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfput(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpveltran-Tuple{}","page":"Home","title":"Madagascar.sfpveltran","text":"sfpveltran(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpveltran on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpveltran. See ?m8r for examples.\n\nRSF Documentation\n\nsfpveltran(1)                 Madagascar Manuals                 sfpveltran(1)\n\nNAME\n       sfpveltran - Slope-based velocity transform.\n\nSYNOPSIS\n       sfpveltran < cmp.rsf dip=dip.rsf > vel.rsf dipt=dipt.rsf half=y nv= v0=\n       dv= interval=n eps=0.1\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       file   dipt =      auxiliary input file name\n       float  dv =      velocity sampling\n       float  eps =0.1      stretch regularization\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       bool   interval =n [y/n]     if y, compute interval velocity\n       int    nv =      number of velocities\n       float  v0 =      velocity origin\nSOURCE\n       system/seismic/Mpveltran.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpveltran(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpveltran3-Tuple{}","page":"Home","title":"Madagascar.sfpveltran3","text":"sfpveltran3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpveltran3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpveltran3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpveltran3(1)                Madagascar Manuals                sfpveltran3(1)\n\nNAME\n       sfpveltran3  -  Slope-based  tau-p 3D velocity transform for elliptical\n       anisotropy.\n\nSYNOPSIS\n       sfpveltran3  <  input.rsf  >  velx.rsf  vely=vely.rsf   velxy=velxy.rsf\n       cmp=cmp.rsf  dipx=dipx.rsf  dipy=dipy.rsf  dipxy=dipxy.rsf map=n inter‐\n       val=n  nvx=  vx0=  dvx=  nvy=nvx  vy0=vx0  dvy=dvx  nvxy=101  vxy0=-0.1\n       dvxy=0.1 nw=4\n\nCOMMENTS\n       * The program returns the squared velocity vx,vy,vxy spectra or maps\n\nPARAMETERS\n       string cmp =      auxiliary input file name\n       string dipx =      auxiliary input file name\n       string dipxy =      auxiliary input file name\n       string dipy =      auxiliary input file name\n       float  dvx =      vx squared velocity sampling\n       float  dvxy =0.1      vxy velocity sampling\n       float  dvy =dvx      vy squared velocity sampling\n       bool   interval =n [y/n]     interval values by 3D stripping equations\n       bool   map =n [y/n]     output maps instead of coherency panels\n       int    nvx =      number of vx squared velocities\n       int    nvxy =101      number of vxy velocities\n       int    nvy =nvx      number of vy squared velocities\n       int    nw =4      interpolator size (2,3,4,6,8)\n       file   velxy =      auxiliary output file name\n       file   vely =      auxiliary output file name\n       float  vx0 =      vx squared velocity origin\n       float  vxy0 =-0.1      vxy velocity origin\n       float  vy0 =vx0      vy squared velocity origin\nSOURCE\n       system/seismic/Mpveltran3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpveltran3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpveltranVTI-Tuple{}","page":"Home","title":"Madagascar.sfpveltranVTI","text":"sfpveltranVTI(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpveltranVTI on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpveltranVTI. See ?m8r for examples.\n\nRSF Documentation\n\nsfpveltranVTI(1)              Madagascar Manuals              sfpveltranVTI(1)\n\nNAME\n       sfpveltranVTI - Slope-based tau-p velocity transform for VTI media.\n\nSYNOPSIS\n       sfpveltranVTI   <   tau0.rsf   >   velN.rsf  velH=velH.rsf  eta=eta.rsf\n       cmp=cmp.rsf  dip=dip.rsf  curv=curv.rsf  dipt=dipt.rsf  tau0t=tau0t.rsf\n       curvt=curvt.rsf  map=n  nv= v0= dv= nvh=nv vh0=v0 dvh=dv ne=101 e0=-0.5\n       de=0.01 nw=4 method=\n\nPARAMETERS\n       file   cmp =      auxiliary input file name\n       string curv =      curvature field (required for method=e and method=d)\n              (auxiliary input file name)\n       string curvt  =       time  derivative of curvature field (required for\n              method=d and method=s) (auxiliary input file name)\n       float  de =0.01      eta sampling\n       string dip =      slope field  (required  for  method=e  and  method=d)\n              (auxiliary input file name)\n       string dipt  =      time derivative of slope field(auxiliary input file\n              name)\n       float  dv =      velocity sampling\n       float  dvh =dv      HOR velocity sampling\n       float  e0 =-0.5      eta origin\n       file   eta =      auxiliary output file name\n       bool   map =n [y/n]     output maps instead of coherency panels\n       string method =      method to use (stripping,dix,fowler,effective)\n       int    ne =101      number of etas\n       int    nv =      number of velocities\n       int    nvh =nv      number of HOR velocities\n       int    nw =4      interpolator size (2,3,4,6,8)\n       string tau0t =      tau0 tau derivative field (required  for  method=f)\n              (auxiliary input file name)\n       float  v0 =      velocity origin\n       file   velH =      auxiliary output file name\n       float  vh0 =v0      HOR velocity origin\nSOURCE\n       system/seismic/MpveltranVTI.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfpveltranVTI(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwarp-Tuple{}","page":"Home","title":"Madagascar.sfpwarp","text":"sfpwarp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwarp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwarp. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwarp(1)                    Madagascar Manuals                    sfpwarp(1)\n\nNAME\n       sfpwarp - Shift estimation by amplitude-adjusted plane-wave destruction\n\nSYNOPSIS\n       sfpwarp  <  inp.rsf other=oth.rsf > shift.rsf ishift=ishift.rsf niter=5\n       liter=20 rect1=1 rect2=1 order=1 drift=n verb=n eps=0.0f\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       float  eps =0.0f      regularization\n       string ishift =      initial shift (auxiliary input file name)\n       int    liter =20      number of linear iterations\n       int    niter =5      number of iterations\n       int    order =1      accuracy order\n       file   other =      auxiliary input file name\n       int    rect1 =1      shift smoothness on 1st axis\n       int    rect2 =1      shift smoothness on 2nd axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mpwarp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpwarp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwave3d-Tuple{}","page":"Home","title":"Madagascar.sfpwave3d","text":"sfpwave3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwave3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwave3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwave3d(1)                  Madagascar Manuals                  sfpwave3d(1)\n\nNAME\n       sfpwave3d -\n\nSYNOPSIS\n       sfpwave3d > Fdat.rsf verb=n nt= ot= dt= nx= ox= dx= ny= oy= dy= nz= oz=\n       dz= vel=1.0 cx=1.0 cy=1.0 cz=1.0\n\nCOMMENTS\n       generate a plane in t-x-y-z space cx x + cy y + cz z - vel t =  0  (the\n       plane goes through the origin)\n\nPARAMETERS\n       float  cx =1.0 ®\n       float  cy =1.0 ®\n       float  cz =1.0 ®\n       float  dt = ®\n       float  dx = ®\n       float  dy = ®\n       float  dz = ®\n       int    nt = ®\n       int    nx = ®\n       int    ny = ®\n       int    nz = ®\n       float  ot = ®\n       float  ox = ®\n       float  oy = ®\n       float  oz = ®\n       float  vel =1.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mpwave3d.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwave3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwcascade-Tuple{}","page":"Home","title":"Madagascar.sfpwcascade","text":"sfpwcascade(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwcascade on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwcascade. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwcascade(1)                Madagascar Manuals                sfpwcascade(1)\n\nNAME\n       sfpwcascade - Plane-wave smoothing by box cascade.\n\nSYNOPSIS\n       sfpwcascade  < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 edge=n or‐\n       der=1 rect=0 pclip=50. cycle=1\n\nPARAMETERS\n       int    cycle =1      number of cycles\n       file   dip =      auxiliary input file name\n       bool   edge =n [y/n]     preserve edges\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       float  pclip =50.       percentage clip for the gradient\n       int    rect =0      smoothing radius\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pwd/Mpwcascade.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwcascade(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwcascade3-Tuple{}","page":"Home","title":"Madagascar.sfpwcascade3","text":"sfpwcascade3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwcascade3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwcascade3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwcascade3(1)               Madagascar Manuals               sfpwcascade3(1)\n\nNAME\n       sfpwcascade3 - 3-D plane-wave smoothing by box cascade.\n\nSYNOPSIS\n       sfpwcascade3 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 edge=n or‐\n       der=1 rect=0 pclip=50. cycle=1\n\nPARAMETERS\n       int    cycle =1      number of cycles\n       file   dip =      auxiliary input file name\n       bool   edge =n [y/n]     preserve edges\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       float  pclip =50.       percentage clip for the gradient\n       int    rect =0      smoothing radius\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pwd/Mpwcascade3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpwcascade3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwcoh-Tuple{}","page":"Home","title":"Madagascar.sfpwcoh","text":"sfpwcoh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwcoh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwcoh. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwcoh(1)                    Madagascar Manuals                    sfpwcoh(1)\n\nNAME\n       sfpwcoh - Coherency by plane-wave construction.\n\nSYNOPSIS\n       sfpwcoh  <  in.rsf  >  out.rsf  dip=dip.rsf  a2=a2.rsf b2=b2.rsf verb=n\n       eps=0.01 rect=2 order=1\n\nPARAMETERS\n       file   a2 =      auxiliary output file name\n       file   b2 =      auxiliary output file name\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       int    rect =2      spread\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mpwcoh.c\nVERSION\n       4.2-git Mflat.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                        sfpwcoh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwcsemb-Tuple{}","page":"Home","title":"Madagascar.sfpwcsemb","text":"sfpwcsemb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwcsemb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwcsemb. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwcsemb(1)                  Madagascar Manuals                  sfpwcsemb(1)\n\nNAME\n       sfpwcsemb - Semblance from plane-wave construction datacube.\n\nSYNOPSIS\n       sfpwcsemb < in.rsf > out.rsf nfw= boundary=n verb=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      calculation window in n1 direction (positive integer)\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mpwcsemb.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwcsemb(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwd-Tuple{}","page":"Home","title":"Madagascar.sfpwd","text":"sfpwd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwd. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwd(1)                      Madagascar Manuals                      sfpwd(1)\n\nNAME\n       sfpwd - 3-D plane wave destruction.\n\nSYNOPSIS\n       sfpwd  <  in.rsf  dip=dip.rsf > out.rsf both=n n4=2 order=1 nj1=1 nj2=1\n       drift=n\n\nCOMMENTS\n       February        2013        program        of        the         month:\n       http://ahay.org/blog/2013/02/09/program-of-the-month-sfpwd/\n\nPARAMETERS\n       bool   both =n [y/n]     if y, compute both left and right predictions\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    nj1 =1      in-line aliasing\n       int    nj2 =1      cross-line aliasing\n       int    order =1      accuracy\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2008InterferometricImagingCondition/circle\n       data/alaska/line31-81-m8r\nSOURCE\n       user/pwd/Mpwd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfpwd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwd1-Tuple{}","page":"Home","title":"Madagascar.sfpwd1","text":"sfpwd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwd1(1)                     Madagascar Manuals                     sfpwd1(1)\n\nNAME\n       sfpwd1 - One side of plane wave destruction.\n\nSYNOPSIS\n       sfpwd1  <  in.rsf  dip=dip.rsf  >  out.rsf  left=y  order=1 nj1=1 nj2=1\n       drift=n\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       bool   left =y [y/n]     if using left or right side of PWD\n       int    nj1 =1      in-line aliasing\n       int    nj2 =1      cross-line aliasing\n       int    order =1      accuracy\nSOURCE\n       user/pwd/Mpwd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpwd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwd2-Tuple{}","page":"Home","title":"Madagascar.sfpwd2","text":"sfpwd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwd2(1)                     Madagascar Manuals                     sfpwd2(1)\n\nNAME\n       sfpwd2 - 2-D plane wave destruction.\n\nSYNOPSIS\n       sfpwd2 < in.rsf dip=dip.rsf > out.rsf order=1 verb=n nj1=1 drift=n\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       int    nj1 =1      aliasing\n       int    order =1      accuracy\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mpwd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpwd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdchain-Tuple{}","page":"Home","title":"Madagascar.sfpwdchain","text":"sfpwdchain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdchain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdchain. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdchain(1)                 Madagascar Manuals                 sfpwdchain(1)\n\nNAME\n       sfpwdchain - Multiple dip estimation by chain of PWDs\n\nSYNOPSIS\n       sfpwdchain < inp.rsf dip=dip.rsf > out.rsf dipin=dipin.rsf nc=1 order=1\n       drift=n vp=n verb=(bool) (1 == nt)  niter=0  liter=50  rect1=1  rect2=1\n       lambda=1.0f\n\nPARAMETERS\n       file   dip =      auxiliary output file name\n       string dipin =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       float  lambda =1.0f      scaling\n       int    liter =50      number of linear iterations\n       int    nc =1      number of components\n       int    niter =0      number of iterations\n       int    order =1      PWD order\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing radius\n       bool   verb =(bool) (1 == nt) [y/n]     verbosity flag\n       bool   vp =n [y/n]     if use variable projection\nSOURCE\n       user/pwd/Mpwdchain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwdchain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdchain1-Tuple{}","page":"Home","title":"Madagascar.sfpwdchain1","text":"sfpwdchain1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdchain1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdchain1. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdchain1(1)                Madagascar Manuals                sfpwdchain1(1)\n\nNAME\n       sfpwdchain1 - Chain of PWDs - linear operator\n\nSYNOPSIS\n       sfpwdchain1  <  inp.rsf dip=dip.rsf sig=sig.rsf > out.rsf adj=n drift=n\n       forx=n order=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   dip =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       bool   forx =n [y/n]     for x only\n       int    order =1      PWD order\n       file   sig =      auxiliary input file name\nSOURCE\n       user/pwd/Mpwdchain1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwdchain1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdchain2-Tuple{}","page":"Home","title":"Madagascar.sfpwdchain2","text":"sfpwdchain2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdchain2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdchain2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdchain2(1)                Madagascar Manuals                sfpwdchain2(1)\n\nNAME\n       sfpwdchain2 - Chain of PWDs\n\nSYNOPSIS\n       sfpwdchain2 < inp.rsf sig=sig.rsf > out.rsf drift=n\n\nPARAMETERS\n       bool   drift =n [y/n]     if shift filter\n       file   sig =      auxiliary input file name\nSOURCE\n       user/pwd/Mpwdchain2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwdchain2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwddiffuse-Tuple{}","page":"Home","title":"Madagascar.sfpwddiffuse","text":"sfpwddiffuse(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwddiffuse on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwddiffuse. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwddiffuse(1)               Madagascar Manuals               sfpwddiffuse(1)\n\nNAME\n       sfpwddiffuse  - Anisotropic diffusion by regularized inversion. Instead\n       of a gradient PWDs in inline and crossline directions are used. 3D.\n\nSYNOPSIS\n       sfpwddiffuse < in.rsf dip=dip.rsf vx=fvx.rsf vy=fvy.rsf >  out.rsf  or‐\n       der=1 nj1=1 nj2=1 sm=y niter=10 repeat=1 eps=1. adj=n test=n\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag - when test=y\n       file   dip =      auxiliary input file name\n       float  eps =1.       regularization parameter\n       int    niter =10      number of conjugate-gradient iterations\n       int    nj1 =1      antialiasing iline\n       int    nj2 =1      antialiasing xline\n       int    order =1 [1,2,3]   accuracy order\n       int    repeat =1      number of smoothing iterations\n       bool   sm =y [y/n]     if perform PWD filtering\n       bool   test  =n  [y/n]     test  - applied in either forward or adjoint\n              mode (no inversion)\n       file   vx =      auxiliary input file name\n       file   vy =      auxiliary input file name\nSOURCE\n       user/dmerzlikin/Mpwddiffuse.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpwddiffuse(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdecon-Tuple{}","page":"Home","title":"Madagascar.sfpwdecon","text":"sfpwdecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdecon. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdecon(1)                  Madagascar Manuals                  sfpwdecon(1)\n\nNAME\n       sfpwdecon  -  Deconvolution  with  known  wavelelt using pwc to control\n       sparsity.\n\nSYNOPSIS\n       sfpwdecon   <    in.rsf    dips=dips.rsf    wav=wav.rsf    >    out.rsf\n       weight=weight.rsf  sparse=y  reg=0  cut_p=y  order=1  niter=50 nliter=1\n       eps=0. verb=y\n\nCOMMENTS\nPARAMETERS\n       bool   cut_p =y [y/n]     cut off value of precondition\n       file   dips =      auxiliary input file name\n       float  eps =0.       regularization parameter\n       int    niter =50      maximum number of iterations\n       int    nliter =1      number of reweighting iterations\n       int    order =1      accuracy order\n       int    reg =0      cut off value of precondition\n       bool   sparse  =y  [y/n]     if  sparse  =  ture  sparse  deconvolution\n              cauchy-norm\n                        if reg = 0: regularization A = |I|\n                        if reg = 1:  regularization A = |PWD|\n                     if  sparse = false  2-norn deconvolution regularization A\n              = ||I||\n       bool   verb =y [y/n]     verbosity flag\n       file   wav =      auxiliary input file name\n       string weight =      auxiliary output file name\nSOURCE\n       user/gchliu/Mpwdecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwdecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdfreq-Tuple{}","page":"Home","title":"Madagascar.sfpwdfreq","text":"sfpwdfreq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdfreq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdfreq. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdfreq(1)                  Madagascar Manuals                  sfpwdfreq(1)\n\nNAME\n       sfpwdfreq - frequency response of PWD operator\n\nSYNOPSIS\n       sfpwdfreq  >  out.rsf  n1=50  order=1 o3=20 d3=30 n3=1 iir=n opwd=y ra‐\n       dius=1.0 interp=\n\nPARAMETERS\n       float  d3 =30      dip angle increment\n       bool   iir =n [y/n]     y: iir; n: fir\n       string interp =      interpolation method: maxflat lagrange bspline\n       int    n1 =50      samples in frequency domain between (0:f_c]\n       int    n3 =1      number dip angle\n       float  o3 =20      first dip angle\n       bool   opwd =y [y/n]     y: circle interpolating pwd; n: line  interpo‐\n              lating pwd\n       int    order =1      order of PWD\n       float  radius =1.0      radius for circle interpolating pwd\nSOURCE\n       user/chen/Mpwdfreq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwdfreq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdix-Tuple{}","page":"Home","title":"Madagascar.sfpwdix","text":"sfpwdix(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdix on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdix. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdix(1)                    Madagascar Manuals                    sfpwdix(1)\n\nNAME\n       sfpwdix - Convert RMS to interval velocity using LS and plane-wave con‐\n       struction.\n\nSYNOPSIS\n       sfpwdix < vrms.rsf > vint.rsf  weight=weight.rsf  slope=slope.rsf  vrm‐\n       sout=vout.rsf niter=100 ncycle=10 rect1=1 verb=n eps=0. order=1\n\nPARAMETERS\n       float  eps =0.       regularization parameter\n       int    ncycle =10      number of cycles for anisotropic diffusion\n       int    niter =100      maximum number of iterations\n       int    order =1      accuracy order\n       int    rect1 =1      vertical smoothing radius\n       file   slope =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       string vrmsout =      optionally, output predicted vrms (auxiliary out‐\n              put file name)\n       file   weight =      auxiliary input file name\nSOURCE\n       user/pwd/Mpwdix.c\nVERSION\n       4.2-git Mdix.c 803 2004-09-18 12:32:15Z fomels\n\nMadagascar                         JULY 2024                        sfpwdix(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdnorm-Tuple{}","page":"Home","title":"Madagascar.sfpwdnorm","text":"sfpwdnorm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdnorm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdnorm. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdnorm(1)                  Madagascar Manuals                  sfpwdnorm(1)\n\nNAME\n       sfpwdnorm - 3-D plane wave destruction.\n\nSYNOPSIS\n       sfpwdnorm  <  in.rsf  dip=dip.rsf  >  out.rsf  n4=2 order=1 nj1=1 nj2=1\n       norm=y\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       int    n4 =2      what to compute in 3-D. 0: in-line, 1: cross-line, 2:\n              both\n       int    nj1 =1      in-line aliasing\n       int    nj2 =1      cross-line aliasing\n       bool   norm =y [y/n]     filter normalization\n       int    order =1      accuracy\nSOURCE\n       user/lcasasan/Mpwdnorm.c\nVERSION\n       4.2-git Mpwd.c 5367 2010-02-16 00:33:09Z sfomel\n\nMadagascar                         JULY 2024                      sfpwdnorm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdsigk-Tuple{}","page":"Home","title":"Madagascar.sfpwdsigk","text":"sfpwdsigk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdsigk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdsigk. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdsigk(1)                  Madagascar Manuals                  sfpwdsigk(1)\n\nNAME\n       sfpwdsigk - Signal component separation using plane-wave destruction.\n\nSYNOPSIS\n       sfpwdsigk  <  in.rsf dips=dips.rsf > out.rsf weight=weight.rsf niter=50\n       nliter=1 eps=0. verb=n order=1\n\nCOMMENTS\n       The program works with 2-D data.\n\nPARAMETERS\n       file   dips =      auxiliary input file name\n       float  eps =0.       regularization parameter\n       int    niter =50      maximum number of iterations\n       int    nliter =1      number of reweighting iterations\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary output file name\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\nSOURCE\n       user/pwd/Mpwdsigk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwdsigk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdsmooth2-Tuple{}","page":"Home","title":"Madagascar.sfpwdsmooth2","text":"sfpwdsmooth2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdsmooth2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdsmooth2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdsmooth2(1)               Madagascar Manuals               sfpwdsmooth2(1)\n\nNAME\n       sfpwdsmooth2  - 2-D smoothing by triangle plane-wave construction shap‐\n       ing.\n\nSYNOPSIS\n       sfpwdsmooth2 < in.rsf  dip=dip.rsf  >  out.rsf  rect1=3  rect2=3  adj=n\n       verb=n eps=0.01 order=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       int    rect1 =3 ®\n       int    rect2 =3      smoothing radius\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mpwdsmooth2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpwdsmooth2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdtensor-Tuple{}","page":"Home","title":"Madagascar.sfpwdtensor","text":"sfpwdtensor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdtensor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdtensor. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdtensor(1)                Madagascar Manuals                sfpwdtensor(1)\n\nNAME\n       sfpwdtensor  - structure tensor estimation based on plane wave destruc‐\n       tion.\n\nSYNOPSIS\n       sfpwdtensor < in.rsf in2=in2.rsf in3=in3.rsf  >  out.rsf  out2=out2.rsf\n       uver=uver.rsf  uhor=uhor.rsf  vver=vver.rsf  vhor=vhor.rsf  eps=0.00001\n       normalize=n\n\nPARAMETERS\n       float  eps =0.00001 ®\n       file   in2 =      auxiliary input file name\n       file   in3 =      auxiliary input file name\n       bool   normalize =n [y/n]\n       file   out2 =      auxiliary output file name\n       file   uhor =      auxiliary output file name\n       file   uver =      auxiliary output file name\n       file   vhor =      auxiliary output file name\n       file   vver =      auxiliary output file name\nSOURCE\n       user/dmerzlikin/Mpwdtensor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwdtensor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwdtensorh-Tuple{}","page":"Home","title":"Madagascar.sfpwdtensorh","text":"sfpwdtensorh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwdtensorh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwdtensorh. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwdtensorh(1)               Madagascar Manuals               sfpwdtensorh(1)\n\nNAME\n       sfpwdtensorh - structure tensor estimation based on plane wave destruc‐\n       tion.\n\nSYNOPSIS\n       sfpwdtensorh < in.rsf in2=in2.rsf in3=in3.rsf >  out.rsf  out2=out2.rsf\n       ux=uxf.rsf uy=uyf.rsf vx=vxf.rsf vy=vyf.rsf eps=0.00001 normalize=n\n\nPARAMETERS\n       float  eps =0.00001 ®\n       file   in2 =      auxiliary input file name\n       file   in3 =      auxiliary input file name\n       bool   normalize =n [y/n]\n       file   out2 =      auxiliary output file name\n       file   ux =      auxiliary output file name\n       file   uy =      auxiliary output file name\n       file   vx =      auxiliary output file name\n       file   vy =      auxiliary output file name\nSOURCE\n       user/dmerzlikin/Mpwdtensorh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfpwdtensorh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwic-Tuple{}","page":"Home","title":"Madagascar.sfpwic","text":"sfpwic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwic. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwic(1)                     Madagascar Manuals                     sfpwic(1)\n\nNAME\n       sfpwic - Least square imaging condition with pwc regularization.\n\nSYNOPSIS\n       sfpwic < in.rsf dips=dips.rsf down=down.rsf > out.rsf weight=weight.rsf\n       sparse=y reg=0 cut_p=n niter=50 nliter=1 eps=0. verb=y order=1\n\nCOMMENTS\nPARAMETERS\n       bool   cut_p =n [y/n]     cut off value of precondition\n       file   dips =      auxiliary input file name\n       file   down =      auxiliary input file name\n       float  eps =0.       regularization parameter\n       int    niter =50      maximum number of iterations\n       int    nliter =1      number of reweighting iterations\n       int    order =1      accuracy order\n       int    reg =0      cut off value of precondition\n       bool   sparse  =y  [y/n]     if  sparse  =  ture  sparse  deconvolution\n              cauchy-norm\n                        if reg = 0: regularization A = |I|\n                        if reg = 1:  regularization A = |PWD|\n                     if  sparse = false  2-norn deconvolution regularization A\n              = ||I||\n       bool   verb =y [y/n]     verbosity flag\n       string weight =      auxiliary output file name\nSOURCE\n       user/gchliu/Mpwic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfpwic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwpaint-Tuple{}","page":"Home","title":"Madagascar.sfpwpaint","text":"sfpwpaint(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwpaint on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwpaint. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwpaint(1)                  Madagascar Manuals                  sfpwpaint(1)\n\nNAME\n       sfpwpaint - Painting by plane-wave construction.\n\nSYNOPSIS\n       sfpwpaint  <  dip.rsf  > out.rsf seed=seed.rsf verb=n eps=0.01 i0=0 or‐\n       der=1\n\nPARAMETERS\n       float  eps =0.01      regularization\n       int    i0 =0      reference trace\n       int    order =1      accuracy order\n       string seed =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mpwpaint.c\nVERSION\n       4.2-git Mflat.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                      sfpwpaint(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwpaint2-Tuple{}","page":"Home","title":"Madagascar.sfpwpaint2","text":"sfpwpaint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwpaint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwpaint2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwpaint2(1)                 Madagascar Manuals                 sfpwpaint2(1)\n\nNAME\n       sfpwpaint2 - 3-D painting by plane-wave construction.\n\nSYNOPSIS\n       sfpwpaint2  <  dip.rsf  >  out.rsf  cost=cost.rsf  seed=seed.rsf data=n\n       verb=n eps=0.01 order=1\n\nPARAMETERS\n       file   cost =      auxiliary input file name\n       bool   data =n [y/n]     spray input data\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       string seed =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mpwpaint2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwpaint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwpaint3-Tuple{}","page":"Home","title":"Madagascar.sfpwpaint3","text":"sfpwpaint3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwpaint3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwpaint3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwpaint3(1)                 Madagascar Manuals                 sfpwpaint3(1)\n\nNAME\n       sfpwpaint3 - 3-D painting by plane-wave construction.\n\nSYNOPSIS\n       sfpwpaint3  <  dip.rsf  >  out.rsf  seed=seed.rsf  cost=cost.rsf verb=n\n       eps=0.01 ref2=0 ref3=0 order=1\n\nPARAMETERS\n       file   cost =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\n       int    ref2 =0 ®\n       int    ref3 =0      reference trace\n       file   seed =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mpwpaint3.c\nVERSION\n       4.2-git Mflat.c 743 2004-08-16 20:41:00Z fomels\n\nMadagascar                         JULY 2024                     sfpwpaint3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwsfault-Tuple{}","page":"Home","title":"Madagascar.sfpwsfault","text":"sfpwsfault(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwsfault on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwsfault. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwsfault(1)                 Madagascar Manuals                 sfpwsfault(1)\n\nNAME\n       sfpwsfault - Fault detection from plane-wave spray.\n\nSYNOPSIS\n       sfpwsfault < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 ns= niter=20\n       perc=98. fact=0.5 order=1 type=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       float  fact =0.5      factor for sharpen\n       int    niter =20      number of iterations\n       int    ns =      spray radius\n       int    order =1      accuracy order\n       float  perc =98.       percentage for sharpen, default is 98\n       string type =       [difference,sharpen_similarity]  calculation  type,\n              the default is difference\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/yliu/Mpwsfault.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwsfault(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwsfault3-Tuple{}","page":"Home","title":"Madagascar.sfpwsfault3","text":"sfpwsfault3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwsfault3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwsfault3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwsfault3(1)                Madagascar Manuals                sfpwsfault3(1)\n\nNAME\n       sfpwsfault3 - 3-D fault detection from plane-wave spray.\n\nSYNOPSIS\n       sfpwsfault3  <  inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 ns2= ns3=\n       niter=20 perc=98. fact=0.5 order=1 type=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       float  fact =0.5      factor for sharpen\n       int    niter =20      number of iterations\n       int    ns2 = ®\n       int    ns3 =      spray radius\n       int    order =1      accuracy order\n       float  perc =98.       percentage for sharpen, default is 98\n       string type =       [difference,sharpen_similarity]  calculation  type,\n              the default is difference\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/yliu/Mpwsfault3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwsfault3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwshapeic-Tuple{}","page":"Home","title":"Madagascar.sfpwshapeic","text":"sfpwshapeic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwshapeic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwshapeic. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwshapeic(1)                Madagascar Manuals                sfpwshapeic(1)\n\nNAME\n       sfpwshapeic  -  Least  Square  Imaging  condition using structure-based\n       shaping regularization.\n\nSYNOPSIS\n       sfpwshapeic  <  upgw.rsf  >  refl.rsf  down=dwgw.rsf  weight=weight.rsf\n       dip=dip.rsf rect1=3 rect2=3 lam=1. order=1 niter=100 rect1= rect2= ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       file   down =      auxiliary input file name\n       float  lam =1.       operator scaling for inversion\n       int    niter =100      maximum number of iterations\n       int    order =1      accuracy order\n       int    rect1 =3 ®\n       int    rect2 =3      smoothing radius\n       file   weight =      auxiliary input file name\nSOURCE\n       user/gchliu/Mpwshapeic.c\nVERSION\n       4.2-git Mdixshape.c 1131 2005-04-20 18:19:10Z fomels\n\nMadagascar                         JULY 2024                    sfpwshapeic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwsmooth-Tuple{}","page":"Home","title":"Madagascar.sfpwsmooth","text":"sfpwsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwsmooth(1)                 Madagascar Manuals                 sfpwsmooth(1)\n\nNAME\n       sfpwsmooth - 2-D structure-enhancing filtering.\n\nSYNOPSIS\n       sfpwsmooth  <  in.rsf  dip=dip.rsf > out.rsf verb=n ns=0 adj=n eps=0.01\n       order=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    ns =0      smoothing radius\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mpwsmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwsmooth2-Tuple{}","page":"Home","title":"Madagascar.sfpwsmooth2","text":"sfpwsmooth2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwsmooth2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwsmooth2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwsmooth2(1)                Madagascar Manuals                sfpwsmooth2(1)\n\nNAME\n       sfpwsmooth2 - 2-D structure-enhancing filtering: two slopes.\n\nSYNOPSIS\n       sfpwsmooth2  <  in.rsf dip=dip.rsf > out.rsf verb=n ns=0 adj=n eps=0.01\n       order=1\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    ns =0      smoothing radius\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mpwsmooth2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwsmooth2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwsmooth3-Tuple{}","page":"Home","title":"Madagascar.sfpwsmooth3","text":"sfpwsmooth3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwsmooth3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwsmooth3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwsmooth3(1)                Madagascar Manuals                sfpwsmooth3(1)\n\nNAME\n       sfpwsmooth3  - 3-D structural-oriented smoothing using plane-wave spray\n       and weighted stacking.\n\nSYNOPSIS\n       sfpwsmooth3 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01  ns2=  ns3=\n       bilat=n gauss=n ax= bx= order=1\n\nPARAMETERS\n       float  ax =      Gaussian weight for the range distance\n       bool   bilat =n [y/n]     if y, bilateral smoothing\n       float  bx =      exponential weight for the domain distance\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       bool   gauss  =n  [y/n]     if  y, gaussian weight; otherwise, triangle\n              weight\n       int    ns2 =      spray radius (inline)\n       int    ns3 =      spray radius (crossline)\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/yliu/Mpwsmooth3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfpwsmooth3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwspray-Tuple{}","page":"Home","title":"Madagascar.sfpwspray","text":"sfpwspray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwspray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwspray. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwspray(1)                  Madagascar Manuals                  sfpwspray(1)\n\nNAME\n       sfpwspray - Plane-wave spray.\n\nSYNOPSIS\n       sfpwspray  <  inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 ns= order=1\n       rect=2 reduce=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    ns =      spray radius\n       int    order =1      accuracy order\n       int    rect =2      radius for predictive coherence (reduce=coherence)\n       string reduce   =        reduction   method   (none,stack,median,trian‐\n              gle,gaussian,predict,coherence)\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pwd/Mpwspray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwspray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwspray2-Tuple{}","page":"Home","title":"Madagascar.sfpwspray2","text":"sfpwspray2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwspray2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwspray2. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwspray2(1)                 Madagascar Manuals                 sfpwspray2(1)\n\nNAME\n       sfpwspray2 - Plane-wave spray in 3-D.\n\nSYNOPSIS\n       sfpwspray2 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 order=1 ns2=\n       ns3=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    ns2 = ®\n       int    ns3 =      spray radius\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pwd/Mpwspray2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwspray2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwspray3-Tuple{}","page":"Home","title":"Madagascar.sfpwspray3","text":"sfpwspray3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwspray3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwspray3. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwspray3(1)                 Madagascar Manuals                 sfpwspray3(1)\n\nNAME\n       sfpwspray3 - Plane-wave spray in 3-D.\n\nSYNOPSIS\n       sfpwspray3 < inp.rsf dip=dip.rsf > out.rsf verb=n eps=0.01 order=1 ns2=\n       ns3=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    ns2 = ®\n       int    ns3 =      spray radius\n       int    order =1      accuracy order\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/pwd/Mpwspray3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfpwspray3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpwstack-Tuple{}","page":"Home","title":"Madagascar.sfpwstack","text":"sfpwstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpwstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpwstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfpwstack(1)                  Madagascar Manuals                  sfpwstack(1)\n\nNAME\n       sfpwstack - Recursive stacking by plane-wave construction.\n\nSYNOPSIS\n       sfpwstack  <  inp.rsf  dip=dip.rsf  >  out.rsf  verb=n eps=0.01 order=1\n       mode=1\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    mode =1      1: predict backward, 2: predict forward then  back‐\n              ward\n       int    order =1      accuracy order\n       bool   verb =n [y/n]\nSOURCE\n       user/pwd/Mpwstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpwstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpygraph-Tuple{}","page":"Home","title":"Madagascar.sfpygraph","text":"sfpygraph(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpygraph on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpygraph. See ?m8r for examples.\n\nRSF Documentation\n\nsfpygraph(1)                  Madagascar Manuals                  sfpygraph(1)\n\nNAME\n       sfpygraph - graph by python\n\nSYNOPSIS\n       sfpygraph  < input.rsf < xfile.rsf pclip=100 plotfat=1 markint=10 plot‐\n       col=0,1,2,3,4,5,6,7  dash=0  symbol=None  legend=None  x=None  usetex=n\n       min1=x1[0] max1=x1[n1-1] min2=min2 max2=max2 label1= unit1=None label2=\n       unit2=None wantlegend=y wherelegend=1 format=pdf\n\nPARAMETERS\n       string dash =0      dash styles\n               0   solid line\n               1   dash line\n               2   dotted line\n               3   dash dot\n       string format =pdf ®\n       string label1 = ®\n       string label2 = ®\n       string legend =None      legends\n       int    markint =10      mark symbol interval\n       float  max1 =x1[n1-1] ®\n       float  max2 =max2 ®\n       float  min1 =x1[0] ®\n       float  min2 =min2 ®\n       float  pclip =100      clip percent\n       string plotcol =0,1,2,3,4,5,6,7      plot color\n       int    plotfat =1      plot line width\n       string symbol =None      mark symbols\n       string unit1 =None ®\n       string unit2 =None ®\n       bool   usetex =n [y/n]     use tex symbol\n       bool   wantlegend =y [y/n]\n       int    wherelegend =1 ®\n       string x =None      xpos\nSOURCE\n       user/chen/Mpygraph.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpygraph(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpyramid-Tuple{}","page":"Home","title":"Madagascar.sfpyramid","text":"sfpyramid(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpyramid on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpyramid. See ?m8r for examples.\n\nRSF Documentation\n\nsfpyramid(1)                  Madagascar Manuals                  sfpyramid(1)\n\nNAME\n       sfpyramid - Pyramid transform\n\nSYNOPSIS\n       sfpyramid < in.rsf > out.rsf inv=n nu= du=dx u0=x0 eps=0.01\n\nPARAMETERS\n       float  du =dx ®\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]     inversion flag\n       int    nu = ®\n       float  u0 =x0 ®\nSOURCE\n       system/seismic/Mpyramid.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfpyramid(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpyran-Tuple{}","page":"Home","title":"Madagascar.sfpyran","text":"sfpyran(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpyran on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpyran. See ?m8r for examples.\n\nRSF Documentation\n\nsfpyran(1)                    Madagascar Manuals                    sfpyran(1)\n\nNAME\n       sfpyran - Add random noise using python.\n\nSYNOPSIS\n       sfpyran  <  pi.rsf  > po.rsf axis=2 range=1 seed=n2 type=y mean=0 var=1\n       rep=n\n\nPARAMETERS\n       int    axis =2 ®\n       float  mean =0      noise mean (default=0)\n       float  range =1      noise range (default=1)\n       bool   rep =n [y/n]     if y, replace data with noise\n       int    seed =n2      random seed (default=n2)\n       string type =y      noise type, y: normal, n: uniform\n       float  var =1      noise variance (default=1)\nSOURCE\n       user/chenyk/Mpyran.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpyran(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfpysvd-Tuple{}","page":"Home","title":"Madagascar.sfpysvd","text":"sfpysvd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfpysvd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfpysvd. See ?m8r for examples.\n\nRSF Documentation\n\nsfpysvd(1)                    Madagascar Manuals                    sfpysvd(1)\n\nNAME\n       sfpysvd - Perform SVD on a matrix using SCIPY.\n\nSYNOPSIS\n       sfpysvd  <  fin.rsf  >  fout.rsf  > lout.rsf > rout.rsf vectors=n left=\n       right=\n\nCOMMENTS\n       REQUIRES the PYTHON API, NUMPY AND SCIPY\n\nPARAMETERS\n       string left =      File to store left singular vectors\n       string right =      File to store right singular vectors\n       bool   vectors =n [y/n]     Output singular vectors?\nSOURCE\n       user/godwinj/Mpysvd.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfpysvd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfqdome-Tuple{}","page":"Home","title":"Madagascar.sfqdome","text":"sfqdome(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfqdome on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfqdome. See ?m8r for examples.\n\nRSF Documentation\n\nsfqdome(1)                    Madagascar Manuals                    sfqdome(1)\n\nNAME\n       sfqdome - 3-D synthetic image from Jon Claerbout.\n\nSYNOPSIS\n       sfqdome   >  mod.rsf  trace=trace.rsf  ranget=3.  n1=400  n2=100  n3=50\n       large=(int)  n1*ranget  d1=0.004  d2=0.01   d3=0.02   o1=0.   o2=-3.*d2\n       o3=-3.*d3 gaussvel=2.5 throw=0.01 endtaper=20 slicei=40 impedance=n\n\nPARAMETERS\n       float  d1 =0.004 ®\n       float  d2 =0.01 ®\n       float  d3 =0.02 ®\n       int    endtaper =20 ®\n       float  gaussvel =2.5 ®\n       bool   impedance =n [y/n]\n       int    large =(int) n1*ranget ®\n       int    n1 =400 ®\n       int    n2 =100 ®\n       int    n3 =50 ®\n       float  o1 =0.  ®\n       float  o2 =-3.*d2 ®\n       float  o3 =-3.*d3 ®\n       float  ranget =3.  ®\n       int    slicei =40 ®\n       float  throw =0.01 ®\n       string trace  =      file to optionally output the master trace (auxil‐\n              iary output file name)\nSOURCE\n       user/gee/Mqdome.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfqdome(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfquantile-Tuple{}","page":"Home","title":"Madagascar.sfquantile","text":"sfquantile(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfquantile on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfquantile. See ?m8r for examples.\n\nRSF Documentation\n\nsfquantile(1)                 Madagascar Manuals                 sfquantile(1)\n\nNAME\n       sfquantile - Computes what clip value corresponds to a given pclip.\n\nSYNOPSIS\n       sfquantile < in.rsf pclip= memsize=sf_memsize()\n\nCOMMENTS\n       Loads  the entire dataset in core. Use it to find a clip= parameter for\n       sfclip, given a wanted pclip=\n\nPARAMETERS\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\n       float  pclip =      Percentage clip, between 0 and 100\nSOURCE\n       user/ivlad/Mquantile.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfquantile(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradial-Tuple{}","page":"Home","title":"Madagascar.sfradial","text":"sfradial(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradial on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradial. See ?m8r for examples.\n\nRSF Documentation\n\nsfradial(1)                   Madagascar Manuals                   sfradial(1)\n\nNAME\n       sfradial - Radial transform.\n\nSYNOPSIS\n       sfradial < in.rsf > out.rsf inv=n nw=2 tp=t0 xp=0. nv= vmin= vmax=\n\nPARAMETERS\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    nv =      number of velocities (if inv=n)\n       int    nw =2      accuracy level\n       float  tp =t0 ®\n       float  vmax =      maximum velocity (if inv=n)\n       float  vmin =      minimum velocity (if inv=n)\n       float  xp =0.  ®\nSOURCE\n       system/seismic/Mradial.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfradial(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradial2-Tuple{}","page":"Home","title":"Madagascar.sfradial2","text":"sfradial2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradial2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradial2. See ?m8r for examples.\n\nRSF Documentation\n\nsfradial2(1)                  Madagascar Manuals                  sfradial2(1)\n\nNAME\n       sfradial2 - Another version of radial transform.\n\nSYNOPSIS\n       sfradial2 < in.rsf > out.rsf inv=n eps=0.01 tp=t0 nv= vmin= vmax=\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    nv =      number of velocities (if inv=n)\n       float  tp =t0 ®\n       float  vmax =      maximum velocity (if inv=n)\n       float  vmin =      minimum velocity (if inv=n)\nSOURCE\n       system/seismic/Mradial2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfradial2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradius-Tuple{}","page":"Home","title":"Madagascar.sfradius","text":"sfradius(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradius on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradius. See ?m8r for examples.\n\nRSF Documentation\n\nsfradius(1)                   Madagascar Manuals                   sfradius(1)\n\nNAME\n       sfradius - Estimate smoothing radius (min = 1)\n\nSYNOPSIS\n       sfradius < in.rsf freq=freq.rsf > out.rsf c=1. maxrad=1000.\n\nPARAMETERS\n       float  c =1.  ®\n       file   freq =      auxiliary input file name\n       float  maxrad =1000.  ®\nSOURCE\n       user/sgreer/Mradius.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfradius(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradon-Tuple{}","page":"Home","title":"Madagascar.sfradon","text":"sfradon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradon. See ?m8r for examples.\n\nRSF Documentation\n\nsfradon(1)                    Madagascar Manuals                    sfradon(1)\n\nNAME\n       sfradon - High-resolution Radon transform.\n\nSYNOPSIS\n       sfradon  <  in.rsf  >  out.rsf  offset=offset.rsf adj=y inv=adj spk=inv\n       verb=n np= dp= p0= nx= eps=1. ns=1 tol=1.e-6 perc=50.0 fact=0.5 ox= dx=\n       parab=n x0=1. niter=100\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, perform adjoint operation\n       float  dp =      p sampling (if adj=y)\n       float  dx = ®\n       float  eps =1.  ®\n       float  fact =0.5      percentage for sharpening\n       bool   inv =adj [y/n]     if y, perform inverse operation\n       int    niter =100 ®\n       int    np =      number of p values (if adj=y)\n       int    ns =1      number of sharpening cycles\n       int    nx =      number of offsets (if adj=n)\n       string offset =      auxiliary input file name\n       float  ox = ®\n       float  p0 =      p origin (if adj=y)\n       bool   parab =n [y/n]     if y, parabolic Radon transform\n       float  perc =50.0      percentage for sharpening\n       bool   spk =inv [y/n]     if y, use spiking (hi-res) inversion\n       float  tol =1.e-6      inversion tolerance\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =1.       reference offset\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\nSOURCE\n       system/seismic/Mradon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfradon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradon2-Tuple{}","page":"Home","title":"Madagascar.sfradon2","text":"sfradon2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradon2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradon2. See ?m8r for examples.\n\nRSF Documentation\n\nsfradon2(1)                   Madagascar Manuals                   sfradon2(1)\n\nNAME\n       sfradon2 - 2to2 Radon transform (using 2to2 butterfly)\n\nSYNOPSIS\n       sfradon2 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp= N=\n\nPARAMETERS\n       N      =      number of partitions\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mradon2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfradon2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradon3-Tuple{}","page":"Home","title":"Madagascar.sfradon3","text":"sfradon3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradon3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradon3. See ?m8r for examples.\n\nRSF Documentation\n\nsfradon3(1)                   Madagascar Manuals                   sfradon3(1)\n\nNAME\n       sfradon3 - 3to3 Radon transform (using 3to3 butterfly)\n\nSYNOPSIS\n       sfradon3 < input.rsf > output.rsf ntau= np= nq= tau0= dtau= p0= dp= q0=\n       dq= N=\n\nPARAMETERS\n       N      =      number of partitions\n       dp     = ®\n       dq     = ®\n       dtau   = ®\n       np     = ®\n       nq     = ®\n       ntau   = ®\n       p0     = ®\n       q0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mradon3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfradon3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradon32-Tuple{}","page":"Home","title":"Madagascar.sfradon32","text":"sfradon32(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradon32 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradon32. See ?m8r for examples.\n\nRSF Documentation\n\nsfradon32(1)                  Madagascar Manuals                  sfradon32(1)\n\nNAME\n       sfradon32 - azimuthally isotropic 3to2 Radon transform (using 2to2 but‐\n       terfly)\n\nSYNOPSIS\n       sfradon32 < input.rsf > output.rsf ntau= np= tau0= dtau= p0= dp= N=\n\nPARAMETERS\n       N      =      number of partitions\n       dp     = ®\n       dtau   = ®\n       np     = ®\n       ntau   = ®\n       p0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mradon32.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfradon32(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradon34-Tuple{}","page":"Home","title":"Madagascar.sfradon34","text":"sfradon34(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradon34 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradon34. See ?m8r for examples.\n\nRSF Documentation\n\nsfradon34(1)                  Madagascar Manuals                  sfradon34(1)\n\nNAME\n       sfradon34  -  azimuthally  anisotropic 3to4 Radon transform (using 3to3\n       butterfly)\n\nSYNOPSIS\n       sfradon34 < input.rsf > output.rsf ntau= np= nq= ns=  tau0=  dtau=  p0=\n       dp= q0= dq= s0= ds= N=\n\nPARAMETERS\n       N      =      number of partitions\n       dp     = ®\n       dq     = ®\n       ds     = ®\n       dtau   = ®\n       np     = ®\n       nq     = ®\n       ns     = ®\n       ntau   = ®\n       p0     = ®\n       q0     = ®\n       s0     = ®\n       tau0   = ®\nSOURCE\n       user/jingwei/Mradon34.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfradon34(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradonoper-Tuple{}","page":"Home","title":"Madagascar.sfradonoper","text":"sfradonoper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradonoper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradonoper. See ?m8r for examples.\n\nRSF Documentation\n\nsfradonoper(1)                Madagascar Manuals                sfradonoper(1)\n\nNAME\n       sfradonoper - Linear Radon operator.\n\nSYNOPSIS\n       sfradonoper  <  in.rsf  >  out.rsf adj=y verb=n np= dp= p0= nx= ox= dx=\n       parab=n x0=1.\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, perform adjoint operation\n       float  dp =      p sampling (if adj=y)\n       float  dx = ®\n       int    np =      number of p values (if adj=y)\n       int    nx =      number of offsets (if adj=n)\n       float  ox = ®\n       float  p0 =      p origin (if adj=y)\n       bool   parab =n [y/n]     if y, parabolic Radon transform\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =1.       reference offset\nSOURCE\n       user/yliu/Mradonoper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfradonoper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradonslope2-Tuple{}","page":"Home","title":"Madagascar.sfradonslope2","text":"sfradonslope2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradonslope2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradonslope2. See ?m8r for examples.\n\nRSF Documentation\n\nsfradonslope2(1)              Madagascar Manuals              sfradonslope2(1)\n\nNAME\n       sfradonslope2  -  Directional  angle  transform for 3-D time image cube\n       I(x,z,t) into G(x,z,d)\n\nSYNOPSIS\n       sfradonslope2  <  Fimgt.rsf  >  Fimgd.rsf  slowness=slowness.rsf  nd=nt\n       dd=160.0/(nt-1) d0=-80.0 verb=n\n\nPARAMETERS\n       float  d0 =-80.0 ®\n       float  dd =160.0/(nt-1) ®\n       int    nd =nt ®\n       file   slowness =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/browaeys/Mradonslope2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfradonslope2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfradstretch-Tuple{}","page":"Home","title":"Madagascar.sfradstretch","text":"sfradstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfradstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfradstretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrandcut-Tuple{}","page":"Home","title":"Madagascar.sfrandcut","text":"sfrandcut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrandcut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrandcut. See ?m8r for examples.\n\nRSF Documentation\n\nsfrandcut(1)                  Madagascar Manuals                  sfrandcut(1)\n\nNAME\n       sfrandcut - cut a random dataset from a 3D cube\n\nSYNOPSIS\n       sfrandcut < Fi.rsf > Fo.rsf rr=Fr.rsf verb=n axis=2\n\nPARAMETERS\n       int    axis =2      stack axis\n       file   rr =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mrandcut.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrandcut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrandline-Tuple{}","page":"Home","title":"Madagascar.sfrandline","text":"sfrandline(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrandline on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrandline. See ?m8r for examples.\n\nRSF Documentation\n\nsfrandline(1)                 Madagascar Manuals                 sfrandline(1)\n\nNAME\n       sfrandline - Construct data from random lines\n\nSYNOPSIS\n       sfrandline > out.rsf n1=10 n2=10 lines=3 seed=2000\n\nPARAMETERS\n       int    lines =3      number of lines\n       int    n1 =10 ®\n       int    n2 =10      dimensions\n       int    seed =2000      random number seed\nSOURCE\n       user/gee/Mrandline.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrandline(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrandrefl-Tuple{}","page":"Home","title":"Madagascar.sfrandrefl","text":"sfrandrefl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrandrefl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrandrefl. See ?m8r for examples.\n\nRSF Documentation\n\nsfrandrefl(1)                 Madagascar Manuals                 sfrandrefl(1)\n\nNAME\n       sfrandrefl - Simple synthetics with random reflectivity.\n\nSYNOPSIS\n       sfrandrefl  >  mod.rsf  vpvs=vpvs.rsf  fo=  nr= n1=3501 d1=0.001 o1=0.0\n       tscale=1. func=\n\nPARAMETERS\n       float  d1 =0.001      time sampling\n       floats fo =       [3]\n       string func =      type of vpvs function\n       int    n1 =3501      time length\n       int    nr =      number of reflectors\n       float  o1 =0.0      time origin\n       float  tscale =1.       maximum time\n       file   vpvs =      auxiliary output file name\nSOURCE\n       system/seismic/Mrandrefl.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrandrefl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrankonetest-Tuple{}","page":"Home","title":"Madagascar.sfrankonetest","text":"sfrankonetest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrankonetest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrankonetest. See ?m8r for examples.\n\nRSF Documentation\n\nsfrankonetest(1)              Madagascar Manuals              sfrankonetest(1)\n\nNAME\n       sfrankonetest - Test rank-1 approximation for lowrank decomposition ma‐\n       trices\n\nSYNOPSIS\n       sfrankonetest < fft.rsf > alpha.rsf nz= dz= z0= nx= dx= x0= npk=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       npk    =      maximum sample rows/columns\n       nx     = ®\n       nz     = ®\n       x0     = ®\n       z0     = ®\nSOURCE\n       user/jingwei/Mrankonetest.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfrankonetest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrays2-Tuple{}","page":"Home","title":"Madagascar.sfrays2","text":"sfrays2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrays2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrays2. See ?m8r for examples.\n\nRSF Documentation\n\nsfrays2(1)                    Madagascar Manuals                    sfrays2(1)\n\nNAME\n       sfrays2 - Ray tracing by a Runge-Kutta integrator.\n\nSYNOPSIS\n       sfrays2  <  vel.rsf  > rays.rsf shotfile=shots.rsf anglefile=angles.rsf\n       vel=y order=4 nt= dt=  sym=y  verb=y  escvar=n  zshot=0.  yshot=o[1]  +\n       0.5*(n[1]-1)*d[1] nr= a0=0. amax=360. > rays.rsf\n\nCOMMENTS\n       Rays can be plotted with sfplotrays.\n\nPARAMETERS\n       float  a0 =0.       minimum angle (if no anglefile)\n       float  amax =360.       maximum angle (if no anglefile)\n       string anglefile  =      file with initial angles (auxiliary input file\n              name)\n       float  dt =      Sampling in time\n       bool   escvar =n [y/n]     If y - output escape values, n  -  trajecto‐\n              ries\n       int    nr =      number of angles (if no anglefile)\n       int    nt =      Number of time steps\n       int    order =4      Interpolation order\n       string shotfile  =       file with shot locations (auxiliary input file\n              name)\n       bool   sym =y [y/n]     if y, use symplectic integrator\n       bool   vel =y [y/n]     If y, input is velocity; if n, slowness\n       bool   verb =y [y/n]     Verbosity flag\n       float  yshot =o[1] + 0.5*(n[1]-1)*d[1] ®\n       float  zshot =0.       shot coordinates (if no shotfile)\nSOURCE\n       system/seismic/Mrays2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrays2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrays2a-Tuple{}","page":"Home","title":"Madagascar.sfrays2a","text":"sfrays2a(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrays2a on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrays2a. See ?m8r for examples.\n\nRSF Documentation\n\nsfrays2a(1)                   Madagascar Manuals                   sfrays2a(1)\n\nNAME\n       sfrays2a - Ray tracing in VTI media by a Runge-Kutta integrator.\n\nSYNOPSIS\n       sfrays2a  <  vz.rsf  > rays.rsf shotfile=shots.rsf anglefile=angles.rsf\n       vel=y  order=4  nt=  dt=  verb=y   escvar=n   zshot=0.   yshot=o[1]   +\n       0.5*(n[1]-1)*d[1] nr= a0=0. amax=360. vx= eta= > rays.rsf\n\nCOMMENTS\n       Rays can be plotted with sfplotrays.\n\nPARAMETERS\n       float  a0 =0.       minimum angle (if no anglefile)\n       float  amax =360.       maximum angle (if no anglefile)\n       string anglefile  =      file with initial angles (auxiliary input file\n              name)\n       float  dt =      Sampling in time\n       bool   escvar =n [y/n]     If y - output escape values, n  -  trajecto‐\n              ries\n       string eta =      eta parameter\n       int    nr =      number of angles (if no anglefile)\n       int    nt =      Number of time steps\n       int    order =4      Interpolation order\n       string shotfile  =       file with shot locations (auxiliary input file\n              name)\n       bool   vel =y [y/n]     If y, input is velocity; if n, slowness\n       bool   verb =y [y/n]     Verbosity flag\n       string vx =      horizontal velocity or slowness\n       float  yshot =o[1] + 0.5*(n[1]-1)*d[1] ®\n       float  zshot =0.       shot coordinates (if no shotfile)\nSOURCE\n       system/seismic/Mrays2a.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfrays2a(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrays3-Tuple{}","page":"Home","title":"Madagascar.sfrays3","text":"sfrays3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrays3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrays3. See ?m8r for examples.\n\nRSF Documentation\n\nsfrays3(1)                    Madagascar Manuals                    sfrays3(1)\n\nNAME\n       sfrays3 - Ray tracing by a Runge-Kutta integrator in 3-D.\n\nSYNOPSIS\n       sfrays3  <  vel.rsf  > rays.rsf shotfile=shots.rsf anglefile=angles.rsf\n       vel=y  order=4  nt=  dt=  sym=y  escvar=n   zshot=o[0]   yshot=o[1]   +\n       0.5*(n[1]-1)*d[1]   xshot=o[2]   +   0.5*(n[2]-1)*d[2]  na=  nb=  a0=0.\n       amax=360. b0=0. bmax=180. > rays.rsf\n\nCOMMENTS\n       Rays can be plotted with sfplotrays.\n\nPARAMETERS\n       float  a0 =0.       First azimuth angle in degrees (if anglefile is not\n              specified)\n       float  amax  =360.       Maximum azimuth angle in degrees (if anglefile\n              is not specified)\n       string anglefile =      file with initial angles (auxiliary input  file\n              name)\n       float  b0 =0.       First inclination angle in degrees (if anglefile is\n              not specified)\n       float  bmax =180.       Maximum inclination angle in degrees (if angle‐\n              file is not specified)\n       float  dt =      Sampling in time\n       bool   escvar  =n  [y/n]     If y - output escape values, n - trajecto‐\n              ries\n       int    na =      Number of azimuths (if anglefile is not specified)\n       int    nb =      Number of inclinations (if anglefile is not specified)\n       int    nt =      Number of time steps\n       int    order =4      Interpolation order\n       string shotfile =      file with shot locations (auxiliary  input  file\n              name)\n       bool   sym =y [y/n]     if y, use symplectic integrator\n       bool   vel =y [y/n]     If y, input is velocity; if n, slowness\n       float  xshot =o[2] + 0.5*(n[2]-1)*d[2]      shot location crossline (if\n              shotfile is not specified)\n       float  yshot =o[1] + 0.5*(n[1]-1)*d[1]      shot  location  inline  (if\n              shotfile is not specified)\n       float  zshot  =o[0]       shot  location  in  depth (if shotfile is not\n              specified)\nSOURCE\n       system/seismic/Mrays3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrays3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrcat-Tuple{}","page":"Home","title":"Madagascar.sfrcat","text":"sfrcat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrcat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrcat. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrdiv-Tuple{}","page":"Home","title":"Madagascar.sfrdiv","text":"sfrdiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrdiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrdiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfrdiv(1)                     Madagascar Manuals                     sfrdiv(1)\n\nNAME\n       sfrdiv - Rough division.\n\nSYNOPSIS\n       sfrdiv  <  fnum.rsf  den=fden.rsf  > frat.rsf niter=100 niter2=1 verb=y\n       eps=0.01 perc=50.0 fact=0.5\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       float  eps =0.01      regularization\n       float  fact =0.5      factor for sharpening\n       int    niter =100      number of iterations\n       int    niter2 =1      number of outer iterations\n       float  perc =50.0      percentage for sharpening\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mrdiv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrdiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreadsample-Tuple{}","page":"Home","title":"Madagascar.sfreadsample","text":"sfreadsample(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreadsample on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreadsample. See ?m8r for examples.\n\nRSF Documentation\n\nsfreadsample(1)               Madagascar Manuals               sfreadsample(1)\n\nNAME\n       sfreadsample - Oriented zero-offset migration.\n\nSYNOPSIS\n       sfreadsample > so1.rsf init=so2.rsf final=so3.rsf N= sample=\n\nPARAMETERS\n       int    N = ®\n       file   final =      auxiliary output file name\n       file   init =      auxiliary output file name\n       string sample = ®\nSOURCE\n       user/roman/Mreadsample.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfreadsample(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreadsampleref-Tuple{}","page":"Home","title":"Madagascar.sfreadsampleref","text":"sfreadsampleref(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreadsampleref on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreadsampleref. See ?m8r for examples.\n\nRSF Documentation\n\nsfreadsampleref(1)            Madagascar Manuals            sfreadsampleref(1)\n\nNAME\n       sfreadsampleref - Oriented zero-offset migration.\n\nSYNOPSIS\n       sfreadsampleref  > so.rsf correct=so1.rsf init=so2.rsf final=so3.rsf N=\n       sample=\n\nPARAMETERS\n       int    N = ®\n       file   correct =      auxiliary output file name\n       file   final =      auxiliary output file name\n       file   init =      auxiliary output file name\n       string sample = ®\nSOURCE\n       user/roman/Mreadsampleref.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfreadsampleref(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreal-Tuple{}","page":"Home","title":"Madagascar.sfreal","text":"sfreal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreal. See ?m8r for examples.\n\nRSF Documentation\n\nsfreal(1)                     Madagascar Manuals                     sfreal(1)\n\nNAME\n       sfreal  - Extract real (sfreal) or imaginary (sfimag) part of a complex\n       dataset.\n\nSYNOPSIS\n       sfreal < cmplx.rsf > real.rsf\n\nUSED IN\n       bei/ft1/brad\n\n       bei/ft1/ft2d\n\n       bei/ft1/ft2d\n\n       bei/ft1/plane4\n\n       cup/rna2d/shot\n\n       cup/rna2d/simple\n\n       cup/rna3d/real\n\n       cup/rna3d/sin\n\n       cwp/geo2006TimeShiftImagingCondition/flat\n\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n\n       cwp/geo2009TTIModeSeparation/tti3\n\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n\n       data/alaska/line31-81-m8r\n\nSOURCE\n       system/main/real.c\n\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfreal\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfreal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrealign-Tuple{}","page":"Home","title":"Madagascar.sfrealign","text":"sfrealign(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrealign on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrealign. See ?m8r for examples.\n\nRSF Documentation\n\nsfrealign(1)                  Madagascar Manuals                  sfrealign(1)\n\nNAME\n       sfrealign -\n\nSYNOPSIS\n       sfrealign < logrefa.rsf < log1a.rsf > log1_co.rsf log1=\n\nCOMMENTS\n       Residual well log realignment\n\n       Built  for  log data manipulation - algined axis (o1/d1/n1) with refer‐\n       ence well log\n\nPARAMETERS\n       string log1 = ®\nSOURCE\n       user/sbader/Mrealign.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrealign(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrec2ps-Tuple{}","page":"Home","title":"Madagascar.sfrec2ps","text":"sfrec2ps(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrec2ps on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrec2ps. See ?m8r for examples.\n\nRSF Documentation\n\nsfrec2ps(1)                   Madagascar Manuals                   sfrec2ps(1)\n\nNAME\n       sfrec2ps - None\n\nSYNOPSIS\n       sfrec2ps < infile.rsf > outfile.rsf alpha=6.2 beta=3.5 irot=0. adj=y\n\nPARAMETERS\n       adj    =y ®\n       alpha  =6.2      P-wave Velocity at surface\n       beta   =3.5      S-wave velocity at surface\n       irot   =0.       Rotation of array w.r.t. 1st axis\nSOURCE\n       user/jeff/Mrec2ps.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfrec2ps(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreciprocity-Tuple{}","page":"Home","title":"Madagascar.sfreciprocity","text":"sfreciprocity(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreciprocity on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreciprocity. See ?m8r for examples.\n\nRSF Documentation\n\nsfreciprocity(1)              Madagascar Manuals              sfreciprocity(1)\n\nNAME\n       sfreciprocity  - Create a dipping layer model for HTI testing purposes.\n       Has fixed velocity structure, but can change dip of layer and degree of\n       anisotropy.\n\nSYNOPSIS\n       sfreciprocity < Fin.rsf > Fout.rsf\n\nSOURCE\n       user/jeff/Mreciprocity.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfreciprocity(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrecoverfulleq-Tuple{}","page":"Home","title":"Madagascar.sfrecoverfulleq","text":"sfrecoverfulleq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrecoverfulleq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrecoverfulleq. See ?m8r for examples.\n\nRSF Documentation\n\nsfrecoverfulleq(1)            Madagascar Manuals            sfrecoverfulleq(1)\n\nNAME\n       sfrecoverfulleq  -  Recover all equivalent Q values according to refer‐\n       ence point and non-zero point.\n\nSYNOPSIS\n       sfrecoverfulleq  <  inp.rsf  >  out.rsf  zpo=zpo.rsf  zeropo=zeropo.rsf\n       verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]\n       string zeropo =      auxiliary input file name\n       string zpo =      auxiliary input file name\nSOURCE\n       user/yliu/Mrecoverfulleq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfrecoverfulleq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrect1-Tuple{}","page":"Home","title":"Madagascar.sfrect1","text":"sfrect1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrect1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrect1. See ?m8r for examples.\n\nRSF Documentation\n\nsfrect1(1)                    Madagascar Manuals                    sfrect1(1)\n\nNAME\n       sfrect1 - 1-D covariance estimator.\n\nSYNOPSIS\n       sfrect1 < inp.rsf > rct.rsf niter=100 verb=y eps=0.0f rect#=(1,1,...)\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Mrect1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrect1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrefer-Tuple{}","page":"Home","title":"Madagascar.sfrefer","text":"sfrefer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrefer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrefer. See ?m8r for examples.\n\nRSF Documentation\n\nsfrefer(1)                    Madagascar Manuals                    sfrefer(1)\n\nNAME\n       sfrefer - Subtract a reference from a grid.\n\nSYNOPSIS\n       sfrefer < in.rsf > out.rsf ref=ref.rsf\n\nPARAMETERS\n       file   ref =      auxiliary input file name\nSOURCE\n       system/seismic/Mrefer.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrefer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrefl-Tuple{}","page":"Home","title":"Madagascar.sfrefl","text":"sfrefl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrefl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrefl. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrefl2ai-Tuple{}","page":"Home","title":"Madagascar.sfrefl2ai","text":"sfrefl2ai(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrefl2ai on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrefl2ai. See ?m8r for examples.\n\nRSF Documentation\n\nsfrefl2ai(1)                  Madagascar Manuals                  sfrefl2ai(1)\n\nNAME\n       sfrefl2ai - Convert reflectivity to acoustic impedance.\n\nSYNOPSIS\n       sfrefl2ai < ref.rsf > ai.rsf a0=a0.rsf\n\nPARAMETERS\n       file   a0 =      auxiliary input file name\nSOURCE\n       system/seismic/Mrefl2ai.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrefl2ai(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreg2tri-Tuple{}","page":"Home","title":"Madagascar.sfreg2tri","text":"sfreg2tri(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreg2tri on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreg2tri. See ?m8r for examples.\n\nRSF Documentation\n\nsfreg2tri(1)                  Madagascar Manuals                  sfreg2tri(1)\n\nNAME\n       sfreg2tri - Decimate a regular grid to triplets for triangulation.\n\nSYNOPSIS\n       sfreg2tri < in.rsf > out.rsf edgeout=edge.rsf nt= zero=0.\n\nPARAMETERS\n       string edgeout =      auxiliary output file name\n       int    nt =      number of triplets\n       float  zero =0.       level surface\nSOURCE\n       system/generic/Mreg2tri.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfreg2tri(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfregr-Tuple{}","page":"Home","title":"Madagascar.sfregr","text":"sfregr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfregr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfregr. See ?m8r for examples.\n\nRSF Documentation\n\nsfregr(1)                     Madagascar Manuals                     sfregr(1)\n\nNAME\n       sfregr - Linear regression\n\nSYNOPSIS\n       sfregr  <  inp.rsf reg=reg.rsf > out.rsf dim=1 niter=10 method=2 verb=n\n       n1iter=10 perc=90.0 fact=1.5 type=\n\nPARAMETERS\n       int    dim =1      number of dimensions\n       float  fact =1.5      percentage for sharpening\n       int    method =2      method (L1-like or L2)\n       int    n1iter =10      number of POCS iterations\n       int    niter =10      number of CG iterations\n       float  perc =90.0      percentage for sharpening\n       file   reg =      auxiliary input file name\n       string type =      thresholding type\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mregr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfregr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfregrid1d-Tuple{}","page":"Home","title":"Madagascar.sfregrid1d","text":"sfregrid1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfregrid1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfregrid1d. See ?m8r for examples.\n\nRSF Documentation\n\nsfregrid1d(1)                 Madagascar Manuals                 sfregrid1d(1)\n\nNAME\n       sfregrid1d - 1-D ENO interpolation\n\nSYNOPSIS\n       sfregrid1d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3\n\nPARAMETERS\n       int    order =3 ®\n       string pattern =      auxiliary input file name\nSOURCE\n       user/psava/Mregrid1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfregrid1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfregrid2d-Tuple{}","page":"Home","title":"Madagascar.sfregrid2d","text":"sfregrid2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfregrid2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfregrid2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfregrid2d(1)                 Madagascar Manuals                 sfregrid2d(1)\n\nNAME\n       sfregrid2d - 2-D ENO interpolation\n\nSYNOPSIS\n       sfregrid2d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3\n\nPARAMETERS\n       int    order =3 ®\n       string pattern =      auxiliary input file name\nSOURCE\n       user/psava/Mregrid2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfregrid2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfregrid3d-Tuple{}","page":"Home","title":"Madagascar.sfregrid3d","text":"sfregrid3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfregrid3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfregrid3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfregrid3d(1)                 Madagascar Manuals                 sfregrid3d(1)\n\nNAME\n       sfregrid3d - 3-D ENO interpolation\n\nSYNOPSIS\n       sfregrid3d < Fi.rsf > Fo.rsf pattern=Fp.rsf order=3\n\nPARAMETERS\n       int    order =3 ®\n       string pattern =      auxiliary input file name\nSOURCE\n       user/psava/Mregrid3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfregrid3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfremap1-Tuple{}","page":"Home","title":"Madagascar.sfremap1","text":"sfremap1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfremap1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfremap1. See ?m8r for examples.\n\nRSF Documentation\n\nsfremap1(1)                   Madagascar Manuals                   sfremap1(1)\n\nNAME\n       sfremap1 - 1-D ENO interpolation.\n\nSYNOPSIS\n       sfremap1  <  in.rsf > out.rsf pattern=pattern.rsf n1=n1 d1=d1 o1=o1 or‐\n       der=3\n\nCOMMENTS\n       November        2013        program        of        the         month:\n       http://ahay.org/blog/2013/11/03/program-of-the-month-sfremap1/\n\nPARAMETERS\n       float  d1 =d1      Output sampling\n       int    n1 =n1      Number of output samples\n       float  o1 =o1      Output origin\n       int    order =3      Interpolation order\n       string pattern =      auxiliary input file name\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/generic/Mremap1.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfremap1\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfremap1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreplace-Tuple{}","page":"Home","title":"Madagascar.sfreplace","text":"sfreplace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreplace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreplace. See ?m8r for examples.\n\nRSF Documentation\n\nsfreplace(1)                  Madagascar Manuals                  sfreplace(1)\n\nNAME\n       sfreplace -\n\nSYNOPSIS\n       sfreplace < loga.rsf > log_eo.rsf loc= num=\n\nCOMMENTS\n       1D dataset padding\n\n       Built  for  time-depth  relationship  manipulation.  LSIM  scan/pick is\n       smooth intoducing non-real updates at top of pick.\n\nPARAMETERS\n       int    loc =      Location of value used to replace\n       int    num =      Number of values to replace at beginning of dataset\nSOURCE\n       user/sbader/Mreplace.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfreplace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfresamp-Tuple{}","page":"Home","title":"Madagascar.sfresamp","text":"sfresamp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfresamp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfresamp. See ?m8r for examples.\n\nRSF Documentation\n\nsfresamp(1)                   Madagascar Manuals                   sfresamp(1)\n\nNAME\n       sfresamp - 2D data resampling.\n\nSYNOPSIS\n       sfresamp < in.rsf > out.rsf o1=o[0] d1=d[0] o2=o[1] d2=d[1]\n\nPARAMETERS\n       float  d1 =d[0]      sample interval on 1st axis\n       float  d2 =d[1]      sample interval on 2nd axis\n       float  o1 =o[0]      first sample sample on 1st axis\n       float  o2 =o[1]      first sample on 2nd axis\nSOURCE\n       user/chengjb/Mresamp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfresamp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfresample-Tuple{}","page":"Home","title":"Madagascar.sfresample","text":"sfresample(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfresample on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfresample. See ?m8r for examples.\n\nRSF Documentation\n\nsfresample(1)                 Madagascar Manuals                 sfresample(1)\n\nNAME\n       sfresample - 2D data resampling.\n\nSYNOPSIS\n       sfresample < in.rsf > out.rsf o1=o[0] d1=d[0] o2=o[1] d2=d[1]\n\nPARAMETERS\n       float  d1 =d[0]      sample interval on 1st axis\n       float  d2 =d[1]      sample interval on 2nd axis\n       float  o1 =o[0]      first sample sample on 1st axis\n       float  o2 =o[1]      first sample on 2nd axis\nSOURCE\n       user/chen/Mresample.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfresample(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfresamplextnd-Tuple{}","page":"Home","title":"Madagascar.sfresamplextnd","text":"sfresamplextnd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfresamplextnd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfresamplextnd. See ?m8r for examples.\n\nRSF Documentation\n\nsfresamplextnd(1)             Madagascar Manuals             sfresamplextnd(1)\n\nNAME\n       sfresamplextnd - 2D data resampling with ability to extrapolate.\n\nSYNOPSIS\n       sfresamplextnd  <  in.rsf  >  out.rsf  o1=o[0]  d1=d[0] o2=o[1] d2=d[1]\n       n1=(d[0]*(n[0]-1)+o[0]-o1)/d1 n2=(d[1]*(n[1]-1)+o[1]-o2)/d2\n\nPARAMETERS\n       float  d1 =d[0]      sample interval on 1st axis\n       float  d2 =d[1]      sample interval on 2nd axis\n       int    n1 =(d[0]*(n[0]-1)+o[0]-o1)/d1      number of samples  on  first\n              axis\n       int    n2  =(d[1]*(n[1]-1)+o[1]-o2)/d2      number of samples on second\n              axis\n       float  o1 =o[0]      first sample sample on 1st axis\n       float  o2 =o[1]      first sample on 2nd axis\nSOURCE\n       user/luke/Mresamplextnd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfresamplextnd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreshape-Tuple{}","page":"Home","title":"Madagascar.sfreshape","text":"sfreshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfreshape(1)                  Madagascar Manuals                  sfreshape(1)\n\nNAME\n       sfreshape - Non-stationary spectral balancing.\n\nSYNOPSIS\n       sfreshape   <   in.rsf  in2=in2.rsf  ma=ma.rsf  ma2=ma2.rsf  >  out.rsf\n       out2=out2.rsf dim=1\n\nPARAMETERS\n       int    dim =1      data dimensionality\n       string in2 =      optional second  input  file  (auxiliary  input  file\n              name)\n       file   ma =      auxiliary input file name\n       file   ma2 =      auxiliary input file name\n       file   out2 =      auxiliary output file name\nSOURCE\n       user/fomels/Mreshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfreshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfresults-Tuple{}","page":"Home","title":"Madagascar.sfresults","text":"sfresults(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfresults on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfresults. See ?m8r for examples.\n\nRSF Documentation\n\nsfresults(1)                  Madagascar Manuals                  sfresults(1)\n\nNAME\n       sfresults - Explore project results\n\nSYNOPSIS\n       sfresults\n\nSOURCE\n       user/fomels/Mresults.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfresults(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrevent-Tuple{}","page":"Home","title":"Madagascar.sfrevent","text":"sfrevent(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrevent on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrevent. See ?m8r for examples.\n\nRSF Documentation\n\nsfrevent(1)                   Madagascar Manuals                   sfrevent(1)\n\nNAME\n       sfrevent - Compute reflection event\n\nSYNOPSIS\n       sfrevent  <  reflFile.rsf  deriv=derivFile.rsf  >  dataFile.rsf tn=1001\n       hn=51 sn=1 to=0.f ho=0.f so=0.f td=0.004f hd=0.05f sd=0.025f eps=0.5  *\n       hStep vel=2.f\n\nPARAMETERS\n       string deriv  =       first  derivative  estimated along the reflection\n              boundary (auxiliary input file name)\n       float  eps =0.5 * hStep      receiver position accuracy (in km)\n       float  hd =0.05f      step in offset (in km)\n       int    hn =51      number of offsets\n       float  ho =0.f      start offset (in s)\n       float  sd =0.025f      step in source position (in km)\n       int    sn =1      number of sources\n       float  so =0.f      start source position (in s)\n       float  td =0.004f      step in time (in s)\n       int    tn =1001      number of time samples\n       float  to =0.f      start time (in s)\n       float  vel =2.f      constant velocity value (in km/s)\nSOURCE\n       user/aklokov/Mrevent.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfrevent(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreverse-Tuple{}","page":"Home","title":"Madagascar.sfreverse","text":"sfreverse(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreverse on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreverse. See ?m8r for examples.\n\nRSF Documentation\n\nsfreverse(1)                  Madagascar Manuals                  sfreverse(1)\n\nNAME\n       sfreverse - Reverse one or more axes in the data hypercube.\n\nSYNOPSIS\n       sfreverse < in.rsf > out.rsf which=-1 verb=n memsize=sf_memsize() opt=\n\nPARAMETERS\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\n       string opt =      If y, change o and d parameters on the reversed axis;\n                     if i, don't change o and d\n       bool   verb =n [y/n]     Verbosity flag\n       int    which =-1      Which axis to reverse.\n                     To reverse a given axis, start with 0,\n                     add 1 to number to reverse n1 dimension,\n                     add 2 to number to reverse n2 dimension,\n                     add 4 to number to reverse n3 dimension, etc.\n                     Thus, which=7 would reverse the first three dimensions,\n                     which=5 just n1 and n3, etc.\n                     which=0 will just pass the input on through unchanged.\nUSED IN\n       bei/ft1/ft2d\n       bei/vela/stretch\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/main/reverse.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfreverse\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfreverse(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfreversval-Tuple{}","page":"Home","title":"Madagascar.sfreversval","text":"sfreversval(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfreversval on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfreversval. See ?m8r for examples.\n\nRSF Documentation\n\nsfreversval(1)                Madagascar Manuals                sfreversval(1)\n\nNAME\n       sfreversval - Reverse data value\n\nSYNOPSIS\n       sfreversval < in.rsf > out.rsf\n\nCOMMENTS\n       Data' = Max(Data) - Data\n\nSOURCE\n       user/yliu/Mreversval.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfreversval(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrfccp-Tuple{}","page":"Home","title":"Madagascar.sfrfccp","text":"sfrfccp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrfccp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrfccp. See ?m8r for examples.\n\nRSF Documentation\n\nsfrfccp(1)                    Madagascar Manuals                    sfrfccp(1)\n\nNAME\n       sfrfccp - None\n\nSYNOPSIS\n       sfrfccp < infile.rsf vp=vpfile.rsf vs=vsfile.rsf > outfile.rsf\n\nPARAMETERS\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\nSOURCE\n       user/jeff/Mrfccp.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrfccp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrfspecdiv-Tuple{}","page":"Home","title":"Madagascar.sfrfspecdiv","text":"sfrfspecdiv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrfspecdiv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrfspecdiv. See ?m8r for examples.\n\nRSF Documentation\n\nsfrfspecdiv(1)                Madagascar Manuals                sfrfspecdiv(1)\n\nNAME\n       sfrfspecdiv - None\n\nSYNOPSIS\n       sfrfspecdiv  <  infile.rsf  file1=file1.rsf > outfile.rsf a=1.25 c=0.01\n       pd=10.\n\nPARAMETERS\n       a      =1.25 ®\n       c      =0.01 ®\n       file   file1 =      auxiliary input file name\n       pd     =10.       phase delay\nSOURCE\n       user/jeff/Mrfspecdiv.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfrfspecdiv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrfxrna-Tuple{}","page":"Home","title":"Madagascar.sfrfxrna","text":"sfrfxrna(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrfxrna on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrfxrna. See ?m8r for examples.\n\nRSF Documentation\n\nsfrfxrna(1)                   Madagascar Manuals                   sfrfxrna(1)\n\nNAME\n       sfrfxrna - Local prediction filter for complex numbers (n-dimensional).\n\nSYNOPSIS\n       sfrfxrna    <    dat.rsf    >    flt.rsf   mask=mask.rsf   pred=pre.rsf\n       zshift=zshift.rsf zdata=zdata.rsf ns=1 niter=100 verb=y jump=1 ty=\n\nPARAMETERS\n       int    jump =1      jump\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns =1      shifts of both sides npef=2*ns+1\n       string pred =      auxiliary output file name\n       string ty =      Prediction type: all=backward+forward\n       bool   verb =y [y/n]     verbosity flag\n       string zdata =      auxiliary output file name\n       string zshift =      auxiliary output file name\nSOURCE\n       user/gchliu/Mrfxrna.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfrfxrna(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrich-Tuple{}","page":"Home","title":"Madagascar.sfrich","text":"sfrich(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrich on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrich. See ?m8r for examples.\n\nRSF Documentation\n\nsfrich(1)                     Madagascar Manuals                     sfrich(1)\n\nNAME\n       sfrich - None\n\nSYNOPSIS\n       sfrich\n\nSOURCE\n       trip/iwave/trace/main/rich.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrich(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrickback-Tuple{}","page":"Home","title":"Madagascar.sfrickback","text":"sfrickback(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrickback on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrickback. See ?m8r for examples.\n\nRSF Documentation\n\nsfrickback(1)                 Madagascar Manuals                 sfrickback(1)\n\nNAME\n       sfrickback - None linear Ricker wavelet spectral fit.\n\nSYNOPSIS\n       sfrickback  < in.rsf > out.rsf ma=ma.rsf gamma=debug.rsf m= m= m= m= m=\n       m= m= m= m= m= n= niter=100 verb=n\n\nPARAMETERS\n       string gamma =      auxiliary output file name\n       floats m =       [n]\n       file   ma =      auxiliary output file name\n       int    n = ®\n       int    niter =100 ®\n       bool   verb =n [y/n]\nSOURCE\n       user/tsai/Mrickback.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrickback(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfricker-Tuple{}","page":"Home","title":"Madagascar.sfricker","text":"sfricker(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfricker on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfricker. See ?m8r for examples.\n\nRSF Documentation\n\nsfricker(1)                   Madagascar Manuals                   sfricker(1)\n\nNAME\n       sfricker - Ricker wavelet estimation.\n\nSYNOPSIS\n       sfricker  <  in.rsf  >  out.rsf ma=ma.rsf m=f0+0.25*(na-1)*df niter=100\n       verb=n\n\nPARAMETERS\n       float  m =f0+0.25*(na-1)*df      initial frequency\n       file   ma =      auxiliary output file name\n       int    niter =100      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mricker.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfricker(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfricker1-Tuple{}","page":"Home","title":"Madagascar.sfricker1","text":"sfricker1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfricker1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfricker1. See ?m8r for examples.\n\nRSF Documentation\n\nsfricker1(1)                  Madagascar Manuals                  sfricker1(1)\n\nNAME\n       sfricker1 - Convolution with a Ricker wavelet.\n\nSYNOPSIS\n       sfricker1 < in.rsf > out.rsf frequency= freq=0.2 deriv=n\n\nCOMMENTS\n       January 2013 program of the month: http://ahay.org/blog/2013/01/08/pro‐\n       gram-of-the-month-sfricker1/\n\nPARAMETERS\n       bool   deriv =n [y/n]     apply a half-order derivative filter\n       float  freq =0.2      peak frequency for Ricker wavelet (as fraction of\n              Nyquist)\n       float  frequency =      peak frequency for Ricker wavelet (in Hz)\nUSED IN\n       bei/dpmv/yalei\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       2 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagas‐\n       car/html/sfricker1.html\nSOURCE\n       system/seismic/Mricker1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfricker1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfricker2-Tuple{}","page":"Home","title":"Madagascar.sfricker2","text":"sfricker2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfricker2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfricker2. See ?m8r for examples.\n\nRSF Documentation\n\nsfricker2(1)                  Madagascar Manuals                  sfricker2(1)\n\nNAME\n       sfricker2  - Nonstationary convolution with a Ricker wavelet. Phase and\n       Frequency can be time-varying.\n\nSYNOPSIS\n       sfricker2 < in.rsf > out.rsf tfreq=tfre.rsf tphase=tpha.rsf  frequency=\n       freq=0.2 esp=0. norm=n hiborder=6 hibref=1.\n\nPARAMETERS\n       float  esp =0.       if norm=y, stable parameter\n       float  freq =0.2      peak frequency for Ricker wavelet (as fraction of\n              Nyquist)\n       float  frequency =      peak frequency for Ricker wavelet (in Hz)\n       int    hiborder =6      Hilbert transformer order\n       float  hibref =1.  ®\n       bool   norm =n [y/n]\n       file   tfreq =      auxiliary input file name\n       string tphase =      auxiliary input file name\nUSED IN\n       carrot/test/modeling\nSOURCE\n       system/seismic/Mricker2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfricker2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrickerfit-Tuple{}","page":"Home","title":"Madagascar.sfrickerfit","text":"sfrickerfit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrickerfit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrickerfit. See ?m8r for examples.\n\nRSF Documentation\n\nsfrickerfit(1)                Madagascar Manuals                sfrickerfit(1)\n\nNAME\n       sfrickerfit  - Model wavelet spectrum by fitting spectral components of\n       ricker wavelet.\n\nSYNOPSIS\n       sfrickerfit < in.rsf > out.rsf ma1=ma1.rsf ma2=ma2.rsf m= n=  niter=100\n       verb=n\n\nCOMMENTS\n       n is the number of components. ma1 is amplitude, ma2 is peak frequency.\n\nPARAMETERS\n       floats m =       [n]\n       file   ma1 =      auxiliary output file name\n       file   ma2 =      auxiliary output file name\n       int    n = ®\n       int    niter =100 ®\n       bool   verb =n [y/n]\nSOURCE\n       user/tsai/Mrickerfit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfrickerfit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfriesz-Tuple{}","page":"Home","title":"Madagascar.sfriesz","text":"sfriesz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfriesz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfriesz. See ?m8r for examples.\n\nRSF Documentation\n\nsfriesz(1)                    Madagascar Manuals                    sfriesz(1)\n\nNAME\n       sfriesz - Compute 2-D Riesz transform.\n\nSYNOPSIS\n       sfriesz < in.rsf > out.rsf order=10 ref=1.\n\nPARAMETERS\n       int    order =10      Hilbert transformer order\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\nSOURCE\n       user/fomels/Mriesz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfriesz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrm-Tuple{}","page":"Home","title":"Madagascar.sfrm","text":"sfrm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrm. See ?m8r for examples.\n\nRSF Documentation\n\nsfrm(1)                       Madagascar Manuals                       sfrm(1)\n\nNAME\n       sfrm - Remove RSF files together with their data.\n\nSYNOPSIS\n       sfrm file1.rsf [file2.rsf ...] [-i] [-v] [-f]\n\nCOMMENTS\n       Mimics the standard Unix rm command.\n\n       See also: sfmv, sfcp.\n\nSOURCE\n       system/main/rm.c\n\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfrm\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfrm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrmrf-Tuple{}","page":"Home","title":"Madagascar.sfrmrf","text":"sfrmrf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrmrf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrmrf. See ?m8r for examples.\n\nRSF Documentation\n\nsfrmrf(1)                     Madagascar Manuals                     sfrmrf(1)\n\nNAME\n       sfrmrf - Recursively removes all RSF headers in a directory (associated\n       binaries too)\n\nSYNOPSIS\n       sfrmrf verb=n dir= rec=n\n\nCOMMENTS\n       Missing binaries do not cause failure.\n\nPARAMETERS\n       string dir =      Directory with files\n       bool   rec =n [y/n]     Whether to go down recursively\n       bool   verb =n [y/n]     Display headers and binaries being deleted\nSOURCE\n       user/ivlad/Mrmrf.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrmrf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrmtrace-Tuple{}","page":"Home","title":"Madagascar.sfrmtrace","text":"sfrmtrace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrmtrace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrmtrace. See ?m8r for examples.\n\nRSF Documentation\n\nsfrmtrace(1)                  Madagascar Manuals                  sfrmtrace(1)\n\nNAME\n       sfrmtrace - Remove part of traces (resample) in order to make aliasing\n\nSYNOPSIS\n       sfrmtrace < in.rsf > out.rsf factor=2\n\nPARAMETERS\n       int    factor =2      zero part beginning point\nSOURCE\n       user/chenyk/Mrmtrace.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrmtrace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfroots-Tuple{}","page":"Home","title":"Madagascar.sfroots","text":"sfroots(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfroots on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfroots. See ?m8r for examples.\n\nRSF Documentation\n\nsfroots(1)                    Madagascar Manuals                    sfroots(1)\n\nNAME\n       sfroots - Find roots of a complex polynomial.\n\nSYNOPSIS\n       sfroots < poly.rsf > root.rsf niter=10 tol=1.0e-6 verb=y sort=\n\nPARAMETERS\n       int    niter =10      number of iterations\n       string sort  =       attribute for sorting (phase,amplitude,real,imagi‐\n              nary)\n       float  tol =1.0e-6      tolerance for convergence\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/generic/Mroots.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfroots(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrotate-Tuple{}","page":"Home","title":"Madagascar.sfrotate","text":"sfrotate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrotate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrotate. See ?m8r for examples.\n\nRSF Documentation\n\nsfrotate(1)                   Madagascar Manuals                   sfrotate(1)\n\nNAME\n       sfrotate - Rotate a portion of one or more axes in the data hypercube.\n\nSYNOPSIS\n       sfrotate < in.rsf > out.rsf verb=n memsize=sf_memsize() rot#=(0,0,...)\n\nPARAMETERS\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\n       int    rot#  =(0,0,...)        length of #-th axis that is moved to the\n              end\n       bool   verb =n [y/n]     Verbosity flag\nUSED IN\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/main/rotate.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfrotate\nVERSION\n       4.2-git rotate.c 1729 2006-03-12 10:00:32Z fomels\n\nMadagascar                         JULY 2024                       sfrotate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrotater-Tuple{}","page":"Home","title":"Madagascar.sfrotater","text":"sfrotater(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrotater on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrotater. See ?m8r for examples.\n\nRSF Documentation\n\nsfrotater(1)                  Madagascar Manuals                  sfrotater(1)\n\nNAME\n       sfrotater - Roatation with Interpolation from a regular grid in 2-D.\n\nSYNOPSIS\n       sfrotater < inp.rsf > out.rsf angle=90. interp=\n\nPARAMETERS\n       float  angle =90.       rotation angle\n       string interp =      [n,l,c] interpolation type\nSOURCE\n       user/zone/Mrotater.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrotater(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrotvol-Tuple{}","page":"Home","title":"Madagascar.sfrotvol","text":"sfrotvol(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrotvol on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrotvol. See ?m8r for examples.\n\nRSF Documentation\n\nsfrotvol(1)                   Madagascar Manuals                   sfrotvol(1)\n\nNAME\n       sfrotvol - 3D volume rotation about a vertical axis\n\nSYNOPSIS\n       sfrotvol < inFile.rsf > outFile.rsf xf=0.f yf=0.f theta=0.f\n\nPARAMETERS\n       float  theta =0.f      rotation angle\n       float  xf =0.f      x-coord of the vertical axis\n       float  yf =0.f      y-coord of the vertical axis\nSOURCE\n       user/aklokov/Mrotvol.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfrotvol(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrpslow2-Tuple{}","page":"Home","title":"Madagascar.sfrpslow2","text":"sfrpslow2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrpslow2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrpslow2. See ?m8r for examples.\n\nRSF Documentation\n\nsfrpslow2(1)                  Madagascar Manuals                  sfrpslow2(1)\n\nNAME\n       sfrpslow2  - Full angle-dependent slowness volume for 3-D reduced phase\n       space.\n\nSYNOPSIS\n       sfrpslow2 < spdom.rsf > out.rsf vspl=vspline.rsf na=360 verb=n\n\nPARAMETERS\n       int    na =360      Number of phase angles\n       bool   verb =n [y/n]     verbosity flag\n       string vspl =      Spline coefficients for  velocity  model  (auxiliary\n              input file name)\nSOURCE\n       user/cram/Mrpslow2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrpslow2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrrt3d-Tuple{}","page":"Home","title":"Madagascar.sfrrt3d","text":"sfrrt3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrrt3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrrt3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfrrt3d(1)                    Madagascar Manuals                    sfrrt3d(1)\n\nNAME\n       sfrrt3d -\n\nSYNOPSIS\n       sfrrt3d  <  Fv.rsf  >  Ft.rsf  verb=n  pick=2 fill=1 scaleray=1. nray=1\n       jray=1  gmin=-90  gmax=+90  hmin=0  hmax=180   nt=100   ot=0   dt=0.001\n       xsou=sf_o(ax) + sf_n(ax)*sf_d(ax)/2 ysou=sf_o(ay) + sf_n(ay)*sf_d(ay)/2\n       zsou=sf_o(az) + sf_n(az)*sf_d(az)/2 seed=time(NULL)\n\nCOMMENTS\n       * 3-D ray tracing w/ random shooting directions * pcs 2005\n\nPARAMETERS\n       float  dt =0.001 ®\n       int    fill =1 ®\n       float  gmax =+90 ®\n       float  gmin =-90 ®\n       float  hmax =180 ®\n       float  hmin =0 ®\n       int    jray =1 ®\n       int    nray =1 ®\n       int    nt =100 ®\n       float  ot =0 ®\n       int    pick =2 ®\n       int    scaleray =1.  ®\n       int    seed =time(NULL)      random seed\n       bool   verb =n [y/n]\n       float  xsou =sf_o(ax) + sf_n(ax)*sf_d(ax)/2 ®\n       float  ysou =sf_o(ay) + sf_n(ay)*sf_d(ay)/2 ®\n       float  zsou =sf_o(az) + sf_n(az)*sf_d(az)/2 ®\nSOURCE\n       user/psava/Mrrt3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrrt3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrsf2bin-Tuple{}","page":"Home","title":"Madagascar.sfrsf2bin","text":"sfrsf2bin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrsf2bin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrsf2bin. See ?m8r for examples.\n\nRSF Documentation\n\nsfrsf2bin(1)                  Madagascar Manuals                  sfrsf2bin(1)\n\nNAME\n       sfrsf2bin - RSF file to Binary file\n\nSYNOPSIS\n       sfrsf2bin < in.rsf bfile=\n\nPARAMETERS\n       string bfile = ®\nSOURCE\n       user/chenyk/Mrsf2bin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrsf2bin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrsf2handvel-Tuple{}","page":"Home","title":"Madagascar.sfrsf2handvel","text":"sfrsf2handvel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrsf2handvel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrsf2handvel. See ?m8r for examples.\n\nRSF Documentation\n\nsfrsf2handvel(1)              Madagascar Manuals              sfrsf2handvel(1)\n\nNAME\n       sfrsf2handvel - Convert RSF to velocity picks\n\nSYNOPSIS\n       sfrsf2handvel < in.rsf > out.rsf skip=4\n\nPARAMETERS\n       int    skip =4      number of distance bins\nSOURCE\n       user/salah/Mrsf2handvel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfrsf2handvel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrsf2txt-Tuple{}","page":"Home","title":"Madagascar.sfrsf2txt","text":"sfrsf2txt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrsf2txt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrsf2txt. See ?m8r for examples.\n\nRSF Documentation\n\nsfrsf2txt(1)                  Madagascar Manuals                  sfrsf2txt(1)\n\nNAME\n       sfrsf2txt - RSF file to Text (ASCII) file (as a matrix)\n\nSYNOPSIS\n       sfrsf2txt < in.rsf format= tfile=\n\nCOMMENTS\n       Example: sftxt2rsf tfile=location.txt n1=2 n2=3 >location.rsf sfrsf2txt\n       <location.rsf format=.4f tfile=location2.txt more location.txt more lo‐\n       cation2.txt\n\nPARAMETERS\n       string format = ®\n       string tfile = ®\nSOURCE\n       user/chenyk/Mrsf2txt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrsf2txt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrsin-Tuple{}","page":"Home","title":"Madagascar.sfrsin","text":"sfrsin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrsin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrsin. See ?m8r for examples.\n\nRSF Documentation\n\nsfrsin(1)                     Madagascar Manuals                     sfrsin(1)\n\nNAME\n       sfrsin - Simple operations with real sinusoids\n\nSYNOPSIS\n       sfrsin < in.rsf > out.rsf root=root.rsf adj=n oper=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       string oper =      operation to perform\n       file   root =      auxiliary input file name\nSOURCE\n       user/fomels/Mrsin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrsin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtft-Tuple{}","page":"Home","title":"Madagascar.sfrtft","text":"sfrtft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtft. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtft(1)                     Madagascar Manuals                     sfrtft(1)\n\nNAME\n       sfrtft - Ricker time-frequency transform.\n\nSYNOPSIS\n       sfrtft  <  in.rsf  > out.rsf basis=basis.rsf mask=mask.rsf inv=n verb=n\n       nw= dw= w0=0. rect=10 niter=100 alpha=0.\n\nPARAMETERS\n       float  alpha =0.       frequency adaptivity\n       string basis =      auxiliary output file name\n       float  dw =      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       string mask =      auxiliary input file name\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       int    rect =10      smoothing radius\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\nSOURCE\n       user/yliu/Mrtft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrtft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtm-Tuple{}","page":"Home","title":"Madagascar.sfrtm","text":"sfrtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtm. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtm2d-Tuple{}","page":"Home","title":"Madagascar.sfrtm2d","text":"sfrtm2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtm2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtm2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtm2d(1)                    Madagascar Manuals                    sfrtm2d(1)\n\nNAME\n       sfrtm2d - 2-D zero-offset reverse-time migration\n\nSYNOPSIS\n       sfrtm2d vel=modl.rsf < data.rsf > imag.rsf adj=n n0=0 nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, migration; else, modeling\n       float  dt =      time sampling interval: dt\n       int    n0 =0      shot depth in the grid\n       int    nt =      number of time steps\n       file   vel =      auxiliary input file name\nSOURCE\n       user/pyang/Mrtm2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrtm2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtmadcig-Tuple{}","page":"Home","title":"Madagascar.sfrtmadcig","text":"sfrtmadcig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtmadcig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtmadcig. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtmadcig(1)                 Madagascar Manuals                 sfrtmadcig(1)\n\nNAME\n       sfrtmadcig  -  RTM  and  angle gather (ADCIG) extraction using poynting\n       vector\n\nSYNOPSIS\n       sfrtmadcig < vmodl.rsf velsmooth=vmods.rsf > rtmadcig.rsf vecx=vecx.rsf\n       vecz=vecz.rsf  amp=1.e3  fm=  dt=  nt=  ns= ng= nb=20 na=30 kt=200 jsx=\n       jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg= csdgather=y\n\nCOMMENTS\n       SPML boundary condition combined with 4-th order finite difference, ef‐\n       fective boundary saving strategy used!\n\nPARAMETERS\n       float  amp =1.e3      maximum amplitude of ricker wavelet\n       bool   csdgather =y [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =200      record poynting vector at kt\n       int    na =30      number of angles\n       int    nb =20      thickness of split PML\n       int    ng =      total receivers in each shot\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       file   vecx =      auxiliary output file name\n       file   vecz =      auxiliary output file name\n       file   velsmooth =      auxiliary input file name\nSOURCE\n       user/pyang/Mrtmadcig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrtmadcig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtmgeom-Tuple{}","page":"Home","title":"Madagascar.sfrtmgeom","text":"sfrtmgeom(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtmgeom on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtmgeom. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtmgeom(1)                  Madagascar Manuals                  sfrtmgeom(1)\n\nNAME\n       sfrtmgeom - Rice HPCSS reverse time migration.\n\nSYNOPSIS\n       sfrtmgeom\n\nSOURCE\n       user/roman/Mrtmgeom.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrtmgeom(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtmgeompetsc-Tuple{}","page":"Home","title":"Madagascar.sfrtmgeompetsc","text":"sfrtmgeompetsc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtmgeompetsc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtmgeompetsc. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtmgeompetsc(1)             Madagascar Manuals             sfrtmgeompetsc(1)\n\nNAME\n       sfrtmgeompetsc - Rice HPCSS reverse time migration.\n\nSYNOPSIS\n       sfrtmgeompetsc\n\nSOURCE\n       user/petsc/Mrtmgeompetsc.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfrtmgeompetsc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtmodcig-Tuple{}","page":"Home","title":"Madagascar.sfrtmodcig","text":"sfrtmodcig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtmodcig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtmodcig. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtmodcig(1)                 Madagascar Manuals                 sfrtmodcig(1)\n\nNAME\n       sfrtmodcig - RTM output ODCIG with extended images\n\nSYNOPSIS\n       sfrtmodcig  <  vmodl.rsf  vel1stlayer=vmods.rsf > Fodcig.rsf amp=1. fm=\n       dt= nt= ns= ng= nb=20 nh=30 kt=200 jsx= jsz=0 jgx=1 jgz=0 sxbeg= szbeg=\n       gxbeg= gzbeg= csdgather=y vmute=1500 tdmute=2./(fm*dt)\n\nPARAMETERS\n       float  amp =1.       maximum amplitude of ricker wavelet\n       bool   csdgather =y [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time interval\n       float  fm =      dominant freq of ricker\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =200      record poynting vector at kt\n       int    nb =20      thickness of split PML\n       int    ng =      total receivers in each shot\n       int    nh =30      number of points in offset coordinate\n       int    ns =      total shots\n       int    nt =      total modeling time steps\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       int    tdmute =2./(fm*dt)      number of deleyed time samples to mute\n       file   vel1stlayer =      auxiliary input file name\n       float  vmute =1500      muting velocity to remove the  low-freq  noise,\n              unit=m/s\nSOURCE\n       user/pyang/Mrtmodcig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrtmodcig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtmva2d-Tuple{}","page":"Home","title":"Madagascar.sfrtmva2d","text":"sfrtmva2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtmva2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtmva2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtmva2d(1)                  Madagascar Manuals                  sfrtmva2d(1)\n\nNAME\n       sfrtmva2d - RTM with checkpointing in 2D acoustic media\n\nSYNOPSIS\n       sfrtmva2d  <  Fv.rsf  rho=Frho.rsf tau=Ftau.rsf tauo=Ftauo.rsf > Fw.rsf\n       p1=Fp1.rsf  p2=Fp2.rsf  verb=n  nb=20  nt=  dt=  fm=20.0  ns=  ng=  kt=\n       nob=(int)log2f(nt)  jsx=  jsz=0 jgx=1 jgz=0 sxbeg= szbeg= gxbeg= gzbeg=\n       csdgather=y vmute=1500 tdmute=2./(fm*dt)\n\nCOMMENTS\n       The real value of checkpointing technology resides in the  backpropaga‐\n       tion with viscoacoustic and viscoelastic wave equation, where the wave‐\n       field reconstruction method using saved boundaries fails. Here, we only\n       demonstrate  how to implement it in acoustic media without dissipation.\n       Note the backpropagation operator should be the adjoint of forward mod‐\n       eling!  Here we just use forward modeling operator for the time being!\n\nPARAMETERS\n       bool   csdgather =y [y/n]     default, common shot-gather; if n, record\n              at every point\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    gxbeg =      x-begining index of receivers, starting from 0\n       int    gzbeg =      z-begining index of receivers, starting from 0\n       int    jgx =1      receiver x-axis jump interval\n       int    jgz =0      receiver z-axis jump interval\n       int    jsx =      source x-axis jump interval\n       int    jsz =0      source z-axis jump interval\n       int    kt =      output px and pz component at kt\n       int    nb =20      thickness of PML ABC\n       int    ng =      number of geophones/receivers per shot\n       int    nob  =(int)log2f(nt)       number  of  buffers,  default=optimal\n              value\n       int    ns =      number of shots\n       int    nt =      number of time steps\n       file   p1 =      auxiliary output file name\n       file   p2 =      auxiliary output file name\n       file   rho =      auxiliary input file name\n       int    sxbeg =      x-begining index of sources, starting from 0\n       int    szbeg =      z-begining index of sources, starting from 0\n       file   tau =      auxiliary input file name\n       file   tauo =      auxiliary input file name\n       int    tdmute =2./(fm*dt)      number of deleyed time samples to mute\n       bool   verb =n [y/n]     verbosity\n       float  vmute  =1500       muting velocity to remove the low-freq noise,\n              unit=m/s\nSOURCE\n       user/pyang/Mrtmva2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfrtmva2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtoc-Tuple{}","page":"Home","title":"Madagascar.sfrtoc","text":"sfrtoc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtoc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtoc. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtoc(1)                     Madagascar Manuals                     sfrtoc(1)\n\nNAME\n       sfrtoc - Convert real data to complex (by adding zero imaginary part).\n\nSYNOPSIS\n       sfrtoc < real.rsf > cmplx.rsf pair=n\n\nCOMMENTS\n       See also: sfcmplx\n\nPARAMETERS\n       bool   pair  =n  [y/n]     y  - use odd elements for real part and even\n              ones for imaginary part\nUSED IN\n       bei/ft1/autocor\n       bei/ft1/brad\n       bei/ft1/plane4\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/main/rtoc.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfrtoc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfrtoc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrtseislet-Tuple{}","page":"Home","title":"Madagascar.sfrtseislet","text":"sfrtseislet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrtseislet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrtseislet. See ?m8r for examples.\n\nRSF Documentation\n\nsfrtseislet(1)                Madagascar Manuals                sfrtseislet(1)\n\nNAME\n       sfrtseislet - Seislet transform using relative time\n\nSYNOPSIS\n       sfrtseislet  <  in.rsf  > out.rsf rt=rt.rsf inv=n adj=n eps=0.01 unit=n\n       order=1 verb=n type=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       float  eps =0.01      regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    order =1      accuracy order\n       file   rt =      auxiliary input file name\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/zgeng/Mrtseislet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfrtseislet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrwe2d-Tuple{}","page":"Home","title":"Madagascar.sfrwe2d","text":"sfrwe2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrwe2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrwe2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfrwe2d(1)                    Madagascar Manuals                    sfrwe2d(1)\n\nNAME\n       sfrwe2d - None\n\nSYNOPSIS\n       sfrwe2d rwf=rwfile.rsf swf=swfile.rsf vel=velfile.rsf rays=rays.rsf im‐\n       age=imfile.rsf Rimage=Rimage.rsf forward=0.  nref=256  verbose=n  kine‐\n       matic=y norm=1 nsx=3 nsz=3 xmin=ax%o xmax=(ax%n-1 zmax=(az%n-1 dxx=ax%d\n\nPARAMETERS\n       file   Rimage =      auxiliary output file name\n       dxx    =ax%d      call from_par(\"dzz\",dzz,az%d)\n       forward\n              =0.       Forward scattering option\n       file   image =      auxiliary output file name\n       kinematic\n              =y      Kinematic approximation\n       norm   =1      Whether (1) or not (0) to normalize by gnorm\n       nref   =256       starting  number  of points for calculating reference\n              velocities\n       nsx    =3 ®\n       nsz    =3 ®\n       file   rays =      auxiliary input file name\n       file   rwf =      auxiliary input file name\n       file   swf =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       verbose\n              =n      level of verbosity\n       xmax   =(ax%n-1 ®\n       xmin   =ax%o      call from_par(\"zmin\",zmin,az%o)\n       zmax   =(az%n-1 ®\nSOURCE\n       user/jeff/Mrwe2d.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrwe2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrweab-Tuple{}","page":"Home","title":"Madagascar.sfrweab","text":"sfrweab(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrweab on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrweab. See ?m8r for examples.\n\nRSF Documentation\n\nsfrweab(1)                    Madagascar Manuals                    sfrweab(1)\n\nNAME\n       sfrweab - Riemannian Wavefield Extrapolation: a,b coefficients\n\nSYNOPSIS\n       sfrweab  < Fi.rsf slo=Fs.rsf > Fo.rsf abr=Fr.rsf verb=n naref=1 nbref=1\n       peps=0.01\n\nPARAMETERS\n       file   abr =      auxiliary output file name\n       int    naref =1 ®\n       int    nbref =1 ®\n       float  peps =0.01 ®\n       file   slo =      auxiliary input file name\n       bool   verb =n [y/n]\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/seismic/Mrweab.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfrweab(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrwesrmig-Tuple{}","page":"Home","title":"Madagascar.sfrwesrmig","text":"sfrwesrmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrwesrmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrwesrmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfrwesrmig(1)                 Madagascar Manuals                 sfrwesrmig(1)\n\nNAME\n       sfrwesrmig - Riemannian Wavefield Extrapolation: shot-record migration.\n\nSYNOPSIS\n       sfrwesrmig  abm=Fm.rsf  abr=Fr.rsf  <  Fw_s.rsf  >  Fw_r.rsf img=Fi.rsf\n       verb=n method=0 adj=n\n\nPARAMETERS\n       file   abm =      auxiliary input file name\n       file   abr =      auxiliary input file name\n       bool   adj =n [y/n]     y=modeling; n=migration\n       file   img =      auxiliary input file name\n       int    method =0      extrapolation method\n       bool   verb =n [y/n]\nSOURCE\n       system/seismic/Mrwesrmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrwesrmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfrwezomig-Tuple{}","page":"Home","title":"Madagascar.sfrwezomig","text":"sfrwezomig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfrwezomig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfrwezomig. See ?m8r for examples.\n\nRSF Documentation\n\nsfrwezomig(1)                 Madagascar Manuals                 sfrwezomig(1)\n\nNAME\n       sfrwezomig  -  Riemannian  Wavefield  Extrapolation: zero-offset model‐\n       ing/migration\n\nSYNOPSIS\n       sfrwezomig abm=Fm.rsf abr=Fr.rsf <  Fi.rsf  >  Fd.rsf  verb=n  method=0\n       adj=n nw= dw= ow=0.\n\nPARAMETERS\n       file   abm =      auxiliary input file name\n       file   abr =      auxiliary input file name\n       bool   adj =n [y/n]     y=modeling; n=migration\n       float  dw = ®\n       int    method =0      extrapolation method\n       int    nw = ®\n       float  ow =0.  ®\n       bool   verb =n [y/n]\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/seismic/Mrwezomig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfrwezomig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfs2ofz-Tuple{}","page":"Home","title":"Madagascar.sfs2ofz","text":"sfs2ofz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfs2ofz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfs2ofz. See ?m8r for examples.\n\nRSF Documentation\n\nsfs2ofz(1)                    Madagascar Manuals                    sfs2ofz(1)\n\nNAME\n       sfs2ofz  -  Analytical  point-source  traveltime  in  a linear slowness\n       squared model.\n\nSYNOPSIS\n       sfs2ofz > out.rsf n= g=-6. v0=4 s=0.5\n\nPARAMETERS\n       float  g =-6.       slowness squared gradient\n       int    n =      number of samples\n       float  s =0.5      shot location at the surface\n       float  v0 =4      initial slowness squared\nSOURCE\n       system/seismic/Ms2ofz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfs2ofz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfs2ofz2-Tuple{}","page":"Home","title":"Madagascar.sfs2ofz2","text":"sfs2ofz2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfs2ofz2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfs2ofz2. See ?m8r for examples.\n\nRSF Documentation\n\nsfs2ofz2(1)                   Madagascar Manuals                   sfs2ofz2(1)\n\nNAME\n       sfs2ofz2  -  Analytical  plane-wave  traveltime  in  a  linear slowness\n       squared model.\n\nSYNOPSIS\n       sfs2ofz2 > out.rsf n= gz=-6. gx=2. v0=4\n\nPARAMETERS\n       float  gx =2.       slowness squared gradient\n       float  gz =-6.  ®\n       int    n =      number of samples\n       float  v0 =4      initial slowness squared\nSOURCE\n       system/seismic/Ms2ofz2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfs2ofz2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsaltpepper-Tuple{}","page":"Home","title":"Madagascar.sfsaltpepper","text":"sfsaltpepper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsaltpepper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsaltpepper. See ?m8r for examples.\n\nRSF Documentation\n\nsfsaltpepper(1)               Madagascar Manuals               sfsaltpepper(1)\n\nNAME\n       sfsaltpepper - Add salt and pepper noise to the data.\n\nSYNOPSIS\n       sfsaltpepper  <  in.rsf  >  out.rsf  den=10.  inten=0.1  rep=n allpos=n\n       noise=n seed=time(NULL)\n\nPARAMETERS\n       bool   allpos =n [y/n]     if y, assume positive noise\n       float  den  =10.        noise  density  (percent,  default=10,   Min=0,\n              Max=100)\n       float  inten  =0.1       noise  intensity (multiple peak value of data,\n              default=0.1)\n       bool   noise =n [y/n]     if y, output noise only\n       bool   rep =n [y/n]     if y, replace data with noise\n       int    seed =time(NULL)      random seed\nSOURCE\n       user/yliu/Msaltpepper.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsaltpepper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsamplowmat-Tuple{}","page":"Home","title":"Madagascar.sfsamplowmat","text":"sfsamplowmat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsamplowmat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsamplowmat. See ?m8r for examples.\n\nRSF Documentation\n\nsfsamplowmat(1)               Madagascar Manuals               sfsamplowmat(1)\n\nNAME\n       sfsamplowmat - Sample the lowrank propagation matrix\n\nSYNOPSIS\n       sfsamplowmat < velocity.rsf > mat.rsf dt= nz= dz= z0= nx= dx= x0=\n\nPARAMETERS\n       dt     = ®\n       dx     = ®\n       dz     = ®\n       nx     = ®\n       nz     = ®\n       x0     = ®\n       z0     = ®\nSOURCE\n       user/jingwei/Msamplowmat.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsamplowmat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsampmat-Tuple{}","page":"Home","title":"Madagascar.sfsampmat","text":"sfsampmat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsampmat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsampmat. See ?m8r for examples.\n\nRSF Documentation\n\nsfsampmat(1)                  Madagascar Manuals                  sfsampmat(1)\n\nNAME\n       sfsampmat - Sample the whole matrix prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfsampmat < fft.rsf > column.rsf flag= reg= nz= dz= z0= nx= dx= x0=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       flag   = ®\n       nx     = ®\n       nz     = ®\n       reg    = ®\n       x0     = ®\n       z0     = ®\nSOURCE\n       user/jingwei/Msampmat.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsampmat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsamptest-Tuple{}","page":"Home","title":"Madagascar.sfsamptest","text":"sfsamptest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsamptest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsamptest. See ?m8r for examples.\n\nRSF Documentation\n\nsfsamptest(1)                 Madagascar Manuals                 sfsamptest(1)\n\nNAME\n       sfsamptest - Test sample function prop1, prop2, prop3, prop4\n\nSYNOPSIS\n       sfsamptest < fft.rsf flag= reg= zx0= kzx0= nz= dz= z0= nx= dx= x0=\n\nPARAMETERS\n       dx     = ®\n       dz     = ®\n       flag   = ®\n       kzx0   = ®\n       nx     = ®\n       nz     = ®\n       reg    = ®\n       x0     = ®\n       z0     = ®\n       zx0    = ®\nSOURCE\n       user/jingwei/Msamptest.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsamptest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsamptestlrexp-Tuple{}","page":"Home","title":"Madagascar.sfsamptestlrexp","text":"sfsamptestlrexp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsamptestlrexp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsamptestlrexp. See ?m8r for examples.\n\nRSF Documentation\n\nsfsamptestlrexp(1)            Madagascar Manuals            sfsamptestlrexp(1)\n\nNAME\n       sfsamptestlrexp - Test sample function lrexp\n\nSYNOPSIS\n       sfsamptestlrexp < fft.rsf flag= gpz= zx0= kzx0= nt= dt= t0= nz= dz= z0=\n       nx= dx= x0=\n\nPARAMETERS\n       dt     = ®\n       dx     = ®\n       dz     = ®\n       flag   = ®\n       gpz    = ®\n       kzx0   = ®\n       nt     = ®\n       nx     = ®\n       nz     = ®\n       t0     = ®\n       x0     = ®\n       z0     = ®\n       zx0    = ®\nSOURCE\n       user/jingwei/Msamptestlrexp.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfsamptestlrexp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsbclip1-Tuple{}","page":"Home","title":"Madagascar.sfsbclip1","text":"sfsbclip1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsbclip1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsbclip1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsbclip1(1)                  Madagascar Manuals                  sfsbclip1(1)\n\nNAME\n       sfsbclip1 -\n\nSYNOPSIS\n       sfsbclip1 < logrefa.rsf > logref_co.rsf value= clip=\n\nCOMMENTS\n       One-sided data clipping\n\n       Built  for  log data manipulation - remove extraneous values introduced\n       from LSIM shifting\n\nPARAMETERS\n       float  clip =      Clipping value\n       float  value =      Output if log is less than clip\nSOURCE\n       user/sbader/Msbclip1.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsbclip1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsbd-Tuple{}","page":"Home","title":"Madagascar.sfsbd","text":"sfsbd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsbd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsbd. See ?m8r for examples.\n\nRSF Documentation\n\nsfsbd(1)                      Madagascar Manuals                      sfsbd(1)\n\nNAME\n       sfsbd - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfsbd < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2\n\nPARAMETERS\n       file   grad =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       int    what =2      2nd or 4th order for FD\nSOURCE\n       user/songxl/Msbd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsbd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsbslice-Tuple{}","page":"Home","title":"Madagascar.sfsbslice","text":"sfsbslice(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsbslice on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsbslice. See ?m8r for examples.\n\nRSF Documentation\n\nsfsbslice(1)                  Madagascar Manuals                  sfsbslice(1)\n\nNAME\n       sfsbslice -\n\nSYNOPSIS\n       sfsbslice  <  logrefa.rsf  <  deptha.rsf  <  log1a.rsf  <  log2a.rsf  <\n       log3a.rsf  <  log4a.rsf  <  log5a.rsf  <  log6a.rsf   >   logref_co.rsf\n       depth_c=depth_co.rsf        log1_c=log1_co.rsf       log2_c=log2_co.rsf\n       log3_c=log3_co.rsf        log4_c=log4_co.rsf         log5_c=log5_co.rsf\n       log6_c=log6_co.rsf depth= log1= log2= log3= log4= log5= log6=\n\nCOMMENTS\n       Multiple 1D inputs clipped to length of reference input\n\n       Built for log data manipulation - clips six input logs to the length of\n       the reference well log\n\nPARAMETERS\n       string depth = ®\n       file   depth_c =      auxiliary output file name\n       string log1 = ®\n       file   log1_c =      auxiliary output file name\n       string log2 = ®\n       file   log2_c =      auxiliary output file name\n       string log3 = ®\n       file   log3_c =      auxiliary output file name\n       string log4 = ®\n       file   log4_c =      auxiliary output file name\n       string log5 = ®\n       file   log5_c =      auxiliary output file name\n       string log6 = ®\n       file   log6_c =      auxiliary output file name\nSOURCE\n       user/sbader/Msbslice.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsbslice(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsbslice2-Tuple{}","page":"Home","title":"Madagascar.sfsbslice2","text":"sfsbslice2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsbslice2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsbslice2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsbslice2(1)                 Madagascar Manuals                 sfsbslice2(1)\n\nNAME\n       sfsbslice2 -\n\nSYNOPSIS\n       sfsbslice2  <  logrefa.rsf  <  deptha.rsf  <  log1a.rsf  <  log2a.rsf <\n       log3a.rsf   <   log4a.rsf    >    logref_co.rsf    depth_c=depth_co.rsf\n       log1_c=log1_co.rsf         log2_c=log2_co.rsf        log3_c=log3_co.rsf\n       log4_c=log4_co.rsf depth= log1= log2= log3= log4=\n\nCOMMENTS\n       Multiple 1D inputs clipped to length of reference input\n\n       Built for log data manipulation - clips six input logs to the length of\n       the reference well log\n\nPARAMETERS\n       string depth = ®\n       file   depth_c =      auxiliary output file name\n       string log1 = ®\n       file   log1_c =      auxiliary output file name\n       string log2 = ®\n       file   log2_c =      auxiliary output file name\n       string log3 = ®\n       file   log3_c =      auxiliary output file name\n       string log4 = ®\n       file   log4_c =      auxiliary output file name\nSOURCE\n       user/sbader/Msbslice2.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsbslice2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsc-Tuple{}","page":"Home","title":"Madagascar.sfsc","text":"sfsc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsc. See ?m8r for examples.\n\nRSF Documentation\n\nsfsc(1)                       Madagascar Manuals                       sfsc(1)\n\nNAME\n       sfsc - Surface-consistent decomposition\n\nSYNOPSIS\n       sfsc  < inp.rsf pred=pred.rsf error=error.rsf index=index.rsf > out.rsf\n       niter=0 prec=y\n\nPARAMETERS\n       string error =      prediction (auxiliary output file name)\n       file   index =      auxiliary input file name\n       int    niter =0      number of iterations\n       bool   prec =y [y/n]     if apply preconditioning\n       string pred =      prediction (auxiliary output file name)\nSOURCE\n       user/fomels/Msc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfsc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfscale-Tuple{}","page":"Home","title":"Madagascar.sfscale","text":"sfscale(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfscale on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfscale. See ?m8r for examples.\n\nRSF Documentation\n\nsfscale(1)                    Madagascar Manuals                    sfscale(1)\n\nNAME\n       sfscale - Scale data.\n\nSYNOPSIS\n       sfscale < in.rsf > out.rsf axis=0 rscale=0. pclip=100. dscale=1.\n\nCOMMENTS\n       To scale by a constant factor, you can also use sfmath.\n\nPARAMETERS\n       int    axis =0      Scale by maximum in the dimensions up to this axis.\n       float  dscale =1.       Scale by this factor (works if rscale=0)\n       float  pclip =100.       data clip percentile\n       float  rscale =0.       Scale by this factor.\nUSED IN\n       bei/dwnc/sigmoid\n       bei/krch/sep73\n       bei/trimo/all\n       bei/vela/stack\n       bei/vela/strat\n       cup/rna3d/shot\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/tti3\n       cwp/geo2009VTIModeSeparation/aniopsize\n       cwp/geo2009VTIModeSeparation/oporder\n       cwp/geo2009VTIModeSeparation/separate2\n       cwp/geo2009VTIModeSeparation/separate3\n       cwp/geo2009VTIModeSeparation/separate5\n       12 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sfs‐\n       cale.html\nSOURCE\n       system/main/scale.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfscale\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfscale(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfscalestretch-Tuple{}","page":"Home","title":"Madagascar.sfscalestretch","text":"sfscalestretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfscalestretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfscalestretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsclet-Tuple{}","page":"Home","title":"Madagascar.sfsclet","text":"sfsclet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsclet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsclet. See ?m8r for examples.\n\nRSF Documentation\n\nsfsclet(1)                    Madagascar Manuals                    sfsclet(1)\n\nNAME\n       sfsclet - 2-D SC-seislet: Seislet transform with differential shot con‐\n       tinuation\n\nSYNOPSIS\n       sfsclet < in.rsf > out.rsf inv=y adj=y unit=n eps=0.1 verb=n type=\n\nCOMMENTS\n       Forward transform  (adj=y  inv=y)    m=T[d]  Adjoint  transform  (adj=y\n       inv=n)   m=T^(-1)'[d] Inverse transform (adj=n inv=y/n) d=T^(-1)[m]\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, do adjoint transform\n       float  eps =0.1      regularization parameter\n       bool   inv =y [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Msclet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsclet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseekwin-Tuple{}","page":"Home","title":"Madagascar.sfseekwin","text":"sfseekwin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseekwin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseekwin. See ?m8r for examples.\n\nRSF Documentation\n\nsfseekwin(1)                  Madagascar Manuals                  sfseekwin(1)\n\nNAME\n       sfseekwin - Test for the seek wrapper function in the F90 API\n\nSYNOPSIS\n       sfseekwin < in.rsf > out.rsf whence=sf_seek_set nseek=10 nread=10\n\nCOMMENTS\n       Works  like sfwindow in 1-D. Extracts consecutive sequence of values in\n       N-d.  The following commands should output the integer sequence from 10\n       to 19: sfmath n1=20 o1=0 d1=1 type=float output=x1 > junk.rsf <junk.rsf\n       sfseekwin | sfdisfil col=10 number=n Cannot take input from a pipe  be‐\n       cause stdin cannot be seeked through\n\nPARAMETERS\n       nread  =10 ®\n       nseek  =10 ®\n       whence =sf_seek_set ®\nSOURCE\n       user/ivlad/Mseekwin.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseekwin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsegyheader-Tuple{}","page":"Home","title":"Madagascar.sfsegyheader","text":"sfsegyheader(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsegyheader on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsegyheader. See ?m8r for examples.\n\nRSF Documentation\n\nsfsegyheader(1)               Madagascar Manuals               sfsegyheader(1)\n\nNAME\n       sfsegyheader - Make a trace header file for segywrite.\n\nSYNOPSIS\n       sfsegyheader < in.rsf > out.rsf tfile=tfile.rsf n1= d1= o1=0\n\nCOMMENTS\n       Use the output for tfile= argument in segywrite.\n\nPARAMETERS\n       float  d1 =      trace sampling\n       int    n1 =      number of samples in a trace\n       float  o1 =0      trace origin\n       string tfile =      auxiliary input file name\nSOURCE\n       system/seismic/Msegyheader.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsegyheader(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsegyread-Tuple{}","page":"Home","title":"Madagascar.sfsegyread","text":"sfsegyread(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsegyread on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsegyread. See ?m8r for examples.\n\nRSF Documentation\n\nsfsegyread(1)                 Madagascar Manuals                 sfsegyread(1)\n\nNAME\n       sfsegyread - Convert a SEG-Y or SU dataset to RSF.\n\nSYNOPSIS\n       sfsegyread  mask=msk.rsf > out.rsf tfile=hdr.rsf verb=n su= suxdr=n en‐\n       dian=y n2=0 format= ns=0 nsbyte=0 tape= hfile= bfile= read=\n\nCOMMENTS\n       Data headers and trace headers are separated from the data.\n\n       \"suread\" is equivalent to \"segyread su=y\"\n\n       SEGY key names:\n\n       tracl: trace sequence number within line 0\n\n       tracr: trace sequence number within reel 4\n\n       fldr:     field record number 8\n\n       tracf:    trace number within field record 12\n\n       ep:       energy source point number 16\n\n       cdp:      CDP ensemble number 20\n\n       cdpt:     trace number within CDP ensemble 24\n\n       trid:     trace identification code: 1 = seismic data  2  =  dead  3  =\n       dummy  4  =  time break 5 = uphole 6 = sweep 7 = timing 8 = water break\n       9---, N = optional use (N = 32,767) 28\n\n       nvs:      number of vertically summed traces 30\n\n       nhs:      number of horizontally summed traces 32\n\n       duse:     data use: 1 = production 2 = test 34\n\n       offset:   distance from source point to receiver group (negative if op‐\n       posite to direction in which the line was shot) 36\n\n       gelev:     receiver  group elevation from sea level (above sea level is\n       positive) 40\n\n       selev:    source elevation from sea level (above sea level is positive)\n       44\n\n       sdepth:   source depth (positive) 48\n\n       gdel:     datum elevation at receiver group 52\n\n       sdel:     datum elevation at source 56\n\n       swdep:    water depth at source 60\n\n       gwdep:    water depth at receiver group 64\n\n       scalel:    scale factor for previous 7 entries with value plus or minus\n       10 to the power 0, 1, 2, 3, or 4 (if positive,  multiply,  if  negative\n       divide) 68\n\n       scalco:    scale  factor for next 4 entries with value plus or minus 10\n       to the power 0, 1, 2, 3, or 4 (if positive, multiply, if  negative  di‐\n       vide) 70\n\n       sx:       X source coordinate 72\n\n       sy:       Y source coordinate 76\n\n       gx:       X group coordinate 80\n\n       gy:       Y group coordinate 84\n\n       counit:    coordinate  units code: for previous four entries 1 = length\n       (meters or feet) 2 = seconds of arc (in this case, the X values are un‐\n       signed longitude and the Y values are latitude, a positive value desig‐\n       nates the number of seconds east of Greenwich or north of  the  equator\n       88\n\n       wevel:     weathering velocity 90\n\n       swevel:    subweathering velocity 92\n\n       sut:       uphole time at source 94\n\n       gut:       uphole time at receiver group 96\n\n       sstat:     source static correction 98\n\n       gstat:     group static correction 100\n\n       tstat:     total static applied 102\n\n       laga:       lag time A, time in ms between end of 240- byte trace iden‐\n       tification header and time break, positive if time break  occurs  after\n       end  of  header,  time  break  is defined as the initiation pulse which\n       maybe recorded on an auxiliary trace or as otherwise specified  by  the\n       recording system 104\n\n       lagb:      lag time B, time in ms between the time break and the initi‐\n       ation time of the energy source, may be positive or negative 106\n\n       delrt:     delay recording time, time in ms between initiation time  of\n       energy  source and time when recording of data samples begins (for deep\n       water work if recording does not start at zero time) 108\n\n       muts:      mute time--start 110\n\n       mute:      mute time--end 112\n\n       ns:        number of samples in this trace 114\n\n       dt:        sample interval, in micro-seconds 116\n\n       gain:      gain type of field instruments code: 1 = fixed 2 = binary  3\n       = floating point 4 ---- N = optional use 118\n\n       igc:       instrument gain constant 120\n\n       igi:       instrument early or initial gain 122\n\n       corr:      correlated: 1 = no 2 = yes 124\n\n       sfs:       sweep frequency at start 126\n\n       sfe:       sweep frequency at end 128\n\n       slen:      sweep length in ms 130\n\n       styp:      sweep type code: 1 = linear 2 = cos-squared 3 = other 132\n\n       stas:      sweep trace length at start in ms 134\n\n       stae:      sweep trace length at end in ms 136\n\n       tatyp:     taper type: 1=linear, 2=cos^2, 3=other 138\n\n       afilf:     alias filter frequency if used 140\n\n       afils:     alias filter slope 142\n\n       nofilf:    notch filter frequency if used 144\n\n       nofils:    notch filter slope 146\n\n       lcf:       low cut frequency if used 148\n\n       hcf:       high cut frequncy if used 150\n\n       lcs:       low cut slope 152\n\n       hcs:       high cut slope 154\n\n       year:      year data recorded 156\n\n       day:       day of year 158\n\n       hour:      hour of day (24 hour clock) 160\n\n       minute:    minute of hour 162\n\n       sec:       second of minute 164\n\n       timbas:    time basis code: 1 = local 2 = GMT 3 = other 166\n\n       trwf:      trace weighting factor, defined as 1/2^N volts for the least\n       sigificant bit 168\n\n       grnors:    geophone group number of roll switch position one 170\n\n       grnofr:    geophone group number of trace  one  within  original  field\n       record 172\n\n       grnlof:     geophone  group  number of last trace within original field\n       record 174\n\n       gaps:      gap size (total number of groups dropped) 176\n\n       otrav:     overtravel taper code: 1 = down  (or  behind)  2  =  up  (or\n       ahead) 178\n\n       cdpx:   X coordinate of CDP 180\n\n       cdpy:   Y coordinate of CDP 184\n\n       iline:  in-line number 188\n\n       xline:  cross-line number 192\n\n       shnum:  shotpoint number 196\n\n       shsca:  shotpoint scalar 200\n\n       tval:   trace value meas. 202\n\n       tconst4: transduction const 204\n\n       tconst2: transduction const 208\n\n       tunits:  transduction units 210\n\n       device:  device identifier 212\n\n       tscalar: time scalar 214\n\n       stype:   source type 216\n\n       sendir:  source energy dir. 218\n\n       unknown: unknown 222\n\n       smeas4:  source measurement 224\n\n       smeas2:  source measurement 228\n\n       smeasu:  source measurement unit 230\n\n       unass1:  unassigned 232\n\n       unass2:  unassigned 236\n\n       additional  keys can be created in the output trace headers The parame‐\n       ters key1, key2, ... key# are used to additional keys.  The  keys  must\n       be  unique  and  different  from  the  SEGY key names above.  The input\n       header byte location and lengths must also be defined.  This capability\n       is described in an example that defines a new keys iline1 from byte 220\n       and xline1 from byte 224:        key1=iline1  iline1=220  key1_len=4\n       key2=xline1 xline1=224 key2_len=4 key#_len defaults to 4\n\nPARAMETERS\n       string bfile =      output binary data header file\n       bool   endian =y [y/n]     Whether to automatically estimate endianness\n              or not\n       int    format = [1,2,3,5] Data format.\n                         The default is taken from binary header for segy  in‐\n              put.            Default  is  5  for  su input.          1 is IBM\n              floating point         2 is 4-byte integer         3  is  2-byte\n              integer         5 is IEEE floating point\n                     6  is native_float (same as RSF binary default)         7\n              is 1-byte integer\n       string hfile =      output text data header file\n       string mask =      optional  header  mask  for  reading  only  selected\n              traces (auxiliary input file name)\n       int    n2 =0      number of traces to read (if 0, read all traces)\n       int    ns  =0       Number of samples. The default is taken from binary\n              header\n       int    nsbyte =0      byte number for ns in binary header\n       string read =      what to read: h - header, d - data, b  -  both  (de‐\n              fault)\n       bool   su = [y/n]     y if input is SU, n if input is SEGY\n       bool   suxdr =n [y/n]     y, SU has XDR support.\n                         SU with xdr on (as downloaded), use endian=y suxdr=y\n                         SU  with  xdr  off  in  the  makefiles,  use endian=n\n              suxdr=n\n       string tape =      input data\n       string tfile =      output trace header  file  (auxiliary  output  file\n              name)\n       bool   verb =n [y/n]     Verbosity flag\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009VTIModeSeparation/sigsbee\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n       data/alaska/foldplot\n       data/alaska/line31-81-m8r\n       data/boem-g3d1206-002a/displayin\n       data/bpmodel94/firstlook\n       data/bpstatics94/firstlook\n       data/bptti/data\n       data/bptti/modl\n       data/bptti2007/firstlook\n       data/bpvelanal2004/firstlook\nSOURCE\n       system/seismic/Msegyread.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfsegyread\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsegyread(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsegywrite-Tuple{}","page":"Home","title":"Madagascar.sfsegywrite","text":"sfsegywrite(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsegywrite on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsegywrite. See ?m8r for examples.\n\nRSF Documentation\n\nsfsegywrite(1)                Madagascar Manuals                sfsegywrite(1)\n\nNAME\n       sfsegywrite - Convert an RSF dataset to SEGY or SU.\n\nSYNOPSIS\n       sfsegywrite  < in.rsf tfile=hdr.rsf verb=n endian=y su= suxdr=n suxdr=n\n       tape= hfile= bfile=\n\nCOMMENTS\n       Merges trace headers with data.\n\n       \"suwrite\" is equivalent to \"segywrite su=y\"\n\n       If bfile= and/or hfile= are not provided, they will be created automat‐\n       ically using information from the trace headers.\n\n       The file for tfile= can be generated with sfsegyheader.\n\nPARAMETERS\n       string bfile =      input binary data header file\n       bool   endian =y [y/n]     Whether to automatically estimate endianness\n              or not\n       string hfile =      input text data header file\n       bool   su = [y/n]     y if input is SU, n if input is SEGY\n       bool   suxdr =n [y/n]     y, SU has XDR support\n       string tape =      output data\n       file   tfile =      auxiliary input file name\n       bool   verb =n [y/n]     Verbosity flag\nSOURCE\n       system/seismic/Msegywrite.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfsegywrite\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsegywrite(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisavf-Tuple{}","page":"Home","title":"Madagascar.sfseisavf","text":"sfseisavf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisavf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisavf. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisavf(1)                  Madagascar Manuals                  sfseisavf(1)\n\nNAME\n       sfseisavf  -  1-D  amplitude  versus  frequency (AVF) analysis with 1-D\n       seislet frames\n\nSYNOPSIS\n       sfseisavf < in.rsf  >  out.rsf  freq=w.rsf  thr=t.rsf  verb=y  ncycle=0\n       niter=1 type=\n\nPARAMETERS\n       file   freq =      auxiliary input file name\n       int    ncycle =0      number of iterations\n       int    niter =1      number of Bregman iterations\n       file   thr =      auxiliary input file name\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseisavf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseisavf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisbreg2-Tuple{}","page":"Home","title":"Madagascar.sfseisbreg2","text":"sfseisbreg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisbreg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisbreg2. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisbreg2(1)                Madagascar Manuals                sfseisbreg2(1)\n\nNAME\n       sfseisbreg2  - Missing data interpolation in 2D using seislet and Breg‐\n       man shaping iteration.\n\nSYNOPSIS\n       sfseisbreg2 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf  niter=20  or‐\n       der=1 verb=n eps=0.01 perc=99. order=1 type= oper=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization parameter\n       string mask =      auxiliary input file name\n       int    niter =20      number of iterations\n       string oper  =      [bregman,thresholding] method, the default is breg‐\n              man\n       int    order =1      accuracy order\n       float  perc =99.       percentage for soft thresholding\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseisbreg2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfseisbreg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseiscut-Tuple{}","page":"Home","title":"Madagascar.sfseiscut","text":"sfseiscut(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseiscut on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseiscut. See ?m8r for examples.\n\nRSF Documentation\n\nsfseiscut(1)                  Madagascar Manuals                  sfseiscut(1)\n\nNAME\n       sfseiscut - Seislet Transform Denoising using Mask Operator\n\nSYNOPSIS\n       sfseiscut  <  in.rsf  dip=dip.rsf > out.rsf slet=slet.rsf sletcut=slet‐\n       cut.rsf cut=n2/4 eps=0.01 order1=1 eps=0.01 type=\n\nPARAMETERS\n       int    cut =n2/4      cut threshold value\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order1 =1      accuracy order for seislet transform\n       string slet =      seismic domain (auxiliary output file name)\n       string sletcut =      cutted  seislet  domain  (auxiliary  output  file\n              name)\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\nSOURCE\n       user/chenyk/Mseiscut.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseiscut(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseishrink-Tuple{}","page":"Home","title":"Madagascar.sfseishrink","text":"sfseishrink(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseishrink on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseishrink. See ?m8r for examples.\n\nRSF Documentation\n\nsfseishrink(1)                Madagascar Manuals                sfseishrink(1)\n\nNAME\n       sfseishrink - 2-D Seislet shrinkage denoising.\n\nSYNOPSIS\n       sfseishrink   <   in.rsf   >   out.rsf   dip=dip.rsf  lcurve=lcurve.rsf\n       hcurve=hcurve.rsf norm=norm.rsf order=1 verb=n dwt=n eps=0.01  perc=90.\n       nperc=1 type=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   dwt =n [y/n]     if y, dwt in vertical axis\n       float  eps =0.01      regularization parameter\n       string hcurve =      auxiliary output file name\n       string lcurve =      auxiliary output file name\n       string norm =      auxiliary output file name\n       int    nperc =1      number of percentage dimension\n       int    order =1 [1,2,3]   accuracy order\n       float  perc =90.       percentage for shrinkage\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseishrink.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfseishrink(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisigk-Tuple{}","page":"Home","title":"Madagascar.sfseisigk","text":"sfseisigk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisigk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisigk. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisigk(1)                  Madagascar Manuals                  sfseisigk(1)\n\nNAME\n       sfseisigk - Signal component separation using seislet transforms.\n\nSYNOPSIS\n       sfseisigk  <  in.rsf dips=dips.rsf > out.rsf weight=weight.rsf niter=50\n       nliter=1 eps=0. eps0=0.01 verb=n order=1 type=\n\nCOMMENTS\n       The program works with 2-D data. The second dimension should be a power\n       of 2.\n\nPARAMETERS\n       file   dips =      auxiliary input file name\n       float  eps =0.       regularization parameter\n       float  eps0 =0.01      regularization for seislet\n       int    niter =50      maximum number of iterations\n       int    nliter =1      number of reweighting iterations\n       int    order =1      accuracy order\n       string type =      wavelet type (haar,linear)\n       bool   verb =n [y/n]     verbosity flag\n       string weight =      auxiliary output file name\nSOURCE\n       user/pwd/Mseisigk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseisigk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseislet-Tuple{}","page":"Home","title":"Madagascar.sfseislet","text":"sfseislet(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseislet on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseislet. See ?m8r for examples.\n\nRSF Documentation\n\nsfseislet(1)                  Madagascar Manuals                  sfseislet(1)\n\nNAME\n       sfseislet - Seislet transform\n\nSYNOPSIS\n       sfseislet  <  in.rsf  > out.rsf dip=dip.rsf inv=n adj=n eps=0.01 unit=n\n       order=1 verb=n type=\n\nCOMMENTS\n       April 2017 program of the  month:  http://ahay.org/blog/2017/04/19/pro‐\n       gram-of-the-month-sfseislet/\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       bool   inv =n [y/n]     if y, do inverse transform\n       int    order =1      accuracy order\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/circle\nSOURCE\n       user/pwd/Mseislet.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseislet(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseislet1-Tuple{}","page":"Home","title":"Madagascar.sfseislet1","text":"sfseislet1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseislet1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseislet1. See ?m8r for examples.\n\nRSF Documentation\n\nsfseislet1(1)                 Madagascar Manuals                 sfseislet1(1)\n\nNAME\n       sfseislet1 - 1-D seislet transform\n\nSYNOPSIS\n       sfseislet1  <  in.rsf  > out.rsf freq=dip.rsf inv=n adj=n unit=n verb=n\n       type=\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, do adjoint transform\n       file   freq =      auxiliary input file name\n       bool   inv =n [y/n]     if y, do inverse transform\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   unit =n [y/n]     if y, use unitary scaling\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mseislet1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfseislet1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseismis2-Tuple{}","page":"Home","title":"Madagascar.sfseismis2","text":"sfseismis2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseismis2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseismis2. See ?m8r for examples.\n\nRSF Documentation\n\nsfseismis2(1)                 Madagascar Manuals                 sfseismis2(1)\n\nNAME\n       sfseismis2 - Missing data interpolation in 2-D using seislet transform.\n\nSYNOPSIS\n       sfseismis2  <  in.rsf  > out.rsf dip=dip.rsf mask=mask.rsf niter=20 or‐\n       der=1 verb=n cut=n eps=0.01  order=1  cnum=n2  orderc=1.  perc=99.  or‐\n       dert=1. ordert=1. type= oper=\n\nPARAMETERS\n       int    cnum =n2      Max cutting in cutting operator, default is n2\n       bool   cut =n [y/n]     cutting flag, the default is shaping\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization parameter\n       string mask =      auxiliary input file name\n       int    niter =20      number of iterations\n       string oper    =        [destruction,construction,shaping,pocs,bregman]\n              method, the default is shaping\n       int    order =1      accuracy order\n       float  orderc =1.       Curve order for cutting  operator,  default  is\n              linear\n       float  ordert  =1.       Curve order for thresholding operator, default\n              is linear\n       float  perc =99.       percentage for soft-thresholding\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseismis2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfseismis2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseispocs-Tuple{}","page":"Home","title":"Madagascar.sfseispocs","text":"sfseispocs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseispocs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseispocs. See ?m8r for examples.\n\nRSF Documentation\n\nsfseispocs(1)                 Madagascar Manuals                 sfseispocs(1)\n\nNAME\n       sfseispocs  -  Missing  data interpolation using POCS added 2-D seislet\n       transform.\n\nSYNOPSIS\n       sfseispocs < in.rsf >  out.rsf  dip=dip.rsf  mask=mask.rsf  convex=con‐\n       vex.rsf  niter=20  order=1  verb=n  eps=0.01  order=1 perc=90. fact=0.5\n       type=\n\nPARAMETERS\n       string convex =      auxiliary input file name\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization parameter\n       float  fact =0.5      percentage for smooth\n       string mask =      auxiliary input file name\n       int    niter =20      number of iterations\n       int    order =1      accuracy order\n       float  perc =90.       percentage for smooth\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is biorthogonal\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseispocs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfseispocs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisreg2-Tuple{}","page":"Home","title":"Madagascar.sfseisreg2","text":"sfseisreg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisreg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisreg2. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisreg2(1)                 Madagascar Manuals                 sfseisreg2(1)\n\nNAME\n       sfseisreg2 - Data regularization in 2-D using seislet transform.\n\nSYNOPSIS\n       sfseisreg2  <  in.rsf  > out.rsf dip=dip.rsf eps=0.01 interp=2 niter=50\n       order=1 order=1 verb=n head= type=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization parameter\n       string head = ®\n       int    interp =2      interpolation length\n       int    niter =50      number of iterations\n       int    order =1      accuracy order\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mseisreg2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfseisreg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisthr-Tuple{}","page":"Home","title":"Madagascar.sfseisthr","text":"sfseisthr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisthr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisthr. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisthr(1)                  Madagascar Manuals                  sfseisthr(1)\n\nNAME\n       sfseisthr - Seislet Transform Denoising using Thresholding\n\nSYNOPSIS\n       sfseisthr  <  in.rsf  > out.rsf dip=dip.rsf slet=slet.rsf sletthr=slet‐\n       thr.rsf eps=0.01 pclip=99. order1=1 eps=0.01 type= thrtype=\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order1 =1      accuracy order for seislet transform\n       float  pclip =99.       data clip percentile (default is 99)\n       string slet =      seismic domain (auxiliary output file name)\n       string sletthr =      thresholded seislet domain (auxiliary output file\n              name)\n       string thrtype  =       [soft,hard]  thresholding  type, the default is\n              soft\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\nSOURCE\n       user/chenyk/Mseisthr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfseisthr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfseisxwell-Tuple{}","page":"Home","title":"Madagascar.sfseisxwell","text":"sfseisxwell(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfseisxwell on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfseisxwell. See ?m8r for examples.\n\nRSF Documentation\n\nsfseisxwell(1)                Madagascar Manuals                sfseisxwell(1)\n\nNAME\n       sfseisxwell - Select seismic data cross well position.\n\nSYNOPSIS\n       sfseisxwell  <  in.rsf  >  out.rsf path=spath.rsf well=well.rsf wx= wy=\n       nw=0\n\nPARAMETERS\n       int    nw =0      number of well points\n       string path =      auxiliary output file name\n       string well =      auxiliary input file name\n       floats wx =      well x coordinates [nw]\n       floats wy =      well y coordinates [nw]\nSOURCE\n       user/yliu/Mseisxwell.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfseisxwell(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfselfblend-Tuple{}","page":"Home","title":"Madagascar.sfselfblend","text":"sfselfblend(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfselfblend on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfselfblend. See ?m8r for examples.\n\nRSF Documentation\n\nsfselfblend(1)                Madagascar Manuals                sfselfblend(1)\n\nNAME\n       sfselfblend - Self blending for simple test.\n\nSYNOPSIS\n       sfselfblend  <  in.rsf  >  out.rsf  seed=time(NULL)  type=y var= range=\n       mean=0 t0=n1*dt\n\nPARAMETERS\n       float  mean =0      noise mean\n       float  range =      dithering time range (default=1)\n       int    seed =time(NULL)      random seed\n       float  t0 =n1*dt      scheduled time interval between  two  consecutive\n              shots in one source\n       bool   type  =y  [y/n]     dithering  time  distribution, y: normal, n:\n              uniform\n       float  var =      dithering time variance\nSOURCE\n       user/chenyk/Mselfblend.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfselfblend(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsemblance-Tuple{}","page":"Home","title":"Madagascar.sfsemblance","text":"sfsemblance(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsemblance on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsemblance. See ?m8r for examples.\n\nRSF Documentation\n\nsfsemblance(1)                Madagascar Manuals                sfsemblance(1)\n\nNAME\n       sfsemblance - Semblance over the specified axis.\n\nSYNOPSIS\n       sfsemblance < in.rsf > out.rsf weighted=n axis=2\n\nPARAMETERS\n       int    axis =2      which axis to stack\n       bool   weighted =n [y/n]     if use weighted semblance\nSOURCE\n       user/fomels/Msemblance.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsemblance(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsemblancew-Tuple{}","page":"Home","title":"Madagascar.sfsemblancew","text":"sfsemblancew(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsemblancew on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsemblancew. See ?m8r for examples.\n\nRSF Documentation\n\nsfsemblancew(1)               Madagascar Manuals               sfsemblancew(1)\n\nNAME\n       sfsemblancew - Semblance over the specified axis.\n\nSYNOPSIS\n       sfsemblancew < in.rsf > out.rsf weighted=n axis=2 nb=2\n\nPARAMETERS\n       int    axis =2      which axis to stack\n       int    nb =2      smoothing along the first axis\n       bool   weighted =n [y/n]     if use weighted semblance\nSOURCE\n       user/fomels/Msemblancew.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsemblancew(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsensitivity-Tuple{}","page":"Home","title":"Madagascar.sfsensitivity","text":"sfsensitivity(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsensitivity on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsensitivity. See ?m8r for examples.\n\nRSF Documentation\n\nsfsensitivity(1)              Madagascar Manuals              sfsensitivity(1)\n\nNAME\n       sfsensitivity - Traveltime sensitivity kernels.\n\nSYNOPSIS\n       sfsensitivity  >  out.rsf  nx=100 ny=1 nz=100 ox=0. oy=0. oz=0. dx=0.02\n       dy=0.02 dz=0.02 v0=1.5 vgrad=.8 mode=6  sx=0.15  sy=0.  sz=0.15  rx=1.6\n       ry=0. rz=1.605 t1=0.8 t2=1.2 dt=0.008\n\nPARAMETERS\n       float  dt =0.008 ®\n       float  dx =0.02 ®\n       float  dy =0.02 ®\n       float  dz =0.02      grid spacing\n       int    mode =6      source coordinates\n       int    nx =100 ®\n       int    ny =1 ®\n       int    nz =100      dimensions\n       float  ox =0.  ®\n       float  oy =0.  ®\n       float  oz =0.       grid origin\n       float  rx =1.6 ®\n       float  ry =0.  ®\n       float  rz =1.605      receiver\n       float  sx =0.15 ®\n       float  sy =0.  ®\n       float  sz =0.15      source\n       float  t1 =0.8 ®\n       float  t2 =1.2 ®\n       float  v0 =1.5      surface velocity\n       float  vgrad =.8      velocity gradient\nSOURCE\n       user/rickettj/Msensitivity.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsensitivity(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsepcmplx2rsf-Tuple{}","page":"Home","title":"Madagascar.sfsepcmplx2rsf","text":"sfsepcmplx2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsepcmplx2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsepcmplx2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsfsepcmplx2rsf(1)             Madagascar Manuals             sfsepcmplx2rsf(1)\n\nNAME\n       sfsepcmplx2rsf - Convert legacy SEPlib complex datasets to RSF\n\nSYNOPSIS\n       sfsepcmplx2rsf file= preserve_t=y verb=n\n\nCOMMENTS\n       I.e. from\n\n       esize=8 data_format=xdr_float\n\n       to\n\n       esize=8 data_format=xdr_complex\n\n       This  combination  is  tolerated  by  SEPlib  versions  released  after\n       2011-01-20, and required by all versions of Madagascar. Previous to the\n       date  above,  it  was  impossible  to  have  a complex single-precision\n       dataset that was valid both in SEPlib and Madagascar\n\n       This program opens the SEPlib file in read-write mode!\n\n       Handles in=stdin case (header and data in one file)\n\nPARAMETERS\n       string file =      Name of file to process\n       bool   preserve_t =y [y/n]     Whether to preserve timestamp\n       bool   verb =n [y/n]     Say if file was converted or unchanged\nSOURCE\n       user/seplib_compat/Msepcmplx2rsf.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfsepcmplx2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfset2zero-Tuple{}","page":"Home","title":"Madagascar.sfset2zero","text":"sfset2zero(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfset2zero on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfset2zero. See ?m8r for examples.\n\nRSF Documentation\n\nsfset2zero(1)                 Madagascar Manuals                 sfset2zero(1)\n\nNAME\n       sfset2zero - replaces content of RSF file with zeros\n\nSYNOPSIS\n       sfset2zero file1.rsf [file2.rsf ...]\n\nCOMMENTS\n       Used to create initial guess for SLIMpy.\n\nSOURCE\n       user/slim/Mset2zero.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfset2zero(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsgelfd2dpml-Tuple{}","page":"Home","title":"Madagascar.sfsgelfd2dpml","text":"sfsgelfd2dpml(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsgelfd2dpml on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsgelfd2dpml. See ?m8r for examples.\n\nRSF Documentation\n\nsfsgelfd2dpml(1)              Madagascar Manuals              sfsgelfd2dpml(1)\n\nNAME\n       sfsgelfd2dpml  - A k-space staggered-grid lowrank finite-difference for\n       elastic and viscoelastic seismic-wave modeling\n\nSYNOPSIS\n       sfsgelfd2dpml  <  vpfp.rsf  vs=vsfp.rsf   rho=rhofp.rsf   Gpx=Gpxfp.rsf\n       Gpz=Gpzfp.rsf  Gsx=Gsxfp.rsf  Gsz=Gszfp.rsf sxx=sxxfp.rsf sxz=sxzfp.rsf\n       szx=szxfp.rsf    szz=szzfp.rsf    >    snapfpx.rsf    snapz=snapfpz.rsf\n       snappx=snapfppx.rsf       snappz=snapfppz.rsf       snapsx=snapfpsx.rsf\n       snapsz=snapfpsz.rsf order=12 dt= nt= fpeak=20.0 isrcx=  isrcz=  npml=30\n       verb=1 freesurface=0 igz=1 snap=1\n\nPARAMETERS\n       file   Gpx =      auxiliary input file name\n       file   Gpz =      auxiliary input file name\n       file   Gsx =      auxiliary input file name\n       file   Gsz =      auxiliary input file name\n       float  dt = ®\n       float  fpeak =20.0 ®\n       int    freesurface =0      recerver\n       int    igz =1 ®\n       int    isrcx = ®\n       int    isrcz = ®\n       int    npml =30 ®\n       int    nt = ®\n       int    order =12      source\n       file   rho =      auxiliary input file name\n       int    snap =1 ®\n       file   snappx =      auxiliary output file name\n       file   snappz =      auxiliary output file name\n       file   snapsx =      auxiliary output file name\n       file   snapsz =      auxiliary output file name\n       file   snapz =      auxiliary output file name\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       int    verb =1      freesurface\n       file   vs =      auxiliary input file name\nSOURCE\n       user/junyan/Msgelfd2dpml.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsgelfd2dpml(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsgelfd2dpml2-Tuple{}","page":"Home","title":"Madagascar.sfsgelfd2dpml2","text":"sfsgelfd2dpml2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsgelfd2dpml2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsgelfd2dpml2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsgelfd2dpml2(1)             Madagascar Manuals             sfsgelfd2dpml2(1)\n\nNAME\n       sfsgelfd2dpml2 - A k-space staggered-grid lowrank finite-difference for\n       elastic and viscoelastic seismic-wave modeling\n\nSYNOPSIS\n       sfsgelfd2dpml2  <  vpfp.rsf  vs=vsfp.rsf  rho=rhofp.rsf   Gpx=Gpxfp.rsf\n       Gpz=Gpzfp.rsf  Gsx=Gsxfp.rsf  Gsz=Gszfp.rsf sxx=sxxfp.rsf sxz=sxzfp.rsf\n       szx=szxfp.rsf    szz=szzfp.rsf    >    snapfpx.rsf    snapz=snapfpz.rsf\n       snappx=snapfppx.rsf       snappz=snapfppz.rsf       snapsx=snapfpsx.rsf\n       snapsz=snapfpsz.rsf order=12 dt= nt= fpeak=20.0 isrcx=  isrcz=  npml=30\n       verb=1 freesurface=0 igz=1 snap=1\n\nPARAMETERS\n       file   Gpx =      auxiliary input file name\n       file   Gpz =      auxiliary input file name\n       file   Gsx =      auxiliary input file name\n       file   Gsz =      auxiliary input file name\n       float  dt = ®\n       float  fpeak =20.0 ®\n       int    freesurface =0      recerver\n       int    igz =1 ®\n       int    isrcx = ®\n       int    isrcz = ®\n       int    npml =30 ®\n       int    nt = ®\n       int    order =12      source\n       file   rho =      auxiliary input file name\n       int    snap =1 ®\n       file   snappx =      auxiliary output file name\n       file   snappz =      auxiliary output file name\n       file   snapsx =      auxiliary output file name\n       file   snapsz =      auxiliary output file name\n       file   snapz =      auxiliary output file name\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       int    verb =1      freesurface\n       file   vs =      auxiliary input file name\nSOURCE\n       user/junyan/Msgelfd2dpml2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfsgelfd2dpml2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsgfd1-Tuple{}","page":"Home","title":"Madagascar.sfsgfd1","text":"sfsgfd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsgfd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsgfd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsgfd1(1)                    Madagascar Manuals                    sfsgfd1(1)\n\nNAME\n       sfsgfd1 - 1-D staggered Grid Finite-difference wave extrapolation\n\nSYNOPSIS\n       sfsgfd1  <  Fsrc.rsf  vel=Fvel.rsf  den=Fden.rsf > Fwf.rsf rec=Frec.rsf\n       ic=Fic.rsf    presrc=Fpsrc.rsf    velsrc=Fvsrc.rsf    preinit=Fpint.rsf\n       velinit=Fvint.rsf  verb=n  srcmms=n  slx=  srcdecay=n srctrunc=1000 in‐\n       ject=y gdep=0 snapinter=1 pmlsize=PMLOUT  pmld0=PMLD0  decay=DECAY_FLAG\n       decaybegin=DECAY_BEGIN freesurface=n size=4\n\nPARAMETERS\n       int    decay  =DECAY_FLAG      Flag of decay boundary condtion: 1 = use\n              ; 0 = not use\n       int    decaybegin =DECAY_BEGIN      Begin time of using decay  boundary\n              condition\n       file   den =      auxiliary input file name\n       bool   freesurface =n [y/n]     free surface\n       float  gdep =0      recorder depth\n       file   ic =      auxiliary input file name\n       bool   inject  =y [y/n]     inject = y use inject source; inject =n use\n              initial condition\n       int    pmld0 =PMLD0      PML parameter\n       int    pmlsize =PMLOUT      size of PML layer\n       file   preinit =      auxiliary input file name\n       file   presrc =      auxiliary input file name\n       file   rec =      auxiliary output file name\n       int    size =4      FD half order\n       float  slx =      source location in x\n       int    snapinter =1      snap interval\n       bool   srcdecay =n [y/n]     source decay y=use\n       bool   srcmms =n [y/n]     source type: if y, use point source\n       float  srctrunc =1000      source trunc time (s)\n       file   vel =      auxiliary input file name\n       file   velinit =      auxiliary input file name\n       file   velsrc =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msgfd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsgfd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsgfdewe2d-Tuple{}","page":"Home","title":"Madagascar.sfsgfdewe2d","text":"sfsgfdewe2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsgfdewe2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsgfdewe2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfsgfdewe2d(1)                Madagascar Manuals                sfsgfdewe2d(1)\n\nNAME\n       sfsgfdewe2d - 2-D staggered-grid elastic time-domain FD modeling\n\nSYNOPSIS\n       sfsgfdewe2d  datax=dataxf.rsf  dataz=datazf.rsf  vp=vpf.rsf  vs=vsf.rsf\n       rho=rhof.rsf nshot=1 dshot=1  nx=nvx  nabs=50  sx_ini=  sz_ini=5  hsz=5\n       tmax= dt= peak=20\n\nCOMMENTS\n       10th order in space, 2th order in time.\n\nPARAMETERS\n       file   datax =      auxiliary output file name\n       file   dataz =      auxiliary output file name\n       int    dshot =1      shot interval, multiple of receiver intervals\n       float  dt =      time interval\n       int    hsz =5      vertical position of recerivers\n       int    nabs =50      width of padded boundary\n       int    nshot =1      number of shots\n       int    nx =nvx      coverage area for each shot\n       float  peak =20      peak frequency for Ricker wavelet (in Hz)\n       file   rho =      auxiliary input file name\n       int    sx_ini =      horizontal position of shot point\n       int    sz_ini =5      vertical position of shot point\n       float  tmax =      record length\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\nSOURCE\n       user/zhiguang/Msgfdewe2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsgfdewe2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfd1pml-Tuple{}","page":"Home","title":"Madagascar.sfsglfd1pml","text":"sfsglfd1pml(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfd1pml on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfd1pml. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfd1pml(1)                Madagascar Manuals                sfsglfd1pml(1)\n\nNAME\n       sfsglfd1pml - 1-D Lowrank Finite-difference wave extrapolation\n\nSYNOPSIS\n       sfsglfd1pml < Fsrc.rsf vel=Fvel.rsf den=Fden.rsf > Fwf.rsf rec=Frec.rsf\n       G=FG.rsf  sx=Fsx.rsf   ic=Fic.rsf   presrc=Fpsrc.rsf   velsrc=Fvsrc.rsf\n       preinit=Fpint.rsf  velinit=Fvint.rsf  verb=n  srcmms=n  slx= srcdecay=n\n       srctrunc=1000 inject=y gdep=0.0 snapinter=1 pmlsize=PMLOUT  pmld0=PMLD0\n       decay=DECAY_FLAG decaybegin=DECAY_BEGIN freesurface=n\n\nPARAMETERS\n       file   G =      auxiliary input file name\n       int    decay  =DECAY_FLAG      Flag of decay boundary condtion: 1 = use\n              ; 0 = not use\n       int    decaybegin =DECAY_BEGIN      Begin time of using decay  boundary\n              condition\n       file   den =      auxiliary input file name\n       bool   freesurface =n [y/n]     free surface\n       float  gdep =0.0      depth of geophone\n       file   ic =      auxiliary input file name\n       bool   inject  =y  [y/n]     inject=y  use  inject source; inject=n use\n              initial condition\n       int    pmld0 =PMLD0      PML parameter\n       int    pmlsize =PMLOUT      size of PML layer\n       file   preinit =      auxiliary input file name\n       file   presrc =      auxiliary input file name\n       file   rec =      auxiliary output file name\n       float  slx =      source location in x\n       int    snapinter =1      snap interval\n       bool   srcdecay =n [y/n]     source decay y=use\n       bool   srcmms =n [y/n]     source type: if y, use point source\n       float  srctrunc =1000      source trunc time (s)\n       file   sx =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       file   velinit =      auxiliary input file name\n       file   velsrc =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglfd1pml.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsglfd1pml(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfd2-Tuple{}","page":"Home","title":"Madagascar.sfsglfd2","text":"sfsglfd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfd2(1)                   Madagascar Manuals                   sfsglfd2(1)\n\nNAME\n       sfsglfd2 - 2-D Low Rank Finite-difference wave extrapolation\n\nSYNOPSIS\n       sfsglfd2  <  fsource.rsf vel=fvel.rsf den=fden.rsf > fwf.rsf Gx=fGx.rsf\n       Gz=fGz.rsf sxx=fsxx.rsf sxz=fsxz.rsf szx=fszx.rsf  szz=fszz.rsf  verb=n\n       spx= spz=\n\nPARAMETERS\n       file   Gx =      auxiliary input file name\n       file   Gz =      auxiliary input file name\n       file   den =      auxiliary input file name\n       int    spx =      source point in x\n       int    spz =      source point in z\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglfd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsglfd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfd2_tfd-Tuple{}","page":"Home","title":"Madagascar.sfsglfd2_tfd","text":"sfsglfd2_tfd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfd2_tfd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfd2_tfd. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfd2tfd(1)               Madagascar Manuals               sfsglfd2tfd(1)\n\nNAME\n       sfsglfd2_tfd  - 2-D 4th-order Staggered Grid Finite-difference wave ex‐\n       trapolation\n\nSYNOPSIS\n       sfsglfd2_tfd < fsource.rsf vel=fvel.rsf den=fden.rsf >  fwf.rsf  verb=n\n       oo=4 spx= spz=\n\nPARAMETERS\n       file   den =      auxiliary input file name\n       int    oo =4 ®\n       int    spx =      source point in x\n       int    spz =      source point in z\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglfd2_tfd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsglfd2_tfd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfd2pml-Tuple{}","page":"Home","title":"Madagascar.sfsglfd2pml","text":"sfsglfd2pml(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfd2pml on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfd2pml. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfd2pml(1)                Madagascar Manuals                sfsglfd2pml(1)\n\nNAME\n       sfsglfd2pml - 2-D Lowrank Finite-difference wave extrapolation on stag‐\n       gered grid\n\nSYNOPSIS\n       sfsglfd2pml  <  fsource.rsf   vel=fvel.rsf   den=fden.rsf   >   fwf.rsf\n       rec=frec.rsf    Gx=fGx.rsf    Gz=fGz.rsf    sxx=fsxx.rsf   sxz=fsxz.rsf\n       szx=fszx.rsf szz=fszz.rsf verb=n  srcdecay=n  srcrange=10  srctrunc=100\n       snapinter=1  pmlsize=PMLOUT pmld0=PMLD0 decay=DECAY_FLAG decaybegin=DE‐\n       CAY_BEGIN freesurface=n slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gp=0\n\nPARAMETERS\n       file   Gx =      auxiliary input file name\n       file   Gz =      auxiliary input file name\n       int    decay =DECAY_FLAG      Flag of decay boundary condtion: 1 =  use\n              ; 0 = not use\n       int    decaybegin  =DECAY_BEGIN      Begin time of using decay boundary\n              condition\n       file   den =      auxiliary input file name\n       bool   freesurface =n [y/n]     free surface\n       float  gdep =-1.0      recorder depth on grid\n       int    gp =0      recorder depth on index\n       int    pmld0 =PMLD0      PML parameter\n       int    pmlsize =PMLOUT      size of PML layer\n       file   rec =      auxiliary output file name\n       float  slx =-1.0      source location x\n       float  slz =-1.0      source location z\n       int    snapinter =1      snap interval\n       int    spx =-1      source location x (index)\n       int    spz =-1      source location z (index)\n       bool   srcdecay =n [y/n]     source decay\n       int    srcrange =10      source decay range\n       float  srctrunc =100      trunc source after srctrunc time (s)\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglfd2pml.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsglfd2pml(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdc1-Tuple{}","page":"Home","title":"Madagascar.sfsglfdc1","text":"sfsglfdc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdc1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdc1(1)                  Madagascar Manuals                  sfsglfdc1(1)\n\nNAME\n       sfsglfdc1  - 1D Lowrank FD coefficient of d/dx on staggered grid (opti‐\n       mized)\n\nSYNOPSIS\n       sfsglfdc1 < velf.rsf >  outm.rsf  sx=fsx.rsf  seed=time(NULL  eps=1.e-4\n       npk=20 dt= wavnumcut=1.0 size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       wavnumcut\n              =1.0      wavenumber cut percentile\nSOURCE\n       user/fangg/Msglfdc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsglfdc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdc1a-Tuple{}","page":"Home","title":"Madagascar.sfsglfdc1a","text":"sfsglfdc1a(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdc1a on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdc1a. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdc1a(1)                 Madagascar Manuals                 sfsglfdc1a(1)\n\nNAME\n       sfsglfdc1a - 1D Lowrank FD coefficient of d/dx on staggered grid (opti‐\n       mized)\n\nSYNOPSIS\n       sfsglfdc1a  <  velf.rsf  >  outm.rsf  sx=fsx.rsf  Mexact=Mexactfile.rsf\n       seed=time(NULL taper=1.e-3 eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6\n\nPARAMETERS\n       file   Mexact =      auxiliary output file name\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       taper  =1.e-3      taper for stability\n       wavnumcut\n              =1.0      wavenumber cut percentile\nSOURCE\n       user/fangg/Msglfdc1a.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsglfdc1a(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdcp1-Tuple{}","page":"Home","title":"Madagascar.sfsglfdcp1","text":"sfsglfdcp1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdcp1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdcp1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdcp1(1)                 Madagascar Manuals                 sfsglfdcp1(1)\n\nNAME\n       sfsglfdcp1  -  Relative  error  of  phase velocity of 16-th order 1D SG\n       Lowrank FD and 1D FD coefficient\n\nSYNOPSIS\n       sfsglfdcp1  <  velf.rsf  >  outm.rsf  Mfd=Mfdfile.rsf   Mlr=Mlrfile.rsf\n       seed=time(NULL eps=1.e-4 npk=20 dt= size=16\n\nPARAMETERS\n       file   Mfd =      auxiliary output file name\n       file   Mlr =      auxiliary output file name\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =16      stencil length\nSOURCE\n       user/fangg/Msglfdcp1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsglfdcp1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdcx1-Tuple{}","page":"Home","title":"Madagascar.sfsglfdcx1","text":"sfsglfdcx1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdcx1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdcx1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdcx1(1)                 Madagascar Manuals                 sfsglfdcx1(1)\n\nNAME\n       sfsglfdcx1 - 1D Lowrank FD coefficient of d/dx on staggered grid\n\nSYNOPSIS\n       sfsglfdcx1  <  velf.rsf  > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n       size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\nSOURCE\n       user/fangg/Msglfdcx1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsglfdcx1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdcx1a-Tuple{}","page":"Home","title":"Madagascar.sfsglfdcx1a","text":"sfsglfdcx1a(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdcx1a on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdcx1a. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdcx1a(1)                Madagascar Manuals                sfsglfdcx1a(1)\n\nNAME\n       sfsglfdcx1a - None\n\nSYNOPSIS\n       sfsglfdcx1a  <  velf.rsf > outm.rsf seed=time(NULL eps=1.e-4 npk=20 dt=\n       size=6\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\nSOURCE\n       user/fangg/Msglfdcx1a.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsglfdcx1a(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdcx2_7-Tuple{}","page":"Home","title":"Madagascar.sfsglfdcx2_7","text":"sfsglfdcx2_7(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdcx2_7 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdcx2_7. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdcx27(1)               Madagascar Manuals               sfsglfdcx27(1)\n\nNAME\n       sfsglfdcx2_7 - 2D Lowrank FD coefficient of d/dx on staggered grid (op‐\n       timized)\n\nSYNOPSIS\n       sfsglfdcx2_7 < velf.rsf > outm.rsf sx=fsx.rsf sz=fsz.rsf seed=time(NULL\n       eps=1.e-6 npk=50 dt= size=6 wavnumcut=1.0\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       file   sz =      auxiliary output file name\n       wavnumcut\n              =1.0      wavenumber cut percentile\nSOURCE\n       user/fangg/Msglfdcx2_7.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsglfdcx2_7(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdcz2_7-Tuple{}","page":"Home","title":"Madagascar.sfsglfdcz2_7","text":"sfsglfdcz2_7(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdcz2_7 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdcz2_7. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdcz27(1)               Madagascar Manuals               sfsglfdcz27(1)\n\nNAME\n       sfsglfdcz2_7 - 2D Lowrank FD coefficient of d/dx on staggered grid\n\nSYNOPSIS\n       sfsglfdcz2_7 < velf.rsf > outm.rsf sx=fsx.rsf sz=fsz.rsf seed=time(NULL\n       eps=1.e-6 npk=50 dt= size=6 wavnumcut=1.0\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-6      tolerance\n       npk    =50      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       file   sz =      auxiliary output file name\n       wavnumcut\n              =1.0      wavenumber cut percentile\nSOURCE\n       user/fangg/Msglfdcz2_7.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsglfdcz2_7(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglfdrtm2-Tuple{}","page":"Home","title":"Madagascar.sfsglfdrtm2","text":"sfsglfdrtm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglfdrtm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglfdrtm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglfdrtm2(1)                Madagascar Manuals                sfsglfdrtm2(1)\n\nNAME\n       sfsglfdrtm2 - None\n\nSYNOPSIS\n       sfsglfdrtm2  <  Fsrc.rsf  fvel=Ffvel.rsf  fden=Ffden.rsf bvel=Fbvel.rsf\n       bden=Fbden.rsf rec=Frcd.rsf > Fimg1.rsf img2=Fimg2.rsf tmpwf=Ftmpwf.rsf\n       tmpbwf=Ftmpbwf.rsf   Gx=FGx.rsf  Gz=FGz.rsf  sxx=Fsxx.rsf  sxz=Fsxz.rsf\n       szx=Fszx.rsf szz=Fszz.rsf verb=n wantwf=n wantrecord=y  srcdecay=SRCDE‐\n       CAY  srcrange=SRCRANGE srctrunc=SRCTRUNC pmlsize=PMLOUT pmld0=PMLD0 de‐\n       cay=DECAY_FLAG  decaybegin=DECAY_BEGIN  freesurface=n  slx=-1.0  spx=-1\n       gdep=-1.0 gp=0 ginter=1 snapinter=10\n\nPARAMETERS\n       file   Gx =      auxiliary input file name\n       file   Gz =      auxiliary input file name\n       file   bden =      auxiliary input file name\n       file   bvel =      auxiliary input file name\n       bool   decay =DECAY_FLAG [y/n]     Flag of decay boundary condtion: 1 =\n              use ; 0 = not use\n       int    decaybegin =DECAY_BEGIN      Begin time of using decay  boundary\n              condition\n       file   fden =      auxiliary input file name\n       bool   freesurface =n [y/n]     free surface\n       file   fvel =      auxiliary input file name\n       float  gdep =-1.0      recorder depth on grid\n       int    ginter =1      geophone interval\n       int    gp =0      recorder depth on index\n       file   img2 =      auxiliary output file name\n       int    pmld0 =PMLD0      PML parameter\n       int    pmlsize =PMLOUT      size of PML layer\n       file   rec =      auxiliary input file name\n       float  slx =-1.0      source location x\n       int    snapinter =10      snap interval\n       int    spx =-1      source location x (index)\n       bool   srcdecay =SRCDECAY [y/n]     source decay\n       int    srcrange =SRCRANGE      source decay range\n       float  srctrunc =SRCTRUNC      trunc source after srctrunc time (s)\n       file   sxx =      auxiliary input file name\n       file   sxz =      auxiliary input file name\n       file   szx =      auxiliary input file name\n       file   szz =      auxiliary input file name\n       file   tmpbwf =      auxiliary output file name\n       file   tmpwf =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity\n       bool   wantrecord  =y  [y/n]     if  n,  using record data generated by\n              this program\n       bool   wantwf =n [y/n]     output forward and backward wavefield\nSOURCE\n       user/fangg/Msglfdrtm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsglfdrtm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglr1-Tuple{}","page":"Home","title":"Madagascar.sfsglr1","text":"sfsglr1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglr1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglr1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglr1(1)                    Madagascar Manuals                    sfsglr1(1)\n\nNAME\n       sfsglr1 - 1-D lowrank wave propagation on staggered grid\n\nSYNOPSIS\n       sfsglr1  vel=Fvel.rsf  den=Fden.rsf  <  Fsrc.rsf  > Fo.rsf rec=Frec.rsf\n       left=left.rsf right=right.rsf fft=Ffft.rsf ic=Fic.rsf  presrc=Fpsrc.rsf\n       velsrc=Fvsrc.rsf  preinit=Fpint.rsf  velinit=Fvint.rsf  verb=n srcmms=n\n       slx=  srcdecay=y  srcrange=10  srctrunc=100  cmplx=n  pad1=1   inject=y\n       gdep=0.0\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   den =      auxiliary input file name\n       file   fft =      auxiliary input file name\n       float  gdep =0.0      depth of geophone (meter)\n       file   ic =      auxiliary input file name\n       bool   inject =y [y/n]     =y inject source; =n initial condition\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   preinit =      auxiliary input file name\n       file   presrc =      auxiliary input file name\n       file   rec =      auxiliary output file name\n       file   right =      auxiliary input file name\n       float  slx =      source location in x\n       bool   srcdecay =y [y/n]     source decay\n       bool   srcmms =n [y/n]     use MMS source\n       int    srcrange =10      source decay range\n       float  srctrunc =100      trunc source after srctrunc time (s)\n       file   vel =      auxiliary input file name\n       file   velinit =      auxiliary input file name\n       file   velsrc =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglr1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsglr1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsglr2-Tuple{}","page":"Home","title":"Madagascar.sfsglr2","text":"sfsglr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsglr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsglr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsglr2(1)                    Madagascar Manuals                    sfsglr2(1)\n\nNAME\n       sfsglr2 - Simple 2-D wave propagation on staggered grid\n\nSYNOPSIS\n       sfsglr2  vel=Fvel.rsf  den=Fden.rsf  <  Fsrc.rsf  > Fo.rsf rec=Frec.rsf\n       left=left.rsf  right=right.rsf  fft=Ffft.rsf  verb=n   cmplx=n   pad1=1\n       gdep=0.0  slx=-1.0 spx=-1 slz=-1.0 spz=-1 gdep=-1.0 gp=0 srcdecay=n sr‐\n       crange=10 srctrunc=100\n\nPARAMETERS\n       bool   cmplx =n [y/n]     use complex FFT\n       file   den =      auxiliary input file name\n       file   fft =      auxiliary input file name\n       float  gdep =-1.0      recorder depth on grid\n       int    gp =0      recorder depth on index\n       file   left =      auxiliary input file name\n       int    pad1 =1      padding factor on the first axis\n       file   rec =      auxiliary output file name\n       file   right =      auxiliary input file name\n       float  slx =-1.0      source location x\n       float  slz =-1.0      source location z\n       int    spx =-1      source location x (index)\n       int    spz =-1      source location z (index)\n       bool   srcdecay =n [y/n]     source decay\n       int    srcrange =10      source decay range\n       float  srctrunc =100      trunc source after srctrunc time (s)\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/fangg/Msglr2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsglr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshape-Tuple{}","page":"Home","title":"Madagascar.sfshape","text":"sfshape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshape. See ?m8r for examples.\n\nRSF Documentation\n\nsfshape(1)                    Madagascar Manuals                    sfshape(1)\n\nNAME\n       sfshape - Non-stationary smoothing by shaping regularization.\n\nSYNOPSIS\n       sfshape < inp.rsf > out.rsf limit=lim.rsf niter=100 rect#=(1,1,...)\n\nPARAMETERS\n       file   limit =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\nSOURCE\n       user/fomels/Mshape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfshape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshapeagc-Tuple{}","page":"Home","title":"Madagascar.sfshapeagc","text":"sfshapeagc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshapeagc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshapeagc. See ?m8r for examples.\n\nRSF Documentation\n\nsfshapeagc(1)                 Madagascar Manuals                 sfshapeagc(1)\n\nNAME\n       sfshapeagc - Automatic gain control by shaping regularization.\n\nSYNOPSIS\n       sfshapeagc  < in.rsf > out.rsf gain=fgain.rsf niter=100 eps=0.0f verb=n\n       rect#=(125,1,1,...)\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       string gain =      output gain file (optional) (auxiliary  output  file\n              name)\n       int    niter =100      number of iterations\n       int    rect# =(125,1,1,...)       smoothing radius on #-th axis\n       bool   verb =n [y/n]     verbosity\nUSED IN\n       bei/dpmv/krchdmo\n       data/alaska/line31-81-m8r\nSOURCE\n       user/fomels/Mshapeagc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshapeagc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshapebin-Tuple{}","page":"Home","title":"Madagascar.sfshapebin","text":"sfshapebin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshapebin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshapebin. See ?m8r for examples.\n\nRSF Documentation\n\nsfshapebin(1)                 Madagascar Manuals                 sfshapebin(1)\n\nNAME\n       sfshapebin - Data binning in 2-D slices by inverse interpolation.\n\nSYNOPSIS\n       sfshapebin   <   in.rsf   >   out.rsf  pattern=pattern.rsf  pin=pin.rsf\n       pout=pout.rsf xkey= ykey= nx=  ny=  xmin=  xmax=  ymin=  ymax=  x0=xmin\n       y0=ymin  dx=  dy=  interp=2 niter=nm nliter=1 eps=1./nd gauss=n shape=y\n       verb=y filt1=3. filt2=filt1 head=\n\nPARAMETERS\n       float  dx =      bin size in x\n       float  dy =      bin size in y\n       float  eps =1./nd      regularization parameter\n       float  filt1 =3.  ®\n       float  filt2 =filt1      smoothing length for shaping\n       bool   gauss =n [y/n]     if y, use gaussian  shaping  (estimated  from\n              the data)\n       string head = ®\n       int    interp =2      interpolation length\n       int    niter =nm      number of iterations\n       int    nliter =1      number of reweighting iterations\n       int    nx =      Number of bins in x\n       int    ny =      Number of bins in y\n       string pattern =      auxiliary input file name\n       string pin =      auxiliary input file name\n       string pout =      auxiliary output file name\n       bool   shape =y [y/n]     if y, use shaping regularization\n       bool   verb =y [y/n]     verbosity flag\n       float  x0 =xmin ®\n       int    xkey =      x key number\n       float  xmax = ®\n       float  xmin = ®\n       float  y0 =ymin      grid origin\n       int    ykey =      y key number\n       float  ymax = ®\n       float  ymin =      Grid dimensions\nSOURCE\n       system/generic/Mshapebin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshapebin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshapebin1-Tuple{}","page":"Home","title":"Madagascar.sfshapebin1","text":"sfshapebin1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshapebin1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshapebin1. See ?m8r for examples.\n\nRSF Documentation\n\nsfshapebin1(1)                Madagascar Manuals                sfshapebin1(1)\n\nNAME\n       sfshapebin1 - 1-D inverse interpolation with shaping regularization.\n\nSYNOPSIS\n       sfshapebin1  <  in.rsf > out.rsf verb=y nx= xmin= xmax= x0=xmin dx= in‐\n       terp=2 filter=3. niter=nx eps=1./nd pef=n gauss=n pad=0 head=\n\nPARAMETERS\n       float  dx =      grid sampling\n       float  eps =1./nd      regularization parameter\n       float  filter =3.       smoothing length\n       bool   gauss =n [y/n]     if y, use Gaussian shaping\n       string head = ®\n       int    interp =2 [1,2]     forward  interpolation  method,  1:  nearest\n              neighbor, 2: linear\n       int    niter =nx      number of conjugate-gradient iterations\n       int    nx =      number of bins\n       int    pad =0      padding for Gaussian shaping\n       bool   pef =n [y/n]     if y, use monofrequency regularization\n       bool   verb =y [y/n]     verbosity flag\n       float  x0 =xmin      grid origin\n       float  xmax = ®\n       float  xmin =      grid size\nSOURCE\n       system/generic/Mshapebin1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshapebin1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshapefill-Tuple{}","page":"Home","title":"Madagascar.sfshapefill","text":"sfshapefill(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshapefill on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshapefill. See ?m8r for examples.\n\nRSF Documentation\n\nsfshapefill(1)                Madagascar Manuals                sfshapefill(1)\n\nNAME\n       sfshapefill  -  Missing data interpolation in 2-D by Laplacian regular‐\n       ization.\n\nSYNOPSIS\n       sfshapefill < in.rsf > out.rsf mask=mask.rsf niter=200  verb=n  dim=dim\n       rect#=(1,1,...)\n\nPARAMETERS\n       int    dim =dim      dimensionality\n       string mask  =      optional mask file with zeroes for missing data lo‐\n              cations (auxiliary input file name)\n       int    niter =200      number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mshapefill.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshapefill(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshapesigk-Tuple{}","page":"Home","title":"Madagascar.sfshapesigk","text":"sfshapesigk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshapesigk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshapesigk. See ?m8r for examples.\n\nRSF Documentation\n\nsfshapesigk(1)                Madagascar Manuals                sfshapesigk(1)\n\nNAME\n       sfshapesigk - Signal component separation using plane-wave shaping.\n\nSYNOPSIS\n       sfshapesigk  <  in.rsf  dips=dips.rsf  > out.rsf niter=50 eps=1. verb=n\n       rect1=1 rect2=1\n\nCOMMENTS\n       The program works with 2-D data.\n\nPARAMETERS\n       file   dips =      auxiliary input file name\n       float  eps =1.       regularization parameter\n       int    niter =50      maximum number of iterations\n       int    rect1 =1      vertical smoothing radius\n       int    rect2 =1      lateral smoothing radius\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/pwd/Mshapesigk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshapesigk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsharadwav-Tuple{}","page":"Home","title":"Madagascar.sfsharadwav","text":"sfsharadwav(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsharadwav on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsharadwav. See ?m8r for examples.\n\nRSF Documentation\n\nsfsharadwav(1)                Madagascar Manuals                sfsharadwav(1)\n\nNAME\n       sfsharadwav -\n\nSYNOPSIS\n       sfsharadwav > Fou.rsf verb=n window= delay=\n\nCOMMENTS\n       Create the time domain range compressed waveform for SHARAD Created by:\n       Dylan Hickson, Colorado School of Mines Created on: Mar 9, 2022\n\nPARAMETERS\n       float  delay =      latency delay in transmitted signal in microseconds\n       bool   verb =n [y/n]     verbosity flag\n       bool   window = [y/n]     spectral Hann window flag\nSOURCE\n       user/cwp/Msharadwav.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsharadwav(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsharpen-Tuple{}","page":"Home","title":"Madagascar.sfsharpen","text":"sfsharpen(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsharpen on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsharpen. See ?m8r for examples.\n\nRSF Documentation\n\nsfsharpen(1)                  Madagascar Manuals                  sfsharpen(1)\n\nNAME\n       sfsharpen - Sharpening operator\n\nSYNOPSIS\n       sfsharpen < in.rsf > out.rsf other=other.rsf perc=50.0 fact=0.5\n\nPARAMETERS\n       float  fact =0.5      factor for sharpening\n       string other =      auxiliary input file name\n       float  perc =50.0      percentage for sharpening\nSOURCE\n       system/generic/Msharpen.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsharpen(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsharpsimi-Tuple{}","page":"Home","title":"Madagascar.sfsharpsimi","text":"sfsharpsimi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsharpsimi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsharpsimi. See ?m8r for examples.\n\nRSF Documentation\n\nsfsharpsimi(1)                Madagascar Manuals                sfsharpsimi(1)\n\nNAME\n       sfsharpsimi - Sharpen similarity measure between two datasets.\n\nSYNOPSIS\n       sfsharpsimi  <  in.rsf  >  out.rsf  other=other.rsf  eps=0.01  niter=20\n       perc=98. verb=n\n\nPARAMETERS\n       float  eps =0.01      regularization parameter\n       int    niter =20      number of iterations\n       file   other =      auxiliary input file name\n       float  perc =98.       percentage for sharpen, default is 98\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Msharpsimi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsharpsimi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshearer-Tuple{}","page":"Home","title":"Madagascar.sfshearer","text":"sfshearer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshearer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshearer. See ?m8r for examples.\n\nRSF Documentation\n\nsfshearer(1)                  Madagascar Manuals                  sfshearer(1)\n\nNAME\n       sfshearer - Preconditioning for traveltime picking.\n\nSYNOPSIS\n       sfshearer  < in.rsf > out.rsf niter=100 order=10 ref=1. short=1 long=10\n       rect1=1 rect2=1 ...\n\nCOMMENTS\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       int    long =10      long smoothing radius\n       int    niter =100      number of iterations\n       int    order =10      Hilbert transformer order\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       int    short =1      short smoothing radius\nUSED IN\n       bei/vela/vscan\nSOURCE\n       user/fomels/Mshearer.c\nVERSION\n       4.2-git Menvelope.c 696 2004-07-06 23:17:31Z fomels\n\nMadagascar                         JULY 2024                      sfshearer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshift-Tuple{}","page":"Home","title":"Madagascar.sfshift","text":"sfshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshift. See ?m8r for examples.\n\nRSF Documentation\n\nsfshift(1)                    Madagascar Manuals                    sfshift(1)\n\nNAME\n       sfshift - Fourier-domain shift in 1,2 and 3 dimensions\n\nSYNOPSIS\n       sfshift < Fi.rsf > Fo.rsf ompchunk=1 verb=n del1=0. del2=0. del3=0.\n\nPARAMETERS\n       float  del1 =0.       delay on axis 1\n       float  del2 =0.       delay on axis 2\n       float  del3 =0.       delay on axis 3\n       int    ompchunk =1      OpenMP data chunk size\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mshift.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshift1-Tuple{}","page":"Home","title":"Madagascar.sfshift1","text":"sfshift1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshift1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshift1. See ?m8r for examples.\n\nRSF Documentation\n\nsfshift1(1)                   Madagascar Manuals                   sfshift1(1)\n\nNAME\n       sfshift1 - Generate shifts for 1-D regularized autoregression.\n\nSYNOPSIS\n       sfshift1 < in.rsf > shift.rsf ns=\n\nPARAMETERS\n       int    ns =      number of shifts\nSOURCE\n       user/fomels/Mshift1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfshift1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshiftd1-Tuple{}","page":"Home","title":"Madagascar.sfshiftd1","text":"sfshiftd1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshiftd1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshiftd1. See ?m8r for examples.\n\nRSF Documentation\n\nsfshiftd1(1)                  Madagascar Manuals                  sfshiftd1(1)\n\nNAME\n       sfshiftd1  -  Generate shifts for 1-D regularized autoregression double\n       sides (not include the trace self).\n\nSYNOPSIS\n       sfshiftd1 < in.rsf > shift.rsf ns=\n\nPARAMETERS\n       int    ns =      number of shifts\nUSED IN\n       cup/rna3d/shot\n       cup/rna3d/sin\nSOURCE\n       user/gchliu/Mshiftd1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfshiftd1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshiftd2-Tuple{}","page":"Home","title":"Madagascar.sfshiftd2","text":"sfshiftd2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshiftd2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshiftd2. See ?m8r for examples.\n\nRSF Documentation\n\nsfshiftd2(1)                  Madagascar Manuals                  sfshiftd2(1)\n\nNAME\n       sfshiftd2  -  Generate shifts for 1-D regularized autoregression double\n       sides (include the trace self for 3D shifts).\n\nSYNOPSIS\n       sfshiftd2 < in.rsf > shift.rsf ns=\n\nPARAMETERS\n       int    ns =      number of shifts\nUSED IN\n       cup/rna3d/real\nSOURCE\n       user/gchliu/Mshiftd2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfshiftd2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshifts-Tuple{}","page":"Home","title":"Madagascar.sfshifts","text":"sfshifts(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshifts on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshifts. See ?m8r for examples.\n\nRSF Documentation\n\nsfshifts(1)                   Madagascar Manuals                   sfshifts(1)\n\nNAME\n       sfshifts - Multiple shifts.\n\nSYNOPSIS\n       sfshifts < inp.rsf > out.rsf np= dp= p0=\n\nPARAMETERS\n       float  dp =      slope sampling\n       int    np =      number of slopes\n       float  p0 =      first slope\nSOURCE\n       system/seismic/Mshifts.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfshifts(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshifts2-Tuple{}","page":"Home","title":"Madagascar.sfshifts2","text":"sfshifts2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshifts2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshifts2. See ?m8r for examples.\n\nRSF Documentation\n\nsfshifts2(1)                  Madagascar Manuals                  sfshifts2(1)\n\nNAME\n       sfshifts2 - Apply linear time shifts on multiple traces.\n\nSYNOPSIS\n       sfshifts2 < in.rsf > shift.rsf s0= ds=\n\nPARAMETERS\n       int    ds =      shift sampling\n       int    s0 =      first shift (in number of samples along 1st axis)\nSOURCE\n       user/zgeng/Mshifts2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfshifts2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshoot2-Tuple{}","page":"Home","title":"Madagascar.sfshoot2","text":"sfshoot2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshoot2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshoot2. See ?m8r for examples.\n\nRSF Documentation\n\nsfshoot2(1)                   Madagascar Manuals                   sfshoot2(1)\n\nNAME\n       sfshoot2 - 2-D ray shooting.\n\nSYNOPSIS\n       sfshoot2  <  vel.rsf > out.rsf shotfile=shots.rsf vel=y order=4 lsint=n\n       nt=nx*nz nr=1 r0=x0 dr=dx tol=0.01\n\nPARAMETERS\n       float  dr =dx      receiver increment\n       bool   lsint =n [y/n]     if use least-squares interpolation\n       int    nr =1      number of recievers\n       int    nt =nx*nz      Maximum number of time steps\n       int    order =4      Interpolation order\n       float  r0 =x0      first receiver\n       string shotfile =      file with shot locations (auxiliary  input  file\n              name)\n       float  tol =0.01      Shooting tolerance (in degrees)\n       bool   vel =y [y/n]     If y, the input is velocity; if n, slowness\nSOURCE\n       system/seismic/Mshoot2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfshoot2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshot2cmp-Tuple{}","page":"Home","title":"Madagascar.sfshot2cmp","text":"sfshot2cmp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshot2cmp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshot2cmp. See ?m8r for examples.\n\nRSF Documentation\n\nsfshot2cmp(1)                 Madagascar Manuals                 sfshot2cmp(1)\n\nNAME\n       sfshot2cmp - Convert shots to CMPs for regular 2-D geometry.\n\nSYNOPSIS\n       sfshot2cmp < in.rsf > out.rsf mask=msk.rsf positive=y half=y\n\nCOMMENTS\n       The axes in the input are {time,offset,shot} The axes in the output are\n       {time,offset,midpoint}\n\nPARAMETERS\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       string mask =      auxiliary output file name\n       bool   positive =y [y/n]     initial offset orientation\nUSED IN\n       data/alaska/line31-81-m8r\nSOURCE\n       system/seismic/Mshot2cmp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshot2cmp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshot2grid-Tuple{}","page":"Home","title":"Madagascar.sfshot2grid","text":"sfshot2grid(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshot2grid on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshot2grid. See ?m8r for examples.\n\nRSF Documentation\n\nsfshot2grid(1)                Madagascar Manuals                sfshot2grid(1)\n\nNAME\n       sfshot2grid - Synthesize shot/receiver wavefields for 3-D SR migration\n\nSYNOPSIS\n       sfshot2grid  <  Fr.rsf  wav=Fs.rsf  swf=Fsou.rsf > Frec.rsf nx= dx= ox=\n       ny=1 dy=1 oy=0\n\nPARAMETERS\n       float  dx =      x sampling\n       float  dy =1      y sampling\n       int    nx =      x samples\n       int    ny =1      y samples\n       float  ox =      x origin\n       float  oy =0      y origin\n       file   swf =      auxiliary output file name\n       file   wav =      auxiliary input file name\nSOURCE\n       user/psava/Mshot2grid.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshot2grid(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshotconstkirch-Tuple{}","page":"Home","title":"Madagascar.sfshotconstkirch","text":"sfshotconstkirch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshotconstkirch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshotconstkirch. See ?m8r for examples.\n\nRSF Documentation\n\nsfshotconstkirch(1)           Madagascar Manuals           sfshotconstkirch(1)\n\nNAME\n       sfshotconstkirch  -  Prestack  shot-profile Kirchhoff migration in con‐\n       stant velocity.\n\nSYNOPSIS\n       sfshotconstkirch < inp.rsf > out.rsf aal=y nx=ns dx=ds  x0=s0  offset=n\n       vel=\n\nCOMMENTS\n       Requires the input to be in (time,offset,shot)\n\nPARAMETERS\n       bool   aal =y [y/n]     if y, apply antialiasing\n       float  dx =ds ®\n       int    nx =ns ®\n       bool   offset =n [y/n]     if y, the output is in offset\n       float  vel =      velocity\n       float  x0 =s0 ®\nSOURCE\n       system/seismic/Mshotconstkirch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sfshotconstkirch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshotequal-Tuple{}","page":"Home","title":"Madagascar.sfshotequal","text":"sfshotequal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshotequal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshotequal. See ?m8r for examples.\n\nRSF Documentation\n\nsfshotequal(1)                Madagascar Manuals                sfshotequal(1)\n\nNAME\n       sfshotequal  -  sfshotequal projects amplitudes of each shot to Z-score\n       distribution\n\nSYNOPSIS\n       sfshotequal < in.rsf > out.rsf mask=msk.rsf scaler=scl.rsf verb=n amp=\n\nPARAMETERS\n       float  amp =      Exclude amplitudes greater than amp && less than -amp\n              for statistics computations\n       string mask =      auxiliary input file name\n       string scaler =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/salah/Mshotequal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshotequal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshotholes-Tuple{}","page":"Home","title":"Madagascar.sfshotholes","text":"sfshotholes(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshotholes on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshotholes. See ?m8r for examples.\n\nRSF Documentation\n\nsfshotholes(1)                Madagascar Manuals                sfshotholes(1)\n\nNAME\n       sfshotholes - Remove random shot gathers from a 2-D dataset.\n\nSYNOPSIS\n       sfshotholes < in.rsf > mask.rsf perc=0.75\n\nPARAMETERS\n       float  perc =0.75      how many shots to remove\nSOURCE\n       system/seismic/Mshotholes.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshotholes(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshotprop-Tuple{}","page":"Home","title":"Madagascar.sfshotprop","text":"sfshotprop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshotprop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshotprop. See ?m8r for examples.\n\nRSF Documentation\n\nsfshotprop(1)                 Madagascar Manuals                 sfshotprop(1)\n\nNAME\n       sfshotprop - Shot propagation.\n\nSYNOPSIS\n       sfshotprop < in.rsf > out.rsf ns= ds= eps=0.1 positive=y\n\nPARAMETERS\n       float  ds =      shot sampling\n       float  eps =0.1      regularization parameter\n       int    ns =      number of shots\n       bool   positive =y [y/n]     initial offset orientation\nSOURCE\n       system/seismic/Mshotprop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshotprop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshplanemis2-Tuple{}","page":"Home","title":"Madagascar.sfshplanemis2","text":"sfshplanemis2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshplanemis2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshplanemis2. See ?m8r for examples.\n\nRSF Documentation\n\nsfshplanemis2(1)              Madagascar Manuals              sfshplanemis2(1)\n\nNAME\n       sfshplanemis2  -  Missing  data  interpolation  in 2-D using plane-wave\n       shaping regularization.\n\nSYNOPSIS\n       sfshplanemis2 < in.rsf > out.rsf  dip=dip.rsf  mask=mask.rsf  niter=100\n       order=1 ns=1 eps=0.01\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns =1      smoothing radius\n       int    order =1      accuracy order\nSOURCE\n       user/pwd/Mshplanemis2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfshplanemis2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshplanemis3-Tuple{}","page":"Home","title":"Madagascar.sfshplanemis3","text":"sfshplanemis3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshplanemis3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshplanemis3. See ?m8r for examples.\n\nRSF Documentation\n\nsfshplanemis3(1)              Madagascar Manuals              sfshplanemis3(1)\n\nNAME\n       sfshplanemis3  -  Missing  data  interpolation  in 3-D using plane-wave\n       shaping regularization.\n\nSYNOPSIS\n       sfshplanemis3 < in.rsf > out.rsf  dip=dip.rsf  mask=mask.rsf  niter=100\n       order1=1 order2=1 ns1=1 ns2=1 eps=0.01\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns1 =1 ®\n       int    ns2 =1      smoothing radius\n       int    order1 =1 ®\n       int    order2 =1      accuracy order\nSOURCE\n       user/pwd/Mshplanemis3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfshplanemis3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshpwstack-Tuple{}","page":"Home","title":"Madagascar.sfshpwstack","text":"sfshpwstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshpwstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshpwstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfshpwstack(1)                Madagascar Manuals                sfshpwstack(1)\n\nNAME\n       sfshpwstack - Recursive stacking by plane-wave construction.\n\nSYNOPSIS\n       sfshpwstack  <  cmp.rsf  velocity=velocity.rsf  > stack.rsf dip=dip.rsf\n       offset=offset.rsf half=y slowness=n verb=n eps=0.01 velocity=0.0f nmo=n\n       order=1  mode=1  h0=0. eps1=0.01 jump=1 niter=10 restart=niter tol=1e-5\n       flo= fhi= nplo=6 nphi=6\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       float  eps1 =0.01      stretch regularization\n       float  fhi =      High frequency in band, default is Nyquist\n       float  flo =      Low frequency in band, default is 0\n       float  h0 =0.       reference offset\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       int    jump =1      subsampling\n       int    mode  =1      1: predict backward, 2: predict forward then back‐\n              ward\n       int    niter =10      number of iterations\n       bool   nmo =n [y/n]     if y, apply constant velocity NMO\n       int    nphi =6      number of poles for high cutoff\n       int    nplo =6      number of poles for low cutoff\n       string offset =      auxiliary input file name\n       int    order =1      accuracy order\n       int    restart =niter      GMRES memory\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       float  tol =1e-5      GMRES tolerance\n       float  velocity =0.0f      constant velocity\n       bool   verb =n [y/n]\nSOURCE\n       user/kregimbal/Mshpwstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfshpwstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshstack-Tuple{}","page":"Home","title":"Madagascar.sfshstack","text":"sfshstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfshstack(1)                  Madagascar Manuals                  sfshstack(1)\n\nNAME\n       sfshstack - Shaping stack.\n\nSYNOPSIS\n       sfshstack < cmp.rsf velocity=velocity.rsf > stack.rsf offset=offset.rsf\n       half=y slowness=n h0=0. eps=0.01 jump=1 niter=10 restart=niter tol=1e-5\n       flo= fhi= nplo=6 nphi=6\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       float  fhi =      High frequency in band, default is Nyquist\n       float  flo =      Low frequency in band, default is 0\n       float  h0 =0.       reference offset\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       int    jump =1      subsampling\n       int    niter =10      number of iterations\n       int    nphi =6      number of poles for high cutoff\n       int    nplo =6      number of poles for low cutoff\n       string offset =      auxiliary input file name\n       int    restart =niter      GMRES memory\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       float  tol =1e-5      GMRES tolerance\n       file   velocity =      auxiliary input file name\nSOURCE\n       user/kregimbal/Mshstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfshstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshuffle-Tuple{}","page":"Home","title":"Madagascar.sfshuffle","text":"sfshuffle(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshuffle on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshuffle. See ?m8r for examples.\n\nRSF Documentation\n\nsfshuffle(1)                  Madagascar Manuals                  sfshuffle(1)\n\nNAME\n       sfshuffle - shuffle the data\n\nSYNOPSIS\n       sfshuffle < pi.rsf > po.rsf axis=2 seed=n2 inv=n\n\nPARAMETERS\n       int    axis =2 ®\n       bool   inv =n [y/n]\n       int    seed =n2 ®\nUSED IN\n       chen/test/fpca\nSOURCE\n       user/chen/Mshuffle.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfshuffle(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshuffle2-Tuple{}","page":"Home","title":"Madagascar.sfshuffle2","text":"sfshuffle2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshuffle2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshuffle2. See ?m8r for examples.\n\nRSF Documentation\n\nsfshuffle2(1)                 Madagascar Manuals                 sfshuffle2(1)\n\nNAME\n       sfshuffle2 - Shuffling an array\n\nSYNOPSIS\n       sfshuffle2 < bshuffle.rsf > ashuffle.rsf iteration=1 seed=2012\n\nPARAMETERS\n       int    iteration =1 ®\n       int    seed =2012 ®\nSOURCE\n       user/parvaneh/Mshuffle2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshuffle2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfshuffle3-Tuple{}","page":"Home","title":"Madagascar.sfshuffle3","text":"sfshuffle3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfshuffle3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfshuffle3. See ?m8r for examples.\n\nRSF Documentation\n\nsfshuffle3(1)                 Madagascar Manuals                 sfshuffle3(1)\n\nNAME\n       sfshuffle3 - shuffle the data\n\nSYNOPSIS\n       sfshuffle3 < pi.rsf pi2=pi2.rsf > po.rsf po2=po2.rsf axis=2 seed=\n\nPARAMETERS\n       int    axis =2 ®\n       file   pi2 =      auxiliary input file name\n       file   po2 =      auxiliary output file name\n       int    seed =      inv=par.bool(\"inv\", False)\nSOURCE\n       user/fomels/Mshuffle3.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfshuffle3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsic-Tuple{}","page":"Home","title":"Madagascar.sfsic","text":"sfsic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsic. See ?m8r for examples.\n\nRSF Documentation\n\nsfsic(1)                      Madagascar Manuals                      sfsic(1)\n\nNAME\n       sfsic - Local slant stacks I.C.\n\nSYNOPSIS\n       sfsic < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nbuf=1 sig=1.0 na=1\n       oa=0.0 da=1.0 nl=1 dl=1. ol=0.\n\nPARAMETERS\n       float  da =1.0 ®\n       float  dl =1.  ®\n       int    na =1 ®\n       int    nbuf =1      buffer size\n       int    nl =1 ®\n       float  oa =0.0 ®\n       float  ol =0.  ®\n       int    ompchunk =1      OpenMP data chunk size\n       float  sig =1.0 ®\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Msic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsic3d-Tuple{}","page":"Home","title":"Madagascar.sfsic3d","text":"sfsic3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsic3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsic3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfsic3d(1)                    Madagascar Manuals                    sfsic3d(1)\n\nNAME\n       sfsic3d - Local slant stacks I.C.\n\nSYNOPSIS\n       sfsic3d  <  Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n stack=n sig=1.0\n       nanga=1 oanga=0.0 danga=1.0  nangb=1  oangb=0.0  dangb=1.0  nl=1  dl=1.\n       ol=0.\n\nPARAMETERS\n       float  danga =1.0 ®\n       float  dangb =1.0 ®\n       float  dl =1.  ®\n       int    nanga =1 ®\n       int    nangb =1 ®\n       int    nl =1 ®\n       float  oanga =0.0 ®\n       float  oangb =0.0 ®\n       float  ol =0.  ®\n       int    ompchunk =1      OpenMP data chunk size\n       float  sig =1.0 ®\n       bool   stack =n [y/n]\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\nSOURCE\n       user/psava/Msic3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsic3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsigmoid-Tuple{}","page":"Home","title":"Madagascar.sfsigmoid","text":"sfsigmoid(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsigmoid on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsigmoid. See ?m8r for examples.\n\nRSF Documentation\n\nsfsigmoid(1)                  Madagascar Manuals                  sfsigmoid(1)\n\nNAME\n       sfsigmoid - 2-D synthetic model from J.F.Claerbout.\n\nSYNOPSIS\n       sfsigmoid  >  mod.rsf  n1=400  n2=100  large=5*n1  o1=0. o2=0. d1=0.004\n       d2=0.032 reflectivity=y taper=y\n\nCOMMENTS\n       October 2014 program of the month: http://ahay.org/blog/2014/10/08/pro‐\n       gram-of-the-month-sfsigmoid/\n\nPARAMETERS\n       float  d1 =0.004 ®\n       float  d2 =0.032      sampling\n       int    large =5*n1      reflectivity series\n       int    n1 =400      vertical axis\n       int    n2 =100      horizontal axis\n       float  o1 =0.  ®\n       float  o2 =0.       origin\n       bool   reflectivity =y [y/n]     if output reflectivity (otherwise out‐\n              put impedance model)\n       bool   taper =y [y/n]     if taper the edges\nUSED IN\n       bei/dwnc/sigmoid\n       bei/krch/sep73\nSOURCE\n       user/gee/Msigmoid.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsigmoid(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsignal-Tuple{}","page":"Home","title":"Madagascar.sfsignal","text":"sfsignal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsignal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsignal. See ?m8r for examples.\n\nRSF Documentation\n\nsfsignal(1)                   Madagascar Manuals                   sfsignal(1)\n\nNAME\n       sfsignal - Generate signal series\n\nSYNOPSIS\n       sfsignal > out.rsf para= n=100 o=0.0 d=0.004 waveform=\n\nPARAMETERS\n       float  d =0.004      interval\n       int    n =100      length\n       float  o =0.0      original\n       floats para =       [4]\n       string waveform =      waveform: ricker,sinc,harmonic,randn,rand\nUSED IN\n       chen/test/wavmod\nSOURCE\n       user/chen/Msignal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsignal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsignoi-Tuple{}","page":"Home","title":"Madagascar.sfsignoi","text":"sfsignoi(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsignoi on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsignoi. See ?m8r for examples.\n\nRSF Documentation\n\nsfsignoi(1)                   Madagascar Manuals                   sfsignoi(1)\n\nNAME\n       sfsignoi - Signal and noise separation (N-dimensional).\n\nSYNOPSIS\n       sfsignoi  < dat.rsf > signoi.rsf sfilt=spef.rsf nfilt=npef.rsf epsilon=\n       niter=20 spitz=n prec=n verb=n slag= nlag=\n\nPARAMETERS\n       float  epsilon =      regularization parameter\n       file   nfilt =      auxiliary input file name\n       int    niter =20      number of iterations\n       string nlag = ®\n       bool   prec =n [y/n]     if use preconditioning with Spitz\n       file   sfilt =      auxiliary input file name\n       string slag = ®\n       bool   spitz =n [y/n]     if use Spitz method\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/gee/Msignoi.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsignoi(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimenv-Tuple{}","page":"Home","title":"Madagascar.sfsimenv","text":"sfsimenv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimenv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimenv. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimenv(1)                   Madagascar Manuals                   sfsimenv(1)\n\nNAME\n       sfsimenv - Rotate phase and compute similarity with enevelope.\n\nSYNOPSIS\n       sfsimenv  <  inp.rsf  > sim.rsf na=360 da=1.0 a0=-180. order=100 ref=1.\n       verb=y inv=y niter=20 rect=3\n\nPARAMETERS\n       float  a0 =-180.       first angle\n       float  da =1.0      angle increment\n       bool   inv =y [y/n]     inverse similarity\n       int    na =360      number of angles\n       int    niter =20      maximum number of iterations\n       int    order =100      Hilbert transformer order\n       int    rect =3      smoothing radius\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Msimenv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsimenv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimidenoise-Tuple{}","page":"Home","title":"Madagascar.sfsimidenoise","text":"sfsimidenoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimidenoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimidenoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimidenoise(1)              Madagascar Manuals              sfsimidenoise(1)\n\nNAME\n       sfsimidenoise - Random noise attenuation using local similarity\n\nSYNOPSIS\n       sfsimidenoise < in.rsf > out.rsf similarity=simi.rsf thr=\n\nPARAMETERS\n       file   similarity =      auxiliary input file name\n       float  thr =      thresholding level\nSOURCE\n       user/chenyk/Msimidenoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsimidenoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimidenoise1-Tuple{}","page":"Home","title":"Madagascar.sfsimidenoise1","text":"sfsimidenoise1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimidenoise1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimidenoise1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimidenoise1(1)             Madagascar Manuals             sfsimidenoise1(1)\n\nNAME\n       sfsimidenoise1  - Random noise attenuation using local similarity (dif‐\n       ferent weighting approach)\n\nSYNOPSIS\n       sfsimidenoise1 < in.rsf > out.rsf similarity=simi.rsf s1= s2=\n\nCOMMENTS\n       The weighting function is defined as W(s) =  1                 if  s>s2\n             = (s-s1)/(s2-s1)  if s1<=s<=s2       = 0                if s<s1\n\nPARAMETERS\n       float  s1 =      thresholding level 1\n       float  s2 =      thresholding level 2\n       file   similarity =      auxiliary input file name\nSOURCE\n       user/chenyk/Msimidenoise1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfsimidenoise1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimilarity-Tuple{}","page":"Home","title":"Madagascar.sfsimilarity","text":"sfsimilarity(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimilarity on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimilarity. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimilarity(1)               Madagascar Manuals               sfsimilarity(1)\n\nNAME\n       sfsimilarity - Local similarity measure between two datasets.\n\nSYNOPSIS\n       sfsimilarity   <  in.rsf  >  out.rsf  other=other.rsf  verb=y  niter=20\n       eps=0.0f rect#=(1,1,...)\n\nCOMMENTS\n       September        2015        program        of        the        month:\n       http://ahay.org/blog/2015/09/14/program-of-the-month-sfsimilarity/\n\nPARAMETERS\n       float  eps =0.0f      regularization\n       int    niter =20      maximum number of iterations\n       file   other =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Msimilarity.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsimilarity(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimilarity2-Tuple{}","page":"Home","title":"Madagascar.sfsimilarity2","text":"sfsimilarity2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimilarity2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimilarity2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimilarity2(1)              Madagascar Manuals              sfsimilarity2(1)\n\nNAME\n       sfsimilarity2 - Local similarity measure between two datasets (alterna‐\n       tive form).\n\nSYNOPSIS\n       sfsimilarity2  <  in.rsf  >  out.rsf  other=other.rsf  verb=y  niter=20\n       rect#=(1,1,...)\n\nPARAMETERS\n       int    niter =20      maximum number of iterations\n       file   other =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   verb =y [y/n]     verbosity\nSOURCE\n       user/fomels/Msimilarity2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsimilarity2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimivscan-Tuple{}","page":"Home","title":"Madagascar.sfsimivscan","text":"sfsimivscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimivscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimivscan. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimivscan(1)                Madagascar Manuals                sfsimivscan(1)\n\nNAME\n       sfsimivscan - Velocity analysis using similarity-weighted semblance.\n\nSYNOPSIS\n       sfsimivscan   <   cmp.rsf   >  scan.rsf  ref=ref.rsf  offset=offset.rsf\n       mask=msk.rsf grad=grd.rsf  semblance=n  diffsemblance=n  avosemblance=n\n       nb=2  weight=y  half=y  smax=2.0 ns=1 slowness=n squared=n v1= extend=4\n       mute=12 str=0.5 thr=0.3 eps=0.01 niter=10 v0= dv= nv= v1= type=\n\nPARAMETERS\n       bool   avosemblance =n [y/n]     if y, compute AVO-friendly semblance\n       bool   diffsemblance =n [y/n]     if y, compute differential semblance\n       float  dv =      step in velocity\n       float  eps =0.01 ®\n       int    extend =4      trace extension\n       string grad =      auxiliary input file name\n       bool   half =y [y/n]     if y, the second axis is  half-offset  instead\n              of full offset\n       string mask =      optional mask file (auxiliary input file name)\n       int    mute =12      mute zone\n       int    nb =2      semblance averaging\n       int    niter =10 ®\n       int    ns =1      number of heterogeneity scans\n       int    nv =      number of scanned velocities\n       string offset =      auxiliary input file name\n       file   ref =      auxiliary input file name\n       bool   semblance =n [y/n]     if y, compute semblance; if n, stack\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       float  smax =2.0      maximum heterogeneity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  str =0.5      maximum stretch allowed\n       float  thr =0.3 ®\n       string type =      type of semblance (avo,diff,sembl,power,weighted)\n       float  v0 =      first scanned velocity\n       float  v1 =      reference velocity\n       bool   weight =y [y/n]     if y, apply pseudo-unitary weighting\nSOURCE\n       system/seismic/Msimivscan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsimivscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsimpostkirch-Tuple{}","page":"Home","title":"Madagascar.sfsimpostkirch","text":"sfsimpostkirch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsimpostkirch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsimpostkirch. See ?m8r for examples.\n\nRSF Documentation\n\nsfsimpostkirch(1)             Madagascar Manuals             sfsimpostkirch(1)\n\nNAME\n       sfsimpostkirch  -  2-D simplest-form post-stack Kirchhoff time modeling\n       and migration.\n\nSYNOPSIS\n       sfsimpostkirch < in.rsf > out.rsf vel=vel.rsf adj=y aa=n sw=0 v0=\n\nCOMMENTS\n       Suppose the input_image & output_data or input_data & output_image have\n       the same dimensions, samplings.  The dottest has been past.\n\nPARAMETERS\n       bool   aa =n [y/n]     yes: apply reciprocal antialiaising operator\n       bool   adj =y [y/n]     yes: migration, no: modeling\n       int    sw =0      if > 0, select a branch of the antialiasing operation\n       float  v0 =      constant velocity (if no velocity=)\n       string vel =      velocity file (auxiliary input file name)\nSOURCE\n       user/chenyk/Msimpostkirch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfsimpostkirch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsin-Tuple{}","page":"Home","title":"Madagascar.sfsin","text":"sfsin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsin. See ?m8r for examples.\n\nRSF Documentation\n\nsfsin(1)                      Madagascar Manuals                      sfsin(1)\n\nNAME\n       sfsin - Simple operations with complex sinusoids\n\nSYNOPSIS\n       sfsin  <  in.rsf  >  out.rsf  root=root.rsf  mask=mask.rsf adj=n verb=n\n       niter=0 rect=1 perc=50. fact=0.5 eps=1./n1 oper= type=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  eps =1./n1      scaling for shaping inversion\n       float  fact =0.5      factor for thresholding  (used  when  oper=t  and\n              niter > 0)\n       string mask  =       missing  data  interpolation (auxiliary input file\n              name)\n       int    niter =0      number of iterations\n       string oper =      operation to perform\n       float  perc =50.       percentage for thresholding  (used  when  oper=t\n              and niter > 0)\n       int    rect =1      smoothing radius (for oper=s)\n       file   root =      auxiliary input file name\n       string type =      [haar,linear,biortho] type of the seislet transform\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       system/seismic/Msin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsinc-Tuple{}","page":"Home","title":"Madagascar.sfsinc","text":"sfsinc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsinc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsinc. See ?m8r for examples.\n\nRSF Documentation\n\nsfsinc(1)                     Madagascar Manuals                     sfsinc(1)\n\nNAME\n       sfsinc - 1-D sinc interpolation.\n\nSYNOPSIS\n       sfsinc < in.rsf > out.rsf pattern=pattern.rsf\n\nCOMMENTS\n       Specify either n1= o1= d1= or pattern=\n\nPARAMETERS\n       string pattern =      auxiliary input file name\nSOURCE\n       su/main/sinc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsinc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsint2-Tuple{}","page":"Home","title":"Madagascar.sfsint2","text":"sfsint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsint2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsint2(1)                    Madagascar Manuals                    sfsint2(1)\n\nNAME\n       sfsint2 - Interpolation for sparse data in 2D, e.g., well logs\n\nSYNOPSIS\n       sfsint2  < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100 order=1\n       ns=1 eps=0.01\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns =1      smoothing radius\n       int    order =1      accuracy order\nSOURCE\n       user/chenyk/Msint2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsint3-Tuple{}","page":"Home","title":"Madagascar.sfsint3","text":"sfsint3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsint3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsint3. See ?m8r for examples.\n\nRSF Documentation\n\nsfsint3(1)                    Madagascar Manuals                    sfsint3(1)\n\nNAME\n       sfsint3 - Interpolation for sparse data in 3D, e.g., well logs\n\nSYNOPSIS\n       sfsint3 < in.rsf > out.rsf dip=dip.rsf mask=mask.rsf niter=100 order1=1\n       order2=1 ns1=1 ns2=1 eps=0.01\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       string mask =      auxiliary input file name\n       int    niter =100      number of iterations\n       int    ns1 =1 ®\n       int    ns2 =1      smoothing radius\n       int    order1 =1 ®\n       int    order2 =1      accuracy order\nSOURCE\n       user/chenyk/Msint3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsint3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsizes-Tuple{}","page":"Home","title":"Madagascar.sfsizes","text":"sfsizes(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsizes on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsizes. See ?m8r for examples.\n\nRSF Documentation\n\nsfsizes(1)                    Madagascar Manuals                    sfsizes(1)\n\nNAME\n       sfsizes - Display the size of RSF files.\n\nSYNOPSIS\n       sfsizes files=y human=n su=n file1.rsf file2.rsf ...\n\nCOMMENTS\n       Prints  the element size, number of elements, and number of bytes for a\n       list of RSF files.  Non-RSF files are ignored.\n\nPARAMETERS\n       bool   files =y [y/n]     If y, print size of each file.  If  n,  print\n              only total.\n       bool   human  =n  [y/n]     If y, print human-readable file size. If n,\n              print byte count.\n       bool   su =n [y/n]     Same for Seismic Unix\nSOURCE\n       user/jennings/Msizes.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfsizes\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsizes(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfslant-Tuple{}","page":"Home","title":"Madagascar.sfslant","text":"sfslant(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfslant on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfslant. See ?m8r for examples.\n\nRSF Documentation\n\nsfslant(1)                    Madagascar Manuals                    sfslant(1)\n\nNAME\n       sfslant - Time-space-domain Radon transform (slant stack)\n\nSYNOPSIS\n       sfslant  <  in.rsf > out.rsf verb=n adj=n rho=y anti=1. np= dp= p0= x0=\n       dx= nx= p1=0.\n\nCOMMENTS\n       April 2015 program of the  month:  http://ahay.org/blog/2015/04/21/pro‐\n       gram-of-the-month-sfslant/\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  anti =1.       antialiasing\n       float  dp =      p sampling (if adj=y)\n       float  dx =      offset sampling\n       int    np =      number of p values (if adj=y)\n       int    nx =      number of offsets\n       float  p0 =      p origin (if adj=y)\n       float  p1 =0.       reference slope\n       bool   rho =y [y/n]     rho filtering\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =      offset origin\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       system/seismic/Mslant.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfslant(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfslice-Tuple{}","page":"Home","title":"Madagascar.sfslice","text":"sfslice(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfslice on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfslice. See ?m8r for examples.\n\nRSF Documentation\n\nsfslice(1)                    Madagascar Manuals                    sfslice(1)\n\nNAME\n       sfslice - Extract a slice using picked surface (usually from a stack or\n       a semblance).\n\nSYNOPSIS\n       sfslice < in.rsf pick=pick.rsf > out.rsf\n\nCOMMENTS\n       See also: sfpick.\n\n       June 2019 program of  the  month:  http://ahay.org/blog/2019/06/12/pro‐\n       gram-of-the-month-sfslice/\n\nPARAMETERS\n       file   pick =      auxiliary input file name\nUSED IN\n       bei/vela/vscan\nSOURCE\n       system/generic/Mslice.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfslice(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfslopescan-Tuple{}","page":"Home","title":"Madagascar.sfslopescan","text":"sfslopescan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfslopescan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfslopescan. See ?m8r for examples.\n\nRSF Documentation\n\nsfslopescan(1)                Madagascar Manuals                sfslopescan(1)\n\nNAME\n       sfslopescan - slope estimation by stack scan\n\nSYNOPSIS\n       sfslopescan < in.rsf > out.rsf nw=5 rect1=2 rect2=2\n\nPARAMETERS\n       int    nw =5      window size is 2*nw+1\n       int    rect1 =2      window size on the 1st dimension\n       int    rect2 =2      window size on the 2nd dimension\nSOURCE\n       user/chen/Mslopescan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfslopescan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfslschain2d-Tuple{}","page":"Home","title":"Madagascar.sfslschain2d","text":"sfslschain2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfslschain2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfslschain2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfslschain2d(1)               Madagascar Manuals               sfslschain2d(1)\n\nNAME\n       sfslschain2d  -  Separable  LS  -  Find a symmetric chain of 2D-Fourier\n       weighting and scaling\n\nSYNOPSIS\n       sfslschain2d  <  src.rsf   >   wht.rsf   target=tgt.rsf   init_w=w0.rsf\n       init_wf=wf0.rsf fweight=fwht.rsf match=mch.rsf niter=0 liter=50 rect1=1\n       rect2=1 frect1=1 frect2=1\n\nPARAMETERS\n       int    frect1 =1      smoothing in frequency dim1\n       int    frect2 =1      smoothing in frequency dim2\n       file   fweight =      auxiliary output file name\n       file   init_w =      auxiliary input file name\n       file   init_wf =      auxiliary input file name\n       int    liter =50      number of linear iterations\n       file   match =      auxiliary output file name\n       int    niter =0      number of iterations\n       int    rect1 =1      smoothing in time dim1\n       int    rect2 =1      smoothing in time dim2\n       file   target =      auxiliary input file name\nSOURCE\n       user/fomels/Mslschain2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfslschain2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmiss-Tuple{}","page":"Home","title":"Madagascar.sfsmiss","text":"sfsmiss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmiss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmiss. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmiss(1)                    Madagascar Manuals                    sfsmiss(1)\n\nNAME\n       sfsmiss - Multi-dimensional missing data interpolation using shaping.\n\nSYNOPSIS\n       sfsmiss  <  in.rsf filt=filt.rsf > out.rsf lag=lag.rsf mask=mask.rsf n=\n       niter=100 eps=1.0 rect=1 exact=n padin=0 padout=0\n\nPARAMETERS\n       float  eps =1.0      regularization\n       bool   exact =n [y/n]     if keep the true values\n       file   filt =      auxiliary input file name\n       string lag =      optional input file with filter lags (auxiliary input\n              file name)\n       string mask  =       optional input mask file for known data (auxiliary\n              input file name)\n       ints   n =       [dim]\n       int    niter =100      number of iterations\n       int    padin =0      Pad beginning\n       int    padout =0      Pad end\n       int    rect =1      shaping radius\nSOURCE\n       user/gee/Msmiss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsmiss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmooth-Tuple{}","page":"Home","title":"Madagascar.sfsmooth","text":"sfsmooth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmooth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmooth. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmooth(1)                   Madagascar Manuals                   sfsmooth(1)\n\nNAME\n       sfsmooth - Multi-dimensional triangle smoothing.\n\nSYNOPSIS\n       sfsmooth   <   in.rsf   >   out.rsf   repeat=1   adj=n  rect#=(1,1,...)\n       diff#=(n,n,...)\n\nCOMMENTS\n       January 2012 program of the month: http://ahay.org/blog/2012/01/01/pro‐\n       gram-of-the-month-sfsmooth/\n\nPARAMETERS\n       bool   adj =n [y/n]     run in the adjoint mode\n       bool   diff# =(n,n,...)  [y/n]     differentiation on #-th axis\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       int    repeat =1      repeat filtering several times\nUSED IN\n       bei/dpmv/matt\n       bei/dpmv/yalei\n       bei/dwnc/sigmoid\n       bei/dwnc/vofz\n       bei/fdm/kjartjac\n       bei/fld/synmarine\n       bei/ft1/autocor\n       bei/ft1/ft2d\n       bei/ft1/plane4\n       bei/krch/sep73\n       bei/sg/denmark\n       cup/rna3d/real\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009VTIModeSeparation/separate3\n       3 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sfs‐\n       mooth.html\nSOURCE\n       system/generic/Msmooth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsmooth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothcur-Tuple{}","page":"Home","title":"Madagascar.sfsmoothcur","text":"sfsmoothcur(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothcur on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothcur. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothcur(1)                Madagascar Manuals                sfsmoothcur(1)\n\nNAME\n       sfsmoothcur - Convert input slope and time derivative\n\nSYNOPSIS\n       sfsmoothcur  <  DATA.rsf dipt=DIPT.rsf > MODEL.rsf dataout=DATA_OUT.rsf\n       eps=1.0 niter=100 rect#=(1,1,...)\n\nCOMMENTS\n       * to its curvature field using LS and shaping regularization *  applied\n       to causint_lop d = L m\n\n       Takes: rect1= rect2= ...\n\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       string dataout =      optionally, output predicted data (auxiliary out‐\n              put file name)\n       file   dipt =      auxiliary input file name\n       float  eps =1.0      dumping factor\n       int    niter =100      maximum number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\nSOURCE\n       user/lcasasan/Msmoothcur.c\nVERSION\n       4.2-git Mdix.c 5595 2010-03-21 16:54:14Z sfomel\n\nMadagascar                         JULY 2024                    sfsmoothcur(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothder-Tuple{}","page":"Home","title":"Madagascar.sfsmoothder","text":"sfsmoothder(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothder on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothder. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothder(1)                Madagascar Manuals                sfsmoothder(1)\n\nNAME\n       sfsmoothder - Smooth first derivative on the first axis.\n\nSYNOPSIS\n       sfsmoothder < in.rsf > der.rsf eps=0.2\n\nCOMMENTS\n       Applies D/(I + eps*D'D)\n\nPARAMETERS\n       float  eps =0.2      smoothness parameter\nSOURCE\n       system/generic/Msmoothder.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsmoothder(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothder1-Tuple{}","page":"Home","title":"Madagascar.sfsmoothder1","text":"sfsmoothder1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothder1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothder1. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothder1(1)               Madagascar Manuals               sfsmoothder1(1)\n\nNAME\n       sfsmoothder1  -  Convert  input  to its derivative using LS and shaping\n       regularization\n\nSYNOPSIS\n       sfsmoothder1 <  DATA.rsf  >  MODEL.rsf  dataout=DATA_OUT.rsf  niter=100\n       rect#=(1,1,...)\n\nCOMMENTS\n       * applied to causint_lop d = L m\n\n       Takes: rect1= rect2= ...\n\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       string dataout =      optionally, output predicted data (auxiliary out‐\n              put file name)\n       int    niter =100      maximum number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\nSOURCE\n       user/lcasasan/Msmoothder1.c\nVERSION\n       4.2-git Mdix.c 5595 2010-03-21 16:54:14Z sfomel\n\nMadagascar                         JULY 2024                   sfsmoothder1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothder2-Tuple{}","page":"Home","title":"Madagascar.sfsmoothder2","text":"sfsmoothder2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothder2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothder2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothder2(1)               Madagascar Manuals               sfsmoothder2(1)\n\nNAME\n       sfsmoothder2  -  Convert  input  to its derivative using LS and shaping\n       regularization\n\nSYNOPSIS\n       sfsmoothder2  <  DATA.rsf  >  MODEL.rsf  dataout=DATA_OUT.rsf   eps=1.0\n       niter=100 rect#=(1,1,...)\n\nCOMMENTS\n       * applied to causint_lop d = L m\n\n       Takes: rect1= rect2= ...\n\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       string dataout =      optionally, output predicted data (auxiliary out‐\n              put file name)\n       float  eps =1.0      dumping factor\n       int    niter =100      maximum number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\nSOURCE\n       user/lcasasan/Msmoothder2.c\nVERSION\n       4.2-git Mdix.c 5595 2010-03-21 16:54:14Z sfomel\n\nMadagascar                         JULY 2024                   sfsmoothder2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothderLS-Tuple{}","page":"Home","title":"Madagascar.sfsmoothderLS","text":"sfsmoothderLS(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothderLS on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothderLS. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothderLS(1)              Madagascar Manuals              sfsmoothderLS(1)\n\nNAME\n       sfsmoothderLS  -  Convert  input to its derivative using LS and shaping\n       regularization\n\nSYNOPSIS\n       sfsmoothderLS < DATA.rsf  >  MODEL.rsf  dataout=DATA_OUT.rsf  niter=100\n       rect#=(1,1,...)\n\nCOMMENTS\n       * applied to causint_lop d = L m\n\n       Takes: rect1= rect2= ...\n\n       rectN defines the size of the smoothing stencil in N-th dimension.\n\nPARAMETERS\n       string dataout =      optionally, output predicted data (auxiliary out‐\n              put file name)\n       int    niter =100      maximum number of iterations\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\nSOURCE\n       user/lcasasan/MsmoothderLS.c\nVERSION\n       4.2-git Mdix.c 5595 2010-03-21 16:54:14Z sfomel\n\nMadagascar                         JULY 2024                  sfsmoothderLS(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothderw-Tuple{}","page":"Home","title":"Madagascar.sfsmoothderw","text":"sfsmoothderw(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothderw on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothderw. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothderw(1)               Madagascar Manuals               sfsmoothderw(1)\n\nNAME\n       sfsmoothderw  -  Convert  input  to its derivative using LS and shaping\n       regularization\n\nSYNOPSIS\n       sfsmoothderw  <  data.rsf  >   modl.rsf   weight=weight.rsf   niter=100\n       rect#=(1,1,...)\n\nCOMMENTS\n       * applied to causint_lop\n\nPARAMETERS\n       int    niter =100      maximum number of iterations\n       string rect# =(1,1,...)       smoothing radius on #-th axis\n       string weight =      auxiliary input file name\nSOURCE\n       user/fomels/Msmoothderw.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsmoothderw(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothn-Tuple{}","page":"Home","title":"Madagascar.sfsmoothn","text":"sfsmoothn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothn. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothn(1)                  Madagascar Manuals                  sfsmoothn(1)\n\nNAME\n       sfsmoothn - N-D non-stationary smoothing (fixed version of sfnsmooth.)\n\nSYNOPSIS\n       sfsmoothn < in.rsf > out.rsf repeat=1 rect#= shift#=\n\nCOMMENTS\n       Note Fomel's Mnsmooth.c may contain bugs in user/fomel/ntriangle.c t[i]\n       -> t[o+i*d]; s[i]->s[o+i*d] in triple Example: chenyk/ortho_non/nsmooth\n\nPARAMETERS\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       int    repeat =1      repeat filtering several times\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\nSOURCE\n       user/chenyk/Msmoothn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsmoothn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothreg-Tuple{}","page":"Home","title":"Madagascar.sfsmoothreg","text":"sfsmoothreg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothreg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothreg. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothreg(1)                Madagascar Manuals                sfsmoothreg(1)\n\nNAME\n       sfsmoothreg - Smoothing in 1-D by simple regularization.\n\nSYNOPSIS\n       sfsmoothreg < in.rsf > smooth.rsf eps=1. repeat=1\n\nPARAMETERS\n       float  eps =1.       smoothness parameter\n       int    repeat =1      repeat smoothing\nSOURCE\n       user/fomels/Msmoothreg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsmoothreg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmoothreg2-Tuple{}","page":"Home","title":"Madagascar.sfsmoothreg2","text":"sfsmoothreg2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmoothreg2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmoothreg2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmoothreg2(1)               Madagascar Manuals               sfsmoothreg2(1)\n\nNAME\n       sfsmoothreg2 - Smoothing in 2-D by simple regularization.\n\nSYNOPSIS\n       sfsmoothreg2 < in.rsf > smooth.rsf eps=1. repeat=1\n\nPARAMETERS\n       float  eps =1.       smoothness parameter\n       int    repeat =1      repeat smoothing\nSOURCE\n       system/generic/Msmoothreg2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsmoothreg2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmopick-Tuple{}","page":"Home","title":"Madagascar.sfsmopick","text":"sfsmopick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmopick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmopick. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmopick(1)                  Madagascar Manuals                  sfsmopick(1)\n\nNAME\n       sfsmopick -\n\nSYNOPSIS\n       sfsmopick < Fin.rsf > Fou.rsf verb=n mode=0 nwin=1 ne=1 oe=0.0 de=+0.1\n\nCOMMENTS\n       smooth picker on the first dimension\n\nPARAMETERS\n       float  de =+0.1 ®\n       int    mode =0      smoothing mode\n       int    ne =1 ®\n       int    nwin =1      window size (mean & median)\n       float  oe =0.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Msmopick.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsmopick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmspray-Tuple{}","page":"Home","title":"Madagascar.sfsmspray","text":"sfsmspray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmspray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmspray. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmspray(1)                  Madagascar Manuals                  sfsmspray(1)\n\nNAME\n       sfsmspray - Smoothing by spraying\n\nSYNOPSIS\n       sfsmspray < inp.rsf > out.rsf adj=n ns=0 type=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    ns =0      smoothing radius\n       string type =      weight type (triangle, gauss)\nSOURCE\n       user/fomels/Msmspray.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsmspray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsmstack-Tuple{}","page":"Home","title":"Madagascar.sfsmstack","text":"sfsmstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsmstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsmstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfsmstack(1)                  Madagascar Manuals                  sfsmstack(1)\n\nNAME\n       sfsmstack  - Stack a dataset over the second dimensions by smart stack‐\n       ing.\n\nSYNOPSIS\n       sfsmstack < in.rsf > out.rsf s=1 l=0 ifwt=y esp=1e-10\n\nPARAMETERS\n       float  esp =1e-10 ®\n       bool   ifwt =y [y/n]\n       int    l =0      parameter for alpha-trimmed mean\n       int    s =1      exponent\nSOURCE\n       user/gchliu/Msmstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsmstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsnr-Tuple{}","page":"Home","title":"Madagascar.sfsnr","text":"sfsnr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsnr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsnr. See ?m8r for examples.\n\nRSF Documentation\n\nsfsnr(1)                      Madagascar Manuals                      sfsnr(1)\n\nNAME\n       sfsnr - Display dataset signal-noise-ratio.\n\nSYNOPSIS\n       sfsnr < in.rsf ntw1=1 ntw2=n2 nsw1=1 nsw2=n1 type=\n\nPARAMETERS\n       int    nsw1 =1      sample-window beginning position (default=1)\n       int    nsw2 =n1      sample-window end position (default=n1)\n       int    ntw1 =1      trace-window beginning position (default=1)\n       int    ntw2 =n2      trace-window end position (default=n2)\n       string type =      [stack] method type, the default is stack\nSOURCE\n       user/yliu/Msnr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsnr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsnr2-Tuple{}","page":"Home","title":"Madagascar.sfsnr2","text":"sfsnr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsnr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsnr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsnr2(1)                     Madagascar Manuals                     sfsnr2(1)\n\nNAME\n       sfsnr2 - Compute signal-noise-ratio.\n\nSYNOPSIS\n       sfsnr2 < signal.rsf noise=noise.rsf > snrf.rsf\n\nCOMMENTS\n       SNR=10 log10(sum(clean)/sum(noise))\n\n       August  2019 program of the month: http://ahay.org/blog/2019/08/10/pro‐\n       gram-of-the-month-sfsnr2/\n\nPARAMETERS\n       file   noise =      auxiliary input file name\nSOURCE\n       user/chenyk/Msnr2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsnr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsnr3-Tuple{}","page":"Home","title":"Madagascar.sfsnr3","text":"sfsnr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsnr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsnr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfsnr3(1)                     Madagascar Manuals                     sfsnr3(1)\n\nNAME\n       sfsnr3 - Compute signal-noise-ratio.\n\nSYNOPSIS\n       sfsnr3 < signal.rsf noise=noise.rsf > snrf.rsf\n\nCOMMENTS\n       SNR=10 log10(sum(clean)/sum(noise))\n\nPARAMETERS\n       file   noise =      auxiliary input file name\nSOURCE\n       user/chenyk/Msnr3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsnr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsnrcyk-Tuple{}","page":"Home","title":"Madagascar.sfsnrcyk","text":"sfsnrcyk(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsnrcyk on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsnrcyk. See ?m8r for examples.\n\nRSF Documentation\n\nsfsnrcyk(1)                   Madagascar Manuals                   sfsnrcyk(1)\n\nNAME\n       sfsnrcyk - Compute signal-noise-ratio.\n\nSYNOPSIS\n       sfsnrcyk < signal.rsf noisy=noise.rsf > snrf.rsf\n\nCOMMENTS\n       SNR=10 log10(sum(clean)/sum(noise))\n\nPARAMETERS\n       file   noisy =      auxiliary input file name\nSOURCE\n       user/chenyk/Msnrcyk.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsnrcyk(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsnrstack-Tuple{}","page":"Home","title":"Madagascar.sfsnrstack","text":"sfsnrstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsnrstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsnrstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfsnrstack(1)                 Madagascar Manuals                 sfsnrstack(1)\n\nNAME\n       sfsnrstack - Stack a dataset over the second dimensions by SNR weighted\n       method.\n\nSYNOPSIS\n       sfsnrstack < in.rsf > out.rsf w=50 sft=1 ee=1.0 esp=1.0\n\nPARAMETERS\n       float  ee =1.0 ®\n       float  esp =1.0 ®\n       float  sft =1      weight shift\n       int    w =50      sliding window size\nSOURCE\n       user/gchliu/Msnrstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsnrstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsoftclip-Tuple{}","page":"Home","title":"Madagascar.sfsoftclip","text":"sfsoftclip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsoftclip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsoftclip. See ?m8r for examples.\n\nRSF Documentation\n\nsfsoftclip(1)                 Madagascar Manuals                 sfsoftclip(1)\n\nNAME\n       sfsoftclip - Soft clip the data.\n\nSYNOPSIS\n       sfsoftclip  <  in.rsf  > out.rsf upper= lower= sharp=1.0/fmax(upper*up‐\n       per,lower*lower)\n\nCOMMENTS\n       Uses softplus function Performs lower clipping then upper  clipping  if\n       both specified\n\n       lower  clipping:  y  = output, x = input, k = sharpness, c = lower clip\n       value y = ln(1+exp(k*(x-c)))/k + c\n\n       upper clipping: y = output, x = input, k = sharpness, c  =  upper  clip\n       value y = -ln(1+exp(k*(c-x)))/k + c\n\nPARAMETERS\n       float  lower = ®\n       float  sharp =1.0/fmax(upper*upper,lower*lower) ®\n       float  upper = ®\nSOURCE\n       user/luke/Msoftclip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsoftclip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsort-Tuple{}","page":"Home","title":"Madagascar.sfsort","text":"sfsort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsort. See ?m8r for examples.\n\nRSF Documentation\n\nsfsort(1)                     Madagascar Manuals                     sfsort(1)\n\nNAME\n       sfsort - Sort a float/complex vector by absolute values.\n\nSYNOPSIS\n       sfsort < in.rsf > out.rsf memsize=sf_memsize() ascmode=n dim=dim\n\nCOMMENTS\n       Written by: Gilles Hennenfent & Henryk Modzelewski, UBC Created: Febru‐\n       ary 2006\n\n       January 2016 program of the month: http://ahay.org/blog/2016/01/16/pro‐\n       gram-of-the-month-sfsort/\n\nPARAMETERS\n       bool   ascmode =n [y/n]     y=ascending; n=descending\n       int    dim =dim      maximum dimension\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\nSOURCE\n       user/slim/Msort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsortdensity-Tuple{}","page":"Home","title":"Madagascar.sfsortdensity","text":"sfsortdensity(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsortdensity on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsortdensity. See ?m8r for examples.\n\nRSF Documentation\n\nsfsortdensity(1)              Madagascar Manuals              sfsortdensity(1)\n\nNAME\n       sfsortdensity - sort density\n\nSYNOPSIS\n       sfsortdensity < Fin.rsf > Fout.rsf verb=n thrsh=0.05\n\nPARAMETERS\n       float  thrsh =0.05      verbosity flag\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jyan/Msortdensity.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsortdensity(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsos-Tuple{}","page":"Home","title":"Madagascar.sfsos","text":"sfsos(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsos on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsos. See ?m8r for examples.\n\nRSF Documentation\n\nsfsos(1)                      Madagascar Manuals                      sfsos(1)\n\nNAME\n       sfsos - Second order statistics\n\nSYNOPSIS\n       sfsos < pin.rsf > pout.rsf mode=0\n\nPARAMETERS\n       int    mode  =0       0    autocorrelation  matrix      1    covariance\n              matrix\nSOURCE\n       user/chen/Msos.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsos(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsp-Tuple{}","page":"Home","title":"Madagascar.sfsp","text":"sfsp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsp. See ?m8r for examples.\n\nRSF Documentation\n\nsfsp(1)                       Madagascar Manuals                       sfsp(1)\n\nNAME\n       sfsp - 2-D Pseudo-spectral wave extrapolation\n\nSYNOPSIS\n       sfsp  >  out.rsf vel=vel.rsf < source.rsf opt=y dt= nt= isx= isz= nb=30\n       c=0.01 ax=5.0 az=5.0 factor=5.0/6.0\n\nPARAMETERS\n       float  ax =5.0      suppress HF parameter\n       float  az =5.0      suppress HF parameter\n       float  c =0.01      decaying parameter\n       float  dt = ®\n       float  factor =5.0/6.0      suppress HF parameter\n       int    isx = ®\n       int    isz = ®\n       int    nb =30 ®\n       int    nt = ®\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Msp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfsp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsparsify-Tuple{}","page":"Home","title":"Madagascar.sfsparsify","text":"sfsparsify(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsparsify on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsparsify. See ?m8r for examples.\n\nRSF Documentation\n\nsfsparsify(1)                 Madagascar Manuals                 sfsparsify(1)\n\nNAME\n       sfsparsify - Transforms regular 2-D array to sparse array\n\nSYNOPSIS\n       sfsparsify < in.rsf > out.rsf nonzero=n1*n2\n\nCOMMENTS\n       Input is int or float array Output is a float nonzero-by-3 array, where\n       nonzero=`<input.rsf sfattr want=nonzero | awk -F '= ' '{ print $2  }';`\n       column  0 holds the data values (converted from int to float, if neces‐\n       sary), column 1 holds coordinate values (i.e. o+i*d, not indices i) for\n       dimension  1 of input, and column 2 the coordinate values for dimension\n       2 of input\n\nPARAMETERS\n       int    nonzero =n1*n2      Number of nonzero elements in input\nSOURCE\n       user/ivlad/Msparsify.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsparsify(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspecfac-Tuple{}","page":"Home","title":"Madagascar.sfspecfac","text":"sfspecfac(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspecfac on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspecfac. See ?m8r for examples.\n\nRSF Documentation\n\nsfspecfac(1)                  Madagascar Manuals                  sfspecfac(1)\n\nNAME\n       sfspecfac  -  (MD) Spectral Factorization or (MD) Autocorrelation using\n       Helix Transform.\n\nSYNOPSIS\n       sfspecfac < in.rsf > out.rsf acfile=acfile.rsf\n\nCOMMENTS\n       (Maximum dimension is 3) $  Copyright (C) 2009 Stanford University $  $\n       This  program is free software; you can redistribute it and/or modify $\n       it under the terms of the GNU General Public License as published by  $\n       the  Free  Software  Foundation;  either version 2 of the License, or $\n       (at your option) any later version.  $ $  This program  is  distributed\n       in  the hope that it will be useful, $  but WITHOUT ANY WARRANTY; with‐\n       out even the implied warranty of $  MERCHANTABILITY or  FITNESS  FOR  A\n       PARTICULAR PURPOSE.  See the $  GNU General Public License for more de‐\n       tails.  $ $  You should have received a copy of the GNU General  Public\n       License  $  along with this program; if not, write to the Free Software\n       $  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307\n       USA\n\nPARAMETERS\n       file   acfile =      auxiliary output file name\nSOURCE\n       user/ridder/Mspecfac.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfspecfac(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspectra-Tuple{}","page":"Home","title":"Madagascar.sfspectra","text":"sfspectra(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspectra on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspectra. See ?m8r for examples.\n\nRSF Documentation\n\nsfspectra(1)                  Madagascar Manuals                  sfspectra(1)\n\nNAME\n       sfspectra - Frequency spectra.\n\nSYNOPSIS\n       sfspectra < in.rsf > out.rsf all=n opt=y\n\nCOMMENTS\n       March  2012  program of the month: http://ahay.org/blog/2012/03/18/pro‐\n       gram-of-the-month-sfspectra/\n\nPARAMETERS\n       bool   all =n [y/n]     if y, compute average spectrum for all traces\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\nUSED IN\n       bei/dwnc/sigmoid\n       bei/ft1/autocor\n       bei/krch/sep73\n       cup/rna2d/real\nSOURCE\n       system/generic/Mspectra.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfspectra(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspectra2-Tuple{}","page":"Home","title":"Madagascar.sfspectra2","text":"sfspectra2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspectra2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspectra2. See ?m8r for examples.\n\nRSF Documentation\n\nsfspectra2(1)                 Madagascar Manuals                 sfspectra2(1)\n\nNAME\n       sfspectra2 - Frequency spectra in 2-D.\n\nSYNOPSIS\n       sfspectra2 < in.rsf > out.rsf all=n\n\nPARAMETERS\n       bool   all =n [y/n]     if y, compute average spectrum for all traces\nSOURCE\n       system/generic/Mspectra2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfspectra2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspefcstep-Tuple{}","page":"Home","title":"Madagascar.sfspefcstep","text":"sfspefcstep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspefcstep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspefcstep. See ?m8r for examples.\n\nRSF Documentation\n\nsfspefcstep(1)                Madagascar Manuals                sfspefcstep(1)\n\nNAME\n       sfspefcstep - Streaming prediction-error filter with constant step.\n\nSYNOPSIS\n       sfspefcstep  <  inp.rsf  >  out.rsf  infil=infil.rsf  verb=n  na= ngp=0\n       lambda1= lambda2=0.0f\n\nPARAMETERS\n       string infil =      initial filter (auxiliary input file name)\n       float  lambda1 =      constant scale parameter in time axis\n       float  lambda2 =0.0f      constant scale parameter in space axis\n       int    na =      filter size\n       int    ngp =0      constant step\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mspefcstep.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfspefcstep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspefvstep-Tuple{}","page":"Home","title":"Madagascar.sfspefvstep","text":"sfspefvstep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspefvstep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspefvstep. See ?m8r for examples.\n\nRSF Documentation\n\nsfspefvstep(1)                Madagascar Manuals                sfspefvstep(1)\n\nNAME\n       sfspefvstep - Streaming prediction-error filter with variable step.\n\nSYNOPSIS\n       sfspefvstep  < inp.rsf > out.rsf infil=infil.rsf lag=lag.rsf verb=n na=\n       lambda1= lambda2=0.0f\n\nPARAMETERS\n       string infil =      initial filter (auxiliary input file name)\n       string lag =      variable step (auxiliary input file name)\n       float  lambda1 =      constant scale parameter in time axis\n       float  lambda2 =0.0f      constant scale parameter in space axis\n       int    na =      filter size\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mspefvstep.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfspefvstep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsphase-Tuple{}","page":"Home","title":"Madagascar.sfsphase","text":"sfsphase(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsphase on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsphase. See ?m8r for examples.\n\nRSF Documentation\n\nsfsphase(1)                   Madagascar Manuals                   sfsphase(1)\n\nNAME\n       sfsphase - Smooth estimate of instantaneous phase.\n\nSYNOPSIS\n       sfsphase < in.rsf > out.rsf niter=100 order=10 ref=1. rect#=(1,1,...)\n\nPARAMETERS\n       int    niter =100      number of iterations\n       int    order =10      Hilbert transformer order\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\nSOURCE\n       user/yliu/Msphase.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsphase(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspike-Tuple{}","page":"Home","title":"Madagascar.sfspike","text":"sfspike(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspike on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspike. See ?m8r for examples.\n\nRSF Documentation\n\nsfspike(1)                    Madagascar Manuals                    sfspike(1)\n\nNAME\n       sfspike - Generate simple data: spikes, boxes, planes, constants.\n\nSYNOPSIS\n       sfspike  <  in.rsf  >  spike.rsf  mag=  nsp=1 k#=[0,...] l#=[k1,k2,...]\n       p#=[0,...] n#=  o#=[0,0,...]  d#=[0.004,0.1,0.1,...]  label#=[Time,Dis‐\n       tance,Distance,...] unit#=[s,km,km,...] title=\n\nCOMMENTS\n       Spike positioning is given in samples and starts with 1.\n\nPARAMETERS\n       float  d# =[0.004,0.1,0.1,...]       sampling on #-th axis\n       ints   k# =[0,...]       spike starting position [nsp]\n       ints   l# =[k1,k2,...]       spike ending position [nsp]\n       string label# =[Time,Distance,Distance,...]       label on #-th axis\n       floats mag =      spike magnitudes [nsp]\n       int    n# =      size of #-th axis\n       int    nsp =1      Number of spikes\n       float  o# =[0,0,...]       origin on #-th axis\n       floats p# =[0,...]       spike inclination (in samples) [nsp]\n       string title =      title for plots\n       string unit# =[s,km,km,...]       unit on #-th axis\nUSED IN\n       bei/conj/causint\n       bei/dpmv/matt\n       bei/dpmv/yalei\n       bei/dwnc/phasemod\n       bei/dwnc/vofz\n       bei/fdm/kjartjac\n       bei/fdm/movies\n       bei/ft1/autocor\n       bei/ft1/ft2d\n       bei/ft1/hankel\n       bei/trimo/all\n       bei/trimo/mig\n       bei/trimo/mod\n       bei/trimo/veltran\n       bei/vela/stack\n       bei/vela/strat\n       bei/vela/vscan\n       carrot/test/modeling\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2007StereographicImagingCondition/flat4\n       26 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       spike.html\nSOURCE\n       system/main/spike.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfspike\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfspike(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspiral-Tuple{}","page":"Home","title":"Madagascar.sfspiral","text":"sfspiral(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspiral on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspiral. See ?m8r for examples.\n\nRSF Documentation\n\nsfspiral(1)                   Madagascar Manuals                   sfspiral(1)\n\nNAME\n       sfspiral - Spiral function\n\nSYNOPSIS\n       sfspiral  >  spiral.rsf  nx=500 ny=200 xmax=20. ymax=3. xmin=0. ymin=0.\n       dx=(xmax-xmin)/(nx-1)  dy=(ymax-ymin)/(ny-1)  xc=10.  yc=5.  eps=1.0e-6\n       v0=2.0 v1=2.0 r0=1.0 r1=0.4 b=0.1 fac=0.2 sp_r=1. sp_t=0.05\n\nPARAMETERS\n       float  b =0.1      exponential decay factor\n       float  dx =(xmax-xmin)/(nx-1) ®\n       float  dy =(ymax-ymin)/(ny-1) ®\n       float  eps =1.0e-6 ®\n       float  fac =0.2 ®\n       int    nx =500 ®\n       int    ny =200 ®\n       float  r0 =1.0 ®\n       float  r1 =0.4      paramters of original shape\n       float  sp_r =1.       speed in radius\n       float  sp_t =0.05      speed in angle\n       float  v0 =2.0 ®\n       float  v1 =2.0 ®\n       float  xc =10.  ®\n       float  xmax =20.  ®\n       float  xmin =0.  ®\n       float  yc =5.  ®\n       float  ymax =3.  ®\n       float  ymin =0.  ®\nSOURCE\n       user/kourkina/Mspiral.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfspiral(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspiralsort-Tuple{}","page":"Home","title":"Madagascar.sfspiralsort","text":"sfspiralsort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspiralsort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspiralsort. See ?m8r for examples.\n\nRSF Documentation\n\nsfspiralsort(1)               Madagascar Manuals               sfspiralsort(1)\n\nNAME\n       sfspiralsort  - Sort microseismic surface array recording traces with a\n       given epicenter along a spiral shape R = r0 + d(a-a0).\n\nSYNOPSIS\n       sfspiralsort   <   in.rsf   x=x_file.rsf   y=y_file.rsf    >    out.rsf\n       dist=dist_file.rsf  theta=theta_file.rsf  epi_x= epi_y= radius0=1.0 an‐\n       gle0=0.0 dr=\n\nPARAMETERS\n       float  angle0 =0.0      Starting angle of spiral.\n       file   dist =      auxiliary output file name\n       float  dr =      Spiral interval parameter.\n       float  epi_x =      referenced epicenter coordinate x.\n       float  epi_y =      referenced epicenter coordinate y.\n       float  radius0 =1.0      Starting radius of spiral.\n       file   theta =      auxiliary output file name\n       file   x =      auxiliary input file name\n       file   y =      auxiliary input file name\nSOURCE\n       user/yunzhi/Mspiralsort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfspiralsort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspitz-Tuple{}","page":"Home","title":"Madagascar.sfspitz","text":"sfspitz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspitz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspitz. See ?m8r for examples.\n\nRSF Documentation\n\nsfspitz(1)                    Madagascar Manuals                    sfspitz(1)\n\nNAME\n       sfspitz  - Missing data interpolation in 2-D using F-X Prediction Error\n       Filters\n\nSYNOPSIS\n       sfspitz < in.rsf > out.rsf order=3 ntraces=1 verb=n norm=y\n\nCOMMENTS\n       based on Seismic trace interpolation in the  F-X  domain  S.Spitz  Geo‐\n       physics 56, 785(1991).\n\nPARAMETERS\n       bool   norm =y [y/n]     normalization flag\n       int    ntraces =1      number of traces to be interpolated\n       int    order =3      linear PEF order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/lcasasan/Mspitz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfspitz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspitzbl-Tuple{}","page":"Home","title":"Madagascar.sfspitzbl","text":"sfspitzbl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspitzbl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspitzbl. See ?m8r for examples.\n\nRSF Documentation\n\nsfspitzbl(1)                  Madagascar Manuals                  sfspitzbl(1)\n\nNAME\n       sfspitzbl  - Missing data interpolation in 2-D using F-X Prediction Er‐\n       ror Filters\n\nSYNOPSIS\n       sfspitzbl < in.rsf > out.rsf order=3  ntraces=1  f1=0.0  f2=1.0  verb=n\n       norm=y\n\nCOMMENTS\n       based  on  Seismic  trace  interpolation in the F-X domain S.Spitz Geo‐\n       physics 56, 785(1991).  This implementation is for bandlimited [f1  f2]\n       signals\n\nPARAMETERS\n       float  f1 =0.0      lower frequency in band limited signal >= 0.0\n       float  f2  =1.0       higher  frequency  in  band limited signal <= 1.0\n              (normalized nyquist)\n       bool   norm =y [y/n]     normalization flag\n       int    ntraces =1      number of traces to be interpolated\n       int    order =3      linear PEF order\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/lcasasan/Mspitzbl.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfspitzbl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspitzblns-Tuple{}","page":"Home","title":"Madagascar.sfspitzblns","text":"sfspitzblns(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspitzblns on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspitzblns. See ?m8r for examples.\n\nRSF Documentation\n\nsfspitzblns(1)                Madagascar Manuals                sfspitzblns(1)\n\nNAME\n       sfspitzblns  -  Missing  data interpolation in 2-D using F-X Prediction\n       Error Filters\n\nSYNOPSIS\n       sfspitzblns < in.rsf > out.rsf w1=n1 w2=n2 k1=1 k2=1 order=3  ntraces=1\n       f1=0.0 f2=1.0 verb=n norm=y\n\nCOMMENTS\n       based  on  Seismic  trace  interpolation in the F-X domain S.Spitz Geo‐\n       physics 56, 785(1991).\n\n       Uses 2D Patching.\n\nPARAMETERS\n       float  f1 =0.0      lower frequency in band limited signal >= 0.0\n       float  f2 =1.0      higher frequency in  band  limited  signal  <=  1.0\n              (normalized nyquist)\n       int    k1 =1      number of patches along the first dimension\n       int    k2 =1      number of patches along the second dimension\n       bool   norm =y [y/n]     output normalization flag\n       int    ntraces =1      number of traces to be interpolated\n       int    order =3      linear PEF order\n       bool   verb =n [y/n]     verbosity flag\n       int    w1 =n1      lenght of patch along the first dimension\n       int    w2 =n2      lenght of patch along the second dimension\nSOURCE\n       user/lcasasan/Mspitzblns.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfspitzblns(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspitzns-Tuple{}","page":"Home","title":"Madagascar.sfspitzns","text":"sfspitzns(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspitzns on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspitzns. See ?m8r for examples.\n\nRSF Documentation\n\nsfspitzns(1)                  Madagascar Manuals                  sfspitzns(1)\n\nNAME\n       sfspitzns  - Missing data interpolation in 2-D using F-X Prediction Er‐\n       ror Filters\n\nSYNOPSIS\n       sfspitzns < in.rsf > out.rsf w1=n1 w2=n2 k1=1  k2=1  order=3  ntraces=1\n       verb=n norm=y\n\nCOMMENTS\n       based  on  Seismic  trace  interpolation in the F-X domain S.Spitz Geo‐\n       physics 56, 785(1991).\n\n       Uses 2D Patching.\n\nPARAMETERS\n       int    k1 =1      number of patches along the first dimension\n       int    k2 =1      number of patches along the second dimension\n       bool   norm =y [y/n]     output normalization flag\n       int    ntraces =1      number of traces to be interpolated\n       int    order =3      linear PEF order\n       bool   verb =n [y/n]     verbosity flag\n       int    w1 =n1      lenght of patch along the first dimension\n       int    w2 =n2      lenght of patch along the second dimension\nSOURCE\n       user/lcasasan/Mspitzns.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfspitzns(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspline-Tuple{}","page":"Home","title":"Madagascar.sfspline","text":"sfspline(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspline on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspline. See ?m8r for examples.\n\nRSF Documentation\n\nsfspline(1)                   Madagascar Manuals                   sfspline(1)\n\nNAME\n       sfspline - 1-D cubic spline interpolation.\n\nSYNOPSIS\n       sfspline < in.rsf > out.rsf pattern=pattern.rsf fp= sort=n\n\nCOMMENTS\n       Specify either n1= o1= d1= or pattern=\n\nPARAMETERS\n       floats fp =      end-point derivatives [2]\n       string pattern =      auxiliary input file name\n       bool   sort =n [y/n]     if y, the coordinates need sorting\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2009TTIModeSeparation/fold\nSOURCE\n       system/generic/Mspline.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfspline(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsplinebank-Tuple{}","page":"Home","title":"Madagascar.sfsplinebank","text":"sfsplinebank(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsplinebank on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsplinebank. See ?m8r for examples.\n\nRSF Documentation\n\nsfsplinebank(1)               Madagascar Manuals               sfsplinebank(1)\n\nNAME\n       sfsplinebank - Prepare a filter bank for B-spline plane wave filters\n\nSYNOPSIS\n       sfsplinebank  >  out.rsf nt=40 np= pmax=2. niter=20 eps=FLT_EPSILON nh=\n       lag=\n\nPARAMETERS\n       float  eps =FLT_EPSILON      tolerance\n       string lag = ®\n       string nh = ®\n       int    niter =20      number of iterations\n       int    np =      number of dips\n       int    nt =40      length of the fast axis\n       float  pmax =2.       maximum dip\nSOURCE\n       user/gee/Msplinebank.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsplinebank(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsplinefilter-Tuple{}","page":"Home","title":"Madagascar.sfsplinefilter","text":"sfsplinefilter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsplinefilter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsplinefilter. See ?m8r for examples.\n\nRSF Documentation\n\nsfsplinefilter(1)             Madagascar Manuals             sfsplinefilter(1)\n\nNAME\n       sfsplinefilter - Convert data to B-spline coefficients.\n\nSYNOPSIS\n       sfsplinefilter < in.rsf > out.rsf nw=\n\nPARAMETERS\n       int    nw =      filter size\nSOURCE\n       system/generic/Msplinefilter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfsplinefilter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsplineplane-Tuple{}","page":"Home","title":"Madagascar.sfsplineplane","text":"sfsplineplane(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsplineplane on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsplineplane. See ?m8r for examples.\n\nRSF Documentation\n\nsfsplineplane(1)              Madagascar Manuals              sfsplineplane(1)\n\nNAME\n       sfsplineplane - B-spline plane-wave filter\n\nSYNOPSIS\n       sfsplineplane > out.rsf lag=lag.rsf nw=2 p=0. niter=20 eps=SF_EPS\n\nPARAMETERS\n       float  eps =SF_EPS ®\n       string lag =      auxiliary output file name\n       int    niter =20      number of spectral decomposition iterations\n       int    nw =2      filter size\n       float  p =0.       plane-wave slope\nSOURCE\n       user/gee/Msplineplane.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsplineplane(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsplit-Tuple{}","page":"Home","title":"Madagascar.sfsplit","text":"sfsplit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsplit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsplit. See ?m8r for examples.\n\nRSF Documentation\n\nsfsplit(1)                    Madagascar Manuals                    sfsplit(1)\n\nNAME\n       sfsplit - Splits file into slices along the last dimension\n\nSYNOPSIS\n       sfsplit verb=n inp= outdir=(out_basenm+ivlad.ext nthick=1\n\nCOMMENTS\n       Usage:\n\n       sfsplit inp=file.rsf outdir=[file_split.rsf] nthick=[1]\n\n       Parameter nthick gives the maximum thickness of a slice. The last slice\n       may be thinner.\n\nPARAMETERS\n       string inp =      ifile.rsf\n       int    nthick =1      slice thickness\n       string outdir =(out_basenm+ivlad.ext ®\n       bool   verb =n [y/n]\nSOURCE\n       user/ivlad/Msplit.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsplit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfspray-Tuple{}","page":"Home","title":"Madagascar.sfspray","text":"sfspray(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfspray on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfspray. See ?m8r for examples.\n\nRSF Documentation\n\nsfspray(1)                    Madagascar Manuals                    sfspray(1)\n\nNAME\n       sfspray  - Extend a dataset by duplicating in the specified axis dimen‐\n       sion.\n\nSYNOPSIS\n       sfspray < in.rsf > out.rsf axis=2 n= d= o= label= unit=\n\nCOMMENTS\n       This operation is adjoint to sfstack.\n\nPARAMETERS\n       int    axis =2      which axis to spray\n       float  d =      Sampling of the newly created dimension\n       string label =      Label of the newly created dimension\n       int    n =      Size of the newly created dimension\n       float  o =      Origin of the newly created dimension\n       string unit =      Units of the newly created dimension\nUSED IN\n       bei/ft1/ft2d\n       bei/trimo/mod\n       bei/vela/strat\n       cup/rna3d/shot\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\n       data/alaska/line31-81-m8r\nSOURCE\n       system/main/spray.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfspray\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfspray(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsqsanaly-Tuple{}","page":"Home","title":"Madagascar.sfsqsanaly","text":"sfsqsanaly(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsqsanaly on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsqsanaly. See ?m8r for examples.\n\nRSF Documentation\n\nsfsqsanaly(1)                 Madagascar Manuals                 sfsqsanaly(1)\n\nNAME\n       sfsqsanaly - Analytic escape solutions in phase space for constant gra‐\n       dient of slowness squared\n\nSYNOPSIS\n       sfsqsanaly < in.rsf > out.rsf iq= gx= gz= sc= xc= zc=\n\nPARAMETERS\n       float  gx =      x-gradient of slowness^2\n       float  gz =      z-gradient of slowness^2\n       int    iq =      switch for escape variable 0=x, 1=a, 2=t, 3=z\n       float  sc =      slowness constant\n       float  xc =      x reference\n       float  zc =      z reference\nSOURCE\n       user/browaeys/Msqsanaly.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsqsanaly(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrbin3d-Tuple{}","page":"Home","title":"Madagascar.sfsrbin3d","text":"sfsrbin3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrbin3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrbin3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrbin3d(1)                  Madagascar Manuals                  sfsrbin3d(1)\n\nNAME\n       sfsrbin3d - 4-D data binning from traces at irregular coordinates\n\nSYNOPSIS\n       sfsrbin3d < Ftrc.rsf > Fbin.rsf key=Fkey.rsf verb=n n1= o1= d1= n2= o2=\n       d2= on1= oo1= od1= on2= oo2= od2=\n\nPARAMETERS\n       float  d1 = ®\n       float  d2 = ®\n       file   key =      auxiliary input file name\n       int    n1 = ®\n       int    n2 = ®\n       float  o1 = ®\n       float  o2 = ®\n       float  od1 = ®\n       float  od2 = ®\n       int    on1 = ®\n       int    on2 = ®\n       float  oo1 = ®\n       float  oo2 = ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Msrbin3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsrbin3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrmig3-Tuple{}","page":"Home","title":"Madagascar.sfsrmig3","text":"sfsrmig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrmig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrmig3. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrmig3(1)                   Madagascar Manuals                   sfsrmig3(1)\n\nNAME\n       sfsrmig3 - 3-D S/R migration with extended SSF\n\nSYNOPSIS\n       sfsrmig3  slo=Fs_s.rsf  sls=Fs_r.rsf  <  Fw_s.rsf rwf=Fw_r.rsf > Fi.rsf\n       cig=Fc.rsf ompchunk=1 ompnth=0 verb=y  eps=0.01  twoway=n  nrmax=1  dt‐\n       max=0.004  pmx=0  pmy=0  tmx=0 tmy=0 vpvs=1. hsym=n nht=1 oht=0 dht=0.1\n       nht=1 oht=0 dht=0.1 hsym=n nhh=1 ohh=0 dhh=0.1  nha=180  oha=0  dha=2.0\n       nhb=180 ohb=0 dhb=2.0 itype=\n\nPARAMETERS\n       file   cig =      auxiliary output file name\n       float  dha =2.0 ®\n       float  dhb =2.0 ®\n       float  dhh =0.1 ®\n       float  dht =0.1 ®\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       bool   hsym =n [y/n]\n       string itype =      imaging condition type\n                     o = zero lag (default)\n                     e = extended\n                     x = space-lags\n                     h = space-lags magnitude\n                     t = time-lag\n       int    nha =180 ®\n       int    nhb =180 ®\n       int    nhh =1 ®\n       int    nht =1 ®\n       int    nrmax =1      max number of refs\n       float  oha =0 ®\n       float  ohb =0 ®\n       float  ohh =0 ®\n       float  oht =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   rwf =      auxiliary input file name\n       file   slo =      auxiliary input file name\n       string sls =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =n [y/n]     two-way traveltime\n       bool   verb =y [y/n]     verbosity flag\n       float  vpvs =1.       Vp/Vs ratio\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       user/psava/Msrmig3.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfsrmig3\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsrmig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrmod3-Tuple{}","page":"Home","title":"Madagascar.sfsrmod3","text":"sfsrmod3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrmod3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrmod3. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrmod3(1)                   Madagascar Manuals                   sfsrmod3(1)\n\nNAME\n       sfsrmod3 - 3-D S/R modeling with extended split-step\n\nSYNOPSIS\n       sfsrmod3 slo=Fs_s.rsf sls=Fs_r.rsf < Fw_s.rsf > Fw_r.rsf ref=Fr.rsf om‐\n       pchunk=1 ompnth=0 verb=y eps=0.01 nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0\n       tmy=0 twoway=n\n\nPARAMETERS\n       float  dtmax =0.004      time error\n       float  eps =0.01      stability parameter\n       int    nrmax =1      maximum number of refs\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   ref =      auxiliary input file name\n       file   slo =      auxiliary input file name\n       string sls =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =n [y/n]     two-way traveltime\n       bool   verb =y [y/n]     verbosity flag\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       user/psava/Msrmod3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsrmod3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrmva-Tuple{}","page":"Home","title":"Madagascar.sfsrmva","text":"sfsrmva(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrmva on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrmva. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrmva(1)                    Madagascar Manuals                    sfsrmva(1)\n\nNAME\n       sfsrmva - 3-D S/R WEMVA with extended split-step\n\nSYNOPSIS\n       sfsrmva  slo=Bs.rsf  swf=Bw_s.rsf rwf=Bw_r.rsf < Pi.rsf > Ps.rsf verb=y\n       eps=0.01 adj=n twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0\n\nPARAMETERS\n       bool   adj =n [y/n]     y=ADJ scat; n=FWD scat\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       int    nrmax =1      max number of refs\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   rwf =      auxiliary input file name\n       file   slo =      auxiliary input file name\n       file   swf =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =y [y/n]     two-way traveltime\n       bool   verb =y [y/n]     verbosity flag\nUSED IN\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       system/seismic/Msrmva.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsrmva(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrseidel-Tuple{}","page":"Home","title":"Madagascar.sfsrseidel","text":"sfsrseidel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrseidel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrseidel. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrseidel(1)                 Madagascar Manuals                 sfsrseidel(1)\n\nNAME\n       sfsrseidel - Amplitude balancing of a 2-D amplitude map.\n\nSYNOPSIS\n       sfsrseidel  <  in.rsf  >  off.rsf  src=src.rsf  mid=mid.rsf rcv=rcv.rsf\n       so=so.rsf rv=rv.rsf niter=1\n\nPARAMETERS\n       file   mid =      auxiliary output file name\n       int    niter =1      number of iterations\n       file   rcv =      auxiliary output file name\n       file   rv =      auxiliary output file name\n       file   so =      auxiliary output file name\n       file   src =      auxiliary output file name\nSOURCE\n       system/seismic/Msrseidel.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfsrseidel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsrsyn-Tuple{}","page":"Home","title":"Madagascar.sfsrsyn","text":"sfsrsyn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsrsyn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsrsyn. See ?m8r for examples.\n\nRSF Documentation\n\nsfsrsyn(1)                    Madagascar Manuals                    sfsrsyn(1)\n\nNAME\n       sfsrsyn - Synthesize shot/receiver wavefields for 3-D SR migration\n\nSYNOPSIS\n       sfsrsyn < Fr.rsf wav=Fs.rsf swf=Fsw.rsf > Frw.rsf nx= dx= ox= ny=1 dy=1\n       oy=0\n\nPARAMETERS\n       float  dx =      x sampling\n       float  dy =1      y sampling\n       int    nx =      x samples\n       int    ny =1      y samples\n       float  ox =      x origin\n       float  oy =0      y origin\n       file   swf =      auxiliary output file name\n       file   wav =      auxiliary input file name\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       system/seismic/Msrsyn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsrsyn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfss-Tuple{}","page":"Home","title":"Madagascar.sfss","text":"sfss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfss. See ?m8r for examples.\n\nRSF Documentation\n\nsfss(1)                       Madagascar Manuals                       sfss(1)\n\nNAME\n       sfss - generate simultaneous sources grid from delay file\n\nSYNOPSIS\n       sfss < in.rsf > out.rsf n1=1000 o1=0.0 d1=0.004 l1= u1=\n\nPARAMETERS\n       float  d1 =0.004      original\n       string l1 =      label Time\n       int    n1 =1000      samples\n       float  o1 =0.0      sampling interval\n       string u1 =      unit s\nSOURCE\n       user/chen/Mss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfssblend-Tuple{}","page":"Home","title":"Madagascar.sfssblend","text":"sfssblend(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfssblend on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfssblend. See ?m8r for examples.\n\nRSF Documentation\n\nsfssblend(1)                  Madagascar Manuals                  sfssblend(1)\n\nNAME\n       sfssblend  -  blend  reciever  gathers (T-S-R) to generate simultaneous\n       data\n\nSYNOPSIS\n       sfssblend < in.rsf delay=delay.rsf > out.rsf jt=1\n\nPARAMETERS\n       file   delay =      auxiliary input file name\n       int    jt =1      subsampling nps\nSOURCE\n       user/chen/Mssblend.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfssblend(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsscrg-Tuple{}","page":"Home","title":"Madagascar.sfsscrg","text":"sfsscrg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsscrg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsscrg. See ?m8r for examples.\n\nRSF Documentation\n\nsfsscrg(1)                    Madagascar Manuals                    sfsscrg(1)\n\nNAME\n       sfsscrg - Extract common reciever gathers from simultaneous data\n\nSYNOPSIS\n       sfsscrg < in.rsf delay=delay.rsf > out.rsf jt=1 nt=n1\n\nPARAMETERS\n       file   delay =      auxiliary input file name\n       int    jt =1      subsampling [nps] in observation\n       int    nt =n1 ®\nSOURCE\n       user/chen/Msscrg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfsscrg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsstep2-Tuple{}","page":"Home","title":"Madagascar.sfsstep2","text":"sfsstep2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsstep2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsstep2. See ?m8r for examples.\n\nRSF Documentation\n\nsfsstep2(1)                   Madagascar Manuals                   sfsstep2(1)\n\nNAME\n       sfsstep2 - 3-D post-stack modeling/migration with extended split step.\n\nSYNOPSIS\n       sfsstep2 < in.rsf > out.rsf slowness=vel.rsf inv=n verb=n eps=0.01 nt=1\n       nr=1 padx=0 pady=0 dt=0.004 nw= dw= w0=0.\n\nPARAMETERS\n       float  dt =0.004      time error\n       float  dw =      Frequency sampling (for modeling)\n       float  eps =0.01      stability parameter\n       bool   inv =n [y/n]     If y, modeling; if n, migration\n       int    nr =1      maximum number of references\n       int    nt =1      taper size\n       int    nw =      Length of frequency axis (for modeling)\n       int    padx =0      cross-line padding\n       int    pady =0      in-line padding\n       file   slowness =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       Frequency origin (for modeling)\nSOURCE\n       system/seismic/Msstep2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsstep2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfst-Tuple{}","page":"Home","title":"Madagascar.sfst","text":"sfst(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfst on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfst. See ?m8r for examples.\n\nRSF Documentation\n\nsfst(1)                       Madagascar Manuals                       sfst(1)\n\nNAME\n       sfst - S transform\n\nSYNOPSIS\n       sfst < in.rsf > out.rsf inv=n flo= fhi=\n\nPARAMETERS\n       float  fhi =      High frequency in band, default is Nyquist\n       float  flo =      Low frequency in band, default is 0\n       bool   inv =n [y/n]     if y, do inverse transform\nSOURCE\n       user/yliu/Mst.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                           sfst(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstack-Tuple{}","page":"Home","title":"Madagascar.sfstack","text":"sfstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstack. See ?m8r for examples.\n\nRSF Documentation\n\nsfstack(1)                    Madagascar Manuals                    sfstack(1)\n\nNAME\n       sfstack - Stack a dataset over one of the dimensions.\n\nSYNOPSIS\n       sfstack  <  in.rsf  >  out.rsf  scale=  axis=2 rms=n norm=y min=n max=n\n       prod=n\n\nCOMMENTS\n       This operation is adjoint to sfspray.\n\nPARAMETERS\n       int    axis =2      which axis to stack. If axis=0, stack over all  di‐\n              mensions\n       bool   max  =n  [y/n]     If  y, find maximum instead of stack. Ignores\n              rms and norm.\n       bool   min =n [y/n]     If y, find minimum instead  of  stack.  Ignores\n              rms and norm.\n       bool   norm =y [y/n]     If y, normalize by fold.\n       bool   prod  =n  [y/n]     If y, find product instead of stack. Ignores\n              rms and norm.\n       bool   rms =n [y/n]     If y, compute the root-mean-square  instead  of\n              stack.\n       floats scale =       [nAXIS]\nUSED IN\n       bei/dpmv/krchdmo\n       bei/trimo/all\n       bei/trimo/subsamp\n       bei/vela/strat\n       bei/vela/vscan\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\n       cwp/geo2011WideAzimuthAngleDecomposition/seam357\n       data/alaska/line31-81-m8r\nSOURCE\n       system/main/stack.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfstack\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstack2d-Tuple{}","page":"Home","title":"Madagascar.sfstack2d","text":"sfstack2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstack2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstack2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfstack2d(1)                  Madagascar Manuals                  sfstack2d(1)\n\nNAME\n       sfstack2d - Stack multi-shots images\n\nSYNOPSIS\n       sfstack2d < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...\n\nSOURCE\n       user/jsun/Mstack2d.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstack2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstack3-Tuple{}","page":"Home","title":"Madagascar.sfstack3","text":"sfstack3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstack3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstack3. See ?m8r for examples.\n\nRSF Documentation\n\nsfstack3(1)                   Madagascar Manuals                   sfstack3(1)\n\nNAME\n       sfstack3 - OpenMP stack on axis 1,2 or 3\n\nSYNOPSIS\n       sfstack3 < Fi.rsf > Fo.rsf verb=n axis=2 verb=y nbuf=1\n\nPARAMETERS\n       int    axis =2      stack axis\n       int    nbuf =1      buffer size\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/psava/Mstack3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstack3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstackimg-Tuple{}","page":"Home","title":"Madagascar.sfstackimg","text":"sfstackimg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstackimg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstackimg. See ?m8r for examples.\n\nRSF Documentation\n\nsfstackimg(1)                 Madagascar Manuals                 sfstackimg(1)\n\nNAME\n       sfstackimg - Stack multi-shots images\n\nSYNOPSIS\n       sfstackimg < Fin.rsf > Fout.rsf file0.rsf file1.rsf file2.rsf ...\n\nSOURCE\n       user/fangg/Mstackimg.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfstackimg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstackn-Tuple{}","page":"Home","title":"Madagascar.sfstackn","text":"sfstackn(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstackn on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstackn. See ?m8r for examples.\n\nRSF Documentation\n\nsfstackn(1)                   Madagascar Manuals                   sfstackn(1)\n\nNAME\n       sfstackn - Stack prespecified values.\n\nSYNOPSIS\n       sfstackn < in.rsf > out.rsf min=minin.rsf max=maxin.rsf mean=y thres=0.\n\nPARAMETERS\n       string max  =       file determining up to which value to stack (auxil‐\n              iary input file name)\n       bool   mean =y [y/n]     if n, sum; if y, average\n       string min =      file determining from which value to stack (auxiliary\n              input file name)\n       float  thres =0.       threshold (percentage of maxabs)\nSOURCE\n       user/saragiotis/Mstackn.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstackn(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstacks-Tuple{}","page":"Home","title":"Madagascar.sfstacks","text":"sfstacks(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstacks on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstacks. See ?m8r for examples.\n\nRSF Documentation\n\nsfstacks(1)                   Madagascar Manuals                   sfstacks(1)\n\nNAME\n       sfstacks - Constant-velocity stacks.\n\nSYNOPSIS\n       sfstacks  <  cmp.rsf  >  stk.rsf  offset=offset.rsf mask=msk.rsf half=y\n       str=0.5 mute=12 nv= v0= dv= CDPtype=  slowness=n  squared=n  h0=0.  ex‐\n       tend=4\n\nPARAMETERS\n       int    CDPtype = ®\n       float  dv =      step in velocity\n       int    extend =4      trace extension\n       float  h0 =0.       reference offset\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       string mask =      auxiliary input file name\n       int    mute =12      mute zone\n       int    nv =      number of velocities\n       string offset =      auxiliary input file name\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  str =0.5      maximum stretch allowed\n       float  v0 =      first velocity\nSOURCE\n       system/seismic/Mstacks.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstacks(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstandardmodel-Tuple{}","page":"Home","title":"Madagascar.sfstandardmodel","text":"sfstandardmodel(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstandardmodel on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstandardmodel. See ?m8r for examples.\n\nRSF Documentation\n\nsfstandardmodel(1)            Madagascar Manuals            sfstandardmodel(1)\n\nNAME\n       sfstandardmodel - None\n\nSYNOPSIS\n       sfstandardmodel\n\nSOURCE\n       trip/iwave/grid/main/standardmodel.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfstandardmodel(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstandardmodel_elastic-Tuple{}","page":"Home","title":"Madagascar.sfstandardmodel_elastic","text":"sfstandardmodel_elastic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstandardmodel_elastic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstandardmodel_elastic. See ?m8r for examples.\n\nRSF Documentation\n\nsfstandardmodelelastic(1)    Madagascar Manuals    sfstandardmodelelastic(1)\n\nNAME\n       sfstandardmodel_elastic - None\n\nSYNOPSIS\n       sfstandardmodel_elastic\n\nSOURCE\n       trip/iwave/grid/main/standardmodel_elastic.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024        sfstandardmodel_elastic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstaticcorr-Tuple{}","page":"Home","title":"Madagascar.sfstaticcorr","text":"sfstaticcorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstaticcorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstaticcorr. See ?m8r for examples.\n\nRSF Documentation\n\nsfstaticcorr(1)               Madagascar Manuals               sfstaticcorr(1)\n\nNAME\n       sfstaticcorr -\n\nSYNOPSIS\n       sfstaticcorr < Fin.rsf > Fou.rsf verb=n\n\nCOMMENTS\n       Static Corrections for Redatuming SHARAD data to MOLA surface Input: 2D\n       correlation between SHARAD data and clutter simulation Output: Smoothed\n       maximum  correlation  picks representing residual ionosphere time delay\n       Created on: Mar 9, 2021\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mstaticcorr.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfstaticcorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstcontrib-Tuple{}","page":"Home","title":"Madagascar.sfstcontrib","text":"sfstcontrib(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstcontrib on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstcontrib. See ?m8r for examples.\n\nRSF Documentation\n\nsfstcontrib(1)                Madagascar Manuals                sfstcontrib(1)\n\nNAME\n       sfstcontrib - Contribution weighting using streaming attributes.\n\nSYNOPSIS\n       sfstcontrib   <  gath.rsf  stack=stck.rsf  weight=wght.rsf  >  outp.rsf\n       eps=1.0f w0=0.0f\n\nPARAMETERS\n       float  eps =1.0f      regularization parameter\n       file   stack =      auxiliary input file name\n       float  w0 =0.0f      initial weight\n       file   weight =      auxiliary output file name\nSOURCE\n       user/fomels/Mstcontrib.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfstcontrib(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstcurvature-Tuple{}","page":"Home","title":"Madagascar.sfstcurvature","text":"sfstcurvature(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstcurvature on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstcurvature. See ?m8r for examples.\n\nRSF Documentation\n\nsfstcurvature(1)              Madagascar Manuals              sfstcurvature(1)\n\nNAME\n       sfstcurvature - Curvature in stratigraphic coordinates\n\nSYNOPSIS\n       sfstcurvature  <  xhor.rsf  yh=yhor.rsf zh=zhor.rsf > cur.rsf scale=1.0\n       what=\n\nPARAMETERS\n       float  scale =1.0      scaling (from time to depth)\n       string what =      what to compute\n       file   yh =      auxiliary input file name\n       file   zh =      auxiliary input file name\nSOURCE\n       user/parvaneh/Mstcurvature.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfstcurvature(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstf2telewfld-Tuple{}","page":"Home","title":"Madagascar.sfstf2telewfld","text":"sfstf2telewfld(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstf2telewfld on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstf2telewfld. See ?m8r for examples.\n\nRSF Documentation\n\nsfstf2telewfld(1)             Madagascar Manuals             sfstf2telewfld(1)\n\nNAME\n       sfstf2telewfld - None\n\nSYNOPSIS\n       sfstf2telewfld  <  infile.rsf  stf=stffile.rsf  >  outfile.rsf old=old‐\n       file.rsf p1=0. z0=40. v0=8.0 dt=0.001\n\nPARAMETERS\n       dt     =0.001 ®\n       file   old =      auxiliary output file name\n       p1     =0.  ®\n       file   stf =      auxiliary input file name\n       v0     =8.0 ®\n       z0     =40.  ®\nSOURCE\n       user/jeff/Mstf2telewfld.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfstf2telewfld(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstfchain-Tuple{}","page":"Home","title":"Madagascar.sfstfchain","text":"sfstfchain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstfchain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstfchain. See ?m8r for examples.\n\nRSF Documentation\n\nsfstfchain(1)                 Madagascar Manuals                 sfstfchain(1)\n\nNAME\n       sfstfchain - Find a symmetric chain of Fourier weighting and scaling\n\nSYNOPSIS\n       sfstfchain   <   src.rsf   >  wht.rsf  target=tgt.rsf  fweight=fwht.rsf\n       match=mch.rsf rect=1 frect=1 niter=0 liter=50\n\nPARAMETERS\n       int    frect =1      smoothing in frequency\n       file   fweight =      auxiliary output file name\n       int    liter =50      number of linear iterations\n       file   match =      auxiliary output file name\n       int    niter =0      number of iterations\n       int    rect =1      smoothing in time\n       file   target =      auxiliary input file name\nSOURCE\n       user/fomels/Mstfchain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfstfchain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstfchain2-Tuple{}","page":"Home","title":"Madagascar.sfstfchain2","text":"sfstfchain2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstfchain2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstfchain2. See ?m8r for examples.\n\nRSF Documentation\n\nsfstfchain2(1)                Madagascar Manuals                sfstfchain2(1)\n\nNAME\n       sfstfchain2 - Find a symmetric chain of 1-D Fourier weighting and scal‐\n       ing with movies\n\nSYNOPSIS\n       sfstfchain2  <   src.rsf   >   wht.rsf   target=tgt.rsf   init_w=w0.rsf\n       init_wf=wf0.rsf  fweight=fwht.rsf  match=mch.rsf  wsnap=snap_w.rsf wfs‐\n       nap=snap_wf.rsf  lsmigsnap=snap_lsmig.rsf  rect1=1   rect2=1   frect1=1\n       frect2=1 niter=0 liter=50 snap=0\n\nPARAMETERS\n       int    frect1 =1 ®\n       int    frect2 =1      smoothing in frequency\n       file   fweight =      auxiliary output file name\n       file   init_w =      auxiliary input file name\n       file   init_wf =      auxiliary input file name\n       int    liter =50      number of linear iterations\n       file   lsmigsnap =      auxiliary output file name\n       file   match =      auxiliary output file name\n       int    niter =0      number of iterations\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing in time\n       int    snap =0      interval for snapshots\n       file   target =      auxiliary input file name\n       file   wfsnap =      auxiliary output file name\n       file   wsnap =      auxiliary output file name\nSOURCE\n       user/fomels/Mstfchain2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfstfchain2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstft-Tuple{}","page":"Home","title":"Madagascar.sfstft","text":"sfstft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstft. See ?m8r for examples.\n\nRSF Documentation\n\nsfstft(1)                     Madagascar Manuals                     sfstft(1)\n\nNAME\n       sfstft - Short-time Fourier transform (STFT).\n\nSYNOPSIS\n       sfstft < in.rsf > out.rsf inv=n window=n sym=n opt=y ntw=7\n\nPARAMETERS\n       bool   inv =n [y/n]     if y, perform inverse transform\n       int    ntw =7      time-window length\n       bool   opt =y [y/n]     if y, determine optimal size for efficiency\n       bool   sym  =n  [y/n]     if y, apply symmetric scaling to make the FFT\n              operator Hermitian\n       bool   window =n [y/n]     if y, add Hanning window\nSOURCE\n       user/yliu/Mstft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfstft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsthres-Tuple{}","page":"Home","title":"Madagascar.sfsthres","text":"sfsthres(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsthres on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsthres. See ?m8r for examples.\n\nRSF Documentation\n\nsfsthres(1)                   Madagascar Manuals                   sfsthres(1)\n\nNAME\n       sfsthres - soft thresholding function\n\nSYNOPSIS\n       sfsthres < input.rsf > output.rsf miu=\n\nPARAMETERS\n       miu    = ®\nSOURCE\n       user/jingwei/Msthres.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsthres(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstiff3d-Tuple{}","page":"Home","title":"Madagascar.sfstiff3d","text":"sfstiff3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstiff3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstiff3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfstiff3d(1)                  Madagascar Manuals                  sfstiff3d(1)\n\nNAME\n       sfstiff3d - stiffness tensor for 3D TTI models\n\nSYNOPSIS\n       sfstiff3d   vp=Fvp.rsf   vs=Fvs.rsf   ro=Fro.rsf   epsilon=Fepsilon.rsf\n       delta=Fdelta.rsf gamma=Fgamma.rsf nu=Fnu.rsf alpha=Falpha.rsf > Fcc.rsf\n       verb=n dim=2\n\nPARAMETERS\n       file   alpha =      auxiliary input file name\n       file   delta =      auxiliary input file name\n       int    dim =2      verbosity flag\n       file   epsilon =      auxiliary input file name\n       file   gamma =      auxiliary input file name\n       file   nu =      auxiliary input file name\n       file   ro =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   vp =      auxiliary input file name\n       file   vs =      auxiliary input file name\nUSED IN\n       cwp/geo2009TTIModeSeparation/tti3\nSOURCE\n       user/jyan/Mstiff3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstiff3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstltft-Tuple{}","page":"Home","title":"Madagascar.sfstltft","text":"sfstltft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstltft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstltft. See ?m8r for examples.\n\nRSF Documentation\n\nsfstltft(1)                   Madagascar Manuals                   sfstltft(1)\n\nNAME\n       sfstltft - Streaming time-frequency transform (LTFT).\n\nSYNOPSIS\n       sfstltft    <    in.rsf   >   out.rsf   basis=basis.rsf   mask=mask.rsf\n       weight=weight.rsf inv=n verb=n nw= dw= w0=0. lambda=1.0f\n\nPARAMETERS\n       string basis =      auxiliary output file name\n       float  dw =      frequency step\n       bool   inv =n [y/n]     if y, do inverse transform\n       float  lambda =1.0f      smoothing parameter\n       string mask =      data weight (auxiliary input file name)\n       int    nw =      number of frequencies\n       bool   verb =n [y/n]     verbosity flag\n       float  w0 =0.       first frequency\n       string weight =      model weight (auxiliary input file name)\nSOURCE\n       user/fomels/Mstltft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstltft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstolt-Tuple{}","page":"Home","title":"Madagascar.sfstolt","text":"sfstolt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstolt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstolt. See ?m8r for examples.\n\nRSF Documentation\n\nsfstolt(1)                    Madagascar Manuals                    sfstolt(1)\n\nNAME\n       sfstolt - Post-stack Stolt modeling/migration.\n\nSYNOPSIS\n       sfstolt  <  in.rsf  >  out.rsf  vel= pad=nt extend=4 mute=12 minstr=0.0\n       stretch=1\n\nCOMMENTS\n       Requires the input to be cosine-transformed over the lateral axes.\n\n       August 2014 program of the month:  http://ahay.org/blog/2014/08/03/pro‐\n       gram-of-the-month-sfstolt/\n\nPARAMETERS\n       int    extend =4      trace extension\n       float  minstr =0.0      minimum stretch allowed\n       int    mute =12      mute zone\n       int    pad =nt      padding on the time axis\n       float  stretch =1      Stolt stretch parameter\n       float  vel  =       Constant velocity (use negative velocity for model‐\n              ing)\nSOURCE\n       system/seismic/Mstolt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfstolt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstolt2-Tuple{}","page":"Home","title":"Madagascar.sfstolt2","text":"sfstolt2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstolt2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstolt2. See ?m8r for examples.\n\nRSF Documentation\n\nsfstolt2(1)                   Madagascar Manuals                   sfstolt2(1)\n\nNAME\n       sfstolt2 - Post-stack Stolt modeling/migration.\n\nSYNOPSIS\n       sfstolt2 < in.rsf > out.rsf vel= pad=nt nf=2\n\nCOMMENTS\n       Requires the input to be cosine-transformed over the lateral axes.\n\nPARAMETERS\n       int    nf =2      Interpolation accuracy\n       int    pad =nt      padding on the time axis\n       float  vel  =       Constant velocity (use negative velocity for model‐\n              ing)\nSOURCE\n       system/seismic/Mstolt2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstolt2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstoltstretch-Tuple{}","page":"Home","title":"Madagascar.sfstoltstretch","text":"sfstoltstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstoltstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstoltstretch. See ?m8r for examples.\n\nRSF Documentation\n\nsfstoltstretch(1)             Madagascar Manuals             sfstoltstretch(1)\n\nNAME\n       sfstoltstretch - Stolt stretch.\n\nSYNOPSIS\n       sfstoltstretch  <  in.rsf  >  st.rsf  velocity=vel.rsf inv=n nstretch=1\n       pad=nt eps=0.01 vel=\n\nPARAMETERS\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]     if y, inverse stretch\n       int    nstretch =1      number of steps\n       int    pad =nt      time axis padding\n       float  vel =      reference velocity\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mstoltstretch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfstoltstretch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstpf-Tuple{}","page":"Home","title":"Madagascar.sfstpf","text":"sfstpf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstpf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstpf. See ?m8r for examples.\n\nRSF Documentation\n\nsfstpf(1)                     Madagascar Manuals                     sfstpf(1)\n\nNAME\n       sfstpf - Streaming prediction filter\n\nSYNOPSIS\n       sfstpf < dat.rsf match=mat.rsf > flt.rsf pred=pre.rsf lambda=1.0f\n\nPARAMETERS\n       float  lambda =1.0f      smoothing parameter\n       file   match =      auxiliary input file name\n       string pred =      auxiliary output file name\nSOURCE\n       user/fomels/Mstpf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfstpf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstphase-Tuple{}","page":"Home","title":"Madagascar.sfstphase","text":"sfstphase(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstphase on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstphase. See ?m8r for examples.\n\nRSF Documentation\n\nsfstphase(1)                  Madagascar Manuals                  sfstphase(1)\n\nNAME\n       sfstphase - Streaming estimate of instantaneous frequency.\n\nSYNOPSIS\n       sfstphase < in.rsf > out.rsf lambda= window_size=1 verb=n complex=n or‐\n       der=100 ref=1. hertz=n band=n\n\nPARAMETERS\n       bool   band =n [y/n]     if y, compute instantaneous bandwidth\n       bool   complex =n [y/n]     if y, use complex-valued computations\n       bool   hertz =n [y/n]     if y, convert output to Hertz\n       float  lambda = ®\n       int    order =100      Hilbert transformer order\n       float  ref =1.       Hilbert transformer reference (0.5 < ref <= 1)\n       bool   verb =n [y/n]     verbosity\n       int    window_size =1      window_size\nSOURCE\n       user/fomels/Mstphase.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstphase(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstransp-Tuple{}","page":"Home","title":"Madagascar.sfstransp","text":"sfstransp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstransp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstransp. See ?m8r for examples.\n\nRSF Documentation\n\nsfstransp(1)                  Madagascar Manuals                  sfstransp(1)\n\nNAME\n       sfstransp -\n\nSYNOPSIS\n       sfstransp < Fin.rsf > Fou.rsf verb=n\n\nCOMMENTS\n       in-memory  transpose 12 Paul Sava Copyright (C) 2022 Colorado School of\n       Mines\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/psava/Mstransp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstransp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstream-Tuple{}","page":"Home","title":"Madagascar.sfstream","text":"sfstream(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstream on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstream. See ?m8r for examples.\n\nRSF Documentation\n\nsfstream(1)                   Madagascar Manuals                   sfstream(1)\n\nNAME\n       sfstream - Streaming PEF\n\nSYNOPSIS\n       sfstream    <    inp.rsf    >   out.rsf   pattern=pat.rsf   pef=pef.rsf\n       known=known.rsf inv=n adj=n na= eps=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag (for linear operator)\n       float  eps =      regularization\n       bool   inv =n [y/n]     inversion flag\n       string known =      known data locations  (optional)  (auxiliary  input\n              file name)\n       int    na =      PEF filter size (not including leading one)\n       string pattern =      pattern data (for linear operator) (auxiliary in‐\n              put file name)\n       string pef =      output PEF (optional) (auxiliary output file name)\nSOURCE\n       user/fomels/Mstream.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfstream(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstreamh-Tuple{}","page":"Home","title":"Madagascar.sfstreamh","text":"sfstreamh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstreamh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstreamh. See ?m8r for examples.\n\nRSF Documentation\n\nsfstreamh(1)                  Madagascar Manuals                  sfstreamh(1)\n\nNAME\n       sfstreamh - Streaming PEF on a helix\n\nSYNOPSIS\n       sfstreamh  <  inp.rsf > out.rsf lag=lag.rsf pattern=pat.rsf a= n= inv=n\n       adj=n jump=1 na=0 eps=\n\nPARAMETERS\n       ints   a =      filter shape [dim]\n       bool   adj =n [y/n]     adjoint flag (for linear operator)\n       float  eps =      regularization\n       bool   inv =n [y/n]     inversion flag\n       int    jump =1      jump > 1 is used for trace interpolation\n       string lag =      auxiliary input file name\n       ints   n =       [dim]\n       int    na =0      PEF filter size (not including leading one)\n       string pattern =      pattern data (for linear operator) (auxiliary in‐\n              put file name)\nSOURCE\n       user/gee/Mstreamh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstreamh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstreamiss-Tuple{}","page":"Home","title":"Madagascar.sfstreamiss","text":"sfstreamiss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstreamiss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstreamiss. See ?m8r for examples.\n\nRSF Documentation\n\nsfstreamiss(1)                Madagascar Manuals                sfstreamiss(1)\n\nNAME\n       sfstreamiss - Missing data interpolation using streaming PEF\n\nSYNOPSIS\n       sfstreamiss < inp.rsf > out.rsf pef=pef.rsf known=known.rsf na= eps=\n\nPARAMETERS\n       float  eps =      regularization\n       file   known =      auxiliary input file name\n       int    na =      PEF filter size (not including leading one)\n       string pef =      output PEF (optional) (auxiliary output file name)\nSOURCE\n       user/fomels/Mstreamiss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfstreamiss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstreamissh-Tuple{}","page":"Home","title":"Madagascar.sfstreamissh","text":"sfstreamissh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstreamissh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstreamissh. See ?m8r for examples.\n\nRSF Documentation\n\nsfstreamissh(1)               Madagascar Manuals               sfstreamissh(1)\n\nNAME\n       sfstreamissh  - Missing data interpolating using streaming PEF on a he‐\n       lix\n\nSYNOPSIS\n       sfstreamissh < inp.rsf > out.rsf lag=lag.rsf known=known.rsf a= n= na=0\n       eps= var=0.0f seed=time(NULL)\n\nPARAMETERS\n       ints   a =      filter shape [dim]\n       float  eps =      regularization\n       file   known =      auxiliary input file name\n       string lag =      auxiliary input file name\n       ints   n =       [dim]\n       int    na =0      PEF filter size (not including leading one)\n       int    seed =time(NULL)      random seed\n       float  var =0.0f      noise variance\nSOURCE\n       user/gee/Mstreamissh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfstreamissh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstretch-Tuple{}","page":"Home","title":"Madagascar.sfstretch","text":"sfstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstretch. See ?m8r for examples.\n\nRSF Documentation\n\nsfstretch(1)                  Madagascar Manuals                  sfstretch(1)\n\nNAME\n       sfstretch - Stretch of the time axis.\n\nSYNOPSIS\n       sfstretch  <  in.rsf  >  out.rsf  datum=dat.rsf inv=n dens=1 verb=y v0=\n       half=y CDPtype= delay= tdelay=  hdelay=  scale=  nout=dens*n1  extend=4\n       mute=0 maxstr=0 rule=\n\nPARAMETERS\n       int    CDPtype = ®\n       file   datum =      auxiliary input file name\n       float  delay =      time delay for rule=lmo\n       int    dens =1      axis stretching factor\n       int    extend =4      trace extension\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       float  hdelay =      offset delay for rule=rad\n       bool   inv =n [y/n]     if y, do inverse stretching\n       float  maxstr =0      maximum stretch\n       int    mute =0      tapering size\n       int    nout =dens*n1      output axis length (if inv=n)\n       string rule =      Stretch rule:         n -  constant-velocity  normal\n              moveout   (nmostretch),  default           l  -  linear  moveout\n              (lmostretch)         L - logarithmic stretch (logstretch)\n              2  -  t^2  stretch (t2stretch)         c - t^2 chebyshev stretch\n              (t2chebstretch)         r - radial  moveout  (radstretch)\n              d  -  datuming  (datstretch)           s  -  s*t scaling stretch\n              (scalestretch)\n       float  scale =      scaling factor for rule=scale\n       float  tdelay =      time delay for rule=rad\n       float  v0 =      moveout velocity\n       bool   verb =y [y/n]     verbosity flag\nUSED IN\n       bei/dpmv/krchdmo\n       bei/ft1/ft2d\n       bei/sg/toldi\n       bei/trimo/all\n       bei/vela/stretch\n       bei/wvs/head\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/sin\n       data/alaska/line31-81-m8r\nSOURCE\n       system/seismic/Mstretch.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfstretch\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstretch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfstripes-Tuple{}","page":"Home","title":"Madagascar.sfstripes","text":"sfstripes(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfstripes on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfstripes. See ?m8r for examples.\n\nRSF Documentation\n\nsfstripes(1)                  Madagascar Manuals                  sfstripes(1)\n\nNAME\n       sfstripes  -  Model  the  positions  and  dips  of the constant offset,\n       source, midpoint, and receiver strikes in a source vs. offset space.\n\nSYNOPSIS\n       sfstripes < inp.rsf > out.rsf mo= ms= my= mr=\n\nPARAMETERS\n       int    mo =      offset parameter, a constant offset line  will  appear\n              in the output every o offset\n       int    mr  =      receiver parameter, a constant receiver line will ap‐\n              pear in the output every r receiver\n       int    ms =      source parameter, a constant source line  will  appear\n              in the output every s source\n       int    my  =      midpoint parameter, a constant midpoint line will ap‐\n              pear in the output every y midpoint\nSOURCE\n       system/seismic/Mstripes.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfstripes(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsttimefreq-Tuple{}","page":"Home","title":"Madagascar.sfsttimefreq","text":"sfsttimefreq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsttimefreq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsttimefreq. See ?m8r for examples.\n\nRSF Documentation\n\nsfsttimefreq(1)               Madagascar Manuals               sfsttimefreq(1)\n\nNAME\n       sfsttimefreq - Time-frequency analysis using streaming attributes.\n\nSYNOPSIS\n       sfsttimefreq  <  time.rsf  >  timefreq.rsf  mask=mask.rsf nw= dw= w0=0.\n       lambda=1.0f window_size=50 phase=n\n\nPARAMETERS\n       float  dw =      f    requency step\n       float  lambda =1.0f      smoothing parameter\n       string mask =      auxiliary input file name\n       int    nw =      number of frequencies\n       bool   phase =n [y/n]     output phase instead of amplitude\n       float  w0 =0.       first frequency\n       int    window_size =50      window_size\nSOURCE\n       user/fomels/Msttimefreq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsttimefreq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsubplot-Tuple{}","page":"Home","title":"Madagascar.sfsubplot","text":"sfsubplot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsubplot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsubplot. See ?m8r for examples.\n\nRSF Documentation\n\nsfsubplot(1)                  Madagascar Manuals                  sfsubplot(1)\n\nNAME\n       sfsubplot - subplot by python\n\nSYNOPSIS\n       sfsubplot < input.rsf np1=1 np2=n2\n\nPARAMETERS\n       int    np1 =1      subplot(np2,np1)\n       int    np2 =n2      subplot(np2,np1)\nSOURCE\n       user/chen/Msubplot.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsubplot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsum-Tuple{}","page":"Home","title":"Madagascar.sfsum","text":"sfsum(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsum on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsum. See ?m8r for examples.\n\nRSF Documentation\n\nsfsum(1)                      Madagascar Manuals                      sfsum(1)\n\nNAME\n       sfsum - adjoint test\n\nSYNOPSIS\n       sfsum   <  input1.rsf  input2=input2.rsf  input3=input3.rsf  input4=in‐\n       put4.rsf > output.rsf\n\nPARAMETERS\n       file   input2 =      auxiliary input file name\n       file   input3 =      auxiliary input file name\n       file   input4 =      auxiliary input file name\nSOURCE\n       user/jingwei/Msum.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsum(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsum3-Tuple{}","page":"Home","title":"Madagascar.sfsum3","text":"sfsum3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsum3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsum3. See ?m8r for examples.\n\nRSF Documentation\n\nsfsum3(1)                     Madagascar Manuals                     sfsum3(1)\n\nNAME\n       sfsum3 - adjoint test\n\nSYNOPSIS\n       sfsum3  <  input1.rsf  input2=input2.rsf  input3=input3.rsf  input4=in‐\n       put4.rsf > output.rsf\n\nPARAMETERS\n       file   input2 =      auxiliary input file name\n       file   input3 =      auxiliary input file name\n       file   input4 =      auxiliary input file name\nSOURCE\n       user/jingwei/Msum3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsum3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsumamp-Tuple{}","page":"Home","title":"Madagascar.sfsumamp","text":"sfsumamp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsumamp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsumamp. See ?m8r for examples.\n\nRSF Documentation\n\nsfsumamp(1)                   Madagascar Manuals                   sfsumamp(1)\n\nNAME\n       sfsumamp - Stack energy between two input horizons\n\nSYNOPSIS\n       sfsumamp  <  dataFile.rsf  top=hTopFile.rsf  bot=hBotFile.rsf  > stack‐\n       File.rsf badSample=99999.f\n\nPARAMETERS\n       float  badSample =99999.f      non-interpreted sample in the horizons\n       string bot =      bottom horizon (auxiliary input file name)\n       string top =      top horizon (auxiliary input file name)\nSOURCE\n       user/aklokov/Msumamp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsumamp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsuplane-Tuple{}","page":"Home","title":"Madagascar.sfsuplane","text":"sfsuplane(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsuplane on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsuplane. See ?m8r for examples.\n\nRSF Documentation\n\nsfsuplane(1)                  Madagascar Manuals                  sfsuplane(1)\n\nNAME\n       sfsuplane - Create common offset data file with up to 3 planes\n\nSYNOPSIS\n       sfsuplane  >  out.rsf  nt=NT  ntr=NTR  dt=DT offset=OFF npl=NPL taper=0\n       dip1=0  len1=3*ntr/4   ct1=nt/2-1   cx1=ntr/2-1   dip2=4   len2=3*ntr/4\n       ct2=nt/2-1   cx2=ntr/2-1  dip3=8  len3=3*ntr/4  ct3=nt/2-1  cx3=ntr/2-1\n       liner=0\n\nCOMMENTS\n       Command line should be: sfsuplane in=NULL >file.rsf (There should be at\n       least one parameter in command line because of sf_init(argc,argv))\n\nPARAMETERS\n       int    ct1 =nt/2-1 ®\n       int    ct2 =nt/2-1 ®\n       int    ct3 =nt/2-1 ®\n       int    cx1 =ntr/2-1      set defaults and/or get parameters for plane 2\n       int    cx2 =ntr/2-1      set defaults and/or get parameters for plane 3\n       int    cx3  =ntr/2-1      check if user wants the special output speci‐\n              fied\n       float  dip1 =0 ®\n       float  dip2 =4 ®\n       float  dip3 =8 ®\n       float  dt =DT ®\n       int    len1 =3*ntr/4 ®\n       int    len2 =3*ntr/4 ®\n       int    len3 =3*ntr/4 ®\n       int    liner =0 ®\n       int    npl =NPL ®\n       int    nt =NT ®\n       int    ntr =NTR ®\n       float  offset =OFF ®\n       int    taper =0      set defaults and/or get parameters for plane 1\nSOURCE\n       user/chenyk/Msuplane.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsuplane(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsuread-Tuple{}","page":"Home","title":"Madagascar.sfsuread","text":"sfsuread(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsuread on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsuread. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsurface-consistent-Tuple{}","page":"Home","title":"Madagascar.sfsurface-consistent","text":"sfsurface-consistent(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsurface-consistent on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsurface-consistent. See ?m8r for examples.\n\nRSF Documentation\n\nsfsurface-consistent(1)       Madagascar Manuals       sfsurface-consistent(1)\n\nNAME\n       sfsurface-consistent - Surface-consistent decomposition\n\nSYNOPSIS\n       sfsurface-consistent < inp.rsf > out.rsf index=index.rsf adj=y verb=n\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       file   index =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/luke/Msurface-consistent.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024           sfsurface-consistent(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsuwrite-Tuple{}","page":"Home","title":"Madagascar.sfsuwrite","text":"sfsuwrite(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsuwrite on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsuwrite. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsv2d-Tuple{}","page":"Home","title":"Madagascar.sfsv2d","text":"sfsv2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsv2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsv2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfsv2d(1)                     Madagascar Manuals                     sfsv2d(1)\n\nNAME\n       sfsv2d - Velocity and heterogeneity parameter convert to dip.\n\nSYNOPSIS\n       sfsv2d  <  in.rsf  > out.rsf anisotropy=anisotropy.rsf n=32 d=12.5 o=0.\n       mute=n half=n tp=0.150 t0=0. v0=10000 x0=0. abs=y inner=n hyper=n\n\nPARAMETERS\n       bool   abs =y [y/n]     if y, use absolute value |x-x0| (available when\n              mute=y)\n       file   anisotropy =      auxiliary input file name\n       float  d =12.5      offset interval\n       bool   half =n [y/n]     if y, half-offset instead of full offset\n       bool   hyper  =n  [y/n]     if  y,  do  hyperbolic mute (available when\n              mute=y)\n       bool   inner =n [y/n]     if y, do inner muter (available when mute=y)\n       bool   mute =n [y/n]     if y, use mutter\n       int    n =32      offset number\n       float  o =0.       offset origin\n       float  t0 =0.       starting time (available when mute=y)\n       float  tp =0.150      end time (available when mute=y)\n       float  v0 =10000      velocity (available when mute=y)\n       float  x0 =0.       starting space (available when mute=y)\nSOURCE\n       user/yliu/Msv2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsv2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsvd-Tuple{}","page":"Home","title":"Madagascar.sfsvd","text":"sfsvd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsvd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsvd. See ?m8r for examples.\n\nRSF Documentation\n\nsfsvd(1)                      Madagascar Manuals                      sfsvd(1)\n\nNAME\n       sfsvd - Singular value decomposition (SVD)\n\nSYNOPSIS\n       sfsvd < in.rsf > out.rsf left=outu.rsf right=outv.rsf\n\nCOMMENTS\n       Compute [U,O,V]=SVD(A), A=UOV, a little bit different from A=UoV'\n\nPARAMETERS\n       string left =      auxiliary output file name\n       string right =      auxiliary output file name\nSOURCE\n       user/yliu/Msvd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfsvd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsvddenoise-Tuple{}","page":"Home","title":"Madagascar.sfsvddenoise","text":"sfsvddenoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsvddenoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsvddenoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfsvddenoise(1)               Madagascar Manuals               sfsvddenoise(1)\n\nNAME\n       sfsvddenoise - SVD denoising\n\nSYNOPSIS\n       sfsvddenoise < in.rsf > out.rsf pclip=99.\n\nPARAMETERS\n       float  pclip =99.       data clip percentile (default is 99)\nSOURCE\n       user/yliu/Msvddenoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfsvddenoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsvdtest-Tuple{}","page":"Home","title":"Madagascar.sfsvdtest","text":"sfsvdtest(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsvdtest on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsvdtest. See ?m8r for examples.\n\nRSF Documentation\n\nsfsvdtest(1)                  Madagascar Manuals                  sfsvdtest(1)\n\nNAME\n       sfsvdtest - Singular value decomposition to select rank-1 approximation\n\nSYNOPSIS\n       sfsvdtest < matrix.rsf > alpha.rsf nz= nx= nkz= nkx=\n\nPARAMETERS\n       nkx    = ®\n       nkz    = ®\n       nx     = ®\n       nz     = ®\nSOURCE\n       user/jingwei/Msvdtest.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfsvdtest(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsvmf-Tuple{}","page":"Home","title":"Madagascar.sfsvmf","text":"sfsvmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsvmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsvmf. See ?m8r for examples.\n\nRSF Documentation\n\nsfsvmf(1)                     Madagascar Manuals                     sfsvmf(1)\n\nNAME\n       sfsvmf - Space varying median filtering.\n\nSYNOPSIS\n       sfsvmf  <  in.rsf  >  out.rsf similarity=similarity.rsf L=lengthout.rsf\n       boundary=n  ns=0  ne=n2-1  nfw=  l1=4  l2=2  l3=2   l4=4   lambda1=0.15\n       lambda2=0.25 lambda3=0.75 lambda4=0.85\n\nCOMMENTS\n       Using local similarity as a reference.\n\nPARAMETERS\n       string L =      auxiliary output file name\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    l1 =4      space-varying window parameter l1 (default=4)\n       int    l2 =2      space-varying window parameter l2 (default=2)\n       int    l3 =2      space-varying window parameter l3 (default=2)\n       int    l4 =4      space-varying window parameter l4 (default=4)\n       float  lambda1  =0.15       space-varying window parameter lambda1 (de‐\n              fault=0.15)\n       float  lambda2 =0.25      space-varying window parameter  lambda2  (de‐\n              fault=0.25)\n       float  lambda3  =0.75       space-varying window parameter lambda3 (de‐\n              fault=0.75)\n       float  lambda4 =0.85      space-varying window parameter  lambda4  (de‐\n              fault=0.85)\n       int    ne  =n2-1       processing window ending point, corresponding to\n              the temporal axis, n2 means transposed first-axis dimension.\n       int    nfw =      reference filter-window length (>l4, positive and odd\n              integer)\n       int    ns  =0       processing  window starting point, corresponding to\n              the temporal axis\n       file   similarity =      auxiliary input file name\nSOURCE\n       user/chenyk/Msvmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfsvmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfswapbyte-Tuple{}","page":"Home","title":"Madagascar.sfswapbyte","text":"sfswapbyte(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfswapbyte on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfswapbyte. See ?m8r for examples.\n\nRSF Documentation\n\nsfswapbyte(1)                 Madagascar Manuals                 sfswapbyte(1)\n\nNAME\n       sfswapbyte - endianness conversion\n\nSYNOPSIS\n       sfswapbyte < Fin.rsf > Fout.rsf verb=n\n\nPARAMETERS\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/xuxin/Mswapbyte.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfswapbyte(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfswell-Tuple{}","page":"Home","title":"Madagascar.sfswell","text":"sfswell(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfswell on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfswell. See ?m8r for examples.\n\nRSF Documentation\n\nsfswell(1)                    Madagascar Manuals                    sfswell(1)\n\nNAME\n       sfswell - Add swell noise to the data.\n\nSYNOPSIS\n       sfswell   <  in.rsf  >  out.rsf  den=10.  inten=0.1  slope=0.1  width=4\n       length=30 num=5 rep=n noise=n\n\nPARAMETERS\n       float  den  =10.        noise  density  (percent,  default=10,   Min=0,\n              Max=100)\n       float  inten  =0.1       noise  intensity (multiple peak value of data,\n              default=0.1)\n       int    length =30      max noise length (default=30)\n       bool   noise =n [y/n]     if y, output noise only\n       int    num =5      noise number (default=5)\n       bool   rep =n [y/n]     if y, replace data with noise\n       float  slope =0.1      noise slope (default=0.1)\n       int    width =4      max noise width (default=4)\nSOURCE\n       user/yliu/Mswell.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfswell(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfswnorm-Tuple{}","page":"Home","title":"Madagascar.sfswnorm","text":"sfswnorm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfswnorm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfswnorm. See ?m8r for examples.\n\nRSF Documentation\n\nsfswnorm(1)                   Madagascar Manuals                   sfswnorm(1)\n\nNAME\n       sfswnorm - Sliding window normalization\n\nSYNOPSIS\n       sfswnorm < in.rsf > out.rsf size=0 sw=n log=n var_thres=0. perc=5\n\nPARAMETERS\n       bool   log =n [y/n]     log scaling\n       float  perc =5      threshold percentage of the maximum value\n       int    size =0      sliding window radius\n       bool   sw =n [y/n]     sliding window\n       float  var_thres =0.       variance threshold (normalized)\nSOURCE\n       user/jsun/Mswnorm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfswnorm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfswtdenoise-Tuple{}","page":"Home","title":"Madagascar.sfswtdenoise","text":"sfswtdenoise(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfswtdenoise on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfswtdenoise. See ?m8r for examples.\n\nRSF Documentation\n\nsfswtdenoise(1)               Madagascar Manuals               sfswtdenoise(1)\n\nNAME\n       sfswtdenoise - Denoising using stationary wavelet transform.\n\nSYNOPSIS\n       sfswtdenoise < in.rsf > out.rsf ratio=1. len_filter=2 n_layer=2\n\nPARAMETERS\n       int    len_filter =2      filter length\n       int    n_layer =2      number of wavelet transform layers\n       float  ratio =1.       ratio for denoising\nSOURCE\n       system/generic/Mswtdenoise.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfswtdenoise(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfswvarimax-Tuple{}","page":"Home","title":"Madagascar.sfswvarimax","text":"sfswvarimax(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfswvarimax on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfswvarimax. See ?m8r for examples.\n\nRSF Documentation\n\nsfswvarimax(1)                Madagascar Manuals                sfswvarimax(1)\n\nNAME\n       sfswvarimax - Sliding window varimax\n\nSYNOPSIS\n       sfswvarimax < in.rsf > out.rsf sw=n size=0 thres=0. term=100. f1=0 f2=0\n       n1=nz0-fz n2=nx0-fx\n\nPARAMETERS\n       int    f1 =0      sliding window radius\n       int    f2 =0      sliding window radius\n       int    n1 =nz0-fz      sliding window radius\n       int    n2 =nx0-fx      sliding window radius\n       int    size =0      sliding window radius\n       bool   sw =n [y/n]     sliding window\n       float  term =100.       variance threshold (normalized)\n       float  thres =0.       variance threshold (normalized)\nSOURCE\n       user/jsun/Mswvarimax.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfswvarimax(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsymposolver-Tuple{}","page":"Home","title":"Madagascar.sfsymposolver","text":"sfsymposolver(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsymposolver on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsymposolver. See ?m8r for examples.\n\nRSF Documentation\n\nsfsymposolver(1)              Madagascar Manuals              sfsymposolver(1)\n\nNAME\n       sfsymposolver  - Symmetric positive definite matrix equation solver us‐\n       ing square root method (cholesky decomposition method)\n\nSYNOPSIS\n       sfsymposolver < in.rsf rhs=rhs.rsf > out.rsf verb=n n=\n\nCOMMENTS\n       Ax=d-> LL'x=d -> Ly=d -> L'x=y -> x Input is the down triangle of A.\n\nPARAMETERS\n       int    n = ®\n       file   rhs =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/chenyk/Msymposolver.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfsymposolver(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsynmarine-Tuple{}","page":"Home","title":"Madagascar.sfsynmarine","text":"sfsynmarine(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsynmarine on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsynmarine. See ?m8r for examples.\n\nRSF Documentation\n\nsfsynmarine(1)                Madagascar Manuals                sfsynmarine(1)\n\nNAME\n       sfsynmarine - Simple synthetic marine data example.\n\nSYNOPSIS\n       sfsynmarine > out.rsf nt=250 nh=48 ny=10 nz=25\n\nPARAMETERS\n       int    nh =48      offset samples\n       int    nt =250      time samples\n       int    ny =10      midpoint samples\n       int    nz =25      depth samples\nUSED IN\n       bei/fld/synmarine\nSOURCE\n       user/gee/Msynmarine.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfsynmarine(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfsyntop-Tuple{}","page":"Home","title":"Madagascar.sfsyntop","text":"sfsyntop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfsyntop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfsyntop. See ?m8r for examples.\n\nRSF Documentation\n\nsfsyntop(1)                   Madagascar Manuals                   sfsyntop(1)\n\nNAME\n       sfsyntop - Make synthetic topography map.\n\nSYNOPSIS\n       sfsyntop mod=mod.rsf > syn.rsf mask=mask.rsf n1=100 n2=100\n\nPARAMETERS\n       file   mask =      auxiliary output file name\n       file   mod =      auxiliary output file name\n       int    n1 =100 ®\n       int    n2 =100      data dimensions\nSOURCE\n       user/gee/Msyntop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfsyntop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sft2chebstretch-Tuple{}","page":"Home","title":"Madagascar.sft2chebstretch","text":"sft2chebstretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sft2chebstretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sft2chebstretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sft2diter-Tuple{}","page":"Home","title":"Madagascar.sft2diter","text":"sft2diter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sft2diter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sft2diter. See ?m8r for examples.\n\nRSF Documentation\n\nsft2diter(1)                  Madagascar Manuals                  sft2diter(1)\n\nNAME\n       sft2diter - Time-to-depth conversion (linear operator)\n\nSYNOPSIS\n       sft2diter   <   in.rsf   >  out.rsf  s0=is0.rsf  t0=it0.rsf  x0=ix0.rsf\n       f0=if0.rsf mask=mask.rsf  prec=prec.rsf  dix=dix.rsf  velocity=y  adj=n\n       shape=n eps=0.1 verb=n tol=1.e-6 cgiter=200 rect#=(1,1,...) what=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    cgiter =200      number of CG iterations\n       string dix =      auxiliary input file name\n       float  eps =0.1      regularization parameter\n       string f0 =      auxiliary input file name\n       string mask =      auxiliary input file name\n       string prec =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       string s0 =      auxiliary input file name\n       bool   shape =n [y/n]     regularization (default Tikhnov)\n       string t0 =      auxiliary input file name\n       float  tol =1.e-6      tolerance for shaping regularization\n       bool   velocity  =y  [y/n]     y,  inputs  are  velocity / n, slowness-\n              squared\n       bool   verb =n [y/n]     verbosity flag\n       string what =      what to compute (default inversion)\n       string x0 =      auxiliary input file name\nSOURCE\n       user/llisiw/Mt2diter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sft2diter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sft2stretch-Tuple{}","page":"Home","title":"Madagascar.sft2stretch","text":"sft2stretch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sft2stretch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sft2stretch. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sft2warp-Tuple{}","page":"Home","title":"Madagascar.sft2warp","text":"sft2warp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sft2warp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sft2warp. See ?m8r for examples.\n\nRSF Documentation\n\nsft2warp(1)                   Madagascar Manuals                   sft2warp(1)\n\nNAME\n       sft2warp - Time-squared warping.\n\nSYNOPSIS\n       sft2warp < in.rsf > out.rsf inv=n adj=n pad=n1 eps=0.01\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  eps =0.01      stretch regularization\n       bool   inv =n [y/n]     inversion flag\n       int    pad =n1      output time samples\nSOURCE\n       system/generic/Mt2warp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sft2warp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftah5dinterp-Tuple{}","page":"Home","title":"Madagascar.sftah5dinterp","text":"sftah5dinterp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftah5dinterp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftah5dinterp. See ?m8r for examples.\n\nRSF Documentation\n\nsftah5dinterp(1)              Madagascar Manuals              sftah5dinterp(1)\n\nNAME\n       sftah5dinterp - Trace And Header GET Header Word prints trace headers.\n\nSYNOPSIS\n       sftah5dinterp < in.rsf > out.rsf key= verbose=1\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahgethw  program  prints headers.  List the headers you want to\n       print in the key parameter.  EXAMPLE:\n\n       sftahread  verbose=1  input=npr3_gathers.rsf  |  sftahgethw   verbose=0\n       key=sx,sy,gx,gy,offset  >/dev/null\n\n       The headers are in the file npr3_gathers_hdr.rsf, the headers parameter\n       default.  The headers are merged with the trace amplitudes and the  tah\n       data  sent  down the pipe for sftahgethw.  The source and group coordi‐\n       nates and offset (sx,sy,gx,gy,offset) are printed  to  STDERR.   Traces\n       are sent to STDOUT, which is directed to /dev/null (the bit bucket).\n\n       PARAMETERS strings key= no default\n\n       list  of  header keys print.  Look at the sfsegyread for a list      of\n       header names.\n\nPARAMETERS\n       strings\n              key =       [numkeys]\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtah5dinterp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftah5dinterp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahagc-Tuple{}","page":"Home","title":"Madagascar.sftahagc","text":"sftahagc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahagc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahagc. See ?m8r for examples.\n\nRSF Documentation\n\nsftahagc(1)                   Madagascar Manuals                   sftahagc(1)\n\nNAME\n       sftahagc - Read Trace And Header (tah) from standard input, MUTE\n\nSYNOPSIS\n       sftahagc < in.rsf > out.rsf xstart= tstart= verbose=1 ntaper=12 wagc=\n\nPARAMETERS\n       int    ntaper =12 ®\n       floats tstart =       [numtstart]\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\n       float  wagc = ®\n       floats xstart =       [numxstart]\nSOURCE\n       user/karl/Mtahagc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftahagc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahfilter-Tuple{}","page":"Home","title":"Madagascar.sftahfilter","text":"sftahfilter(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahfilter on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahfilter. See ?m8r for examples.\n\nRSF Documentation\n\nsftahfilter(1)                Madagascar Manuals                sftahfilter(1)\n\nNAME\n       sftahfilter  - Read Trace And Header (tah) from standard input and FIL‐\n       TER\n\nSYNOPSIS\n       sftahfilter < in.rsf > out.rsf filter_file=filter_file.rsf filter= ver‐\n       bose=1 filt_indx_t0=0\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahfilter program is designed to apply a filter. Trace and header\n       data (tah) are read from from standard input (usually a pipe).  A  fil‐\n       ter  is  read  from  the command line or from a file.  If the filter is\n       read from a file, it can be a single filter, or  one  filter  for  each\n       trace.   Future  enhancements would be to use trace headers to define a\n       location in the filter file and read that filter or even interpolate  a\n       filter.   That would support shot or receiver dependent filter for sur‐\n       face consistant decon.  Another enhancement would be to  add  frequency\n       domain bandpass filters.\n\n       EXAMPLE:\n\n       sftahsort                       input=shots-receivers-23900_headfix.rsf\n       sort=\"xline:600,601 offset\"                              |  sftahfilter\n       filterfile=dephase.rsf                             |      sftahmakeskey\n       pkey=xline      skey=cdpt                             |      sftahwrite\n       verbose=1                                                   label2=cdpt\n       o2=1 n2=100 d2=1                             label3=xline  o3=600  n3=1\n       d3=1                                             output=dephasecmps.rsf\n       >/dev/null\n\n       sfgrey <mutecmps.rsf | sfpen\n\n       In this example a deterministic dephase filter is applied to a prestack\n       datafile.\n\n       The shot organized prestack data, shots-receivers-23900_headfix.rsf are\n       read in xline offset order by sftahsort program.  The  headers  are  in\n       the  file  shots-receivers-23900_headfix_hdr.rsf, the headers parameter\n       default.  The headers are merged with the trace amplitudes and the  tah\n       data sent down the pipe to apply a filter.\n\n       The  sftahfilter  program applies a filter contained in the dephase.rsf\n       file.\n\n       The program sftahmakeskey is used to create a secondary key used in the\n       following  sftahwrite  to  define the location to wrte the trace in the\n       output file. Sftahmakeskey makes a secondary key (skey=cdpt) the  count\n       the  traces starting in the a primary key gather (pkey=xline).  The in‐\n       put traces gathered by xline by sftahsort. Sftahmakeskey sets cdpt to 1\n       when the trace has a new xline.  If the trace has the same xline as the\n       previous trace cdpt is incremented\n\n       sftahwrite writes the trace data to dephasecmp.rsf and the headers  are\n       written  to  the file dephasecmp_hdr.rsf.  The order of the data in the\n       file is defined by the cdpt and xline trace headers, so the  data order\n       is  (time,cmpt,xline).   Finally,  the output volume is displayed using\n       sfgrey.\n\nPARAMETERS\n       int    filt_indx_t0 =0\n\n                   indx to time 0 in the filter.  Must be in the range [0,num‐\n              filter)\n       floats filter =\n\n                    A list of floats that is the filter to convolve on the in‐\n              put\n                    traces.\n                   [numfilter]\n       string filter_file =\n\n                   name of the rsf file containing the filter(s)\n                (auxiliary input file name)\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahfilter.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftahfilter(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahgain-Tuple{}","page":"Home","title":"Madagascar.sftahgain","text":"sftahgain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahgain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahgain. See ?m8r for examples.\n\nRSF Documentation\n\nsftahgain(1)                  Madagascar Manuals                  sftahgain(1)\n\nNAME\n       sftahgain  -  Read Trace And Header (tah) from standard input and apply\n       GAIN\n\nSYNOPSIS\n       sftahgain <  in.rsf  >  out.rsf  xstart=  tstart=  verbose=1  scale=1.0\n       tpow=0.0 epow=0.0 agc=0.0\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tahxstart  data  (eg  sftahnmo,  sftahstack) 3- read tah data from\n       standard input and write separate rsf files for the trace  and  headers\n       data (ie sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahgain program is designed to apply various amplitude gain func‐\n       tions.  These gain functions include multiply by a constant, trace bal‐\n       ance,  clipping,  AGC,  t**pow,  exp(epow*t) and AGC.  Trace and header\n       data (tah) are read from standard input  (usually  a  pipe).   Data  is\n       scaled:  out(t)  = scale * BAL{CLIP[AGC{[t^tpow * exp(epow * t)}]} Then\n       trace and header data is written to standard output.\n\n       EXAMPLE:\n\n       sftahsort                       input=shots-receivers-23900_headfix.rsf\n       sort=\"xline:600,601   offset\"                              |  sftahgain\n       agc=.5                                             |      sftahmakeskey\n       pkey=xline       skey=cdpt                            |      sftahwrite\n       verbose=1                                                   label2=cdpt\n       o2=1  n2=100  d2=1                             label3=xline o3=600 n3=1\n       d3=1                                                 output=agccmps.rsf\n       >/dev/null\n\n       sfgrey <agccmps.rsf | sfpen\n\n       In  this example the shot organized prestack data in the file shots-re‐\n       ceivers-23900_headfix.rsf are read in xline offset order  by  sftahsort\n       program.   The  headers  are  in  the  file shots-receivers-23900_head‐\n       fix_hdr.rsf, the headers parameter default.   The  headers  are  merged\n       with the trace amplitudes and the tah data sent down the pipe for scal‐\n       ing (agc).\n\n       sftahagc applies a .5 second automatic gain control (agc)\n\n       The program sftahmakeskey is used to create a secondary key used in the\n       following  sftahwrite  to  define the location to wrte the trace in the\n       output file. Sftahmakeskey makes a secondary key (skey=cdpt) the  count\n       the  traces starting in the a primary key gather (pkey=xline).  The in‐\n       put traces gathered by xline by sftahsort. Sftahmakeskey sets cdpt to 1\n       when the trace has a new xline.  If the trace has the same xline as the\n       previous trace cdpt is incremented\n\n       Sftahwrite writes the the trace data to agccmp.rsf and the headers  are\n       written  to the file agccmp_hdr.rsf.  The order of the data in the out‐\n       put file is defined by the cdpt and xline trace headers, so  the   data\n       order  is  (time,cmpt,xline).   Finally, the output volume is displayed\n       using sfgrey.\n\n       Operation order:\n\n       out(t) = scale * BAL{CLIP[AGC{[t^tpow * exp(epow * t)}]}\n\nPARAMETERS\n       float  agc =0.0      Length of agc window in seconds. 0.0 means no agc\n       float  epow =0.0      multiply data by exp(epow*t)\n       float  scale =1.0      multiply data by this float\n       float  tpow =0.0      multiply data by t^tpow\n       floats tstart =      list of times that correspont to xstart and define\n              the  offset           dependent  start  time for the agc scaling\n              [numtstart]\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\n       floats xstart =      list of offsets that correspond to tstart and  de‐\n              fine the offset\n                         dependent start time for the agc scaling  [numxstart]\nUSED IN\n       data/bpstatics94/firstlook\n       data/bptti2007/firstlook\n       data/bpvelanal2004/firstlook\nSOURCE\n       user/karl/Mtahgain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftahgain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahgethw-Tuple{}","page":"Home","title":"Madagascar.sftahgethw","text":"sftahgethw(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahgethw on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahgethw. See ?m8r for examples.\n\nRSF Documentation\n\nsftahgethw(1)                 Madagascar Manuals                 sftahgethw(1)\n\nNAME\n       sftahgethw - Trace And Header GET Header Word prints trace headers.\n\nSYNOPSIS\n       sftahgethw < in.rsf > out.rsf key= verbose=1\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahgethw  program  prints headers.  List the headers you want to\n       print in the key parameter.  EXAMPLE:\n\n       sftahread  verbose=1  input=npr3_gathers.rsf  |  sftahgethw   verbose=0\n       key=sx,sy,gx,gy,offset  >/dev/null\n\n       The headers are in the file npr3_gathers_hdr.rsf, the headers parameter\n       default.  The headers are merged with the trace amplitudes and the  tah\n       data  sent  down the pipe for sftahgethw.  The source and group coordi‐\n       nates and offset (sx,sy,gx,gy,offset) are printed  to  STDERR.   Traces\n       are sent to STDOUT, which is directed to /dev/null (the bit bucket).\n\n       PARAMETERS string key= no default\n\n       list  of  header keys print.  Look at the sfsegyread for a list      of\n       header names.\n\nPARAMETERS\n       strings\n              key =       [numkeys]\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahgethw.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftahgethw(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahheadermath-Tuple{}","page":"Home","title":"Madagascar.sftahheadermath","text":"sftahheadermath(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahheadermath on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahheadermath. See ?m8r for examples.\n\nRSF Documentation\n\nsftahheadermath(1)            Madagascar Manuals            sftahheadermath(1)\n\nNAME\n       sftahheadermath - Trace And Header MEADER MATH\n\nSYNOPSIS\n       sftahheadermath < in.rsf > out.rsf verbose=1 output= outputkey=\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahheadermath  updates  a trace header with a new value computed\n       from input trace headers. The program is modeled  on  sfheadermath.   A\n       formula  input to the parameter output is used to compute a value saves\n       in the outputkey header location.  The forma can contain the binary op‐\n       erators  +,  -,  *,  and  /.  Parenthesis, i.e. ( and ), can be used to\n       specify order of operation.\n\n       Known functions for float data: cos,  sin,  tan,  acos,   asin,   atan,\n       cosh,  sinh,  tanh,  acosh,  asinh,  atanh, exp,  log,  sqrt, abs, erf,\n       erfc, sign\n\n       Known functions for int data: sign, abs\n\n       A simple example is 2D offset can be computed from sx and gx: sftahhea‐\n       dermath outputkey=offset output=abs(sx-gx)\n\n       See also sftahmakeskey.\n\n       EXAMPLE:\n\n       sftahread   input=timodel_shot_data_II.rsf   |   sftahheadermath   out‐\n       putkey=cdpy output='(sy+gy)/2'  |  sftahheadermath  outputkey=cdp  out‐\n       put='cdpy/20+1'  | sftahheadermath outputkey=cdpt output='offset/200+1'\n       | sftahgain tpow=1 |  sftahwrite  output=timodel_ntg_II.rsf  label2=cdp\n       o2=1 n2=3606 d2=1 label3=cdpt o3=1 n3=1 d3=1 >/dev/null\n\n       In  this  example  input  traces in timodel_shot_data_II.rsf are merged\n       with headers in timodel_shot_data_II_hdr.rsf and written to  the  pipe.\n       Three  seperate executions of sftahheadermath are used to compute head‐\n       ers.  The first sftahheadermath averages sy and  gy  to  compute  cdpy.\n       The  second sftahheadermath computes the cdp number by dividing cdpy by\n       the cdp interval, 20 meters.  The  third  sftahheadermath  compute  the\n       cdpt  by  dividing  the  offset  by 200.  Sftahgain is used to multiply\n       trace amplitudes by time (a simple spreading correction.    The  traces\n       are  passed  to sftahwrite that outputs cdpt 1, the near trace,  to the\n       file  timodel_ntg_II.rsf.   The  trace  headers  are  saved  in   timo‐\n       del_ntg_II_hdr.rsf.  Sftahwrite also writes the traces to STDOUT, which\n       is directed to /dev/null (the bit bucket).\n\n       PARAMETERS string output= no default\n\n       An equation to compute using the header keys.  Equations  should  prob‐\n       lable  be  enclosed in quotes, ie \", to the equation can include multi‐\n       plication, *, or blanks.  For example, to compute the midpoint x input:\n       output=\"(sx+gx)/2.0)\"\n\n       string outputkey= no default the name of the output trace header key to\n       put the evaluation of output.  For example to put the average of sx and\n       gx into cdpx input: outputkey=cdpx\n\nPARAMETERS\n       string output =      Describes the output in a mathematical notation.\n       string outputkey  =       name  of the header key to put the results of\n              the output equation\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/boem-g3d1206-002a/displayin\n       data/bpvelanal2004/firstlook\nSOURCE\n       user/karl/Mtahheadermath.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftahheadermath(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahmakeevent-Tuple{}","page":"Home","title":"Madagascar.sftahmakeevent","text":"sftahmakeevent(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahmakeevent on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahmakeevent. See ?m8r for examples.\n\nRSF Documentation\n\nsftahmakeevent(1)             Madagascar Manuals             sftahmakeevent(1)\n\nNAME\n       sftahmakeevent  -  Trace  And  Header MAKEEVENT makes constant velocity\n       dipping event synthetic.\n\nSYNOPSIS\n       sftahmakeevent < in.rsf > out.rsf verbose=1 v= dx= dy= x0= y0= t0=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahmakeevent program makes simple synthetic on input data  source\n       and group xy coordinates (i.e. sx, sy, gx, gy).  The event has constant\n       velocity and dip.  The nmo velocity will depend on source/receiver  az‐\n       imuth.  EXAMPLE:\n\n       sftahsort                 input=npr3_gathers        sort=\"iline:169,181\n       xline:104,116 offset:0,11000\"    verbose=1       |  sftahmakeevent    |\n       sftahmakeskey   pkey=iline,xline  skey=cdpt  verbose=1      |  sftahnmo\n       verbose=1          tnmo=0.000,4.000   vnmo=11000,11000   |   sftahwrite\n       verbose=1            label2=\"cdpt\"  o2=1 n2=34  d2=1     label3=\"xline\"\n       o3=104  n3=13  d3=1     label4=\"iline\"  o4=169   n4=13    d4=1     out‐\n       put=gather_subset.rsf            >/dev/null\n\n       The headers are in the file npr3_gathers_hdr.rsf, the headers parameter\n       default.  The headers are merged with the trace amplitudes and the  tah\n       data  sent  down  the  pipe for sftahmakeevent.  The Traces are sent to\n       STDOUT to have nmo applied and data to be written  to  disk.   Data  is\n       also sent to /dev/null (the bit bucket).\n\n       PARAMETERS none yest, but eventually ude this template: strings key= no\n       default\n\n       list of header keys print.  Look at the sfsegyread for a  list       of\n       header names.\n\nPARAMETERS\n       float  dx = ®\n       float  dy = ®\n       float  t0 =      ****************************************\n       float  v = ®\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       float  x0 = ®\n       float  y0 = ®\nSOURCE\n       user/karl/Mtahmakeevent.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftahmakeevent(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahmakeskey-Tuple{}","page":"Home","title":"Madagascar.sftahmakeskey","text":"sftahmakeskey(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahmakeskey on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahmakeskey. See ?m8r for examples.\n\nRSF Documentation\n\nsftahmakeskey(1)              Madagascar Manuals              sftahmakeskey(1)\n\nNAME\n       sftahmakeskey - Trace And Header MAKE Secondary KEY.\n\nSYNOPSIS\n       sftahmakeskey < in.rsf > out.rsf pkey= verbose=1 skey=\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahmakeskey  program  will  make a secondary key.  You sometimes\n       need a secondary key to number the traces in a gather.  For example af‐\n       ter sorting the data in iline,xline,offset you usually cannot store the\n       data using the offset key because the  offset  sampling  is  irregular.\n       sftahmakeskey  can  be used to build the cdpt header from the iline and\n       xline keys.  Input pkey=iline,xline.  The  secondary  key  (defined  by\n       skey)  will  start  with  1 when a new iline,xline is encounterred.  As\n       long as iline,xline does not change, the skey will  increase  by  1  on\n       each  successive  trace.   When iline or xline changes, skey will start\n       agina with 1.  The output data can be  stored  in  a  file  indexed  by\n       cdpt,xline,iline.\n\n       EXAMPLE:\n\n       sftahread     verbose=1    input=npr3_gathers.rsf    |    sftahmakeskey\n       pkey=iline,xline   skey=cdpt   verbose=1   |    sftahwrite    verbose=1\n       label2=\"cdpt\"  o2=1 n2=24  n2=1   label3=\"xline\" o3=1 n3=188 d3=1   la‐\n       bel4=\"iline\" o4=1 n4=10 d4=1   output=mappedgather.rsf >/dev/null\n\n       sfgrey <mappedgather.rsf | sfpen\n\n       In this example the cmp sorted prestack  data,  npr3_gathers.rsf,   are\n       read  by  sftahread.  The headers are in the file npr3_gathers_hdr.rsf,\n       the headers parameter default.  The headers are merged with  the  trace\n       amplitudes  and the tah data sent down the pipe for sftahmakeskey.  sf‐\n       tahmakeskey creates the cdpt header and sftahwrite creates a  4  dimen‐\n       sional file.\n\nPARAMETERS\n       string pkey =\n\n                   A comma seperated list of primary header keys to monitor to\n              determine\n                   gathers.  The trace number in the gather is counted and put\n              in the\n                   skey header location.\n\n                ([numkeys])\n       string skey  =       The  name of the secondary key created by the pro‐\n              gram.\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/bpmodel94/firstlook\nSOURCE\n       user/karl/Mtahmakeskey.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftahmakeskey(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahmakesloc-Tuple{}","page":"Home","title":"Madagascar.sftahmakesloc","text":"sftahmakesloc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahmakesloc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahmakesloc. See ?m8r for examples.\n\nRSF Documentation\n\nsftahmakesloc(1)              Madagascar Manuals              sftahmakesloc(1)\n\nNAME\n       sftahmakesloc - Trace And Header MAKE SLOC KEY.\n\nSYNOPSIS\n       sftahmakesloc < in.rsf > out.rsf verbose=1 slocxy= slockey=\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahmakeslockey  program  will  make a sloc keywhic is useful for\n       surface consistant scaling, decon, and residal statics.  An sloc  is  a\n       surface  location, ie a shot or a receiver location.  Programs could be\n       written to drive off the group location (gx,gy), but it  is  better  to\n       just  have  an integer group surface location counts the group location\n       from 1 to number group locations.  That allows you to make shot  record\n       displays  where  the  horizontal coordinate the group location index (a\n       handy display to look for consistant receiver statics on  shots).   You\n       specify  input  surface  coodinate, slocxy=gx,gy and output header key,\n       slockey=tracf.\n\n       EXAMPLE:\n\n       sftahread   verbose=1   input=npr3_gathers.rsf    |    sftahmakeslockey\n       slocxy=gx,gy    slockey=tracf    verbose=1   |   sftahwrite   verbose=1\n       mode=seq output=npr3_tracf.rsf >/dev/null\n\n       In this example the cmp sorted prestack  data,  npr3_gathers.rsf,   are\n       read  by  sftahread.  The headers are in the file npr3_gathers_hdr.rsf,\n       the headers parameter default.  The headers are merged with  the  trace\n       amplitudes  and the tah data sent down the pipe for sftahmakeskey.  sf‐\n       tahmakeskey creates the cdpt header and sftahwrite creates a  4  dimen‐\n       sional file.\n\n       PARAMETERS strings slocxy=\n\n       list of 2 header keys that are the input surface location key so use to\n       compute the slockey.\n\n       string slockey\n\n       the name of the output sloc header.\n\nPARAMETERS\n       string slockey =      The name of the sloc key created by the program.\n       string slocxy =\n\n                   two keys that are the trace headers names of the x,y  coor‐\n              dinate\n                   to  use to identify surface locations and compute the trace\n              header\n                   value for slockey\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahmakesloc.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftahmakesloc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahmute-Tuple{}","page":"Home","title":"Madagascar.sftahmute","text":"sftahmute(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahmute on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahmute. See ?m8r for examples.\n\nRSF Documentation\n\nsftahmute(1)                  Madagascar Manuals                  sftahmute(1)\n\nNAME\n       sftahmute - Read Trace And Header (tah) from standard input, MUTE.\n\nSYNOPSIS\n       sftahmute < in.rsf > out.rsf xmute= tmute= verbose=1 ntaper=12\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahmute  program is designed to mute data. Trace and header data\n       (tah) are read from standard input (usually a pipe).  The  trace  xmute\n       and  tmute parameter define the mute start time.  They are interpolated\n       to determine the start time for the trace using the trace  header  off‐\n       set.  The ntaper defines the length in samples of the taper.\n\n       EXAMPLE:\n\n       sftahsort                       input=shots-receivers-23900_headfix.rsf\n       sort=\"xline:600,601 offset\"                                 |  sftahnmo\n       tnmo=0,2,6,10.5,16     vnmo=1500,1500,2250,3250,3700     |    sftahmute\n       xmute=0,20000 tmute=0,20 ntaper=25                          |  sftahnmo\n       tnmo=0,2,6,10.5,16\n       vnmo=1500,1500,2250,3250,3700                                     inv=y\n       |  sftahmakeskey  pkey=xline  skey=cdpt                        | sftah‐\n       write                                                         verbose=1\n       label2=cdpt    o2=1   n2=100   d2=1                                 la‐\n       bel3=xline   o3=600   n3=1   d3=1                                  out‐\n       put=mutecmps.rsf                                         >/dev/null\n\n       sfgrey <mutecmps.rsf | sfpen\n\n       In  this example the shot organized prestack data in the file shots-re‐\n       ceivers-23900_headfix.rsf are read in xline offset order  by  sftahsort\n       program.   The  headers  are  in  the  file shots-receivers-23900_head‐\n       fix_hdr.rsf, the headers parameter default.   The  headers  are  merged\n       with  the trace amplitudes and the tah data sent down the pipe for nmo,\n       mute, and inverse nmo.  This sequence was used to apply the mute  using\n       times that were selected from a prestack gather with moveout applied.\n\n       The  sftahnmo  program  uses the velocity function defined by the tnmo,\n       vnmo parameters and the offset header to apply normal  moveout  to  the\n       traces.\n\n       sftahmute  zeros  the  shallow  data.  TLhe time samples above the line\n       through (time,offset) pairs (0,0)(20,20000), are set to zero. There  is\n       a 25 point taper applied below the zero portion of the traces.\n\n       A second sftahnmo execution applied inverse nmoout.  Other than inv=yes\n       the parameters are the same as in the first sftahnmo.\n\n       The program sftahmakeskey is used to create a secondary key used in the\n       following  sftahwrite  to  define the location to wrte the trace in the\n       output file. Sftahmakeskey makes a secondary key (skey=cdpt) the  count\n       the  traces starting in the a primary key gather (pkey=xline).  The in‐\n       put traces gathered by xline by sftahsort. Sftahmakeskey sets cdpt to 1\n       when the trace has a new xline.  If the trace has the same xline as the\n       previous trace cdpt is incremented\n\n       Sftahwrite writes the the trace data to mutecmp.rsf and the headers are\n       written to the file mutecmp_hdr.rsf.  The order of the data in the out‐\n       put file is defined by the cdpt and xline trace headers, so  the   data\n       order  is  (time,cmpt,xline).   Finally, the output volume is displayed\n       using sfgrey.\n\nPARAMETERS\n       int    ntaper =12\n\n                     number of samples in the taper of the mute.\n       floats tmute =\n\n                      List of floats the same length as list of floats in  the\n              xmute           parameter.  The (xmute,tmute) pairs are interpo‐\n              lated using the         trace headers offset to determine  trace\n              start  time.  The  mute  is         NOT moved based on the first\n              live sample.\n                [numtmute]\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\n       floats xmute =\n\n                      List of floats the same length as list of floats in  the\n              tmute           parameter.  The (xmute,tmute) pairs are interpo‐\n              lated using the         trace headers offset to determine  trace\n              start  time.   The  mute is         NOT moved based on the first\n              live sample.\n                [numxmute]\nSOURCE\n       user/karl/Mtahmute.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftahmute(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahnmo-Tuple{}","page":"Home","title":"Madagascar.sftahnmo","text":"sftahnmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahnmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahnmo. See ?m8r for examples.\n\nRSF Documentation\n\nsftahnmo(1)                   Madagascar Manuals                   sftahnmo(1)\n\nNAME\n       sftahnmo - Trace And Header Normal MoveOut\n\nSYNOPSIS\n       sftahnmo  < in.rsf > out.rsf vnmo= tnmo= verbose=1 str=0.5 lmute=12.*d1\n       inv=n offset= vfile= xline= iline=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahnmo uses offset in the trace headers to  apply  moveout  using\n       the  velocity  function  defined in the tnmo= vnmo= parameters. Largely\n       based on the seismic unix program sunmo.\n\n       NMO interpolation error is less than 1% for frequencies less  than  60%\n       of the Nyquist frequency.\n\n       Exact  inverse NMO is impossible, particularly for early times at large\n       offsets and for frequencies near Nyquist with large  interpolation  er‐\n       rors.\n\n       EXAMPLE:\n\n       sftahread   verbose=1   input=npr3_gathers.rsf   |  sftahnmo  verbose=1\n       tnmo=0,.373,.619,.826,.909,1.017,1.132,1.222,1.716,3.010\n       vnmo=9086,10244,11085,10803,10969,11578,12252,12669,14590,17116  |  sf‐\n       tahstack   key=iline,xline    verbose=1    |    sftahwrite    verbose=1\n       label2=\"xline\"  o2=1  n2=188  d2=1    label3=\"iline\"  o3=1  n3=345 d3=1\n       output=mappedstack.rsf >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In this example the cmp sorted prestack  data,  npr3_gathers.rsf,   are\n       read  by  sftahread.  The headers are in the file npr3_gathers_hdr.rsf,\n       the headers parameter default.  The headers are merged with  the  trace\n       amplitudes  and the tah data sent down the pipe for nmo and stack.  The\n       sftahstack program uses both the iline  and  xline  keys  to  determine\n       which  traces  blong  to a gather.  Using both keys avoids a problem on\n       edges of a survey when uising xline  along  may  merge  gathers  across\n       ilines  (a  special case that does sometimes happen). sftahwrite writes\n       the trace data to mappedstack.rsf and the headers are  written  to  the\n       file  mappedstack_hdr.rsf.  The order of the data in the output file is\n       defined by the iline and xline trace headers, so  the   data  order  is\n       (time,xline,iline).   Finally, the output volume is displayed using sf‐\n       grey.\n\nPARAMETERS\n       string iline =      name of the trace header key to index into vfile\n       bool   inv =n [y/n]     if y, do inverse nmo. Otherwise forward nmo\n       float  lmute =12.*d1      length of the mute zone in seconds\n       string offset =      name of the header key to use for offset  (usually\n              just offset)\n       float  str =0.5      maximum stretch allowed\n       floats tnmo =      list of NMO times for the vnmo velocities. [numtnmo]\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       string vfile = ®\n       floats vnmo =      list of NMO velocities for the tnmo times. [numvnmo]\n       string xline =      name of the trace header key to index into vfile\nSOURCE\n       user/karl/Mtahnmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftahnmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahpef-Tuple{}","page":"Home","title":"Madagascar.sftahpef","text":"sftahpef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahpef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahpef. See ?m8r for examples.\n\nRSF Documentation\n\nsftahpef(1)                   Madagascar Manuals                   sftahpef(1)\n\nNAME\n       sftahpef - Trace And Header Prediction Error Filtering\n\nSYNOPSIS\n       sftahpef  <  inp.rsf  >  out.rsf wiener=wien.rsf mix= verbose=1 minlag=\n       maxlag= pnoise=0.001 nmix=1 mincorr= maxcorr=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahpef applies prediction error filtering (often called decon)\n\n       EXAMPLE:\n\n       sftahsort                                                            //\n       verbose=0 input=npr3_field.rsf sort='fldr:214,254,10 tracf'          //\n       | sftahwindow ns=2047                                                //\n       | sftahgain   tpow=2                                                 //\n       | sftahmute  tmute=-.200,-.050,.200,3.00  xmute=0,880,1760,18000     //\n       ntaper=80                                                            //\n       | sftahpef                                                           //\n       verbose=1 minlag=.002 maxlag=.1  pnoise=.01 mincorr=0 maxcorr=3      //\n       | sftahagc  wagc=1.000 verbose=1                                     //\n       | sftahwrite verbose=1 mode=seq  output=pefshots.rsf                 //\n       >/dev/null\n\n       sfgrey <pefshots.rsf | sfpen\n\n       In this example unprocessed field traces are read by sftahsort from the\n       npr3_field.rsf  file.   sftahsort  was  used select just a 5 shotpoints\n       (fldr 214 to 254 incrementing by 10) from a large dataset.  The headers\n       are in the file npr3_filed_hdr.rsf, the headers parameter default.  The\n       headers are merged with the trace amplitudes and the tah data sent down\n       the pipe for further processing.\n\n       sftahwindow selects the first 2047 trace amplitudes.  The last two sam‐\n       ples on this data were bad, and are elliminated from  further  process‐\n       ing.\n\n       sftahgain  multiplies the traces by time squared (t**2).  This approxi‐\n       mately compensates for spreading loss that  makes  amplitude  at  large\n       time smaller than amplitude at small time.\n\n       sftahmute is applied to elliminate the data at small time/offset.\n\n       sftahpef  applies  prediction error filtering (or decon).  A prediction\n       gap or .002 seconds, or one sample) makes this decon  \"spiking\"  decon.\n       A three seconds window si selected to compute the autocorrelation and a\n       .1 second filter is computed and applied.\n\n       After decon a 1 second agc was applies using the sftahagc.\n\n       Data is written to the output  file,  pefshots.rsf,  using  sftahwrite.\n       Traces  headers  are written to pefshots_hdr.rsf.  The output file data\n       order is sequential, or just in the order sftahwrite  reads  them  from\n       standard input.\n\nPARAMETERS\n       float  maxcorr =      end of autocorrelation window in sec\n       float  maxlag =      last lag of prediction filter (sec)\n       float  mincorr =      start of autocorrelation window in sec\n       float  minlag =      first lag of prediction filter (sec)\n       floats mix  =       weights  for moving average of the autocorrelations\n              [nmix]\n       int    nmix =1      number of weights (floats) for moving averages\n       float  pnoise =0.001      relative additive noise level\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\n       string wiener =      file to output  Wiener  filter  (auxiliary  output\n              file name)\nSOURCE\n       user/karl/Mtahpef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftahpef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahread-Tuple{}","page":"Home","title":"Madagascar.sftahread","text":"sftahread(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahread on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahread. See ?m8r for examples.\n\nRSF Documentation\n\nsftahread(1)                  Madagascar Manuals                  sftahread(1)\n\nNAME\n       sftahread  -  Read Trace And Header from separate files, combine, write\n       to pipe\n\nSYNOPSIS\n       sftahread < infile.rsf > out.rsf verbose=1 makeheader=n input= headers=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin  with sftah are designed to: 1- read trace and headers from sepa‐\n       rate rsf files and write them to standard output (ie sftahread) 2- fil‐\n       ter  programs that read and write standard input/output and process the\n       tah data (eg sftahnmo, sftahstack) 3- read tah data from standard input\n       and  write separate rsf files for the trace and headers data (ie sftah‐\n       write)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some  programs  in  this suite are sftahread, sftahgethw, sftahhdrmath,\n       and sftahwrite.\n\n       EXAMPLE:\n\n       sftahread  verbose=1  input=npr3_gathers.rsf   |   sftahnmo   verbose=1\n       tnmo=0,.373,.619,.826,.909,1.017,1.132,1.222,1.716,3.010\n       vnmo=9086,10244,11085,10803,10969,11578,12252,12669,14590,17116  |  sf‐\n       tahstack    key=iline,xline    verbose=1    |    sftahwrite   verbose=1\n       label2=\"xline\" o2=1  n2=188  d2=1    label3=\"iline\"  o3=1  n3=345  d3=1\n       output=mappedstack.rsf >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In  this  example  the cmp sorted prestack data, npr3_gathers.rsf,  are\n       read by sftahread.  The headers are in the  file  npr3_gathers_hdr.rsf,\n       the  headers  parameter default.  The headers are merged with the trace\n       amplitudes and the tah data sent down the pipe for nmo and stack.   The\n       sftahwrite writes the trace data to mappedstack.rsf and the headers are\n       written to the file mappedstack_hdr.rsf.  The order of the data in  the\n       output  file  is  defined  by the iline and xline trace headers, so the\n       data order is (time,xline,iline).  Finally, the output volume  is  dis‐\n       played using sfgrey.\n\nPARAMETERS\n       string headers =\n\n                   Trace header file name.  Default is the input data file\n                   name, with the final .rsf changed to _hdr.rsf\n       string input =\n\n                   Input  file  for  traces  amplitudes.   You can list a file\n              here, has the\n                   input file name will be used to compute  the  name  of  the\n              header files.\n\n                   The  input  trace amplitudes can also be read from standard\n              input by\n                   just supplying standard input and omitting this  paramater,\n              This\n                   is useful it you wish to do sopme initial processing of the\n              input\n                   rsf file containing the trace amplitudes.  This  is  useful\n              if you need\n                   to change input axis labels to use the makeheader=yes.\n       bool   makeheader =n [y/n]\n\n                   Option  to  load  headers using the input file axis labels.\n              If axis\n                   label2 through label9 match a header key then that  coordi‐\n              nate is\n                   loaded  to the traces header.  This can be used to load the\n              source\n                   coordinate to the sx header  location.   This  may  require\n              changing\n                   the  axis  label because Madagascar axis labels are not the\n              same as\n                   segy trace headers.  for example axis 2 coordiante  can  be\n              loaded in\n                   sx trace header by:\n                      <spike.rsf  sfput label2=sx            | sftahread head‐\n              ers=spike_hdr.rsf makeheader=y\n                         | sftahgethw key=sx >/dev/null\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/boem-g3d1206-002a/displayin\n       data/bpvelanal2004/firstlook\nSOURCE\n       user/karl/Mtahread.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftahread(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahremoveclick-Tuple{}","page":"Home","title":"Madagascar.sftahremoveclick","text":"sftahremoveclick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahremoveclick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahremoveclick. See ?m8r for examples.\n\nRSF Documentation\n\nsftahremoveclick(1)           Madagascar Manuals           sftahremoveclick(1)\n\nNAME\n       sftahremoveclick - Trace And Header REMOVE electricl CLICK.\n\nSYNOPSIS\n       sftahremoveclick < in.rsf > out.rsf key= verbose=1\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahremoveclick  program  removes  electrical noise clicks.  This\n       noise has the same shape and same time on each trace, but the amplitude\n       varies  on each trace.  The noise is create by electrical interference.\n       EXAMPLE:\n\n       sftahread verbose=1 input=npr3_gathers.rsf | sftahclickremove verbose=1\n       |   sftahwrite   output=clickremove.rsf  o2=1  n2=2969636  label2=tracl\n       >/dev/null\n\n       The headers are in the file npr3_gathers_hdr.rsf, the headers parameter\n       default.   The headers are merged with the trace amplitudes and the tah\n       data sent down the pipe for sftahgethw.  Electrical  clicks  are  moved\n       from  the  data.   Traces  are  sent  to  STDOUT,  which is directed to\n       /dev/null (the bit bucket).\n\n       PARAMETERS strings key= no default\n\n       list of header keys print.  Look at the sfsegyread for a  list       of\n       header names.\n\nPARAMETERS\n       strings\n              key =       [numkeys]\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahremoveclick.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sftahremoveclick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahscdecon-Tuple{}","page":"Home","title":"Madagascar.sftahscdecon","text":"sftahscdecon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahscdecon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahscdecon. See ?m8r for examples.\n\nRSF Documentation\n\nsftahscdecon(1)               Madagascar Manuals               sftahscdecon(1)\n\nNAME\n       sftahscdecon - Trace And Header Surface Consistant Decon.\n\nSYNOPSIS\n       sftahscdecon  < in.rsf > out.rsf wiener=wien.rsf key= verbose=1 minlag=\n       maxlag= pnoise=0.001\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahsfdecon program applies surface consistant decon.\n\n       EXAMPLE:\n\n       sftahsort input=npr3_field.rsf sort=\"sx,sy\" | sftahgain  tpow=2  |  sf‐\n       tahmute   tmute=0.0,3.0   xmute=0,18000    |  sftahscdecon  key=\"sx,sy\"\n       length=140 pnoise=.001 verbose=0   |   sftahwrite  output=shotdecon.rsf\n       mode=seq >/dev/null\n\n       sftahsort  input=shotdecon.rsf  sort=\"gx,gy\" | sftahscdecon key=\"gx,gy\"\n       length=140 pmoise=.001 verbose=0   |   sftahwrite  output=s-g-decon.rsf\n       mode=seq >/dev/null\n\n       Traces   are   in   the   file   npr_field.rsf   anf   headers  in  the\n       npr_field_hdr.rsf file.  The headers are merged with the  trace  ampli‐\n       tudes and the tah data sent down the pipe for spreading loss correction\n       (sftahgain tpow=2), a pre decon mute (sftahmute)  and  shot  consistant\n       decon.  Data is written to the output file shotdecon.rsf and headers to\n       shotdecon_hdr.rsf.  In the next sequence the data is sorted in to  com‐\n       mon receiver domain so receiver consistent decon can be applied.\n\nPARAMETERS\n       string key =\n\n                   list of keys to watch to determine traces in a gather that\n                   will have a single decon operator applies.  Typically data\n                   is sorted by gx,gy then sftahscdecon run with key=\"gx,gy\".\n                   Then a second pass of scdecon is first sorting by sx,sy and\n                   running sftahscdecon with key=\"sx,sy\".\n                 ([numkeys])\n       float  maxlag =      last lag of prediction filter (sec)\n       float  minlag =      first lag of prediction filter (sec)\n       float  pnoise =0.001      relative additive noise level\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       string wiener  =       file  to  output  Wiener filter. never tested!!!\n              (auxiliary output file name)\nSOURCE\n       user/karl/Mtahscdecon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftahscdecon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahscscale-Tuple{}","page":"Home","title":"Madagascar.sftahscscale","text":"sftahscscale(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahscscale on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahscscale. See ?m8r for examples.\n\nRSF Documentation\n\nsftahscscale(1)               Madagascar Manuals               sftahscscale(1)\n\nNAME\n       sftahscscale  - Surface Consistant SCALE - Compute & apply surface con‐\n       sistant scale\n\nSYNOPSIS\n       sftahscscale  <  infile.rsf  >  out.rsf  verbose=1  starttime=o1   end‐\n       time=(n1_traces-1)*d1+o1 input= headers= sxy= gxy= sxyamp= gxyamp=\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are designed to: 1- read trace and headers from  sepa‐\n       rate rsf files and write them to standard output (ie sftahread) 2- fil‐\n       ter programs that read and write standard input/output and process  the\n       tah data (eg sftahnmo, sftahstack) 3- read tah data from standard input\n       and write separate rsf files for the trace and headers data (ie  sftah‐\n       write)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       EXAMPLE:\n\n       sftahscscale          input=../fetch/npr3_field.rsf         sxy=sxy.rsf\n       gxy=gxy.rsf sxyamp=sxyamp.rsf gxyamp=gxyamp.rsf | sftahwrite  verbose=1\n       label2=\"ep\"   o2=14  n2=850   d2=1    label3=\"tracf\"  o3=1 n3=1063 d3=1\n       output=scscale.rsf >/dev/null\n\n       sfgrey <scscale.rsf | sfpen\n\n       sftahscscale reads data from the file, applies scaling, and writes data\n       to STDOUT.  DO NOT USE WITH sftahread!\n\n       In  this  example the input data ../fetch/npr_field.rsf is read.  Trace\n       headers are read from ../fetch/npr_field_hdr.rsf (the dafault  for  the\n       headers parameter).  Trace order does not matter.  Shot data is likely,\n       but the program will process any trace order (eg cdp or receiver).  the\n       source x,y coordinates are written to sxy.rsf and the group x,y coordi‐\n       nates are written to gxy.rsf. The shot  consistant  amplitude  and  the\n       shot  x,y is written to sxyamp.rsf.  The group consistant amplitude and\n       the group x,y is written to gxyamp.rsf.  Surface consistant scaling  is\n       applied  to  the  data and the resulting trace and header is written to\n       the pipe.  The sftahwrite writes the trace data to scscale.rsf and  the\n       headers  are  written to the file scscale_hdr.rsf.  Finally, the output\n       volume is displayed using sfgrey.\n\nPARAMETERS\n       float  endtime =(n1_traces-1)*d1+o1 ®\n       string gxy = ®\n       string gxyamp = ®\n       string headers =\n\n                   Trace header file name.  Default is the input data file\n                   name, with the final .rsf changed to _hdr.rsf\n       string input =\n\n                   Input file for traces amplitudes\n       float  starttime =o1      start time to compute average trace ampltide\n       string sxy = ®\n       string sxyamp = ®\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahscscale.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftahscscale(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahsort-Tuple{}","page":"Home","title":"Madagascar.sftahsort","text":"sftahsort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahsort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahsort. See ?m8r for examples.\n\nRSF Documentation\n\nsftahsort(1)                  Madagascar Manuals                  sftahsort(1)\n\nNAME\n       sftahsort  - Read Trace And Header from separate files in sorted order,\n       write to pipe\n\nSYNOPSIS\n       sftahsort < infile.rsf > out.rsf verbose=1 input= headers= sort=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin  with sftah are designed to: 1- read trace and headers from sepa‐\n       rate rsf files and write them to standard output (ie sftahread) 2- fil‐\n       ter  programs that read and write standard input/output and process the\n       tah data (eg sftahnmo, sftahstack) 3- read tah data from standard input\n       and  write separate rsf files for the trace and headers data (ie sftah‐\n       write)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       EXAMPLE:\n\n       sftahsort                  verbose=1               input=npr3_field.rsf\n       sort=\"iline:100,200,50    +xline:100,140,10   offset\"  |  sftahmakeskey\n       pkey=iline,xline skey=cdpt  verbose=1  |  sftahwrite  verbose=1     la‐\n       bel2=\"cdpt\"  o2=1 n2=50  d2=1    label3=\"xline\" o3=100 n3=5 d3=10   la‐\n       bel4=\"iline\"    o4=100    n4=3     d4=50     output=mappedfieldsort.rsf\n       >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In  this  example  the cmp sorted prestack data, npr3_gathers.rsf,  are\n       read by sftahread.  The headers are in the  file  npr3_gathers_hdr.rsf,\n       the  headers  parameter default.  The headers are merged with the trace\n       amplitudes and the tah data sent down the pipe for nmo and stack.   The\n       sftahwrite writes the trace data to mappedstack.rsf and the headers are\n       written to the file mappedstack_hdr.rsf.  The order of the data in  the\n       output  file  is  defined  by the iline and xline trace headers, so the\n       data order is (time,xline,iline).  Finally, the output volume  is  dis‐\n       played using sfgrey.\n\nPARAMETERS\n       string headers =\n\n                   Trace header file name.  Default is the input data file\n                   name, with the final .rsf changed to _hdr.rsf\n       string input =\n\n                   Input file for traces amplitudes\n       string sort =\n\n                   list of the sort keys.  Each key must be a trace header key\n              name.\n                   It may be preceeded with + (the default) for ascending or -\n              for\n                   descending  sort  direction.   The key may be followed with\n              :min,max\n                   or :min,max,inc.  These parameters allow you  to  select  a\n              subset of\n                   of  the  traces based on the header key.  The sort keys are\n              blank\n                   seperated you should enclose the sort string in \"'s.  Exam‐\n              ples are\n                   sort=\"iline xline offset\" and sort=\"cdp:100,500,25 offset\"\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/bpmodel94/firstlook\n       data/bpstatics94/firstlook\n       data/bptti2007/firstlook\nSOURCE\n       user/karl/Mtahsort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftahsort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahspecbal-Tuple{}","page":"Home","title":"Madagascar.sftahspecbal","text":"sftahspecbal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahspecbal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahspecbal. See ?m8r for examples.\n\nRSF Documentation\n\nsftahspecbal(1)               Madagascar Manuals               sftahspecbal(1)\n\nNAME\n       sftahspecbal  -  Read Trace And Header (tah) from standard input, SPEC‐\n       tral BALance\n\nSYNOPSIS\n       sftahspecbal < in.rsf > out.rsf  xstart=  tstart=  verbose=1  ntaper=12\n       wagc=-1 pnoise=0.01 fmin=5 fmax=95 finc=5\n\nCOMMENTS\n       THIS  PROGRAM  WAS  WRITEN, BUT NEVER SUCESSFULLY TESTED.  RESULTS LOOK\n       POOR, BUT UNABLE TO SPEND TIME ON THE ALGORITHM, I ADDED IT TO THE  RE‐\n       POSOTORY AND HOPE TO RETURN TO WORK ON IT AGAIN... SOMEDAY!\n\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahspecbal program is designed to improve the resolution and ap‐\n       pearance of the final imaged seismic section (ie  after  migration  and\n       stack.   When  applied  to noisey land data early in the processing se‐\n       quence (after surface consisntant decon and before migration and stack)\n       it  attenuates  noise on post migration and stack data.  There are sev‐\n       eral algorithms called  spectral  balancing,  whitening,  or  broading.\n       This  program  implenents  a popular method.  Each input trace is split\n       into several narrow frequency bands by bandpass filtering.  AGC is  ap‐\n       plied to rach frequency band, and the frequency bands are summed.  User\n       parameters control the filter bands and  the  AGC  length.   (reference\n       http://www.xsgeo.com/course/spec.htm#content).\n\n       EXAMPLE:\n\n       sftahsort                       input=shots-receivers-23900_headfix.rsf\n       sort=\"xline:600,601 offset\"                              | sftahspecbal\n       fmin=5    fmax=95    finc=5    wagc=.250    noise=.05    |   sftahwrite\n       verbose=1                                                      mode=seq\n       output=specbalcmps.rsf                                   >/dev/null\n\n       sfimage <specbalcmps.rsf | sfpen\n\n       In  this example the shot organized prestack data in the file shots-re‐\n       ceivers-23900_headfix.rsf are read in xline offset order  by  sftahsort\n       program.   The  headers  are  in  the  file shots-receivers-23900_head‐\n       fix_hdr.rsf, the headers parameter default.   The  headers  are  merged\n       with the trace amplitudes and the tah data sent down the pipe for spec‐\n       tral balancing.\n\n       sftahspecbal, spectral balance, was run by dividing the data into 5  Hz\n       frequency bands, applying .25 second agc, summing the scaled bands, and\n       dividing by the sum of the scalars.\n\n       Sftahwrite writes the the trace data to specbalcmp.rsf and the  headers\n       are written to the file specbalcmp_hdr.rsf.  The output traces are just\n       sequentially written to the output file.  kls\n\n       PARAMETERS\n\n       float fmin= NULL\n\n       Center of the first frequency band.\n\nPARAMETERS\n       float  finc =5      frequency band increment\n       float  fmax =95      maximum frequency band\n       float  fmin =5      minimum frequency band\n       int    ntaper =12 ®\n       float  pnoise =0.01      relative additive noise level\n       floats tstart =       [numtstart]\n       int    verbose =1\n\n                     flag to control amount of print\n                     0 terse, 1 informative, 2 chatty, 3 debug\n       float  wagc =-1\n\n                     length of the agc window in seconds\n       floats xstart =       [numxstart]\nSOURCE\n       user/karl/Mtahspecbal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftahspecbal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahstack-Tuple{}","page":"Home","title":"Madagascar.sftahstack","text":"sftahstack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahstack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahstack. See ?m8r for examples.\n\nRSF Documentation\n\nsftahstack(1)                 Madagascar Manuals                 sftahstack(1)\n\nNAME\n       sftahstack  -  Read  Trace  And Header (tah) from STDIN, stack matching\n       header keys\n\nSYNOPSIS\n       sftahstack < in.rsf > out.rsf key= xmute= tmute= verbose=1 ntaper=12\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahstack program is designed to  stack  sorted  data.  Trace  and\n       header  data  (tah) are read from from standard input (usually a pipe).\n       Gathers to be stacked are defined by the input  parameter  'key'.   The\n       key  parameter  is a list of header keys to watch.  A new gather starts\n       when one of the header keys change.  On each gather the stack trace  is\n       initialized  to  zero,  traces  in the gather are summed, and the stack\n       trace is divided by the time variant fold, and the stacked trace  writ‐\n       ten  to  output.  The output trace header is taken from the first trace\n       in the input gather.\n\n       EXAMPLE:\n\n       sftahread  verbose=1  input=npr3_gathers.rsf   |   sftahnmo   verbose=1\n       tnmo=0,2,6,10.5,16    vnmo=1500,1500,2250,3250,3700     |    sftahstack\n       key=iline,xline xmute=0,20000 tmute=0,20 ntaper=25  |  sftahwrite  ver‐\n       bose=1                            label2=\"xline\" o2=1 n2=188 d2=1   la‐\n       bel3=\"iline\" o3=1 n3=345 d3=1   output=mappedstack.rsf >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In this example the cmp sorted prestack  data,  npr3_gathers.rsf,   are\n       read  by  sftahread.  The headers are in the file npr3_gathers_hdr.rsf,\n       the headers parameter default.  The headers are merged with  the  trace\n       amplitudes  and the tah data sent down the pipe for nmo and stack.  The\n       sftahstack program uses both the iline  and  xline  keys  to  determine\n       which  traces  blong  to a gather.  Using both keys avoids a problem on\n       edges of a survey when uising xline  along  may  merge  gathers  across\n       ilines  (a  special case that does sometimes happen). sftahwrite writes\n       the trace data to mappedstack.rsf and the headers are  written  to  the\n       file  mappedstack_hdr.rsf.  The order of the data in the output file is\n       defined by the iline and xline trace headers, so  the   data  order  is\n       (time,xline,iline).   Finally, the output volume is displayed using sf‐\n       grey.\n\n       PARAMETERS strings key= no default\n\n       list of header keys to monitor to determine when to break       between\n       gathers.  A gather is a sequence of traces with the      same value for\n       all the header keys.  Stack summs traces in      the gather, divides by\n       the fold, and outputs the stack trace.\n\n       floats xmute= NULL\n\n       List  of floats the same length as list of floats in the tmute      pa‐\n       rameter.  The (xmute,tmute) pairs are interpolated using the      trace\n       headers  offset to determine trace start time.  The mute is      always\n       increased to the first non-zero sample.  The default mutes      at  the\n       first non-zero sample.\n\n       floats tmute= NULL\n\n       List  of floats the same length as list of floats in the xmute      pa‐\n       rameter.  The (xmute,tmute) pairs are interpolated using the      trace\n       headers  offset  to determine trace start time. The mute is      always\n       increased to the first non-zero sample.  The default mutes      at  the\n       first non-zero sample.\n\n       int ntaper=12 the length of the taper to use at the start of the trace.\n\nPARAMETERS\n       strings\n              key =       [numkeys]\n       int    ntaper =12\n\n                     length of the taper on the stack mute\n       floats tmute =       [numtmute]\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\n       floats xmute =       [numxmute]\nSOURCE\n       user/karl/Mtahstack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftahstack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahstatic-Tuple{}","page":"Home","title":"Madagascar.sftahstatic","text":"sftahstatic(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahstatic on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahstatic. See ?m8r for examples.\n\nRSF Documentation\n\nsftahstatic(1)                Madagascar Manuals                sftahstatic(1)\n\nNAME\n       sftahstatic - Trace And Header STATIC\n\nSYNOPSIS\n       sftahstatic < in.rsf > out.rsf verbose=1 sign=1\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The  sftahstatic  applies  a  static computed using the sstat and gstat\n       trace headers. These headers are the source and receiver static in mil‐\n       liseconds.   The program also uses the input parameter sign. The static\n       applied:\n\n       tin=tout+sign*(sstat+gstat)\n\n       This means positive sstat+gstat and sign=1 will shift a trace \"up\".\n\n       Interpolation error is less than 1% for frequencies less  than  60%  of\n       the Nyquist frequency.\n\n       EXAMPLE:\n\n       sftahread  verbose=1 input=npr3_gathers.rsf | sftahstatic sign=-1 | sf‐\n       tahnmo                                                        verbose=1\n       tnmo=0,.373,.619,.826,.909,1.017,1.132,1.222,1.716,3.010\n       vnmo=9086,10244,11085,10803,10969,11578,12252,12669,14590,17116  |  sf‐\n       tahstack    key=iline,xline    verbose=1    |    sftahwrite   verbose=1\n       label2=\"xline\" o2=1  n2=188  d2=1    label3=\"iline\"  o3=1  n3=345  d3=1\n       output=mappedstack.rsf >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In  this  example  the cmp sorted prestack data, npr3_gathers.rsf,  are\n       read by sftahread.  The headers are in the  file  npr3_gathers_hdr.rsf,\n       the  headers  parameter default.  The headers are merged with the trace\n       amplitudes and the tah data sent down the pipe for  statics,  nmo,  and\n       stack.   The  sftahstack  program uses both the iline and xline keys to\n       determine which traces blong to a gather.  Using  both  keys  avoids  a\n       problem  on edges of a survey when uising xline along may merge gathers\n       across ilines (a special case that does sometimes  happen).  sftahwrite\n       writes the trace data to mappedstack.rsf and the headers are written to\n       the file mappedstack_hdr.rsf.  The order of the data in the output file\n       is  defined by the iline and xline trace headers, so the  data order is\n       (time,xline,iline).  Finally, the output volume is displayed using  sf‐\n       grey.\n\nPARAMETERS\n       int    sign =1      put the history from the input file to the output\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahstatic.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftahstatic(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahwindow-Tuple{}","page":"Home","title":"Madagascar.sftahwindow","text":"sftahwindow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahwindow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahwindow. See ?m8r for examples.\n\nRSF Documentation\n\nsftahwindow(1)                Madagascar Manuals                sftahwindow(1)\n\nNAME\n       sftahwindow - Trace And Header WINDOW\n\nSYNOPSIS\n       sftahwindow     <     in.rsf     >     out.rsf     reject=    verbose=0\n       tmax=(n1_traces-1)*d1+o1 min=INT_MIN max=INT_MAX key=\n\nCOMMENTS\n       tah is the abbreviation of Trace And Header.  Madagascar programs  that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate rsf files and write them to standard  output  (ie  sftahread)  2-\n       filter  programs  that read and write standard input/output and process\n       the tah data (eg sftahnmo, sftahstack) 3- read tah data  from  standard\n       input  and  write separate rsf files for the trace and headers data (ie\n       sftahwrite)\n\n       These programs allow Seismic Unix (su) like processing  in  Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahwindow program select a subset of the  traces.   Currently  it\n       will select a subset of the time range of each trace.  In the future it\n       needs to be upgraded to select traces based on trace  headers.   It  is\n       modelled on suwind.\n\n       EXAMPLE:\n\n       sftahread  verbose=1 input=npr3_field.rsf | sftahwindow tmax=4.092 ver‐\n       bose=0   |  sftahwrite    verbose=1   output=npr3_field1.rsf   mode=seq\n       >/dev/null\n\n       The  headers  are in the file npr3_field_hdr.rsf, the headers parameter\n       default.  The headers are merged with the trace amplitudes and the  tah\n       data  sent  down  the  pipe for sftahwindow.  The trace is shortened to\n       2047 samples to remove the two bad amplitudes observed at  the  end  of\n       most  of the traces on this file.  The traces are sent to STDOUT to sf‐\n       tahwrite, which write the data sequentially to the output file (ie  the\n       output files is just a bunch of traces.\n\n       PARAMETERS  Float tmax= maximum time in the input trace amplitude file.\n       Maximum time in seconds to limit the output trace\n\nPARAMETERS\n       string key = ®\n       int    max =INT_MAX ®\n       int    min =INT_MIN ®\n       ints   reject =       [numreject]\n       float  tmax =(n1_traces-1)*d1+o1      maximum time in seconds to  limit\n              the output trace\n       int    verbose =0\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nSOURCE\n       user/karl/Mtahwindow.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftahwindow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftahwrite-Tuple{}","page":"Home","title":"Madagascar.sftahwrite","text":"sftahwrite(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftahwrite on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftahwrite. See ?m8r for examples.\n\nRSF Documentation\n\nsftahwrite(1)                 Madagascar Manuals                 sftahwrite(1)\n\nNAME\n       sftahwrite  - Read Trace And Header (tah) from standard input, write to\n       separate files\n\nSYNOPSIS\n       sftahwrite <  in.rsf  >  out.rsf  verbose=1  label#=(2,...)  n#=(2,...)\n       o#=(2,...) d#=(2,...) output= outheaders= mode=\n\nCOMMENTS\n       tah  is the abbreviation of Trace And Header.  Madagascar programs that\n       begin with sftah are a designed to: 1- read trace and headers from sep‐\n       arate  rsf  files  and  write them to standard output (ie sftahread) 2-\n       filter programs that read and write standard input/output  and  process\n       the  tah  data (eg sftahnmo, sftahstack) 3- read tah data from standard\n       input and write separate rsf files for the trace and headers  data  (ie\n       sftahwrite)\n\n       These  programs  allow Seismic Unix (su) like processing in Madagascar.\n       Some programs have su like names.\n\n       Some programs in this suite are sftahread, sftahgethw, ftahhdrmath, and\n       sftahwrite.\n\n       The sftahwrite program reads the trace and header data (tah) from stan‐\n       dard input (usually a pipe), separates the trace data from  the  header\n       data.  The trace data is written to output and the header is written to\n       outheaders.  The output files can  be  mapped  or  sequential.   Mapped\n       files  use  to  trace  header  to determine the location in the file to\n       write the trace.  The iline and xline headers are used in the following\n       example  to put stacked data in (time, xline, iline) order so it can be\n       viewed using sfgrey. Sequential files order the traces in the  file  in\n       the  order  they are read from standard output.  Sequential files are a\n       good way to save traces when the order is  not  important.   Sequential\n       files are especially useful to save prestack seismic data.  The follow‐\n       ing example also saves the data in sequential mode.\n\n       EXAMPLE:\n\n       sftahread  verbose=1  input=npr3_gathers.rsf   |   sftahnmo   verbose=1\n       tnmo=0,.373,.619,.826,.909,1.017,1.132,1.222,1.716,3.010\n       vnmo=9086,10244,11085,10803,10969,11578,12252,12669,14590,17116  |  sf‐\n       tahstack    key=iline,xline    verbose=1    |    sftahwrite   verbose=1\n       label2=\"xline\" o2=1  n2=188  d2=1    label3=\"iline\"  o3=1  n3=345  d3=1\n       output=mappedstack.rsf          |          sftahwrite         verbose=1\n       mode=seq output=seqstack.rsf >/dev/null\n\n       sfgrey <mappedstack.rsf | sfpen\n\n       In this example the cmp sorted prestack  data,  npr3_gathers.rsf,   are\n       read  by  sftahread.  The headers are in the file npr3_gathers_hdr.rsf,\n       the headers parameter default.  The headers are merged with  the  trace\n       amplitudes  and the tah data sent down the pipe for nmo and stack.  The\n       sftahwrite writes the trace data to mappedstack.rsf and the headers are\n       written  to the file mappedstack_hdr.rsf.  The order of the data in the\n       output file is defined by the iline and xline  trace  headers,  so  the\n       data  order  is (time,xline,iline).  Finally, the output volume is dis‐\n       played using sfgrey.\n\nPARAMETERS\n       float  d# =(2,...)       delta in the #-th dimension\n       string label# =(2,...)       name of each of the axes.           label1\n              is  not  changed  from input. Each label must be a        header\n              key like cdp, cdpt, or ep.  The trace header         values  are\n              used  to  define  the output trace location in        the output\n              file.\n       string mode =\n\n                   mapped - order traces in the output file by traces headers\n                            use label2, label3... n2, n3, ..., o2, o3, ..  and\n              d2, d3,..\n                   seq  - just write the traces to the output files in the or‐\n              der\n                         read from STDIN\n       largeint\n              n# =(2,...)       number of locations in the #-th dimension\n       float  o# =(2,...)       origin of the #-th dimension\n       string outheaders =\n\n                   Output trace header file name.  Default is the input data\n                   file name, with the final .rsf changed to _hdr.rsf.\n       string output =\n\n                   output trace filename. Required parameter with no default.\n       int    verbose =1\n\n                   flag to control amount of print\n                   0 terse, 1 informative, 2 chatty, 3 debug\nUSED IN\n       data/boem-g3d1206-002a/displayin\n       data/bpmodel94/firstlook\n       data/bpstatics94/firstlook\n       data/bptti2007/firstlook\n       data/bpvelanal2004/firstlook\nSOURCE\n       user/karl/Mtahwrite.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftahwrite(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftan2ang-Tuple{}","page":"Home","title":"Madagascar.sftan2ang","text":"sftan2ang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftan2ang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftan2ang. See ?m8r for examples.\n\nRSF Documentation\n\nsftan2ang(1)                  Madagascar Manuals                  sftan2ang(1)\n\nNAME\n       sftan2ang - tangent to angle transformation\n\nSYNOPSIS\n       sftan2ang   <   Fstk.rsf   >   Fang.rsf   velocity=velocity.rsf   na=nt\n       da=90/(nt-1) a0=0. extend=4 top=n\n\nPARAMETERS\n       float  a0 =0.  ®\n       float  da =90/(nt-1) ®\n       int    extend =4      tmp extension\n       int    na =nt ®\n       bool   top =n [y/n]\n       file   velocity =      auxiliary input file name\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2006TimeShiftImagingCondition/zicig\nSOURCE\n       system/seismic/Mtan2ang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftan2ang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftan2dang-Tuple{}","page":"Home","title":"Madagascar.sftan2dang","text":"sftan2dang(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftan2dang on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftan2dang. See ?m8r for examples.\n\nRSF Documentation\n\nsftan2dang(1)                 Madagascar Manuals                 sftan2dang(1)\n\nNAME\n       sftan2dang - 2-D slowness vector to angle transformation.\n\nSYNOPSIS\n       sftan2dang  < in.rsf > out.rsf na=360 da=0.5 oa=0.0 nr=2*nsx dr=0.5*dsx\n       or=osx\n\nPARAMETERS\n       float  da =0.5 ®\n       float  dr =0.5*dsx      line summation sampling\n       int    na =360 ®\n       int    nr =2*nsx      line summation samples\n       float  oa =0.0 ®\n       float  or =osx      line summation origin\nSOURCE\n       user/browaeys/Mtan2dang.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftan2dang(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftaperedge-Tuple{}","page":"Home","title":"Madagascar.sftaperedge","text":"sftaperedge(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftaperedge on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftaperedge. See ?m8r for examples.\n\nRSF Documentation\n\nsftaperedge(1)                Madagascar Manuals                sftaperedge(1)\n\nNAME\n       sftaperedge - Taper based on data parameters\n\nSYNOPSIS\n       sftaperedge < dataFile.rsf > maskFile.rsf len=11\n\nCOMMENTS\n       Input - \"inline/xline\" plane\n\nPARAMETERS\n       int    len =11      length of the taper function\nSOURCE\n       user/aklokov/Mtaperedge.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftaperedge(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftaupfit-Tuple{}","page":"Home","title":"Madagascar.sftaupfit","text":"sftaupfit(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftaupfit on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftaupfit. See ?m8r for examples.\n\nRSF Documentation\n\nsftaupfit(1)                  Madagascar Manuals                  sftaupfit(1)\n\nNAME\n       sftaupfit - Fitting tau-p approximations\n\nSYNOPSIS\n       sftaupfit < in.rsf coef=coef.rsf > out.rsf fit=fit.rsf type=\n\nPARAMETERS\n       file   coef =      auxiliary input file name\n       file   fit =      auxiliary output file name\n       string type =      Type of approximation (iso,vti)\nSOURCE\n       user/fomels/Mtaupfit.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftaupfit(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftaupmo-Tuple{}","page":"Home","title":"Madagascar.sftaupmo","text":"sftaupmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftaupmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftaupmo. See ?m8r for examples.\n\nRSF Documentation\n\nsftaupmo(1)                   Madagascar Manuals                   sftaupmo(1)\n\nNAME\n       sftaupmo - Normal moveout in tau-p domain.\n\nSYNOPSIS\n       sftaupmo  <  taup.rsf  velocity=velocity.rsf > nmod.rsf slope=slope.rsf\n       velx=velocityx.rsf mute=12 str=0.5 extend=4 interval=y\n\nPARAMETERS\n       int    extend =4      interpolation accuracy\n       bool   interval =y [y/n]     use interval velocity\n       int    mute =12      mute zone\n       string slope =      auxiliary input file name\n       float  str =0.5      maximum stretch\n       file   velocity =      auxiliary input file name\n       string velx =      auxiliary input file name\nSOURCE\n       system/seismic/Mtaupmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftaupmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftclip-Tuple{}","page":"Home","title":"Madagascar.sftclip","text":"sftclip(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftclip on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftclip. See ?m8r for examples.\n\nRSF Documentation\n\nsftclip(1)                    Madagascar Manuals                    sftclip(1)\n\nNAME\n       sftclip - Clip to threshold.\n\nSYNOPSIS\n       sftclip < inp.rsf > out.rsf lowercut=0.2 uppercut=0.8\n\nPARAMETERS\n       float  lowercut =0.2 ®\n       float  uppercut =0.8 ®\nSOURCE\n       system/generic/Mtclip.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sftclip(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftcor-Tuple{}","page":"Home","title":"Madagascar.sftcor","text":"sftcor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftcor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftcor. See ?m8r for examples.\n\nRSF Documentation\n\nsftcor(1)                     Madagascar Manuals                     sftcor(1)\n\nNAME\n       sftcor  -  Interferometric  cross-correlation  of time series (zero-lag\n       output)\n\nSYNOPSIS\n       sftcor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1\n\nPARAMETERS\n       int    nht =1 ®\n       int    nhx =0 ®\n       int    nhz =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mtcor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sftcor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftdconvert-Tuple{}","page":"Home","title":"Madagascar.sftdconvert","text":"sftdconvert(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftdconvert on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftdconvert. See ?m8r for examples.\n\nRSF Documentation\n\nsftdconvert(1)                Madagascar Manuals                sftdconvert(1)\n\nNAME\n       sftdconvert - Iterative time-to-depth velocity conversion\n\nSYNOPSIS\n       sftdconvert  <  in.rsf  >  out.rsf  dix=dix.rsf  t0=t_0.rsf  x0=x_0.rsf\n       f0=f_0.rsf grad=grad.rsf cost=cost.rsf mask=mini.rsf prec=prec.rsf  ve‐\n       locity=y  order=1  thres=10. niter=1 cgiter=200 shape=n eps=0.1 nline=0\n       verb=n tol=1.e-6 rect#=(1,1,...) mval=\n\nPARAMETERS\n       int    cgiter =200      number of CG iterations\n       string cost =      auxiliary output file name\n       string dix =      auxiliary input file name\n       float  eps =0.1      regularization parameter\n       string f0 =      auxiliary output file name\n       string grad =      auxiliary output file name\n       string mask =      auxiliary input file name\n       string mval = ®\n       int    niter =1      number of nonlinear updates\n       int    nline =0      maximum number of line search (default turned-off)\n       int    order =1      fastmarch accuracy order\n       string prec =      auxiliary input file name\n       int    rect# =(1,1,...)       smoothing radius on #-th axis\n       bool   shape =n [y/n]     regularization (default Tikhnov)\n       string t0 =      auxiliary output file name\n       float  thres =10.       thresholding for caustics\n       float  tol =1.e-6      tolerance for shaping regularization\n       bool   velocity =y [y/n]     y, input is velocity / n, slowness-squared\n       bool   verb =n [y/n]     verbosity flag\n       string x0 =      auxiliary output file name\nSOURCE\n       user/llisiw/Mtdconvert.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftdconvert(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftdr-Tuple{}","page":"Home","title":"Madagascar.sftdr","text":"sftdr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftdr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftdr. See ?m8r for examples.\n\nRSF Documentation\n\nsftdr(1)                      Madagascar Manuals                      sftdr(1)\n\nNAME\n       sftdr -\n\nSYNOPSIS\n       sftdr  <  sonica.rsf  > tdrFo.rsf < tdrNewa.rsf sonicFo=sonicFo.rsf ms=\n       stretch= dels= tdrNew=\n\nCOMMENTS\n       Update sonic well log\n\n       Use the initial sonic well log and an updated TDR to generate  and  up‐\n       dated sonic log and TDR\n\nPARAMETERS\n       float  dels =      Depth step (units of m or ft)\n       int    ms =      (0 = Units of sonic in s); (1 = Units of sonic in ms)\n       file   sonicFo =      auxiliary output file name\n       float  stretch  =      (0 = Output TDR from input sonic log); (1 = Out‐\n              put updated sonic and TDR)\n       string tdrNew = ®\nSOURCE\n       user/sbader/Mtdr.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sftdr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftelemig2d-Tuple{}","page":"Home","title":"Madagascar.sftelemig2d","text":"sftelemig2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftelemig2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftelemig2d. See ?m8r for examples.\n\nRSF Documentation\n\nsftelemig2d(1)                Madagascar Manuals                sftelemig2d(1)\n\nNAME\n       sftelemig2d - None\n\nSYNOPSIS\n       sftelemig2d  <  infile.rsf  Svel=Svelfile.rsf  rwf=rwffile.rsf swf=swf‐\n       file.rsf > outfile.rsf  cig=cigfile.rsf  nh=0  source_norm=n  verbose=n\n       forward=n ntaper=40 eps=0.01\n\nPARAMETERS\n       file   Svel =      auxiliary input file name\n       file   cig =      auxiliary output file name\n       eps    =0.01      Taper on the side boundaries (npts)\n       forward\n              =n      Forward scattering (T/F)\n       nh     =0      Number of subsurface offsets (between 1 and 128)\n       ntaper =40      Taper on the side boundaries (npts)\n       file   rwf =      auxiliary input file name\n       source_norm\n              =n      Normalize the image by the power of the SWF (T/F)\n       file   swf =      auxiliary input file name\n       verbose\n              =n      Verbose (T/F)\nSOURCE\n       user/jeff/Mtelemig2d.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftelemig2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftentwt-Tuple{}","page":"Home","title":"Madagascar.sftentwt","text":"sftentwt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftentwt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftentwt. See ?m8r for examples.\n\nRSF Documentation\n\nsftentwt(1)                   Madagascar Manuals                   sftentwt(1)\n\nNAME\n       sftentwt - Tent-like weight for patching.\n\nSYNOPSIS\n       sftentwt > wallwt.rsf windwt=windwt.rsf w= k= a= center= dim=2 tent=y\n\nPARAMETERS\n       ints   a =      filter size [dim]\n       ints   center =       [dim]\n       int    dim =2      number of dimensions\n       ints   k =      number of windows [dim]\n       bool   tent =y [y/n]     if y, use tent-like weight; n, cosine weight\n       ints   w =      window size [dim]\n       file   windwt =      auxiliary output file name\nSOURCE\n       user/gee/Mtentwt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftentwt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftest1_matchl1-Tuple{}","page":"Home","title":"Madagascar.sftest1_matchl1","text":"sftest1_matchl1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftest1_matchl1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftest1_matchl1. See ?m8r for examples.\n\nRSF Documentation\n\nsftest1matchl1(1)            Madagascar Manuals            sftest1matchl1(1)\n\nNAME\n       sftest1_matchl1 - L1 1D matched filter\n\nSYNOPSIS\n       sftest1_matchl1  <  inp.rsf  filt=filt.rsf > out.rsf mult=mult.rsf nb=3\n       verb=n niter=100 perc=90.0\n\nPARAMETERS\n       file   filt =      auxiliary output file name\n       string mult =      auxiliary input file name\n       int    nb =3      matched-filter order\n       int    niter =100      number of POCS iterations\n       float  perc =90.0      percentage for sharpening\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/lcasasan/Mtest1_matchl1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftest1_matchl1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftest2_matchl1-Tuple{}","page":"Home","title":"Madagascar.sftest2_matchl1","text":"sftest2_matchl1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftest2_matchl1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftest2_matchl1. See ?m8r for examples.\n\nRSF Documentation\n\nsftest2matchl1(1)            Madagascar Manuals            sftest2matchl1(1)\n\nNAME\n       sftest2_matchl1 - L1 1D matched filter\n\nSYNOPSIS\n       sftest2_matchl1  <  inp.rsf  filt=filt.rsf > out.rsf mult=mult.rsf nb=3\n       verb=n niter=100 liter=nb perc=90.0\n\nPARAMETERS\n       file   filt =      auxiliary output file name\n       int    liter =nb      number of CG iterations\n       string mult =      auxiliary input file name\n       int    nb =3      matched-filter order\n       int    niter =100      number of POCS iterations\n       float  perc =90.0      percentage for sharpening\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/lcasasan/Mtest2_matchl1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftest2_matchl1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestanal-Tuple{}","page":"Home","title":"Madagascar.sftestanal","text":"sftestanal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestanal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestanal. See ?m8r for examples.\n\nRSF Documentation\n\nsftestanal(1)                 Madagascar Manuals                 sftestanal(1)\n\nNAME\n       sftestanal - Test Analytical for constant velocity background\n\nSYNOPSIS\n       sftestanal  <  in.rsf > out.rsf source1=o1 source2=o2 s1=0. s2=0. s3=0.\n       v0=1.\n\nPARAMETERS\n       float  s1 =0.  ®\n       float  s2 =0.  ®\n       float  s3 =0.       imaginary source point\n       float  source1 =o1 ®\n       float  source2 =o2      real source point\n       float  v0 =1.       constant velocity background\nSOURCE\n       user/llisiw/Mtestanal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftestanal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestapef-Tuple{}","page":"Home","title":"Madagascar.sftestapef","text":"sftestapef(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestapef on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestapef. See ?m8r for examples.\n\nRSF Documentation\n\nsftestapef(1)                 Madagascar Manuals                 sftestapef(1)\n\nNAME\n       sftestapef - Test linear adaptive PEF operator.\n\nSYNOPSIS\n       sftestapef  <  in.rsf  >  out.rsf sfilt=sfilt.rsf nfilt=nfilt.rsf adj=y\n       verb=n sign=y\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, perform adjoint operation\n       file   nfilt =      auxiliary input file name\n       file   sfilt =      auxiliary input file name\n       bool   sign =y [y/n]     if y, test signal PEF; otherwise,  test  noise\n              PEF\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mtestapef.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftestapef(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestcasoper-Tuple{}","page":"Home","title":"Madagascar.sftestcasoper","text":"sftestcasoper(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestcasoper on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestcasoper. See ?m8r for examples.\n\nRSF Documentation\n\nsftestcasoper(1)              Madagascar Manuals              sftestcasoper(1)\n\nNAME\n       sftestcasoper - Test linear cascading matching-Radon operator.\n\nSYNOPSIS\n       sftestcasoper  <  in.rsf  > out.rsf filt=fil.rsf adj=n inv=n verb=n np=\n       dp= p0= niter=100 freq=y parab=n x0=1. rho=y anti=1. p1=0.\n\nPARAMETERS\n       bool   adj =n [y/n]     if y, perform adjoint operation\n       float  anti =1.       antialiasing, only when freq=n\n       float  dp =      p sampling\n       file   filt =      auxiliary input file name\n       bool   freq =y [y/n]     if y, parabolic Radon transform\n       bool   inv =n [y/n]     if y, perform inverse operation\n       int    niter =100 ®\n       int    np =      number of p values\n       float  p0 =      p origin\n       float  p1 =0.       reference slope, only when freq=n\n       bool   parab =n [y/n]     if y, parabolic Radon  transform,  only  when\n              freq=y\n       bool   rho =y [y/n]     rho filtering, only when freq=n\n       bool   verb =n [y/n]     verbosity flag\n       float  x0 =1.       reference offset\nSOURCE\n       user/yliu/Mtestcasoper.c\nVERSION\n       4.2-git Mtestcasoper.c 5959 2010-05-14 04:11:09Z yang_liu\n\nMadagascar                         JULY 2024                  sftestcasoper(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestcg-Tuple{}","page":"Home","title":"Madagascar.sftestcg","text":"sftestcg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestcg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestcg. See ?m8r for examples.\n\nRSF Documentation\n\nsftestcg(1)                   Madagascar Manuals                   sftestcg(1)\n\nNAME\n       sftestcg - None\n\nSYNOPSIS\n       sftestcg\n\nSOURCE\n       user/harlan/Mtestcg.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftestcg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestlist-Tuple{}","page":"Home","title":"Madagascar.sftestlist","text":"sftestlist(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestlist on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestlist. See ?m8r for examples.\n\nRSF Documentation\n\nsftestlist(1)                 Madagascar Manuals                 sftestlist(1)\n\nNAME\n       sftestlist - Inventory test results of Madagascar example book directo‐\n       ries.\n\nSYNOPSIS\n       sftestlist levels=3 outfile= untested=n\n\nCOMMENTS\n       Scan a directory tree (or list of directory trees) to  a  given  depth,\n       and inventory the contents and test results.\n\n       The  inventory  occurs only at the specified depth (default 3), not the\n       intervening depths.  Directories named .svn are skipped.  Only directo‐\n       ries containing an SConstruct file are listed.\n\n       Examples (from within $RSFSRC):\n\n       sftestlist  book                         # inventory of book sftestlist\n       levels=2 book/geostats       # inventory of book/geostats\n\nPARAMETERS\n       int    levels =3      directory search depth\n       string outfile =      file name for detailed inventory  table,  default\n              none\n       bool   untested =n [y/n]     list untested examples?\nSOURCE\n       user/jennings/Mtestlist.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftestlist(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftestmatch-Tuple{}","page":"Home","title":"Madagascar.sftestmatch","text":"sftestmatch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftestmatch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftestmatch. See ?m8r for examples.\n\nRSF Documentation\n\nsftestmatch(1)                Madagascar Manuals                sftestmatch(1)\n\nNAME\n       sftestmatch - Test linear matching operator.\n\nSYNOPSIS\n       sftestmatch < in.rsf > out.rsf filt=fil.rsf adj=y verb=n\n\nPARAMETERS\n       bool   adj =y [y/n]     if y, perform adjoint operation\n       file   filt =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mtestmatch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftestmatch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftf2dprec-Tuple{}","page":"Home","title":"Madagascar.sftf2dprec","text":"sftf2dprec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftf2dprec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftf2dprec. See ?m8r for examples.\n\nRSF Documentation\n\nsftf2dprec(1)                 Madagascar Manuals                 sftf2dprec(1)\n\nNAME\n       sftf2dprec  - TF Weights Preconditioner for Real input as linear opera‐\n       tor\n\nSYNOPSIS\n       sftf2dprec < src.rsf > out.rsf w=w.rsf wf=wf.rsf adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   w =      auxiliary input file name\n       file   wf =      auxiliary input file name\nSOURCE\n       user/fomels/Mtf2dprec.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftf2dprec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftfchain-Tuple{}","page":"Home","title":"Madagascar.sftfchain","text":"sftfchain(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftfchain on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftfchain. See ?m8r for examples.\n\nRSF Documentation\n\nsftfchain(1)                  Madagascar Manuals                  sftfchain(1)\n\nNAME\n       sftfchain - Find a chain of Fourier weighting and scaling\n\nSYNOPSIS\n       sftfchain   <   src.rsf   >   wht.rsf  target=tgt.rsf  fweight=fwht.rsf\n       match=mch.rsf rect=1 frect=1 niter=0 liter=50\n\nPARAMETERS\n       int    frect =1      smoothing in frequency\n       file   fweight =      auxiliary output file name\n       int    liter =50      number of linear iterations\n       file   match =      auxiliary output file name\n       int    niter =0      number of iterations\n       int    rect =1      smoothing in time\n       file   target =      auxiliary input file name\nSOURCE\n       user/fomels/Mtfchain.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftfchain(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftheoreqiq-Tuple{}","page":"Home","title":"Madagascar.sftheoreqiq","text":"sftheoreqiq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftheoreqiq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftheoreqiq. See ?m8r for examples.\n\nRSF Documentation\n\nsftheoreqiq(1)                Madagascar Manuals                sftheoreqiq(1)\n\nNAME\n       sftheoreqiq  -  Output  theoretical  interval  Q value and equivalent Q\n       value.\n\nSYNOPSIS\n       sftheoreqiq > out.rsf teq=teq.rsf at= q= verb=n n1=1000 d1=0.001  o1=0.\n       nc=1\n\nPARAMETERS\n       ints   at =      (at=[at1,at2,...] layer quality factor) [nc]\n       float  d1 =0.001      sampling on time axis\n       int    n1 =1000      size of time axis\n       int    nc =1      number of layer\n       float  o1 =0.       origin on time axis\n       ints   q =      (q=[q1,q2,...] layer quality factor) [nc]\n       string teq =      auxiliary output file name\n       bool   verb =n [y/n]     basic parameters\nSOURCE\n       user/yliu/Mtheoreqiq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftheoreqiq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthickat-Tuple{}","page":"Home","title":"Madagascar.sfthickat","text":"sfthickat(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthickat on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthickat. See ?m8r for examples.\n\nRSF Documentation\n\nsfthickat(1)                  Madagascar Manuals                  sfthickat(1)\n\nNAME\n       sfthickat - None\n\nSYNOPSIS\n       sfthickat < reflectors.rsf refseis=reference.rsf > thickness.rsf\n\nPARAMETERS\n       file   refseis =      auxiliary input file name\nSOURCE\n       user/mehdi/Mthickat.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfthickat(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthin-Tuple{}","page":"Home","title":"Madagascar.sfthin","text":"sfthin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthin. See ?m8r for examples.\n\nRSF Documentation\n\nsfthin(1)                     Madagascar Manuals                     sfthin(1)\n\nNAME\n       sfthin - Sparse deconvolution.\n\nSYNOPSIS\n       sfthin  <  seis.rsf  >  refl.rsf  wave=wave.rsf conv=conv.rsf niter=100\n       eps=0.0001 pclip=4\n\nPARAMETERS\n       string conv =      auxiliary output file name\n       float  eps =0.0001      regularization for Wiener deconvolution\n       int    niter =100      maximum number of iterations\n       float  pclip =4      percentage to threshold\n       file   wave =      auxiliary input file name\nSOURCE\n       user/fomels/Mthin.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfthin(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthplot-Tuple{}","page":"Home","title":"Madagascar.sfthplot","text":"sfthplot(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthplot on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthplot. See ?m8r for examples.\n\nRSF Documentation\n\nsfthplot(1)                   Madagascar Manuals                   sfthplot(1)\n\nNAME\n       sfthplot - Hidden-line surface plot.\n\nSYNOPSIS\n       sfthplot < in.rsf uflag=y dflag=y alpha=45. titlsz=9 axissz=6 plotfat=0\n       titlefat=2 axisfat=2 plotcolup=VP_YELLOW  plotcoldn=VP_RED  wanttitle=y\n       axis=y  axis1=y axis2=y axis3=y clip=0. pclip=100. gainstep=0.5+nx/256.\n       bias=0. dclip=1. norm=y xc=1.5 zc=3 ratio=5. zmax= zmin= sz=6. title= >\n       plot.vpl\n\nPARAMETERS\n       float  alpha =45.       apparent angle in degrees, |alpha| < 89\n       bool   axis =y [y/n]\n       bool   axis1 =y [y/n]\n       bool   axis2 =y [y/n]\n       bool   axis3 =y [y/n]     plot axis\n       int    axisfat =2      axes fatness\n       int    axissz =6      axes size\n       float  bias =0.       subtract bias from data\n       float  clip =0.       data clip\n       float  dclip =1.       change the clip: clip *= dclip\n       bool   dflag =y [y/n]     if y, plot down side of the surface\n       int    gainstep  =0.5+nx/256.       subsampling for gpow and clip esti‐\n              mation\n       bool   norm =y [y/n]     normalize by the clip\n       float  pclip =100.       data clip percentile\n       int    plotcoldn =VP_RED      color of the lower side\n       int    plotcolup =VP_YELLOW      color of the upper side\n       int    plotfat =0      line fatness\n       float  ratio =5.       plot adjustment\n       float  sz =6.       vertical scale\n       string title = ®\n       int    titlefat =2      title fatness\n       int    titlsz =9      title size\n       bool   uflag =y [y/n]     if y, plot upper side of the surface\n       bool   wanttitle =y [y/n]\n       float  xc =1.5 ®\n       float  zc =3      lower left corner of the plot\n       float  zmax = ®\n       float  zmin = ®\nSOURCE\n       plot/main/thplot.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfthplot(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthr-Tuple{}","page":"Home","title":"Madagascar.sfthr","text":"sfthr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthr. See ?m8r for examples.\n\nRSF Documentation\n\nsfthr(1)                      Madagascar Manuals                      sfthr(1)\n\nNAME\n       sfthr - Threshold float/complex inputs given a constant/varying thresh‐\n       old level.\n\nSYNOPSIS\n       sfthr < in.rsf > out.rsf fthr=fthr.rsf thr= mode=\n\nCOMMENTS\n       Methods available: - soft - hard - non-negative Garrote (nng)\n\n       Written by: Gilles Hennenfent & Colin Russell,  UBC  Created:  February\n       2006\n\nPARAMETERS\n       string fthr =      varying threshold level (positive number) (auxiliary\n              input file name)\n       string mode =      'soft', 'hard', 'nng' (default: soft)\n       float  thr =      threshold level (positive number)\nSOURCE\n       user/slim/Mthr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfthr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreads-Tuple{}","page":"Home","title":"Madagascar.sfthreads","text":"sfthreads(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreads on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreads. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreads(1)                  Madagascar Manuals                  sfthreads(1)\n\nNAME\n       sfthreads - Testing Posix threads\n\nSYNOPSIS\n       sfthreads kernels= times=\n\nPARAMETERS\n       int    kernels =      Number of kernel threads to create\n       int    times =      Number of SQRT loops to execute\nSOURCE\n       user/mccowan/Mthreads.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfthreads(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreedcube-Tuple{}","page":"Home","title":"Madagascar.sfthreedcube","text":"sfthreedcube(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreedcube on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreedcube. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreedcube(1)               Madagascar Manuals               sfthreedcube(1)\n\nNAME\n       sfthreedcube  -  Interactively  displays  a  3D  cube of RSF data using\n       Python + MayaVi2 + VTK.\n\nSYNOPSIS\n       sfthreedcube < fin.rsf\n\nCOMMENTS\n       REQUIRES NUMPY, SCIPY, and MAyaVi2\n\nSOURCE\n       user/godwinj/Mthreedcube.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfthreedcube(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreshold-Tuple{}","page":"Home","title":"Madagascar.sfthreshold","text":"sfthreshold(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreshold on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreshold. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreshold(1)                Madagascar Manuals                sfthreshold(1)\n\nNAME\n       sfthreshold - Soft thresholding.\n\nSYNOPSIS\n       sfthreshold < in.rsf > out.rsf pclip=\n\nCOMMENTS\n       November         2014        program        of        the        month:\n       http://ahay.org/blog/2014/11/12/program-of-the-month-sfthreshold/\n\nPARAMETERS\n       float  pclip =      percentage to clip\nSOURCE\n       system/generic/Mthreshold.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfthreshold(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreshold1-Tuple{}","page":"Home","title":"Madagascar.sfthreshold1","text":"sfthreshold1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreshold1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreshold1. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreshold1(1)               Madagascar Manuals               sfthreshold1(1)\n\nNAME\n       sfthreshold1  -  Soft  or  hard  thresholding using exact-value or per‐\n       centile thresholding.\n\nSYNOPSIS\n       sfthreshold1 < in.rsf > out.rsf other=other.rsf ifperc=1 ifverb=0  thr=\n       type=\n\nCOMMENTS\n       When type=soft and ifperc=1, sfthreshold1 is equal to sfthreshold.\n\nPARAMETERS\n       int    ifperc   =1       0,  exact-value  thresholding;  1,  percentile\n              thresholding.\n       int    ifverb =0      0, not print threshold value; 1, print  threshold\n              value.\n       string other  =       If  output the difference between the thresholded\n              part and the original one (auxiliary output file name)\n       float  thr =      thresholding level\n       string type =      [soft,hard] thresholding type, the default is soft\nSOURCE\n       user/chenyk/Mthreshold1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfthreshold1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreshold2-Tuple{}","page":"Home","title":"Madagascar.sfthreshold2","text":"sfthreshold2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreshold2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreshold2. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreshold2(1)               Madagascar Manuals               sfthreshold2(1)\n\nNAME\n       sfthreshold2 - 2-D Soft thresholding.\n\nSYNOPSIS\n       sfthreshold2 < in.rsf > out.rsf thr=thr.rsf verb=n pclip=99.\n\nPARAMETERS\n       float  pclip =99.  ®\n       string thr =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mthreshold2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfthreshold2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfthreshold3-Tuple{}","page":"Home","title":"Madagascar.sfthreshold3","text":"sfthreshold3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfthreshold3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfthreshold3. See ?m8r for examples.\n\nRSF Documentation\n\nsfthreshold3(1)               Madagascar Manuals               sfthreshold3(1)\n\nNAME\n       sfthreshold3 - Automatic soft or hard thresholding.\n\nSYNOPSIS\n       sfthreshold3 < in.rsf > out.rsf type= dist=\n\nPARAMETERS\n       string dist  =       [gaussian,rayleigh] distribution type, the default\n              is gaussian\n       string type =      [soft,hard] thresholding type, the default is soft\nSOURCE\n       user/yliu/Mthreshold3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfthreshold3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftif2byte-Tuple{}","page":"Home","title":"Madagascar.sftif2byte","text":"sftif2byte(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftif2byte on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftif2byte. See ?m8r for examples.\n\nRSF Documentation\n\nsftif2byte(1)                 Madagascar Manuals                 sftif2byte(1)\n\nNAME\n       sftif2byte - Convert TIFF image to byte RSF.\n\nSYNOPSIS\n       sftif2byte > out.rsf < file.tiff\n\nSOURCE\n       user/fomels/_tif2byte.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftif2byte(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftilr2-Tuple{}","page":"Home","title":"Madagascar.sftilr2","text":"sftilr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftilr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftilr2. See ?m8r for examples.\n\nRSF Documentation\n\nsftilr2(1)                    Madagascar Manuals                    sftilr2(1)\n\nNAME\n       sftilr2  -  Lowrank  decomposition for 2-D anisotropic wave propagation\n       using exact phase velocity (2 step time marching).\n\nSYNOPSIS\n       sftilr2  <  velz.rsf  fft=fft.rsf  left=left.rsf  >  right.rsf   type=1\n       seed=time(NULL eps=1.e-4 npk=20 dt=\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       type   =1      wave mode (1=p wave, 2=Sv wave)\nSOURCE\n       user/jsun/Mtilr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sftilr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftilrzone-Tuple{}","page":"Home","title":"Madagascar.sftilrzone","text":"sftilrzone(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftilrzone on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftilrzone. See ?m8r for examples.\n\nRSF Documentation\n\nsftilrzone(1)                 Madagascar Manuals                 sftilrzone(1)\n\nNAME\n       sftilrzone - Lowrank decomposition for 2-D anisotropic wave propagation\n       using exact phase velocity (2 step time marching).\n\nSYNOPSIS\n       sftilrzone <  c11.rsf  fft=fft.rsf  left=left.rsf  >  right.rsf  mode=0\n       seed=time(NULL eps=1.e-4 npk=20 dt= approx=false\n\nPARAMETERS\n       approx =false      whether to use zone's approximation\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      wave mode (0=p wave, 1=Sv wave)\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mtilrzone.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftilrzone(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftime2depth-Tuple{}","page":"Home","title":"Madagascar.sftime2depth","text":"sftime2depth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftime2depth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftime2depth. See ?m8r for examples.\n\nRSF Documentation\n\nsftime2depth(1)               Madagascar Manuals               sftime2depth(1)\n\nNAME\n       sftime2depth - Time-to-depth conversion in V(z).\n\nSYNOPSIS\n       sftime2depth  < in.rsf velocity=velocity.rsf > out.rsf intime=n nz= dz=\n       z0=0. extend=4 slow=n twoway=y eps=0.01\n\nCOMMENTS\n       July         2013         program         of         the         month:\n       http://www.ahay.org/blog/2013/07/01/program-of-the-month-sftime2depth/\n\nPARAMETERS\n       float  dz =      Depth sampling (default: d1)\n       float  eps =0.01      stretch regularization\n       int    extend =4      Interpolation accuracy\n       bool   intime =n [y/n]     y if velocity is in time rather than depth\n       int    nz =      Number of depth samples (default: n1)\n       bool   slow =n [y/n]     If y, input slowness; if n, velocity\n       bool   twoway =y [y/n]     if y, two-way traveltime\n       file   velocity =      auxiliary input file name\n       float  z0 =0.       Depth origin\nUSED IN\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       system/seismic/Mtime2depth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftime2depth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftime2depthweak-Tuple{}","page":"Home","title":"Madagascar.sftime2depthweak","text":"sftime2depthweak(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftime2depthweak on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftime2depthweak. See ?m8r for examples.\n\nRSF Documentation\n\nsftime2depthweak(1)           Madagascar Manuals           sftime2depthweak(1)\n\nNAME\n       sftime2depthweak  - Time-to-depth conversion in media with weak lateral\n       variations 2D (Sripanich and Fomel, 2017).\n\nSYNOPSIS\n       sftime2depthweak < in.rsf dvdx0=dveldx0.rsf dvdt0=dveldt0.rsf refveloc‐\n       ity=refvelocity.rsf     outdt0=outdeltime.rsf     outdx0=outdeldist.rsf\n       outdv=outdelv.rsf zsubsample=100 nderiv=10 refderiv=1.  smoothlen=nx/20\n       nsmooth=10\n\nPARAMETERS\n       file   dvdt0 =      auxiliary input file name\n       file   dvdx0 =      auxiliary input file name\n       int    nderiv =10      Derivative filter order\n       int    nsmooth =10      Smoothing repeat\n       file   outdt0 =      auxiliary output file name\n       file   outdv =      auxiliary output file name\n       file   outdx0 =      auxiliary output file name\n       float  refderiv =1.       Deriveative filter reference (0.5 < ref <= 1)\n       file   refvelocity =      auxiliary input file name\n       int    smoothlen =nx/20      Smoothing filter length\n       int    zsubsample =100      Additional subsampling in depth for stabil‐\n              ity\nSOURCE\n       user/zone/Mtime2depthweak.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sftime2depthweak(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftimecont-Tuple{}","page":"Home","title":"Madagascar.sftimecont","text":"sftimecont(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftimecont on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftimecont. See ?m8r for examples.\n\nRSF Documentation\n\nsftimecont(1)                 Madagascar Manuals                 sftimecont(1)\n\nNAME\n       sftimecont - Forward or reverse time continuation using fast marching.\n\nSYNOPSIS\n       sftimecont < vel.rsf > time.rsf surf=time0.rsf forwd=n vel=y order=2\n\nPARAMETERS\n       bool   forwd =n [y/n]     continue forward or backward\n       int    order =2 [1,2]     Accuracy order\n       file   surf =      auxiliary input file name\n       bool   vel  =y  [y/n]     if  y,  the  input  is  velocity; n, slowness\n              squared\nSOURCE\n       user/fomels/Mtimecont.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftimecont(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftimefreq-Tuple{}","page":"Home","title":"Madagascar.sftimefreq","text":"sftimefreq(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftimefreq on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftimefreq. See ?m8r for examples.\n\nRSF Documentation\n\nsftimefreq(1)                 Madagascar Manuals                 sftimefreq(1)\n\nNAME\n       sftimefreq - Time-frequency analysis using local attributes.\n\nSYNOPSIS\n       sftimefreq  <  time.rsf  >  timefreq.rsf  mask=mask.rsf  nw=  dw= w0=0.\n       rect=10 niter=100 phase=n\n\nPARAMETERS\n       float  dw =      f    requency step\n       string mask =      auxiliary input file name\n       int    niter =100      number of inversion iterations\n       int    nw =      number of frequencies\n       bool   phase =n [y/n]     output phase instead of amplitude\n       int    rect =10      smoothing radius\n       float  w0 =0.       first frequency\nSOURCE\n       user/fomels/Mtimefreq.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftimefreq(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftimerev2d-Tuple{}","page":"Home","title":"Madagascar.sftimerev2d","text":"sftimerev2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftimerev2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftimerev2d. See ?m8r for examples.\n\nRSF Documentation\n\nsftimerev2d(1)                Madagascar Manuals                sftimerev2d(1)\n\nNAME\n       sftimerev2d  - 2-D correlative time reversal imaging of passive seismic\n       data\n\nSYNOPSIS\n       sftimerev2d < in.rsf > out.rsf  velocity=vel.rsf  wave=wave.rsf  verb=n\n       abc=n snap=0 depth=0 ngrp=1 cb=0.0f\n\nPARAMETERS\n       bool   abc =n [y/n]     absorbing boundary condition\n       float  cb =0.0f ®\n       int    depth =0      geophone depth\n       int    ngrp =1      number of groups\n       int    snap =0      wavefield snapshot flag\n       file   velocity =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   wave =      auxiliary output file name\nSOURCE\n       user/jsun/Mtimerev2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftimerev2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftimeshift-Tuple{}","page":"Home","title":"Madagascar.sftimeshift","text":"sftimeshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftimeshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftimeshift. See ?m8r for examples.\n\nRSF Documentation\n\nsftimeshift(1)                Madagascar Manuals                sftimeshift(1)\n\nNAME\n       sftimeshift - Apply variable time shifts using plane-wave construction.\n\nSYNOPSIS\n       sftimeshift < inp.rsf > out.rsf dip=dip.rsf eps=0.01 order=1\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       float  eps =0.01      regularization\n       int    order =1      accuracy order\nSOURCE\n       user/pwd/Mtimeshift.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftimeshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftinterp-Tuple{}","page":"Home","title":"Madagascar.sftinterp","text":"sftinterp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftinterp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftinterp. See ?m8r for examples.\n\nRSF Documentation\n\nsftinterp(1)                  Madagascar Manuals                  sftinterp(1)\n\nNAME\n       sftinterp - Traveltime interpolation by cubic Hermite spline\n\nSYNOPSIS\n       sftinterp < in.rsf > out.rsf deriv=deriv.rsf pattern=pattern.rsf type=\n\nPARAMETERS\n       string deriv =      auxiliary input file name\n       string pattern =      auxiliary input file name\n       string type =      type of interpolation (default Hermit)\nSOURCE\n       user/llisiw/Mtinterp.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftinterp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftkirinv-Tuple{}","page":"Home","title":"Madagascar.sftkirinv","text":"sftkirinv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftkirinv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftkirinv. See ?m8r for examples.\n\nRSF Documentation\n\nsftkirinv(1)                  Madagascar Manuals                  sftkirinv(1)\n\nNAME\n       sftkirinv  -  2-D least-squares Kirchhoff pre-stack time migration with\n       different regul..\n\nSYNOPSIS\n       sftkirinv   <   in.rsf   vel=vel.rsf   >   out.rsf    offset=offset.rsf\n       fdip=fdip.rsf   ompchunk=1   ompnth=0  verb=n  half=y  amp=y  ncdp=ncmp\n       dcdp=dcmp cdp0=cmp0 reg=0 antialias=1.0 apt=ncmp  rho=1.-1./nt  niter=5\n       nw=3 err=\n\nCOMMENTS\n       regularization (or preconditioning) operator: reg=0: no regularization;\n       reg=1: regularization => first derivative  along  offset  axis;  reg=2:\n       precondition => causual integration along offset axis; reg=3: precondi‐\n       tion => triangle smoother along offset axis, reg=4: precondition => lo‐\n       cal slope constraints along t-x plane and smoothing along offset axis\n\nPARAMETERS\n       bool   amp =y [y/n]     if y, use amplitue factor\n       float  antialias =1.0      antialiasing\n       float  apt =ncmp      migration aperture\n       float  cdp0 =cmp0 ®\n       float  dcdp =dcmp ®\n       string err =      output file for error\n       string fdip =      auxiliary input file name\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    ncdp =ncmp ®\n       int    niter =5      number of iterations\n       int    nw =3 ®\n       string offset =      auxiliary input file name\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       int    reg =0      regularization type\n       float  rho =1.-1./nt      Leaky integration constant\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/seisinv/Mtkirinv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftkirinv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftkirmig-Tuple{}","page":"Home","title":"Madagascar.sftkirmig","text":"sftkirmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftkirmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftkirmig. See ?m8r for examples.\n\nRSF Documentation\n\nsftkirmig(1)                  Madagascar Manuals                  sftkirmig(1)\n\nNAME\n       sftkirmig - 2-D Kirchhoff pre-stack time migration/demigration.\n\nSYNOPSIS\n       sftkirmig  <  in.rsf vel=vel.rsf > out.rsf offset=offset.rsf ompchunk=1\n       ompnth=0  adj=y  verb=n  half=y  amp=y  ncdp=ncmp  dcdp=dcmp  cdp0=cmp0\n       ncmp=ncdp dcmp=dcdp cmp0=cdp0 antialias=1.0 apt=ncmp rho=1.-1./nt\n\nCOMMENTS\n       The  axes  in the data are {time,cmp,offset} The axes in the offset are\n       {1,cmp,offset} The axes in the image are {time,cdp,offset}\n\nPARAMETERS\n       bool   adj =y [y/n]     yes: migration, no: modeling\n       bool   amp =y [y/n]     if y, use amplitue factor\n       float  antialias =1.0      antialiasing\n       float  apt =ncmp      migration aperture\n       float  cdp0 =cmp0 ®\n       float  cmp0 =cdp0 ®\n       float  dcdp =dcmp ®\n       float  dcmp =dcdp ®\n       bool   half =y [y/n]     if y, the third axis is half-offset instead of\n              full offset\n       int    ncdp =ncmp ®\n       int    ncmp =ncdp ®\n       string offset =      auxiliary input file name\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  rho =1.-1./nt      Leaky integration constant\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/seisinv/Mtkirmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftkirmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftlagtoang2d-Tuple{}","page":"Home","title":"Madagascar.sftlagtoang2d","text":"sftlagtoang2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftlagtoang2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftlagtoang2d. See ?m8r for examples.\n\nRSF Documentation\n\nsftlagtoang2d(1)              Madagascar Manuals              sftlagtoang2d(1)\n\nNAME\n       sftlagtoang2d - SS(t-lag) to angle transformation (PP or PS waves)\n\nSYNOPSIS\n       sftlagtoang2d   <   Fstk.rsf   >  Fang.rsf  vpvs=Fgam.rsf  dip=Fdip.rsf\n       vel=Fvel.rsf verb=n inv=n na=sf_n(as) da=1./(sf_n(as)-1) oa=0. extend=4\n\nPARAMETERS\n       float  da =1./(sf_n(as)-1) ®\n       file   dip =      auxiliary input file name\n       int    extend =4      tmp extension\n       bool   inv =n [y/n]     inverse transformation flag\n       int    na =sf_n(as) ®\n       float  oa =0.  ®\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       file   vpvs =      auxiliary input file name\nSOURCE\n       system/seismic/Mtlagtoang2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftlagtoang2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftmigda-Tuple{}","page":"Home","title":"Madagascar.sftmigda","text":"sftmigda(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftmigda on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftmigda. See ?m8r for examples.\n\nRSF Documentation\n\nsftmigda(1)                   Madagascar Manuals                   sftmigda(1)\n\nNAME\n       sftmigda - 3D time scattering-angle Kirchhoff migration\n\nSYNOPSIS\n       sftmigda  <  dataFile.rsf  vel=velFile.rsf  >  imageFile.rsf semb=semb‐\n       File.rsf dag=dagFile.rsf cig=cigFile.rsf is3d=n axis2label=0 isAA=y is‐\n       DipAz=y    hmign=dp.hNum    sembWindow=11   edgeTaper=5.f   itn=dp.zNum\n       ixn=dp.xNum iyn=rp.is3D  ?  vp.yNum  :  1  ito=dp.zStart  ixo=dp.xStart\n       iyo=dp.yStart  itd=dp.zStep  ixd=dp.xStep  iyd=dp.yStep  dipn=1 sdipn=1\n       dipo=0.f sdipo=90.f dipd=1.f sdipd=1.f\n\nPARAMETERS\n       int    axis2label =0      0 - shot; 1 - cmp; 2 - receiver\n       string cig =      output file containing CIGs in the surface-offset do‐\n              main (auxiliary output file name)\n       string dag  =       output file containing CIGs in the dip-angle domain\n              (auxiliary output file name)\n       float  dipd =1.f      step in dip-angle\n       int    dipn =1      number of dip-angles\n       float  dipo =0.f      first dip-angle\n       float  edgeTaper =5.f      edge taper for dip-angle gathers (in degree)\n       int    hmign =dp.hNum      number of migrated offsets\n       bool   is3d =n [y/n]     if y, apply 3D migration\n       bool   isAA =y [y/n]     if y, apply anti-aliasing\n       bool   isDipAz =y [y/n]     if y, apply dip/azimuth mode; if  n,  apply\n              inline/crossline angle mode\n       float  itd =dp.zStep      step in imaged times (in ms)\n       int    itn =dp.zNum      number of imaged times\n       float  ito =dp.zStart      first imaged time (in ms)\n       float  ixd =dp.xStep      step in imaged inlines\n       int    ixn =dp.xNum      number of imaged inlines\n       float  ixo =dp.xStart      first imaged inline\n       float  iyd =dp.yStep      step in imaged crosslines\n       int    iyn =rp.is3D ? vp.yNum : 1      number of imaged crosslines\n       float  iyo =dp.yStart      first imaged crossline\n       float  sdipd =1.f      step in secondary (azimuth or crossline) angle\n       int    sdipn =1      number of secondary (azimuth or crossline) angles\n       float  sdipo =90.f      first secondary (azimuth or crossline) angle\n       string semb  =       output  file  containing semblance measure of CIGs\n              stacking (auxiliary output file name)\n       int    sembWindow =11      vertical window  for  semblance  calculation\n              (in samples)\n       string vel  =      velocity model file (velocity in m/s) (auxiliary in‐\n              put file name)\nSOURCE\n       user/aklokov/Mtmigda.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftmigda(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftomo-Tuple{}","page":"Home","title":"Madagascar.sftomo","text":"sftomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftomo. See ?m8r for examples.\n\nRSF Documentation\n\nsftomo(1)                     Madagascar Manuals                     sftomo(1)\n\nNAME\n       sftomo - Simple tomography test.\n\nSYNOPSIS\n       sftomo  <  time.rsf > slow.rsf adj=n niter=100 eps=1. tol=1.e-7 rect1=1\n       rect2=1 np=11 ns=1 ds=nz\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, generate traveltime from slowness;\n                     if y, invert slowness from traveltime\n       int    ds =nz      step size\n       float  eps =1.       scaling parameter\n       int    niter =100      maximum number of iterations\n       int    np =11 ®\n       int    ns =1      number of depth steps\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing length in z and x\n       float  tol =1.e-7      tolerance for stopping iterations\nSOURCE\n       user/fomels/Mtomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sftomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftop-Tuple{}","page":"Home","title":"Madagascar.sftop","text":"sftop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftop. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftouch-Tuple{}","page":"Home","title":"Madagascar.sftouch","text":"sftouch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftouch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftouch. See ?m8r for examples.\n\nRSF Documentation\n\nsftouch(1)                    Madagascar Manuals                    sftouch(1)\n\nNAME\n       sftouch - Applies the Unix command touch to binaries of RSF datasets in\n       a directory.\n\nSYNOPSIS\n       sftouch verb=n dir=. rec=n chk4nan=n\n\nCOMMENTS\n       Will go down recursively in subdirectories. Current date  and  time  is\n       used.   Useful for determining disk leaks: Orphan binaries (those with‐\n       out headers) will not be touched. You can  remove  them  with  commands\n       such as: find $DATAPATH -type f -mmin +15 -exec rm -f {} ;\n\nPARAMETERS\n       bool   chk4nan =n [y/n]     Check for NaN values. Expensive!!\n       string dir =.       Directory with files\n       bool   rec =n [y/n]     Whether to go down recursively\n       bool   verb =n [y/n]     Display what is wrong with the dataset\nSOURCE\n       user/ivlad/Mtouch.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sftouch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftour-Tuple{}","page":"Home","title":"Madagascar.sftour","text":"sftour(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftour on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftour. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftowed_array-Tuple{}","page":"Home","title":"Madagascar.sftowed_array","text":"sftowed_array(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftowed_array on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftowed_array. See ?m8r for examples.\n\nRSF Documentation\n\nsftowedarray(1)              Madagascar Manuals              sftowedarray(1)\n\nNAME\n       sftowed_array - None\n\nSYNOPSIS\n       sftowed_array\n\nSOURCE\n       trip/iwave/trace/main/towed_array.cc\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftowed_array(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftpow-Tuple{}","page":"Home","title":"Madagascar.sftpow","text":"sftpow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftpow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftpow. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrace2-Tuple{}","page":"Home","title":"Madagascar.sftrace2","text":"sftrace2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrace2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrace2. See ?m8r for examples.\n\nRSF Documentation\n\nsftrace2(1)                   Madagascar Manuals                   sftrace2(1)\n\nNAME\n       sftrace2 - 2-D multiple arrivals by cell ray tracing.\n\nSYNOPSIS\n       sftrace2  < vel.rsf > outp.rsf size=size.rsf grid=grid.rsf na=60 da=3.1\n       a0=-90. maxsplit=10 minx=0.5*dx maxx=2.*dx mina=0.5*da maxa=2.*da vel=y\n       order=3 lsint=n\n\nPARAMETERS\n       float  a0 =-90.       initial angle (in degrees)\n       float  da =3.1      angle increment (in degrees)\n       file   grid =      auxiliary output file name\n       bool   lsint =n [y/n]     if use least-squares interpolation\n       float  maxa =2.*da ®\n       int    maxsplit =10      maximum splitting for adaptive grid\n       float  maxx =2.*dx ®\n       float  mina =0.5*da ®\n       float  minx =0.5*dx      parameters for adaptive grid\n       int    na =60      number of angles\n       int    order =3      velocity interpolation order\n       file   size =      auxiliary output file name\n       bool   vel =y [y/n]     y: velocity, n: slowness\nSOURCE\n       user/fomels/Mtrace2.c\nVERSION\n       4.2-git Mtrace2.c 853 2004-11-05 12:54:22Z fomels\n\nMadagascar                         JULY 2024                       sftrace2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftracealign-Tuple{}","page":"Home","title":"Madagascar.sftracealign","text":"sftracealign(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftracealign on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftracealign. See ?m8r for examples.\n\nRSF Documentation\n\nsftracealign(1)               Madagascar Manuals               sftracealign(1)\n\nNAME\n       sftracealign - None\n\nSYNOPSIS\n       sftracealign   <   infile.rsf   monitor=monitorfile.rsf  >  outfile.rsf\n       times=timefile.rsf maxshift= nlen= vel=1500.\n\nPARAMETERS\n       maxshift\n              =      Maximum allowed time shift\n       file   monitor =      auxiliary input file name\n       nlen   =      Window length of shift vector (in samples)\n       file   times =      auxiliary output file name\n       vel    =1500.       Rupture speed for linear shift\nSOURCE\n       user/jeff/Mtracealign.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftracealign(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftraces-Tuple{}","page":"Home","title":"Madagascar.sftraces","text":"sftraces(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftraces on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftraces. See ?m8r for examples.\n\nRSF Documentation\n\nsftraces(1)                   Madagascar Manuals                   sftraces(1)\n\nNAME\n       sftraces - Make traces with reverberations for testing deconvolution.\n\nSYNOPSIS\n       sftraces > traces.rsf\n\nSOURCE\n       su/main/traces.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftraces(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftransconv-Tuple{}","page":"Home","title":"Madagascar.sftransconv","text":"sftransconv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftransconv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftransconv. See ?m8r for examples.\n\nRSF Documentation\n\nsftransconv(1)                Madagascar Manuals                sftransconv(1)\n\nNAME\n       sftransconv -\n\nSYNOPSIS\n       sftransconv  <  _in.rsf  > _out.rsf trans=_trans.rsf ker=_ker.rsf adj=n\n       x1=0. x2=0.\n\nCOMMENTS\n       program translates a 2D image then convolves it with arbitrary kernel\n\nPARAMETERS\n       bool   adj =n [y/n]     if y reverse translation, if n, translation\n       string ker =      convolution kernel file (auxiliary input file name)\n       string trans =      variable translations file with  same  sampling  as\n              input, added ndim dimension (auxiliary input file name)\n       float  x1 =0.       fixed translation in first dimension\n       float  x2 =0.       fixed translation in second dimension\nSOURCE\n       user/luke/Mtransconv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftransconv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftranslate-Tuple{}","page":"Home","title":"Madagascar.sftranslate","text":"sftranslate(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftranslate on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftranslate. See ?m8r for examples.\n\nRSF Documentation\n\nsftranslate(1)                Madagascar Manuals                sftranslate(1)\n\nNAME\n       sftranslate -\n\nSYNOPSIS\n       sftranslate < _in.rsf > _out.rsf trans=_trans.rsf adj=n x1=0. x2=0.\n\nCOMMENTS\n       program translates a 2D image\n\nPARAMETERS\n       bool   adj =n [y/n]     if y reverse translation, if n, translation\n       string trans =      auxiliary input file name\n       float  x1 =0.       fixed translation in first dimension\n       float  x2 =0.       fixed translation in second dimension\nSOURCE\n       user/luke/Mtranslate.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftranslate(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftransp-Tuple{}","page":"Home","title":"Madagascar.sftransp","text":"sftransp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftransp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftransp. See ?m8r for examples.\n\nRSF Documentation\n\nsftransp(1)                   Madagascar Manuals                   sftransp(1)\n\nNAME\n       sftransp - Transpose two axes in a dataset.\n\nSYNOPSIS\n       sftransp < in.rsf > out.rsf memsize=sf_memsize() plane=\n\nCOMMENTS\n       If  you  get  a \"Cannot allocate memory\" error, give the program a mem‐\n       size=1 command-line parameter to force out-of-core operation.\n\nPARAMETERS\n       int    memsize =sf_memsize()      Max amount of RAM (in Mb) to be used\n       int    plane =      Two-digit number with axes to  transpose.  The  de‐\n              fault is 12\nUSED IN\n       bei/dpmv/krchdmo\n       bei/fdm/kjartjac\n       bei/trimo/mod\n       chen/test/wavmod\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cup/rna3d/shot\n       cup/rna3d/sin\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/zicig\n       cwp/geo2007StereographicImagingCondition/flat4\n       cwp/geo2007StereographicImagingCondition/gaus1\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\n       cwp/geo2009TTIModeSeparation/fold\n       cwp/geo2009TTIModeSeparation/marmousi2\n       cwp/geo2009TTIModeSeparation/tti3\n       14 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sf‐\n       transp.html\nSOURCE\n       system/main/transp.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sftransp\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftransp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftransp12-Tuple{}","page":"Home","title":"Madagascar.sftransp12","text":"sftransp12(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftransp12 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftransp12. See ?m8r for examples.\n\nRSF Documentation\n\nsftransp12(1)                 Madagascar Manuals                 sftransp12(1)\n\nNAME\n       sftransp12 - Transpose 1-2\n\nSYNOPSIS\n       sftransp12 < Fin.rsf > Fou.rsf verb=n memsize=1000.0\n\nPARAMETERS\n       float  memsize =1000.0 ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mtransp12.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftransp12(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrapepass-Tuple{}","page":"Home","title":"Madagascar.sftrapepass","text":"sftrapepass(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrapepass on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrapepass. See ?m8r for examples.\n\nRSF Documentation\n\nsftrapepass(1)                Madagascar Manuals                sftrapepass(1)\n\nNAME\n       sftrapepass - Trapezoid bandpass filter in the frequency domain.\n\nSYNOPSIS\n       sftrapepass < in.rsf > out.rsf\n\nCOMMENTS\n       f1,  f2, f3, f4 correspond to four key points of the trapezoid bandpass\n       filter.\n\nSOURCE\n       user/chenyk/Mtrapepass.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftrapepass(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrapez-Tuple{}","page":"Home","title":"Madagascar.sftrapez","text":"sftrapez(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrapez on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrapez. See ?m8r for examples.\n\nRSF Documentation\n\nsftrapez(1)                   Madagascar Manuals                   sftrapez(1)\n\nNAME\n       sftrapez - Convolution with a trapezoidal filter.\n\nSYNOPSIS\n       sftrapez < in.rsf > out.rsf frequency=\n\nPARAMETERS\n       floats frequency     =          frequencies     (in    Hz),    default:\n              (0.1,0.15,0.45,0.5)*Nyquist [4]\nSOURCE\n       system/generic/Mtrapez.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftrapez(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftraveltime2d-Tuple{}","page":"Home","title":"Madagascar.sftraveltime2d","text":"sftraveltime2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftraveltime2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftraveltime2d. See ?m8r for examples.\n\nRSF Documentation\n\nsftraveltime2d(1)             Madagascar Manuals             sftraveltime2d(1)\n\nNAME\n       sftraveltime2d - Oriented zero-offset migration.\n\nSYNOPSIS\n       sftraveltime2d  <  dist.rsf  time=time.rsf dept=dept.rsf len=lent.rsf >\n       imagt.rsf xsrc= tolz= tolx= frontt0= frontdt= frontnt= fronteps= inter‐\n       polate= timez0= minpath= front= eik=\n\nPARAMETERS\n       file   dept =      auxiliary input file name\n       string eik = ®\n       string front = ®\n       float  frontdt = ®\n       float  fronteps = ®\n       int    frontnt = ®\n       float  frontt0 = ®\n       int    interpolate =      first arrivals\n       file   len =      auxiliary input file name\n       string minpath = ®\n       file   time =      auxiliary input file name\n       string timez0 = ®\n       float  tolx = ®\n       float  tolz = ®\n       float  xsrc = ®\nSOURCE\n       user/roman/Mtraveltime2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftraveltime2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftraveltimelen-Tuple{}","page":"Home","title":"Madagascar.sftraveltimelen","text":"sftraveltimelen(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftraveltimelen on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftraveltimelen. See ?m8r for examples.\n\nRSF Documentation\n\nsftraveltimelen(1)            Madagascar Manuals            sftraveltimelen(1)\n\nNAME\n       sftraveltimelen - Oriented zero-offset migration.\n\nSYNOPSIS\n       sftraveltimelen  <  dist.rsf time=time.rsf dept=dept.rsf len=lent.rsf >\n       imagt.rsf xsrc= tolz= tolx= interpolate= timez0=\n\nPARAMETERS\n       file   dept =      auxiliary input file name\n       int    interpolate = ®\n       file   len =      auxiliary input file name\n       file   time =      auxiliary input file name\n       string timez0 = ®\n       float  tolx = ®\n       float  tolz = ®\n       float  xsrc = ®\nSOURCE\n       user/roman/Mtraveltimelen.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftraveltimelen(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftraveltimelen3d-Tuple{}","page":"Home","title":"Madagascar.sftraveltimelen3d","text":"sftraveltimelen3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftraveltimelen3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftraveltimelen3d. See ?m8r for examples.\n\nRSF Documentation\n\nsftraveltimelen3d(1)          Madagascar Manuals          sftraveltimelen3d(1)\n\nNAME\n       sftraveltimelen3d - Oriented zero-offset migration.\n\nSYNOPSIS\n       sftraveltimelen3d     <    dist.rsf    disty=distY.rsf    time=time.rsf\n       dept=dept.rsf len=lent.rsf > imagt.rsf xsrc= ysrc=\n\nPARAMETERS\n       file   dept =      auxiliary input file name\n       file   disty =      auxiliary input file name\n       file   len =      auxiliary input file name\n       file   time =      auxiliary input file name\n       float  xsrc = ®\n       float  ysrc = ®\nSOURCE\n       user/roman/Mtraveltimelen3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024              sftraveltimelen3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftree-Tuple{}","page":"Home","title":"Madagascar.sftree","text":"sftree(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftree on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftree. See ?m8r for examples.\n\nRSF Documentation\n\nsftree(1)                     Madagascar Manuals                     sftree(1)\n\nNAME\n       sftree - Multiple arrivals with a fast algorithm.\n\nSYNOPSIS\n       sftree < vel.rsf > out.rsf na=361 da=1. a0=-180. vel=y order=3 debug=n\n\nPARAMETERS\n       float  a0 =-180.       first angle (in degrees)\n       float  da =1.       angle increment (in degrees)\n       bool   debug =n [y/n]     debugging flag\n       int    na =361      number of angles\n       int    order =3      accuracy order\n       bool   vel =y [y/n]     y: theinput is velocity; n: slowness\nSOURCE\n       user/fomels/Mtree.c\nVERSION\n       4.2-git Mtree.c 1575 2005-11-21 14:09:06Z fomels\n\nMadagascar                         JULY 2024                         sftree(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftri2reg-Tuple{}","page":"Home","title":"Madagascar.sftri2reg","text":"sftri2reg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftri2reg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftri2reg. See ?m8r for examples.\n\nRSF Documentation\n\nsftri2reg(1)                  Madagascar Manuals                  sftri2reg(1)\n\nNAME\n       sftri2reg - Interpolate triangulated triplets to a regular grid.\n\nSYNOPSIS\n       sftri2reg  < in.rsf > out.rsf pattern=pattern.rsf edgein=edge.rsf node‐\n       out=out2.rsf edgeout=edge2.rsf n1= n2= d1=1. d2=1. o1=0. o2=0.  zero=0.\n       nr=0\n\nPARAMETERS\n       float  d1 =1.  ®\n       float  d2 =1.  ®\n       string edgein =      input edge file (auxiliary input file name)\n       string edgeout =      auxiliary output file name\n       int    n1 = ®\n       int    n2 = ®\n       string nodeout =      auxiliary output file name\n       int    nr =0      number of refinements\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       string pattern =      pattern file for output dimensions (auxiliary in‐\n              put file name)\n       float  zero =0.       level surface\nSOURCE\n       system/generic/Mtri2reg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftri2reg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftricascade-Tuple{}","page":"Home","title":"Madagascar.sftricascade","text":"sftricascade(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftricascade on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftricascade. See ?m8r for examples.\n\nRSF Documentation\n\nsftricascade(1)               Madagascar Manuals               sftricascade(1)\n\nNAME\n       sftricascade - Triangle filter cascade\n\nSYNOPSIS\n       sftricascade < inp.rsf > out.rsf rect=1 inter=n\n\nPARAMETERS\n       int    inter =n      interrupt\n       int    rect =1      smoothing radius\nSOURCE\n       user/fomels/Mtricascade.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftricascade(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrirand-Tuple{}","page":"Home","title":"Madagascar.sftrirand","text":"sftrirand(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrirand on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrirand. See ?m8r for examples.\n\nRSF Documentation\n\nsftrirand(1)                  Madagascar Manuals                  sftrirand(1)\n\nNAME\n       sftrirand  - Edit points for triangulation by removing similar and ran‐\n       domizing.\n\nSYNOPSIS\n       sftrirand < in.rsf > out.rsf\n\nSOURCE\n       system/generic/Mtrirand.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftrirand(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrishape-Tuple{}","page":"Home","title":"Madagascar.sftrishape","text":"sftrishape(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrishape on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrishape. See ?m8r for examples.\n\nRSF Documentation\n\nsftrishape(1)                 Madagascar Manuals                 sftrishape(1)\n\nNAME\n       sftrishape  -  2-D irregular data interpolation using triangulation and\n       shaping regularization.\n\nSYNOPSIS\n       sftrishape < in.rsf > out.rsf pattern=pattern.rsf n1= n2=  d1=1.  d2=1.\n       o1=0. o2=0. zero=0. niter=0 rect1=1 rect2=1 nw=2 fast=n sym=n tol=1e-3\n\nPARAMETERS\n       float  d1 =1.  ®\n       float  d2 =1.  ®\n       bool   fast =n [y/n]     if y, use GMRES inversion\n       int    n1 = ®\n       int    n2 = ®\n       int    niter =0      number of iterations\n       int    nw =2      interpolator size\n       float  o1 =0.  ®\n       float  o2 =0.  ®\n       string pattern =      pattern file for output dimensions (auxiliary in‐\n              put file name)\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing regularization\n       bool   sym =n [y/n]     if y, use symmetric shaping\n       float  tol =1e-3      tolerance for stopping iteration\n       float  zero =0.       level surface\nSOURCE\n       system/generic/Mtrishape.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftrishape(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrismooth2-Tuple{}","page":"Home","title":"Madagascar.sftrismooth2","text":"sftrismooth2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrismooth2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrismooth2. See ?m8r for examples.\n\nRSF Documentation\n\nsftrismooth2(1)               Madagascar Manuals               sftrismooth2(1)\n\nNAME\n       sftrismooth2 - 2-D smoothing by triangle directional shaping.\n\nSYNOPSIS\n       sftrismooth2 < in.rsf dip=dip.rsf > out.rsf rect1=3 rect2=3 adj=n\n\nPARAMETERS\n       bool   adj =n [y/n]\n       file   dip =      auxiliary input file name\n       int    rect1 =3 ®\n       int    rect2 =3      smoothing radius\nSOURCE\n       user/pwd/Mtrismooth2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftrismooth2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftrisolver-Tuple{}","page":"Home","title":"Madagascar.sftrisolver","text":"sftrisolver(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftrisolver on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftrisolver. See ?m8r for examples.\n\nRSF Documentation\n\nsftrisolver(1)                Madagascar Manuals                sftrisolver(1)\n\nNAME\n       sftrisolver - Tridiagonal matrix solver using chasing method\n\nSYNOPSIS\n       sftrisolver < in.rsf rhs=rhs.rsf > out.rsf verb=n\n\nCOMMENTS\n       Ax=d-> LUx=d -> Ly=d -> Ux=y -> x\n\nPARAMETERS\n       file   rhs =      auxiliary input file name\n       bool   verb =n [y/n]\nSOURCE\n       user/chenyk/Mtrisolver.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftrisolver(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftristack-Tuple{}","page":"Home","title":"Madagascar.sftristack","text":"sftristack(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftristack on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftristack. See ?m8r for examples.\n\nRSF Documentation\n\nsftristack(1)                 Madagascar Manuals                 sftristack(1)\n\nNAME\n       sftristack - Resampling with triangle weights.\n\nSYNOPSIS\n       sftristack < in.rsf > out.rsf adj=y rect=1 gauss=n\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       bool   gauss =n [y/n]     use pseudo-gaussian\n       int    rect =1      smoothing radius\nSOURCE\n       user/fomels/Mtristack.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftristack(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftristack2-Tuple{}","page":"Home","title":"Madagascar.sftristack2","text":"sftristack2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftristack2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftristack2. See ?m8r for examples.\n\nRSF Documentation\n\nsftristack2(1)                Madagascar Manuals                sftristack2(1)\n\nNAME\n       sftristack2 - 2-D resampling with triangle weights.\n\nSYNOPSIS\n       sftristack2 < in.rsf > out.rsf adj=y rect1=1 rect2=1 gauss=n\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       bool   gauss =n [y/n]     use pseudo-gaussian\n       int    rect1 =1 ®\n       int    rect2 =1      smoothing radius\nSOURCE\n       user/fomels/Mtristack2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftristack2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftshift-Tuple{}","page":"Home","title":"Madagascar.sftshift","text":"sftshift(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftshift on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftshift. See ?m8r for examples.\n\nRSF Documentation\n\nsftshift(1)                   Madagascar Manuals                   sftshift(1)\n\nNAME\n       sftshift - Compute angle gathers for time-shift imaging condition\n\nSYNOPSIS\n       sftshift  <  Fstk.rsf  velocity=Fvel.rsf  dip=Fdip.rsf > Fang.rsf na=nv\n       da=1./(nv-1) a0=0. extend=4 cos=n\n\nPARAMETERS\n       float  a0 =0.  ®\n       bool   cos =n [y/n]     if n, convert pseudo-v to pseudo-tan(theta);\n                     if y, compute cos(theta) from 1/|pm|\n       float  da =1./(nv-1) ®\n       file   dip =      auxiliary input file name\n       int    extend =4      tmp extension\n       int    na =nv ®\n       file   velocity =      auxiliary input file name\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\n       cwp/geo2006TimeShiftImagingCondition/icomp\n       cwp/geo2006TimeShiftImagingCondition/zicig\nSOURCE\n       system/seismic/Mtshift.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftshift(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftslread-Tuple{}","page":"Home","title":"Madagascar.sftslread","text":"sftslread(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftslread on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftslread. See ?m8r for examples.\n\nRSF Documentation\n\nsftslread(1)                  Madagascar Manuals                  sftslread(1)\n\nNAME\n       sftslread  -  Convert a TSL (MT, V5-2000 of Phoenix Geophysics) dataset\n       to RSF.\n\nSYNOPSIS\n       sftslread > out.rsf tfile=tfile.rsf format=n data=\n\nPARAMETERS\n       string data =      input data\n       bool   format =n [y/n]     data format: [false] (TSL,TSH: 16) or [true]\n              (TSn: 32)\n       string tfile =      auxiliary output file name\nSOURCE\n       user/yliu/Mtslread.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftslread(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftsmf-Tuple{}","page":"Home","title":"Madagascar.sftsmf","text":"sftsmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftsmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftsmf. See ?m8r for examples.\n\nRSF Documentation\n\nsftsmf(1)                     Madagascar Manuals                     sftsmf(1)\n\nNAME\n       sftsmf - Two-step space varying median filtering.\n\nSYNOPSIS\n       sftsmf  <  in.rsf  >  out.rsf  L=lengthout.rsf  boundary=n ns=0 ne=n2-1\n       N=(f2-f1+1)*n1 ael=0.0 verb=n nfw= l1=2 l2=0 l3=2 l4=4\n\nCOMMENTS\n       In default case, sftsmf is equal to sftvmf.\n\nPARAMETERS\n       string L =      auxiliary output file name\n       int    N =(f2-f1+1)*n1      average energy level (AEL) computing number\n       float  ael =0.0      get the average energy level (AEL) empirically de‐\n              fined\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    l1 =2      space-varying window parameter l1 (default=2)\n       int    l2 =0      space-varying window parameter l2 (default=0)\n       int    l3 =2      space-varying window parameter l3 (default=2)\n       int    l4 =4      space-varying window parameter l4 (default=4)\n       int    ne  =n2-1       processing window ending point, corresponding to\n              the temporal axis, n2 means transposed first-axis dimension.\n       int    nfw =      reference filter-window length (>l4, positive and odd\n              integer)\n       int    ns  =0       processing  window starting point, corresponding to\n              the temporal axis\n       bool   verb =n [y/n]     if print the  computed  average  energy  level\n              (AEL)\nSOURCE\n       user/chenyk/Mtsmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sftsmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftspline-Tuple{}","page":"Home","title":"Madagascar.sftspline","text":"sftspline(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftspline on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftspline. See ?m8r for examples.\n\nRSF Documentation\n\nsftspline(1)                  Madagascar Manuals                  sftspline(1)\n\nNAME\n       sftspline - Helix filters for spline in tension\n\nSYNOPSIS\n       sftspline > flt.rsf tension=0. niter=20 eps=FLT_EPSILON lag=\n\nPARAMETERS\n       float  eps =FLT_EPSILON      tolerance for filter compressing\n       string lag = ®\n       int    niter =20      number of iterations\n       float  tension =0.       spline tension\nSOURCE\n       user/gee/Mtspline.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftspline(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2de-Tuple{}","page":"Home","title":"Madagascar.sftti2de","text":"sftti2de(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2de on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2de. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2de(1)                   Madagascar Manuals                   sftti2de(1)\n\nNAME\n       sftti2de - 2-D two-components wavefield modeling using original elastic\n       displacement wave equation in TTI media.\n\nSYNOPSIS\n       sftti2de   <   Fvp0.rsf   vs0=Fvs0.rsf    epsi=Feps.rsf    del=Fdel.rsf\n       the=Fthe.rsf > Fo1.rsf Elasticz=Fo2.rsf ns=301 dt=0.001\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng, Wei Kang and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   Elasticz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ns =301 ®\n       file   the =      auxiliary input file name\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mtti2de.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftti2de(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2dekspacelr-Tuple{}","page":"Home","title":"Madagascar.sftti2dekspacelr","text":"sftti2dekspacelr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2dekspacelr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2dekspacelr. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2dekspacelr(1)           Madagascar Manuals           sftti2dekspacelr(1)\n\nNAME\n       sftti2dekspacelr - None\n\nSYNOPSIS\n       sftti2dekspacelr   <   vp0.rsf   >  Elasticx.rsf  Elasticz=Elasticz.rsf\n       seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2dekspacelr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sftti2dekspacelr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2dekspacelrsource-Tuple{}","page":"Home","title":"Madagascar.sftti2dekspacelrsource","text":"sftti2dekspacelrsource(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2dekspacelrsource on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2dekspacelrsource. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2dekspacelrsource(1)     Madagascar Manuals     sftti2dekspacelrsource(1)\n\nNAME\n       sftti2dekspacelrsource - None\n\nSYNOPSIS\n       sftti2dekspacelrsource  <  vp0.rsf > Elasticx.rsf Elasticz=Elasticz.rsf\n       seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2dekspacelrsource.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024         sftti2dekspacelrsource(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delr-Tuple{}","page":"Home","title":"Madagascar.sftti2delr","text":"sftti2delr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delr. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delr(1)                 Madagascar Manuals                 sftti2delr(1)\n\nNAME\n       sftti2delr - None\n\nSYNOPSIS\n       sftti2delr    <    vp0.rsf    >    Elasticx.rsf   Elasticz=Elasticz.rsf\n       seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2delr.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftti2delr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delrdec-Tuple{}","page":"Home","title":"Madagascar.sftti2delrdec","text":"sftti2delrdec(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delrdec on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delrdec. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delrdec(1)              Madagascar Manuals              sftti2delrdec(1)\n\nNAME\n       sftti2delrdec - None\n\nSYNOPSIS\n       sftti2delrdec < vp0.rsf ElasticPx=ElasticPx.rsf ElasticPz=ElasticPz.rsf\n       ElasticSx=ElasticSx.rsf    ElasticSz=ElasticSz.rsf    Orthog=Orthog.rsf\n       seed=time(NULL eps=1.e-6 npk=20\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Orthog =      auxiliary output file name\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2delrdec.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftti2delrdec(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delrdecomp-Tuple{}","page":"Home","title":"Madagascar.sftti2delrdecomp","text":"sftti2delrdecomp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delrdecomp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delrdecomp. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delrdecomp(1)           Madagascar Manuals           sftti2delrdecomp(1)\n\nNAME\n       sftti2delrdecomp - None\n\nSYNOPSIS\n       sftti2delrdecomp < vp0.rsf > Elasticx.rsf ElasticPx=ElasticPx.rsf Elas‐\n       ticPz=ElasticPz.rsf ElasticSVx=ElasticSVx.rsf ElasticSVz=ElasticSVz.rsf\n       seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSVx =      auxiliary output file name\n       file   ElasticSVz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2delrdecomp.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024               sftti2delrdecomp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delrdecomp2p-Tuple{}","page":"Home","title":"Madagascar.sftti2delrdecomp2p","text":"sftti2delrdecomp2p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delrdecomp2p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delrdecomp2p. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delrdecomp2p(1)         Madagascar Manuals         sftti2delrdecomp2p(1)\n\nNAME\n       sftti2delrdecomp2p - None\n\nSYNOPSIS\n       sftti2delrdecomp2p   <  vp0.rsf  Errdecxp1=Errdecxp1.rsf  Errdecxp2=Er‐\n       rdecxp2.rsf   Decompxp1=Decompxp1.rsf    Decompxp2=Decompxp2.rsf    Er‐\n       rdecxzp1=Errdecxzp1.rsf   Errdecxzp2=Errdecxzp2.rsf   Decompxzp1=Decom‐\n       pxzp1.rsf   Decompxzp2=Decompxzp2.rsf    Errdeczp1=Errdeczp1.rsf    Er‐\n       rdeczp2=Errdeczp2.rsf Decompzp1=Decompzp1.rsf Decompzp2=Decompzp2.rsf >\n       ElasticX.rsf  ElasticPx=ElasticPx.rsf   ElasticPz=ElasticPz.rsf   Elas‐\n       ticSVx=ElasticSVx.rsf      ElasticSVz=ElasticSVz.rsf     seed=time(NULL\n       eps=1.e-6 npk=20 ns= dt= ireconstruct= xrec1= zrec1= xrec2= zrec2=\n\nPARAMETERS\n       file   Decompxp1 =      auxiliary output file name\n       file   Decompxp2 =      auxiliary output file name\n       file   Decompxzp1 =      auxiliary output file name\n       file   Decompxzp2 =      auxiliary output file name\n       file   Decompzp1 =      auxiliary output file name\n       file   Decompzp2 =      auxiliary output file name\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSVx =      auxiliary output file name\n       file   ElasticSVz =      auxiliary output file name\n       file   Errdecxp1 =      auxiliary output file name\n       file   Errdecxp2 =      auxiliary output file name\n       file   Errdecxzp1 =      auxiliary output file name\n       file   Errdecxzp2 =      auxiliary output file name\n       file   Errdeczp1 =      auxiliary output file name\n       file   Errdeczp2 =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       ireconstruct\n              = ®\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\n       xrec1  = ®\n       xrec2  = ®\n       zrec1  = ®\n       zrec2  = ®\nSOURCE\n       user/chengjb/Mtti2delrdecomp2p.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sftti2delrdecomp2p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delrsep-Tuple{}","page":"Home","title":"Madagascar.sftti2delrsep","text":"sftti2delrsep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delrsep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delrsep. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delrsep(1)              Madagascar Manuals              sftti2delrsep(1)\n\nNAME\n       sftti2delrsep - None\n\nSYNOPSIS\n       sftti2delrsep  <  vp0.rsf  >  Elasticx.rsf  ElasticSepP=ElasticSepP.rsf\n       ElasticSepSV=ElasticSepSV.rsf seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   ElasticSepP =      auxiliary output file name\n       file   ElasticSepSV =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2delrsep.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftti2delrsep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2delrsep2p-Tuple{}","page":"Home","title":"Madagascar.sftti2delrsep2p","text":"sftti2delrsep2p(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2delrsep2p on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2delrsep2p. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2delrsep2p(1)            Madagascar Manuals            sftti2delrsep2p(1)\n\nNAME\n       sftti2delrsep2p - None\n\nSYNOPSIS\n       sftti2delrsep2p   <   vp0.rsf   Errpolxp1=Errpolxp1.rsf   Errpolxp2=Er‐\n       rpolxp2.rsf Polxp1=Polxp1.rsf Polxp2=Polxp2.rsf Errpolzp1=Errpolzp1.rsf\n       Errpolzp2=Errpolzp2.rsf  Polzp1=Polzp1.rsf  Polzp2=Polzp2.rsf  >  Elas‐\n       ticx.rsf   ElasticSepP=ElasticSepP.rsf    ElasticSepSV=ElasticSepSV.rsf\n       seed=time(NULL  eps=1.e-6  npk=20  ns=  dt= ireconstruct= xrec1= zrec1=\n       xrec2= zrec2=\n\nPARAMETERS\n       file   ElasticSepP =      auxiliary output file name\n       file   ElasticSepSV =      auxiliary output file name\n       file   Errpolxp1 =      auxiliary output file name\n       file   Errpolxp2 =      auxiliary output file name\n       file   Errpolzp1 =      auxiliary output file name\n       file   Errpolzp2 =      auxiliary output file name\n       file   Polxp1 =      auxiliary output file name\n       file   Polxp2 =      auxiliary output file name\n       file   Polzp1 =      auxiliary output file name\n       file   Polzp2 =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       ireconstruct\n              = ®\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\n       xrec1  = ®\n       xrec2  = ®\n       zrec1  = ®\n       zrec2  = ®\nSOURCE\n       user/chengjb/Mtti2delrsep2p.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftti2delrsep2p(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2desep-Tuple{}","page":"Home","title":"Madagascar.sftti2desep","text":"sftti2desep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2desep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2desep. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2desep(1)                Madagascar Manuals                sftti2desep(1)\n\nNAME\n       sftti2desep  -  2-D  two-components  wavefield  modeling using original\n       elastic displacement wave equation in TTI media.\n\nSYNOPSIS\n       sftti2desep  <   Fvp0.rsf   vs0=Fvs0.rsf   epsi=Feps.rsf   del=Fdel.rsf\n       the=Fthe.rsf   >   Fo1.rsf   Elasticz=Fo2.rsf  apx=Fo3.rsf  apz=Fo4.rsf\n       apxs=Fo5.rsf  apzs=Fo6.rsf  apxx=Fo7.rsf   apzz=Fo8.rsf   apxxs=Fo9.rsf\n       apzzs=Fo10.rsf    ElasticSepP=Fo11.rsf   ElasticSepSV=Fo12.rsf   ns=301\n       dt=0.001 isep=0 ihomo=0 nstep=1 tapertype=\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China Authors:  Jiubing\n       Cheng, Wei Kang and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   ElasticSepP =      auxiliary output file name\n       file   ElasticSepSV =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       file   apx =      auxiliary output file name\n       file   apxs =      auxiliary output file name\n       file   apxx =      auxiliary output file name\n       file   apxxs =      auxiliary output file name\n       file   apz =      auxiliary output file name\n       file   apzs =      auxiliary output file name\n       file   apzz =      auxiliary output file name\n       file   apzzs =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    ns =301 ®\n       int    nstep =1      grid step to calculate operators: 1<=nstep<=5\n       string tapertype =      taper type\n       file   the =      auxiliary input file name\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mtti2desep.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftti2desep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2devectorlrsvd-Tuple{}","page":"Home","title":"Madagascar.sftti2devectorlrsvd","text":"sftti2devectorlrsvd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2devectorlrsvd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2devectorlrsvd. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2devectorlrsvd(1)        Madagascar Manuals        sftti2devectorlrsvd(1)\n\nNAME\n       sftti2devectorlrsvd - None\n\nSYNOPSIS\n       sftti2devectorlrsvd  <  vp0.rsf  >  Elasticx.rsf  Elasticz=Elasticz.rsf\n       ElasticPx=ElasticPx.rsf ElasticPz=ElasticPz.rsf ElasticSx=ElasticSx.rsf\n       ElasticSz=ElasticSz.rsf seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2devectorlrsvd.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024            sftti2devectorlrsvd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2devectorlrsvd_double-Tuple{}","page":"Home","title":"Madagascar.sftti2devectorlrsvd_double","text":"sftti2devectorlrsvd_double(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2devectorlrsvd_double on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2devectorlrsvd_double. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2devectorlrsvddouble(1) Madagascar Manuals sftti2devectorlrsvddouble(1)\n\nNAME\n       sftti2devectorlrsvd_double - None\n\nSYNOPSIS\n       sftti2devectorlrsvd_double  <  vp0.rsf  >  Elasticx.rsf  Elasticz=Elas‐\n       ticz.rsf    ElasticPx=ElasticPx.rsf    ElasticPz=ElasticPz.rsf    Elas‐\n       ticSx=ElasticSx.rsf  ElasticSz=ElasticSz.rsf  seed=time(NULL  eps=1.e-8\n       npk=60 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-8      tolerance\n       npk    =60      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2devectorlrsvd_double.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024     sftti2devectorlrsvd_double(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2devectorlrsvdkspace_double-Tuple{}","page":"Home","title":"Madagascar.sftti2devectorlrsvdkspace_double","text":"sftti2devectorlrsvdkspace_double(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2devectorlrsvdkspace_double on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2devectorlrsvdkspace_double. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2devectorlrsvdkspacedoubMadagascar Masftti2devectorlrsvdkspacedouble(1)\n\nNAME\n       sftti2devectorlrsvdkspace_double - None\n\nSYNOPSIS\n       sftti2devectorlrsvdkspace_double   <   vp0.rsf   >  Elasticx.rsf  Elas‐\n       ticz=Elasticz.rsf ElasticPx=ElasticPx.rsf ElasticPz=ElasticPz.rsf Elas‐\n       ticSx=ElasticSx.rsf  ElasticSz=ElasticSz.rsf  seed=time(NULL  eps=1.e-8\n       npk=60 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-8      tolerance\n       npk    =60      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2devectorlrsvdkspace_double.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 202sftti2devectorlrsvdkspace_double(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2devectorlrsvdkspace_double_stiffness-Tuple{}","page":"Home","title":"Madagascar.sftti2devectorlrsvdkspace_double_stiffness","text":"sftti2devectorlrsvdkspace_double_stiffness(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2devectorlrsvdkspace_double_stiffness on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2devectorlrsvdkspace_double_stiffness. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2devectorlrsvdkspacedoubMadsftti2devectorlrsvdkspacedouble_stiffness(1)\n\nNAME\n       sftti2devectorlrsvdkspace_double_stiffness - None\n\nSYNOPSIS\n       sftti2devectorlrsvdkspace_double_stiffness  <  vp0.rsf  >  Elasticx.rsf\n       Elasticz=Elasticz.rsf  ElasticPx=ElasticPx.rsf  ElasticPz=ElasticPz.rsf\n       ElasticSx=ElasticSx.rsf      ElasticSz=ElasticSz.rsf     seed=time(NULL\n       eps=1.e-8 npk=60 ns= dt=\n\nPARAMETERS\n       file   ElasticPx =      auxiliary output file name\n       file   ElasticPz =      auxiliary output file name\n       file   ElasticSx =      auxiliary output file name\n       file   ElasticSz =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-8      tolerance\n       npk    =60      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2devectorlrsvdkspace_double_stiffness.cc\nVERSION\n       4.2-git\n\nMadagascar                       sftti2devectorlrsvdkspace_double_stiffness(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2dpseudop-Tuple{}","page":"Home","title":"Madagascar.sftti2dpseudop","text":"sftti2dpseudop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2dpseudop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2dpseudop. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2dpseudop(1)             Madagascar Manuals             sftti2dpseudop(1)\n\nNAME\n       sftti2dpseudop  -  2-D  two-components wavefield modeling using pseudo-\n       pure mode P-wave equation in TTI media.\n\nSYNOPSIS\n       sftti2dpseudop  <  Fvp0.rsf  vs0=Fvs0.rsf  epsi=Feps.rsf   del=Fdel.rsf\n       the=Fthe.rsf   >   Fo1.rsf   PseudoPurePz=Fo2.rsf   PseudoPureP=Fo3.rsf\n       apvx=Fo4.rsf  apvz=Fo5.rsf  apvxx=Fo6.rsf   apvzz=Fo7.rsf   PseudoPure‐\n       SepP=Fo8.rsf ns=301 dt=0.001 isep=0 ihomo=0 nstep=1 tapertype=\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng, Wei Kang and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPureP =      auxiliary output file name\n       file   PseudoPurePz =      auxiliary output file name\n       file   PseudoPureSepP =      auxiliary output file name\n       file   apvx =      auxiliary output file name\n       file   apvxx =      auxiliary output file name\n       file   apvz =      auxiliary output file name\n       file   apvzz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    ns =301 ®\n       int    nstep =1      grid step to calculate operators: 1<=nstep<=5\n       string tapertype =      taper type\n       file   the =      auxiliary input file name\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mtti2dpseudop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftti2dpseudop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2dpseudoplrsep-Tuple{}","page":"Home","title":"Madagascar.sftti2dpseudoplrsep","text":"sftti2dpseudoplrsep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2dpseudoplrsep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2dpseudoplrsep. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2dpseudoplrsep(1)        Madagascar Manuals        sftti2dpseudoplrsep(1)\n\nNAME\n       sftti2dpseudoplrsep - None\n\nSYNOPSIS\n       sftti2dpseudoplrsep  < vp0.rsf > PseudoPurePx.rsf PseudoPureSepPx=Pseu‐\n       doPureSepPx.rsf  PseudoPureSepPz=PseudoPureSepPz.rsf  PseudoPureP=Pseu‐\n       doPureP.rsf seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   PseudoPureP =      auxiliary output file name\n       file   PseudoPureSepPx =      auxiliary output file name\n       file   PseudoPureSepPz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2dpseudoplrsep.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024            sftti2dpseudoplrsep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti2dpseudosvlrsep-Tuple{}","page":"Home","title":"Madagascar.sftti2dpseudosvlrsep","text":"sftti2dpseudosvlrsep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti2dpseudosvlrsep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti2dpseudosvlrsep. See ?m8r for examples.\n\nRSF Documentation\n\nsftti2dpseudosvlrsep(1)       Madagascar Manuals       sftti2dpseudosvlrsep(1)\n\nNAME\n       sftti2dpseudosvlrsep - None\n\nSYNOPSIS\n       sftti2dpseudosvlrsep   <   vp0.rsf   >   PseudoPureSVx.rsf  PseudoPure‐\n       SepSVx=PseudoPureSepSVx.rsf PseudoPureSepSVz=PseudoPureSepSVz.rsf Pseu‐\n       doPureSV=PseudoPureSV.rsf seed=time(NULL eps=1.e-6 npk=20 ns= dt=\n\nPARAMETERS\n       file   PseudoPureSV =      auxiliary output file name\n       file   PseudoPureSepSVx =      auxiliary output file name\n       file   PseudoPureSepSVz =      auxiliary output file name\n       dt     = ®\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       ns     = ®\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti2dpseudosvlrsep.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024           sftti2dpseudosvlrsep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti3de-Tuple{}","page":"Home","title":"Madagascar.sftti3de","text":"sftti3de(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti3de on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti3de. See ?m8r for examples.\n\nRSF Documentation\n\nsftti3de(1)                   Madagascar Manuals                   sftti3de(1)\n\nNAME\n       sftti3de  -  3-D  three-components wavefield modeling using elasic wave\n       equation in tilted TI media.\n\nSYNOPSIS\n       sftti3de < Fvp0.rsf vs0=Fvs0.rsf epsi=Fep.rsf  del=Fde.rsf  gam=Fga.rsf\n       the=Fthe.rsf  phi=Fphi.rsf  > Fo1.rsf Elasticy=Fo2.rsf Elasticz=Fo3.rsf\n       ns=301 dt=0.001 bd=20\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   Elasticy =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       int    bd =20 ®\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       file   gam =      auxiliary input file name\n       int    ns =301 ®\n       file   phi =      auxiliary input file name\n       file   the =      auxiliary input file name\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mtti3de.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftti3de(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti3delrsepP-Tuple{}","page":"Home","title":"Madagascar.sftti3delrsepP","text":"sftti3delrsepP(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti3delrsepP on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti3delrsepP. See ?m8r for examples.\n\nRSF Documentation\n\nsftti3delrsepP(1)             Madagascar Manuals             sftti3delrsepP(1)\n\nNAME\n       sftti3delrsepP - None\n\nSYNOPSIS\n       sftti3delrsepP < vp0.rsf seed=time(NULL eps=1.e-6 npk=20 iflagvti=\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       iflagvti\n              = ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti3delrsepP.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftti3delrsepP(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti3delrsepSH-Tuple{}","page":"Home","title":"Madagascar.sftti3delrsepSH","text":"sftti3delrsepSH(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti3delrsepSH on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti3delrsepSH. See ?m8r for examples.\n\nRSF Documentation\n\nsftti3delrsepSH(1)            Madagascar Manuals            sftti3delrsepSH(1)\n\nNAME\n       sftti3delrsepSH - None\n\nSYNOPSIS\n       sftti3delrsepSH < vp0.rsf seed=time(NULL eps=1.e-6 npk=20 iflagvti=\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       iflagvti\n              = ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti3delrsepSH.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftti3delrsepSH(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti3delrsepSV-Tuple{}","page":"Home","title":"Madagascar.sftti3delrsepSV","text":"sftti3delrsepSV(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti3delrsepSV on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti3delrsepSV. See ?m8r for examples.\n\nRSF Documentation\n\nsftti3delrsepSV(1)            Madagascar Manuals            sftti3delrsepSV(1)\n\nNAME\n       sftti3delrsepSV - None\n\nSYNOPSIS\n       sftti3delrsepSV < vp0.rsf seed=time(NULL eps=1.e-6 npk=20 iflagvti=\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       iflagvti\n              = ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mtti3delrsepSV.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftti3delrsepSV(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftti4rtm-Tuple{}","page":"Home","title":"Madagascar.sftti4rtm","text":"sftti4rtm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftti4rtm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftti4rtm. See ?m8r for examples.\n\nRSF Documentation\n\nsftti4rtm(1)                  Madagascar Manuals                  sftti4rtm(1)\n\nNAME\n       sftti4rtm - 2-D Fourier finite-difference wave extrapolation: MPI + OMP\n\nSYNOPSIS\n       sftti4rtm   geo=geo.rsf   velx=velx.rsf   velz=velz.rsf   yita=yita.rsf\n       source=source.rsf seta=seta.rsf opt=y de=y dt= nt=  isz=  irz=isz  jr=1\n       jm=20  nr=  err=0.00001  alpha=-0.7 nbt=44 nbb=44 nbl=44 nbr=44 ct=0.01\n       cb=0.01 cl=0.01 cr=0.01 ax=2.0 az=2.0 factor=2.0/3.0\n\nPARAMETERS\n       float  alpha =-0.7 ®\n       float  ax =2.0      suppress HF parameter\n       float  az =2.0      suppress HF parameter\n       float  cb =0.01      decaying parameter\n       float  cl =0.01      decaying parameter\n       float  cr =0.01      decaying parameter\n       float  ct =0.01      decaying parameter\n       bool   de =y [y/n]     if y, determine optimal size for efficiency\n       float  dt = ®\n       float  err =0.00001 ®\n       float  factor =2.0/3.0      suppress HF parameter\n       file   geo =      auxiliary input file name\n       int    irz =isz      if (!sf_getint(\"r0\",&r0)) r0=0;\n       int    isz = ®\n       int    jm =20 ®\n       int    jr =1 ®\n       int    nbb =44 ®\n       int    nbl =44 ®\n       int    nbr =44 ®\n       int    nbt =44 ®\n       int    nr =      streamer total length\n       int    nt = ®\n       bool   opt =y [y/n]\n       file   seta =      auxiliary input file name\n       file   source =      auxiliary input file name\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       file   yita =      auxiliary input file name\nSOURCE\n       user/songxl/Mtti4rtm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftti4rtm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfttieikonal-Tuple{}","page":"Home","title":"Madagascar.sfttieikonal","text":"sfttieikonal(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfttieikonal on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfttieikonal. See ?m8r for examples.\n\nRSF Documentation\n\nsfttieikonal(1)               Madagascar Manuals               sfttieikonal(1)\n\nNAME\n       sfttieikonal - Fast sweeping TTI eikonal solver (2D)\n\nSYNOPSIS\n       sfttieikonal  <  vzf.rsf  > time.rsf niter=4 nfpi=3 zshot=0. yshot=o2 +\n       0.5*(n2-1)*d2 epsilon= delta= theta= shotfile=\n\nPARAMETERS\n       string delta = ®\n       string epsilon = ®\n       int    nfpi =3      number of fixed-point iterations\n       int    niter =4      number of sweeping iterations\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3)\n       string theta = ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/uwaheed/Mttieikonal.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfttieikonal(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfttifd2d-Tuple{}","page":"Home","title":"Madagascar.sfttifd2d","text":"sfttifd2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfttifd2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfttifd2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfttifd2d(1)                  Madagascar Manuals                  sfttifd2d(1)\n\nNAME\n       sfttifd2d - 2D TTI time-domain FD modeling\n\nSYNOPSIS\n       sfttifd2d    <    Fwav.rsf   vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       ang=Fang.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n expl=n dabc=n\n       sout=n  uses=n  jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) oqz=sf_o(az)\n       oqx=sf_o(ax) atype=\n\nPARAMETERS\n       file   ang =      auxiliary input file name\n       string atype = ®\n       bool   dabc =n [y/n]     absorbing BC\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots\n       file   sou =      auxiliary input file name\n       bool   sout =n [y/n]     stress output\n       bool   uses =n [y/n]     use vsz\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mttifd2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfttifd2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfttifd3d-Tuple{}","page":"Home","title":"Madagascar.sfttifd3d","text":"sfttifd3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfttifd3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfttifd3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfttifd3d(1)                  Madagascar Manuals                  sfttifd3d(1)\n\nNAME\n       sfttifd3d - 3D TTI time-domain FD modeling\n\nSYNOPSIS\n       sfttifd3d    <    Fwav.rsf   vel=Fvel.rsf   sou=Fsou.rsf   rec=Frec.rsf\n       ang=Fang.rsf wfl=Fwfl.rsf > Fdat.rsf verb=n snap=n free=n expl=n dabc=n\n       sout=n  uses=n  jdata=1 jsnap=nt nqz=sf_n(az) nqx=sf_n(ax) nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay) atype=\n\nPARAMETERS\n       file   ang =      auxiliary input file name\n       string atype = ®\n       bool   dabc =n [y/n]     absorbing BC\n       bool   expl =n [y/n]     \"exploding reflector\"\n       bool   free =n [y/n]     free surface\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       file   rec =      auxiliary input file name\n       bool   snap =n [y/n]     wavefield snapshots\n       file   sou =      auxiliary input file name\n       bool   sout =n [y/n]     stress output\n       bool   uses =n [y/n]     use vsz\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/psava/Mttifd3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfttifd3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfttirtmsa-Tuple{}","page":"Home","title":"Madagascar.sfttirtmsa","text":"sfttirtmsa(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfttirtmsa on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfttirtmsa. See ?m8r for examples.\n\nRSF Documentation\n\nsfttirtmsa(1)                 Madagascar Manuals                 sfttirtmsa(1)\n\nNAME\n       sfttirtmsa - 2-D TTI FFD RTM: MPI + OMP\n\nSYNOPSIS\n       sfttirtmsa   geo=geo.rsf   velx=velx.rsf   velz=velz.rsf  yita=yita.rsf\n       source=source.rsf seta=seta.rsf opt=y de=y dt= nt=  isz=  irz=isz  jr=1\n       jm=20  tskip=1000 sht=0 nr= err=0.00001 nbt=102 nbb=102 nbl=128 nbr=127\n       ct=0.02 cb=0.02 cl=0.02 cr=0.02 ratio=2.0 left=nr*3/2*jr right=nr/2*jr\n\nPARAMETERS\n       float  cb =0.02      decaying parameter\n       float  cl =0.02      decaying parameter\n       float  cr =0.02      decaying parameter\n       float  ct =0.02      decaying parameter\n       bool   de =y [y/n]     in angle\n       float  dt =      time step size\n       float  err =0.00001      error control\n       file   geo =      auxiliary input file name\n       int    irz =isz      receiver depth\n       int    isz =      source depth\n       int    jm =20      snap sampling\n       int    jr =1      receiver sampling\n       int    left =nr*3/2*jr      left\n       int    nbb =102      boundary nodes\n       int    nbl =128      boundary nodes\n       int    nbr =127      boundary nodes\n       int    nbt =102      boundary nodes\n       int    nr =      streamer total length\n       int    nt =      total time length\n       bool   opt =y [y/n]     optimal padding\n       float  ratio =2.0      v0/vmax\n       int    right =nr/2*jr      right\n       file   seta =      auxiliary input file name\n       int    sht =0      time shift\n       file   source =      auxiliary input file name\n       int    tskip =1000      time skipped\n       file   velx =      auxiliary input file name\n       file   velz =      auxiliary input file name\n       file   yita =      auxiliary input file name\nSOURCE\n       user/songxl/Mttirtmsa.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfttirtmsa(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftvmf-Tuple{}","page":"Home","title":"Madagascar.sftvmf","text":"sftvmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftvmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftvmf. See ?m8r for examples.\n\nRSF Documentation\n\nsftvmf(1)                     Madagascar Manuals                     sftvmf(1)\n\nNAME\n       sftvmf - 1D Time-varying median filtering.\n\nSYNOPSIS\n       sftvmf  <  in.rsf  >  out.rsf  boundary=n  nfw=  alpha=2 beta=0 gamma=2\n       delta=4\n\nPARAMETERS\n       int    alpha =2      time-varying window parameter alpha (default=2)\n       int    beta =0      time-varying window parameter beta (default=0)\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    delta =4      time-varying window parameter delta (default=4)\n       int    gamma =2      time-varying window parameter gamma (default=2)\n       int    nfw =      reference filter-window length (>delta, positive  and\n              odd integer)\nSOURCE\n       user/yliu/Mtvmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sftvmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwodip2-Tuple{}","page":"Home","title":"Madagascar.sftwodip2","text":"sftwodip2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwodip2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwodip2. See ?m8r for examples.\n\nRSF Documentation\n\nsftwodip2(1)                  Madagascar Manuals                  sftwodip2(1)\n\nNAME\n       sftwodip2 - 2-D two dip estimation by plane wave destruction.\n\nSYNOPSIS\n       sftwodip2  < in.rsf > out.rsf dip1=dip1.rsf dip2=dip2.rsf mask=mask.rsf\n       niter=5 eps=1 lam=1 order=1 nj1=1 nj2=1 drift=n verb=n  sign=n  gauss=n\n       both=y p0=1. q0=0. < data.rsf > dip.rsf\n\nPARAMETERS\n       bool   both =y [y/n]     if y, estimate both dips\n       string dip1 =      auxiliary input file name\n       string dip2 =      auxiliary input file name\n       bool   drift =n [y/n]     if shift filter\n       float  eps =1      vertical smoothness\n       bool   gauss =n [y/n]     if y, use exact Gaussian for smoothing\n       float  lam =1      horizontal smoothness\n       string mask =      auxiliary input file name\n       int    niter =5      number of iterations\n       int    nj1 =1      antialiasing for first dip\n       int    nj2 =1      antialiasing for second dip\n       int    order =1      accuracy order\n       float  p0 =1.       initial first dip\n       float  q0 =0.       initial second dip\n       bool   sign =n [y/n]     if y, keep dip sign constant\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/zicig\nSOURCE\n       user/pwd/Mtwodip2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftwodip2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwofreq2-Tuple{}","page":"Home","title":"Madagascar.sftwofreq2","text":"sftwofreq2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwofreq2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwofreq2. See ?m8r for examples.\n\nRSF Documentation\n\nsftwofreq2(1)                 Madagascar Manuals                 sftwofreq2(1)\n\nNAME\n       sftwofreq2 - 2-D two spectral component estimation.\n\nSYNOPSIS\n       sftwofreq2  <  in.rsf > out.rsf mask=mask.rsf niter=5 eps=1 lam=1 p0=1.\n       q0=1. p1=-1. q1=1. verb=n < data.rsf > dip.rsf\n\nPARAMETERS\n       float  eps =1      vertical smoothness\n       float  lam =1      horizontal smoothness\n       string mask =      auxiliary input file name\n       int    niter =5      number of iterations\n       float  p0 =1.       initial first component\n       float  p1 =-1.       initial second component\n       float  q0 =1.       initial first component\n       float  q1 =1.       initial second component\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mtwofreq2.c\nVERSION\n       4.2-git Mtwofreq2.c 704 2004-07-13 18:22:06Z fomels\n\nMadagascar                         JULY 2024                     sftwofreq2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwolayer-Tuple{}","page":"Home","title":"Madagascar.sftwolayer","text":"sftwolayer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwolayer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwolayer. See ?m8r for examples.\n\nRSF Documentation\n\nsftwolayer(1)                 Madagascar Manuals                 sftwolayer(1)\n\nNAME\n       sftwolayer - Two layer NN training\n\nSYNOPSIS\n       sftwolayer    <   dat.rsf   label=lbl.rsf   valdata=valdat.rsf   valla‐\n       bel=vallbl.rsf    weight1=wt1.rsf     weight2=wt2.rsf     bias1=bs1.rsf\n       bias2=bs2.rsf  >  loss.rsf  weight1out=wt1out.rsf weight2out=wt2out.rsf\n       bias1out=bs1out.rsf bias2out=bs2out.rsf valloss=valloss.rsf lr=  niter=\n       act= opt= seed= stop= lossfunc= reg= alpha=\n\nPARAMETERS\n       float  act =      Activation function - 0:sigmoid 1:tanh 2:relu 3:iden‐\n              tity\n       float  alpha =      Regularization coeff. If not, set alpha=0\n       file   bias1 =      auxiliary input file name\n       file   bias1out =      auxiliary output file name\n       file   bias2 =      auxiliary input file name\n       file   bias2out =      auxiliary output file name\n       file   label =      auxiliary input file name\n       float  lossfunc =      Loss function - 0:MSE 1:L1\n       float  lr = ®\n       float  niter = ®\n       float  opt =      Optimization method - 0:SGD 1:momentum 2:Adam\n       float  reg =      Regularization - 0:L2 1:L1\n       float  seed = ®\n       float  stop = ®\n       file   valdata =      auxiliary input file name\n       file   vallabel =      auxiliary input file name\n       file   valloss =      auxiliary output file name\n       file   weight1 =      auxiliary input file name\n       file   weight1out =      auxiliary output file name\n       file   weight2 =      auxiliary input file name\n       file   weight2out =      auxiliary output file name\nSOURCE\n       user/fomels/Mtwolayer.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sftwolayer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwolayer2dti-Tuple{}","page":"Home","title":"Madagascar.sftwolayer2dti","text":"sftwolayer2dti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwolayer2dti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwolayer2dti. See ?m8r for examples.\n\nRSF Documentation\n\nsftwolayer2dti(1)             Madagascar Manuals             sftwolayer2dti(1)\n\nNAME\n       sftwolayer2dti  -  2-D  two-components wavefield modeling using pseudo-\n       pure mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sftwolayer2dti   >   Fo1.rsf   vs0=Fo2.rsf   epsi=Fo3.rsf   del=Fo4.rsf\n       the=Fo5.rsf  nx=201  nz=201 dx=0.008 dz=0.008 vp0_1=3000.0 vs0_1=1200.0\n       eps_1=0.2  del_1=0.1  the_1=0.0  vp0_2=3000.0  vs0_2=1200.0   eps_2=0.2\n       del_2=0.1 the_2=30.0\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   del =      auxiliary output file name\n       float  del_1 =0.1 ®\n       float  del_2 =0.1 ®\n       float  dx =0.008 ®\n       float  dz =0.008 ®\n       float  eps_1 =0.2 ®\n       float  eps_2 =0.2 ®\n       file   epsi =      auxiliary output file name\n       int    nx =201 ®\n       int    nz =201 ®\n       file   the =      auxiliary output file name\n       float  the_1 =0.0 ®\n       float  the_2 =30.0      Unit: degree\n       float  vp0_1 =3000.0 ®\n       float  vp0_2 =3000.0 ®\n       file   vs0 =      auxiliary output file name\n       float  vs0_1 =1200.0 ®\n       float  vs0_2 =1200.0 ®\nSOURCE\n       user/chengjb/Mtwolayer2dti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftwolayer2dti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwolayer3dort-Tuple{}","page":"Home","title":"Madagascar.sftwolayer3dort","text":"sftwolayer3dort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwolayer3dort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwolayer3dort. See ?m8r for examples.\n\nRSF Documentation\n\nsftwolayer3dort(1)            Madagascar Manuals            sftwolayer3dort(1)\n\nNAME\n       sftwolayer3dort - 3-D three-components wavefield modeling using general\n       anisotropy\n\nSYNOPSIS\n       sftwolayer3dort  >  Fo1.rsf   vs0=Fo2.rsf   eps1=Fo3.rsf   eps2=Fo4.rsf\n       del1=Fo5.rsf   del2=Fo6.rsf   del3=Fo7.rsf   gam1=Fo8.rsf  gam2=Fo9.rsf\n       the=Fo10.rsf  phi=Fo11.rsf  ny=201  nx=201  nz=201  dy=0.008   dx=0.008\n       dz=0.008  vp0_1=3000.0  vs0_1=1200.0  eps1_1=0.2  eps2_1=0.2 del1_1=0.1\n       del2_1=0.1  del3_1=0.1  gam1_1=0.0   gam2_1=0.0   the_1=0.0   phi_1=0.0\n       vp0_2=3000.0  vs0_2=1200.0  eps1_2=0.2 eps2_2=0.2 del1_2=0.1 del2_2=0.1\n       del3_2=0.1 gam1_2=0.0 gam2_2=0.0 the_2=30.0 phi_2=0.0\n\nCOMMENTS\n       elastic equation in ort media.  Copyright (C) 2015  Tongji  University,\n       Shanghai, China Authors: Jiubing Cheng and Peng Zou\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   del1 =      auxiliary output file name\n       float  del1_1 =0.1 ®\n       float  del1_2 =0.1 ®\n       file   del2 =      auxiliary output file name\n       float  del2_1 =0.1 ®\n       float  del2_2 =0.1 ®\n       file   del3 =      auxiliary output file name\n       float  del3_1 =0.1 ®\n       float  del3_2 =0.1 ®\n       float  dx =0.008 ®\n       float  dy =0.008 ®\n       float  dz =0.008 ®\n       file   eps1 =      auxiliary output file name\n       float  eps1_1 =0.2 ®\n       float  eps1_2 =0.2 ®\n       file   eps2 =      auxiliary output file name\n       float  eps2_1 =0.2 ®\n       float  eps2_2 =0.2 ®\n       file   gam1 =      auxiliary output file name\n       float  gam1_1 =0.0 ®\n       float  gam1_2 =0.0 ®\n       file   gam2 =      auxiliary output file name\n       float  gam2_1 =0.0 ®\n       float  gam2_2 =0.0 ®\n       int    nx =201 ®\n       int    ny =201 ®\n       int    nz =201 ®\n       file   phi =      auxiliary output file name\n       float  phi_1 =0.0 ®\n       float  phi_2 =0.0 ®\n       file   the =      auxiliary output file name\n       float  the_1 =0.0 ®\n       float  the_2 =30.0 ®\n       float  vp0_1 =3000.0 ®\n       float  vp0_2 =3000.0 ®\n       file   vs0 =      auxiliary output file name\n       float  vs0_1 =1200.0 ®\n       float  vs0_2 =1200.0 ®\nSOURCE\n       user/chengjb/Mtwolayer3dort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sftwolayer3dort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftwolayer3dti-Tuple{}","page":"Home","title":"Madagascar.sftwolayer3dti","text":"sftwolayer3dti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftwolayer3dti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftwolayer3dti. See ?m8r for examples.\n\nRSF Documentation\n\nsftwolayer3dti(1)             Madagascar Manuals             sftwolayer3dti(1)\n\nNAME\n       sftwolayer3dti  -  2-D  two-components wavefield modeling using pseudo-\n       pure mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sftwolayer3dti   >   Fo1.rsf   vs0=Fo2.rsf   epsi=Fo3.rsf   del=Fo4.rsf\n       gam=Fo5.rsf  the=Fo6.rsf  phi=Fo7.rsf  ny=201  nx=201  nz=201  dy=0.008\n       dx=0.008  dz=0.008  vp0_1=3000.0   vs0_1=1200.0   eps_1=0.2   del_1=0.1\n       gam_1=0.0   the_1=0.0  phi_1=0.0  vp0_2=3000.0  vs0_2=1200.0  eps_2=0.2\n       del_2=0.1 gam_2=0.0 the_2=30.0 phi_2=0.0\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China Authors:  Jiubing\n       Cheng and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   del =      auxiliary output file name\n       float  del_1 =0.1 ®\n       float  del_2 =0.1 ®\n       float  dx =0.008 ®\n       float  dy =0.008 ®\n       float  dz =0.008 ®\n       float  eps_1 =0.2 ®\n       float  eps_2 =0.2 ®\n       file   epsi =      auxiliary output file name\n       file   gam =      auxiliary output file name\n       float  gam_1 =0.0 ®\n       float  gam_2 =0.0 ®\n       int    nx =201 ®\n       int    ny =201 ®\n       int    nz =201 ®\n       file   phi =      auxiliary output file name\n       float  phi_1 =0.0 ®\n       float  phi_2 =0.0 ®\n       file   the =      auxiliary output file name\n       float  the_1 =0.0 ®\n       float  the_2 =30.0      Unit: degree\n       float  vp0_1 =3000.0 ®\n       float  vp0_2 =3000.0 ®\n       file   vs0 =      auxiliary output file name\n       float  vs0_1 =1200.0 ®\n       float  vs0_2 =1200.0 ®\nSOURCE\n       user/chengjb/Mtwolayer3dti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftwolayer3dti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxpnmo-Tuple{}","page":"Home","title":"Madagascar.sftxpnmo","text":"sftxpnmo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxpnmo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxpnmo. See ?m8r for examples.\n\nRSF Documentation\n\nsftxpnmo(1)                   Madagascar Manuals                   sftxpnmo(1)\n\nNAME\n       sftxpnmo - Normal moveout in TXP domain.\n\nSYNOPSIS\n       sftxpnmo < cmp.rsf velocity=velocity.rsf > nmod.rsf str=0.5 mute=12 ex‐\n       tend=4\n\nPARAMETERS\n       int    extend =4      trace extension\n       int    mute =12      mute zone\n       float  str =0.5      maximum stretch allowed\n       file   velocity =      auxiliary input file name\nSOURCE\n       system/seismic/Mtxpnmo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftxpnmo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxpscan-Tuple{}","page":"Home","title":"Madagascar.sftxpscan","text":"sftxpscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxpscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxpscan. See ?m8r for examples.\n\nRSF Documentation\n\nsftxpscan(1)                  Madagascar Manuals                  sftxpscan(1)\n\nNAME\n       sftxpscan - Velocity analysis using T-X-P domain.\n\nSYNOPSIS\n       sftxpscan  <  cmp.rsf  >  scan.rsf v0= dv= nv= extend=4 mute=12 str=0.5\n       smin=1.0 smax=2.0\n\nPARAMETERS\n       float  dv =      step in velocity\n       int    extend =4      trace extension\n       int    mute =12      mute zone\n       int    nv =      number of scanned velocities\n       float  smax =2.0      maximum heterogeneity\n       float  smin =1.0      minimum heterogeneity\n       float  str =0.5      maximum stretch allowed\n       float  v0 =      first scanned velocity\nSOURCE\n       system/seismic/Mtxpscan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftxpscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxrna-Tuple{}","page":"Home","title":"Madagascar.sftxrna","text":"sftxrna(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxrna on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxrna. See ?m8r for examples.\n\nRSF Documentation\n\nsftxrna(1)                    Madagascar Manuals                    sftxrna(1)\n\nNAME\n       sftxrna - Causal t-x or t-x-y nonstationary regularized autoregression.\n\nSYNOPSIS\n       sftxrna < mat.rsf > flt.rsf pred=pre.rsf a= niter=20 verb=n\n\nPARAMETERS\n       ints   a =       [mdim]\n       int    niter =20      number of iterations\n       string pred =      auxiliary output file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mtxrna.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sftxrna(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxrna2-Tuple{}","page":"Home","title":"Madagascar.sftxrna2","text":"sftxrna2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxrna2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxrna2. See ?m8r for examples.\n\nRSF Documentation\n\nsftxrna2(1)                   Madagascar Manuals                   sftxrna2(1)\n\nNAME\n       sftxrna2 - 2D space-noncausal t-x nonstationary regularized autoregres‐\n       sion.\n\nSYNOPSIS\n       sftxrna2 < mat.rsf > pre.rsf a= niter=20 verb=n\n\nPARAMETERS\n       ints   a =       [mdim]\n       int    niter =20      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mtxrna2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftxrna2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxrna3-Tuple{}","page":"Home","title":"Madagascar.sftxrna3","text":"sftxrna3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxrna3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxrna3. See ?m8r for examples.\n\nRSF Documentation\n\nsftxrna3(1)                   Madagascar Manuals                   sftxrna3(1)\n\nNAME\n       sftxrna3  -  3D space-noncausal t-x-y nonstationary regularized autore‐\n       gression.\n\nSYNOPSIS\n       sftxrna3 < mat.rsf > pre.rsf a= niter=20 verb=n\n\nPARAMETERS\n       ints   a =       [mdim]\n       int    niter =20      number of iterations\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mtxrna3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sftxrna3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxsorth-Tuple{}","page":"Home","title":"Madagascar.sftxsorth","text":"sftxsorth(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxsorth on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxsorth. See ?m8r for examples.\n\nRSF Documentation\n\nsftxsorth(1)                  Madagascar Manuals                  sftxsorth(1)\n\nNAME\n       sftxsorth - Streaming orthogonalize signal and noise in t-x domain.\n\nSYNOPSIS\n       sftxsorth  <  in.rsf noise=noise.rsf > fnoi2.rsf sig2=fsig2.rsf gamma1=\n       gamma2=\n\nPARAMETERS\n       float  gamma1 =      Regularization in t direction,  gamma_t  in  equa‐\n              tions 18 and 20\n       float  gamma2  =       Regularization  in x direction, gamma_x in equa‐\n              tions 18 and 20\n       file   noise =      auxiliary input file name\n       file   sig2 =      auxiliary output file name\nSOURCE\n       user/yliu/Mtxsorth.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftxsorth(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxspf-Tuple{}","page":"Home","title":"Madagascar.sftxspf","text":"sftxspf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxspf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxspf. See ?m8r for examples.\n\nRSF Documentation\n\nsftxspf(1)                    Madagascar Manuals                    sftxspf(1)\n\nNAME\n       sftxspf - Streaming prediction filter in t-x domain.\n\nSYNOPSIS\n       sftxspf < in.rsf > out.rsf a= lambda1= lambda2=\n\nPARAMETERS\n       ints   a  =       Get  filter  size  from input, a0 is 2M+1, a1 is N in\n              equation 3 [dim]\n       float  lambda1 =      Regularization in t direction, lambda_t in  equa‐\n              tions 1 and 5\n       float  lambda2  =      Regularization in x direction, lambda_x in equa‐\n              tions 1 and 5\nSOURCE\n       user/yliu/Mtxspf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sftxspf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxspfint2-Tuple{}","page":"Home","title":"Madagascar.sftxspfint2","text":"sftxspfint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxspfint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxspfint2. See ?m8r for examples.\n\nRSF Documentation\n\nsftxspfint2(1)                Madagascar Manuals                sftxspfint2(1)\n\nNAME\n       sftxspfint2 - Missing data interpolation using t-x streaming prediction\n       filter with causal structure.\n\nSYNOPSIS\n       sftxspfint2 < in.rsf > out.rsf  known=known.rsf  a=  lambda1=  lambda2=\n       var=0.0f seed=time(NULL)\n\nPARAMETERS\n       ints   a =       [dim]\n       file   known =      auxiliary input file name\n       float  lambda1 =      Regularization in t direction\n       float  lambda2 =      Regularization in x direction\n       int    seed =time(NULL)      random seed\n       float  var =0.0f      noise variance\nSOURCE\n       user/yliu/Mtxspfint2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sftxspfint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxspfvsint2-Tuple{}","page":"Home","title":"Madagascar.sftxspfvsint2","text":"sftxspfvsint2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxspfvsint2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxspfvsint2. See ?m8r for examples.\n\nRSF Documentation\n\nsftxspfvsint2(1)              Madagascar Manuals              sftxspfvsint2(1)\n\nNAME\n       sftxspfvsint2  - Missing data interpolation using t-x streaming predic‐\n       tion filter with varying smoothness and noncausal structure.\n\nSYNOPSIS\n       sftxspfvsint2 < in.rsf > out.rsf  known=known.rsf  a=  verb=n  smooth=n\n       epst=0 epsx=0 lambda1= lambda2= var=0.0f seed=time(NULL)\n\nPARAMETERS\n       ints   a =       [dim]\n       float  epst =0      Smoothness in t direction\n       float  epsx =0      Smoothness in x direction\n       file   known =      auxiliary input file name\n       float  lambda1 =      Regularization in t direction\n       float  lambda2 =      Regularization in x direction\n       int    seed =time(NULL) ®\n       bool   smooth =n [y/n]     If yes, use varying smoothness\n       float  var =0.0f ®\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mtxspfvsint2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sftxspfvsint2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxt2rsf-Tuple{}","page":"Home","title":"Madagascar.sftxt2rsf","text":"sftxt2rsf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxt2rsf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxt2rsf. See ?m8r for examples.\n\nRSF Documentation\n\nsftxt2rsf(1)                  Madagascar Manuals                  sftxt2rsf(1)\n\nNAME\n       sftxt2rsf - Text (ASCII) file (like a matrix) to RSF file\n\nSYNOPSIS\n       sftxt2rsf > out.rsf n1= n2= d1=0.004 d2=1 o1=0 o2=0 tfile=\n\nCOMMENTS\n       Convert  a  file  containing a two dimensional array of ASCII floats to\n       and the rsf file is written to standard output.  If you have  a  higher\n       dimension file (3d, 4d, ..) you can change n2, n3, etc using sfput.\n\n       Example that converts and plots a ascii velocity grid:\n\n       <Vp sftxt2rsf n1=400 d1=1 n2=1600 d2=1 o2=101 | sfgrey color=jet scale‐\n       bar=y allpos=y | sfpen\n\nPARAMETERS\n       float  d1 =0.004 ®\n       float  d2 =1 ®\n       int    n1 = ®\n       int    n2 = ®\n       float  o1 =0 ®\n       float  o2 =0 ®\n       string tfile = ®\nSOURCE\n       user/chenyk/Mtxt2rsf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sftxt2rsf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxyspfint3-Tuple{}","page":"Home","title":"Madagascar.sftxyspfint3","text":"sftxyspfint3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxyspfint3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxyspfint3. See ?m8r for examples.\n\nRSF Documentation\n\nsftxyspfint3(1)               Madagascar Manuals               sftxyspfint3(1)\n\nNAME\n       sftxyspfint3 - Missing data interpolation using t-x-y streaming predic‐\n       tion filter with x-axis causal structure.\n\nSYNOPSIS\n       sftxyspfint3 < in.rsf > out.rsf known=known.rsf  a=  lambda1=  lambda2=\n       lambda3= var=0.0f seed=time(NULL)\n\nPARAMETERS\n       ints   a =       [dim]\n       file   known =      auxiliary input file name\n       float  lambda1 =      Regularization in t direction\n       float  lambda2 =      Regularization in x direction\n       float  lambda3 =      Regularization in y direction\n       int    seed =time(NULL)      random seed\n       float  var =0.0f      noise variance\nSOURCE\n       user/yliu/Mtxyspfint3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sftxyspfint3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sftxyspfvsint3-Tuple{}","page":"Home","title":"Madagascar.sftxyspfvsint3","text":"sftxyspfvsint3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sftxyspfvsint3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sftxyspfvsint3. See ?m8r for examples.\n\nRSF Documentation\n\nsftxyspfvsint3(1)             Madagascar Manuals             sftxyspfvsint3(1)\n\nNAME\n       sftxyspfvsint3  - Missing data interpolation using t-x-y streaming pre‐\n       diction filter with varying smoothness and noncausal structure.\n\nSYNOPSIS\n       sftxyspfvsint3 < in.rsf > out.rsf known=known.rsf  a=  verb=n  smooth=y\n       epst=0    epsx=0    epsy=0    lambda1=   lambda2=   lambda3=   var=0.0f\n       seed=time(NULL)\n\nPARAMETERS\n       ints   a =       [dim]\n       float  epst =0      Smoothness in t direction\n       float  epsx =0      Smoothness in x direction\n       float  epsy =0      Smoothness in y direction\n       file   known =      auxiliary input file name\n       float  lambda1 =      Regularization in t direction\n       float  lambda2 =      Regularization in x direction5\n       float  lambda3 =      Regularization in y direction\n       int    seed =time(NULL)      random seed\n       bool   smooth =y [y/n]     If yes, use varying smoothness\n       float  var =0.0f      noise variance\n       bool   verb =n [y/n]\nSOURCE\n       user/yliu/Mtxyspfvsint3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sftxyspfvsint3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfucor-Tuple{}","page":"Home","title":"Madagascar.sfucor","text":"sfucor(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfucor on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfucor. See ?m8r for examples.\n\nRSF Documentation\n\nsfucor(1)                     Madagascar Manuals                     sfucor(1)\n\nNAME\n       sfucor  -  Interferometric  cross-correlation  of time series (zero-lag\n       output)\n\nSYNOPSIS\n       sfucor < Fs.rsf ur=Fr.rsf > Fi.rsf ompchunk=1 verb=n nhz=0 nhx=0 nht=1\n\nPARAMETERS\n       int    nht =1 ®\n       int    nhx =0 ®\n       int    nhz =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       file   ur =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mucor.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfucor(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfunfault-Tuple{}","page":"Home","title":"Madagascar.sfunfault","text":"sfunfault(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfunfault on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfunfault. See ?m8r for examples.\n\nRSF Documentation\n\nsfunfault(1)                  Madagascar Manuals                  sfunfault(1)\n\nNAME\n       sfunfault - Unfault image\n\nSYNOPSIS\n       sfunfault  < in.rsf slip=slip.rsf > out.rsf shift=shift.rsf dip=dip.rsf\n       mask=mask.rsf inv=n mode=y niter=100 off=2 lam=1\n\nPARAMETERS\n       file   dip =      auxiliary input file name\n       bool   inv =n [y/n]\n       float  lam =1      regularization\n       file   mask =      auxiliary output file name\n       bool   mode =y [y/n]\n       int    niter =100      number of iterations\n       int    off =2      offset to fault\n       file   shift =      auxiliary input file name\n       file   slip =      auxiliary input file name\nSOURCE\n       user/zhiguang/Munfault.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfunfault(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfungrad-Tuple{}","page":"Home","title":"Madagascar.sfungrad","text":"sfungrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfungrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfungrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfungrad(1)                   Madagascar Manuals                   sfungrad(1)\n\nNAME\n       sfungrad - Phase unwrapping by least squares.\n\nSYNOPSIS\n       sfungrad < inp.rsf > out.rsf badness=bad.rsf niter=0\n\nPARAMETERS\n       string badness =      auxiliary output file name\n       int    niter =0      number of iterations\nSOURCE\n       user/gee/Mungrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfungrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfunif2-Tuple{}","page":"Home","title":"Madagascar.sfunif2","text":"sfunif2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfunif2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfunif2. See ?m8r for examples.\n\nRSF Documentation\n\nsfunif2(1)                    Madagascar Manuals                    sfunif2(1)\n\nNAME\n       sfunif2  -  Generate  2-D  layered velocity model from specified inter‐\n       faces.\n\nSYNOPSIS\n       sfunif2 < surface.rsf > model.rsf x0= z0=  v00=  dvdx=  dvdz=  n1=  d1=\n       o1=0. label1= unit1=\n\nCOMMENTS\n       In each layer, velocity is a linear function of position.\n\n       Inspired by SU's unif2.\n\n       October 2013 program of the month: http://ahay.org/blog/2013/10/03/pro‐\n       gram-of-the-month-sfunif2/\n\nPARAMETERS\n       float  d1 =      Sampling of the depth axis\n       floats dvdx =       [ninf]\n       floats dvdz =       [ninf]\n       string label1 =      depth axis label\n       int    n1 =      Number of samples on the depth axis\n       float  o1 =0.       Origin of the depth axis\n       string unit1 = ®\n       floats v00 =       [ninf]\n       floats x0 =       [ninf]\n       floats z0 =       [ninf]\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\n       cwp/geo2009TTIModeSeparation/fold\nSOURCE\n       system/generic/Munif2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfunif2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfunif3-Tuple{}","page":"Home","title":"Madagascar.sfunif3","text":"sfunif3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfunif3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfunif3. See ?m8r for examples.\n\nRSF Documentation\n\nsfunif3(1)                    Madagascar Manuals                    sfunif3(1)\n\nNAME\n       sfunif3  -  Generate  3-D  layered velocity model from specified inter‐\n       faces.\n\nSYNOPSIS\n       sfunif3 < surface.rsf > model.rsf x0= y0= z0= v00=  dvdx=  dvdy=  dvdz=\n       n1= d1= o1=0. layers=\n\nCOMMENTS\n       Unless  layers= is specified, velocity is a linear function of position\n       inside each layer.\n\n       Inspired by SU's unif2.\n\nPARAMETERS\n       float  d1 =      Sampling of the depth axis\n       floats dvdx =       [ninf]\n       floats dvdy =       [ninf]\n       floats dvdz =       [ninf]\n       string layers =      file with layer properties\n       int    n1 =      Number of samples on the depth axis\n       float  o1 =0.       Origin of the depth axis\n       floats v00 =       [ninf]\n       floats x0 =       [ninf]\n       floats y0 =       [ninf]\n       floats z0 =       [ninf]\nUSED IN\n       cwp/geo2006TimeShiftImagingCondition/flat\nSOURCE\n       system/generic/Munif3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfunif3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfunits-Tuple{}","page":"Home","title":"Madagascar.sfunits","text":"sfunits(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfunits on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfunits. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfupgrad-Tuple{}","page":"Home","title":"Madagascar.sfupgrad","text":"sfupgrad(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfupgrad on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfupgrad. See ?m8r for examples.\n\nRSF Documentation\n\nsfupgrad(1)                   Madagascar Manuals                   sfupgrad(1)\n\nNAME\n       sfupgrad - Causal gradient operator\n\nSYNOPSIS\n       sfupgrad < inp.rsf ref=ref.rsf > out.rsf adj=n grad=y dim=\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       int    dim = ®\n       bool   grad =y [y/n]     if y, gradient; if n, Laplacian\n       file   ref =      auxiliary input file name\nSOURCE\n       user/fomels/Mupgrad.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfupgrad(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfupsamp1-Tuple{}","page":"Home","title":"Madagascar.sfupsamp1","text":"sfupsamp1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfupsamp1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfupsamp1. See ?m8r for examples.\n\nRSF Documentation\n\nsfupsamp1(1)                  Madagascar Manuals                  sfupsamp1(1)\n\nNAME\n       sfupsamp1 - 1-D linear interpolation\n\nSYNOPSIS\n       sfupsamp1 < in.rsf > out.rsf scale=\n\nPARAMETERS\n       int    scale = ®\nSOURCE\n       user/zhiguang/Mupsamp1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfupsamp1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfv2d-Tuple{}","page":"Home","title":"Madagascar.sfv2d","text":"sfv2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfv2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfv2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfv2d(1)                      Madagascar Manuals                      sfv2d(1)\n\nNAME\n       sfv2d - Velocity convert to dip.\n\nSYNOPSIS\n       sfv2d  < in.rsf > out.rsf n=32 d=12.5 o=0. mute=n half=n tp=0.150 t0=0.\n       v0=10000 x0=0. abs=y inner=n hyper=n\n\nPARAMETERS\n       bool   abs =y [y/n]     if y, use absolute value |x-x0| (available when\n              mute=y)\n       float  d =12.5      offset interval\n       bool   half =n [y/n]     if y, half-offset instead of full offset\n       bool   hyper  =n  [y/n]     if  y,  do  hyperbolic mute (available when\n              mute=y)\n       bool   inner =n [y/n]     if y, do inner muter (available when mute=y)\n       bool   mute =n [y/n]     if y, use mutter\n       int    n =32      offset number\n       float  o =0.       offset origin\n       float  t0 =0.       starting time (available when mute=y)\n       float  tp =0.150      end time (available when mute=y)\n       float  v0 =10000      velocity (available when mute=y)\n       float  x0 =0.       starting space (available when mute=y)\nSOURCE\n       user/yliu/Mv2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfv2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvam-Tuple{}","page":"Home","title":"Madagascar.sfvam","text":"sfvam(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvam on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvam. See ?m8r for examples.\n\nRSF Documentation\n\nsfvam(1)                      Madagascar Manuals                      sfvam(1)\n\nNAME\n       sfvam - Create a layered model.\n\nSYNOPSIS\n       sfvam > vfile.rsf nz= nx= dz= dx=\n\nPARAMETERS\n       float  dx =      distance sampling\n       float  dz =      depth sampling\n       int    nx =      distance grid\n       int    nz =      depth grid\nSOURCE\n       user/hpcss/Mvam.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfvam(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvar2-Tuple{}","page":"Home","title":"Madagascar.sfvar2","text":"sfvar2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvar2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvar2. See ?m8r for examples.\n\nRSF Documentation\n\nsfvar2(1)                     Madagascar Manuals                     sfvar2(1)\n\nNAME\n       sfvar2 - Variogram from irregular 2-D data.\n\nSYNOPSIS\n       sfvar2 < in.rsf > out.rsf nx= dx=\n\nPARAMETERS\n       float  dx =      distance sampling\n       int    nx =      number of distance bins\nSOURCE\n       user/fomels/Mvar2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfvar2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvaricost-Tuple{}","page":"Home","title":"Madagascar.sfvaricost","text":"sfvaricost(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvaricost on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvaricost. See ?m8r for examples.\n\nRSF Documentation\n\nsfvaricost(1)                 Madagascar Manuals                 sfvaricost(1)\n\nNAME\n       sfvaricost -\n\nSYNOPSIS\n       sfvaricost lambda= epsilon=\n\nCOMMENTS\n       Determines  costs associated with velocity models from varipick.  Input\n       is velocity model, needs semb= semblance volume\n\nPARAMETERS\n       float  epsilon = ®\n       float  lambda = ®\nSOURCE\n       user/luke/Mvaricost.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvaricost(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvariminim-Tuple{}","page":"Home","title":"Madagascar.sfvariminim","text":"sfvariminim(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvariminim on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvariminim. See ?m8r for examples.\n\nRSF Documentation\n\nsfvariminim(1)                Madagascar Manuals                sfvariminim(1)\n\nNAME\n       sfvariminim -\n\nSYNOPSIS\n       sfvariminim lambda= epsilon= costs= worst=\n\nCOMMENTS\n       outputs the minimum and maximum cost velocity models input is series of\n       models semb= semblance volume costs= output for cost worst= worst model\n       output primary output is lowest cost model\n\nPARAMETERS\n       string costs = ®\n       float  epsilon = ®\n       float  lambda = ®\n       string worst = ®\nSOURCE\n       user/luke/Mvariminim.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvariminim(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvariogram-Tuple{}","page":"Home","title":"Madagascar.sfvariogram","text":"sfvariogram(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvariogram on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvariogram. See ?m8r for examples.\n\nRSF Documentation\n\nsfvariogram(1)                Madagascar Manuals                sfvariogram(1)\n\nNAME\n       sfvariogram - Compute a variogram of data values.\n\nSYNOPSIS\n       sfvariogram < in.rsf > out.rsf dh=1 oh=0 nh=n1/dh-oh semi=y\n\nPARAMETERS\n       int    dh =1      interval (number) of variogram lag\n       int    nh =n1/dh-oh      number of variogram lag\n       int    oh =0      origin (number) of variogram lag\n       bool   semi =y [y/n]     if y, output semivariogram\nSOURCE\n       user/yliu/Mvariogram.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvariogram(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvariogram2-Tuple{}","page":"Home","title":"Madagascar.sfvariogram2","text":"sfvariogram2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvariogram2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvariogram2. See ?m8r for examples.\n\nRSF Documentation\n\nsfvariogram2(1)               Madagascar Manuals               sfvariogram2(1)\n\nNAME\n       sfvariogram2 - Compute a horizontal variogram of data slice.\n\nSYNOPSIS\n       sfvariogram2   <   in.rsf  >  out.rsf  verb=n  dh1=1  nh1=n1/dh1  dh2=1\n       nh2=n2/dh2 semi=y\n\nPARAMETERS\n       int    dh1 =1      interval (jump) of variogram lag in first axis\n       int    dh2 =1      interval (jump) of variogram lag in second axis\n       int    nh1 =n1/dh1      number of variogram lag in first axis\n       int    nh2 =n2/dh2      number of variogram lag in second axis\n       bool   semi =y [y/n]     if y, output semivariogram\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/yliu/Mvariogram2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfvariogram2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvaripick-Tuple{}","page":"Home","title":"Madagascar.sfvaripick","text":"sfvaripick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvaripick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvaripick. See ?m8r for examples.\n\nRSF Documentation\n\nsfvaripick(1)                 Madagascar Manuals                 sfvaripick(1)\n\nNAME\n       sfvaripick -\n\nSYNOPSIS\n       sfvaripick lambda= niter= rho= epsilon= type= updates=\n\nCOMMENTS\n       Performs  automatic  picking of a surface from a semblance-like volume.\n       Input is semblance volume, also needs vo= starting model,  dsemb=  par‐\n       tial derivative of semblance with respect to v\n\nPARAMETERS\n       float  epsilon  =       positive  regularization parameter for gradient\n              term\n       float  lambda =      positive regularizaton parameter\n       int    niter =      number of iterations\n       float  rho =      step size limit\n       string type =      lbfgs, line, or grad\n       string updates = ®\nSOURCE\n       user/luke/Mvaripick.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvaripick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvconvert-Tuple{}","page":"Home","title":"Madagascar.sfvconvert","text":"sfvconvert(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvconvert on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvconvert. See ?m8r for examples.\n\nRSF Documentation\n\nsfvconvert(1)                 Madagascar Manuals                 sfvconvert(1)\n\nNAME\n       sfvconvert  -  2-D velocity mapping from manual picking to rsf RMS for‐\n       mat.\n\nSYNOPSIS\n       sfvconvert < in.rsf > out.rsf pattern=pattern.rsf shift=0\n\nCOMMENTS\n       Covert    from    --------------------------------------     Time_i(ms)\n       RMS_i(m/s)    Lateral_j(trace)    -1            0             Lateral_j\n       -------------------------------------- to regular RSF_RMS velocity grid\n\n       Specify either n1= o1= d1= n2= o2= d2= or pattern=\n\nPARAMETERS\n       string pattern =      auxiliary input file name\n       int    shift =0      Lateral shift\nSOURCE\n       user/yliu/Mvconvert.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvconvert(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvczo-Tuple{}","page":"Home","title":"Madagascar.sfvczo","text":"sfvczo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvczo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvczo. See ?m8r for examples.\n\nRSF Documentation\n\nsfvczo(1)                     Madagascar Manuals                     sfvczo(1)\n\nNAME\n       sfvczo - Post-stack 2-D velocity continuation.\n\nSYNOPSIS\n       sfvczo      <      in.rsf      >      out.rsf      eps=0.01      pad=n1\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) verb=y nv= dv= v0=\n\nPARAMETERS\n       float  dv =      velocity step size\n       float  eps =0.01      regularization\n       int    nv =      velocity steps\n       int    pad =n1      padding for stretch\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2)      padding for FFT\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mvczo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfvczo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvczo2-Tuple{}","page":"Home","title":"Madagascar.sfvczo2","text":"sfvczo2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvczo2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvczo2. See ?m8r for examples.\n\nRSF Documentation\n\nsfvczo2(1)                    Madagascar Manuals                    sfvczo2(1)\n\nNAME\n       sfvczo2 - Post-stack 2-D velocity continuation in the time-stretch fre‐\n       quency domain.\n\nSYNOPSIS\n       sfvczo2 < in.rsf > out.rsf verb=y nv= dv= v0=\n\nPARAMETERS\n       float  dv =      velocity step size\n       int    nv =      velocity steps\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mvczo2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvczo2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvczo3-Tuple{}","page":"Home","title":"Madagascar.sfvczo3","text":"sfvczo3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvczo3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvczo3. See ?m8r for examples.\n\nRSF Documentation\n\nsfvczo3(1)                    Madagascar Manuals                    sfvczo3(1)\n\nNAME\n       sfvczo3 - Post-stack 3-D velocity continuation.\n\nSYNOPSIS\n       sfvczo3      <      in.rsf      >      out.rsf      eps=0.01     pad=n1\n       pad2=2*kiss_fft_next_fast_size((n2+1)/2) verb=y nv= dv= v0=\n\nPARAMETERS\n       float  dv =      velocity step size\n       float  eps =0.01      regularization\n       int    nv =      velocity steps\n       int    pad =n1      padding for stretch\n       int    pad2 =2*kiss_fft_next_fast_size((n2+1)/2)      padding for FFT\n       float  v0 =      starting velocity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       system/seismic/Mvczo3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvczo3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfve2d-Tuple{}","page":"Home","title":"Madagascar.sfve2d","text":"sfve2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfve2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfve2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfve2d(1)                     Madagascar Manuals                     sfve2d(1)\n\nNAME\n       sfve2d - Convert interval velocity to Dix velocity\n\nSYNOPSIS\n       sfve2d < fsc.rsf > fid.rsf x=fx.rsf z=fy.rsf nt= dt= order=4\n\nPARAMETERS\n       float  dt = ®\n       int    nt = ®\n       int    order =4      interpolation order\n       file   x =      auxiliary output file name\n       file   z =      auxiliary output file name\nSOURCE\n       user/kourkina/Mve2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfve2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvel1d-Tuple{}","page":"Home","title":"Madagascar.sfvel1d","text":"sfvel1d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvel1d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvel1d. See ?m8r for examples.\n\nRSF Documentation\n\nsfvel1d(1)                    Madagascar Manuals                    sfvel1d(1)\n\nNAME\n       sfvel1d - Hungs a 1d velocity function from the Water bottom.\n\nSYNOPSIS\n       sfvel1d < in.rsf mask=mask1.rsf > out.rsf wb=wbot.rsf vel=1.5\n\nCOMMENTS\n       Should work for 2D models\n\n       stdin    1D velocity function to be used file mask [required]   The wa‐\n       ter bottom is read from the mask file.  1 above the WB 0 bellow the WB\n\n       stdout The output velocity model has dimensions of the mask file.   vel\n       [1.5]    velocity to use above the horizon (usually water velocity)\n\nPARAMETERS\n       file   mask =      auxiliary input file name\n       float  vel =1.5 ®\n       file   wb =      auxiliary output file name\nSOURCE\n       user/ediazp/Mvel1d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvel1d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelan-Tuple{}","page":"Home","title":"Madagascar.sfvelan","text":"sfvelan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelan. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelan(1)                    Madagascar Manuals                    sfvelan(1)\n\nNAME\n       sfvelan - font.size\n\nSYNOPSIS\n       sfvelan < Fsemb.rsf cmp=Fcmp.rsf offset=Foff.rsf > Fout.rsf useoffset=y\n       half=y\n\nPARAMETERS\n       file   cmp =      auxiliary input file name\n       bool   half =y [y/n]     half or full offset?\n       file   offset =      auxiliary input file name\n       bool   useoffset =y [y/n]     if irregular offset, pass it\nSOURCE\n       user/ediazp/Mvelan.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvelan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelcon-Tuple{}","page":"Home","title":"Madagascar.sfvelcon","text":"sfvelcon(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelcon on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelcon. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelcon(1)                   Madagascar Manuals                   sfvelcon(1)\n\nNAME\n       sfvelcon  - Post-stack velocity continuation by implicit finite differ‐\n       ences\n\nSYNOPSIS\n       sfvelcon < in.rsf > out.rsf vel=0.75 v0=0. nv=n1 adj=n add=n inv=0\n\nPARAMETERS\n       bool   add =n [y/n]     addition flag\n       bool   adj =n [y/n]     adjoint flag\n       int    inv =0      amplitude type\n       int    nv =n1      number of steps\n       float  v0 =0.       starting velocity\n       float  vel =0.75      final velocity\nSOURCE\n       user/fomels/Mvelcon.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvelcon(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelcon3-Tuple{}","page":"Home","title":"Madagascar.sfvelcon3","text":"sfvelcon3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelcon3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelcon3. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelcon3(1)                  Madagascar Manuals                  sfvelcon3(1)\n\nNAME\n       sfvelcon3 - 3-D finite-difference velocity continuation on a helix\n\nSYNOPSIS\n       sfvelcon3 < inp.rsf > out.rsf adj=y inv=1 nv=nt vel=1.\n\nPARAMETERS\n       bool   adj =y [y/n]     forward or backward continuation\n       int    inv =1      inversion type\n       int    nv =nt      velocity steps\n       float  vel =1.       initial velocity\nSOURCE\n       user/gee/Mvelcon3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfvelcon3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelinv-Tuple{}","page":"Home","title":"Madagascar.sfvelinv","text":"sfvelinv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelinv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelinv. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelinv(1)                   Madagascar Manuals                   sfvelinv(1)\n\nNAME\n       sfvelinv  -  Velocity transform for generating velocity spectra and its\n       corresponding hyperbolic modeling.\n\nSYNOPSIS\n       sfvelinv < cmp.rsf > vtr.rsf adj=n niter=0 ns=nx ds=0.001 os=0.00000001\n       nx=ns dx=10. ox=0. robust=n perc=90. fact=1.5 nliter=10 eps=1. type=\n\nPARAMETERS\n       bool   adj  =n  [y/n]     adj  =  0:  from velocity-domain(t,s) to cmp-\n              gather(t,x)\n                     adj = 1: from cmp-gather(t,x) to velocity-domain(t,s)\n       float  ds =0.001      slowness sampling\n       float  dx =10.       offset sampling\n       float  eps =1.       regularization parameter for robust inversion\n       float  fact =1.5      threshold factor for robust inversion\n       int    niter =0      number of iterations (invoked if adj=y)\n       int    nliter =10      number of POCS iterations for robust inversion\n       int    ns =nx      number of slowness values\n       int    nx =ns      number of offset values\n       float  os =0.00000001      slowness origin\n       float  ox =0.       offset origin\n       float  perc =90.       threshold percentage for robust inversion\n       bool   robust =n [y/n]     robust inversion\n       string type =      thresholding type\nSOURCE\n       user/fomels/Mvelinv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvelinv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelinvnew-Tuple{}","page":"Home","title":"Madagascar.sfvelinvnew","text":"sfvelinvnew(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelinvnew on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelinvnew. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelinvnew(1)                Madagascar Manuals                sfvelinvnew(1)\n\nNAME\n       sfvelinvnew - None\n\nSYNOPSIS\n       sfvelinvnew < infile.rsf res=fres.rsf vel0=fm.rsf mres=fmres.rsf > out‐\n       file.rsf velout=vtr.rsf nv=nhx dv=0.01 ov=1.5 niter=20 savevel=0 flag=0\n       mflag=0  huber=0  irls=0  nstep=1  rwt=0.  mwt=0.  srate=0.01  eps=0.01\n       lamda=1000. delta=0.0001 step=0.000005 alpha=790.635 alpha= lip= reset=\n\nPARAMETERS\n       alpha  =      smoothing parameter, typical value: 1 to 10  times  esti‐\n              mated norm(x,inf)\n       delta  =0.0001       delta  controls  update step and convergent, small\n              delta ensure convergence but with small decrease in data fit er‐\n              ror\n       dv     =0.01 ®\n       eps    =0.01 ®\n       flag   =0 ®\n       huber  =0 ®\n       irls   =0 ®\n       lamda  =1000.        lamda  controls sparsity, bigger lamda, more spar‐\n              sity\n       lip    =      the estimated Lipschitz constrant of the dual  objective,\n              default: alpha*normest(A*A',1e-2)\n       mflag  =0 ®\n       file   mres =      auxiliary output file name\n       mwt    =0.  ®\n       niter  =20 ®\n       nstep  =1 ®\n       nv     =nhx ®\n       ov     =1.5 ®\n       file   res =      auxiliary output file name\n       reset  =       Nesterov's acceleration restart (theta is reset) or skip\n              (theta is not reset)\n       rwt    =0.  ®\n       savevel\n              =0      Flag to choose the algorithm\n       srate  =0.01 ®\n       step   =0.000005      step is very important in convergence  and  spar‐\n              sity\n       file   vel0 =      auxiliary input file name\n       file   velout =      auxiliary output file name\nSOURCE\n       user/seisinv/Mvelinvnew.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvelinvnew(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelinvww-Tuple{}","page":"Home","title":"Madagascar.sfvelinvww","text":"sfvelinvww(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelinvww on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelinvww. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelinvww(1)                 Madagascar Manuals                 sfvelinvww(1)\n\nNAME\n       sfvelinvww - None\n\nSYNOPSIS\n       sfvelinvww  <  infile.rsf  >  outfile.rsf velout=vtr.rsf ns=nh ds=0.001\n       os=0.00000001 huber=0 irls=0 nstep=1 niter=20 rwt=0. mwt=0.  srate=0.01\n       epw=0.01 savevel=0\n\nPARAMETERS\n       ds     =0.001 ®\n       epw    =0.01 ®\n       huber  =0 ®\n       irls   =0 ®\n       mwt    =0.  ®\n       niter  =20 ®\n       ns     =nh ®\n       nstep  =1 ®\n       os     =0.00000001 ®\n       rwt    =0.  ®\n       savevel\n              =0 ®\n       srate  =0.01 ®\n       file   velout =      auxiliary output file name\nSOURCE\n       user/jun/Mvelinvww.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvelinvww(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelmap-Tuple{}","page":"Home","title":"Madagascar.sfvelmap","text":"sfvelmap(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelmap on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelmap. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelmap(1)                   Madagascar Manuals                   sfvelmap(1)\n\nNAME\n       sfvelmap  - 2-D mapping from moving-object velocity to plane-wave slow‐\n       ness\n\nSYNOPSIS\n       sfvelmap < in.rsf > out.rsf  osx=-0.5/dvx  osy=-0.5/dvy  nt=360  dt=0.5\n       ot=0.\n\nPARAMETERS\n       float  dt =0.5      line parameter increment\n       int    nt  =360       number  of  line  parameter  for  integration  in\n              [0,180].\n       float  osx =-0.5/dvx ®\n       float  osy =-0.5/dvy ®\n       float  ot =0.       line parameter origin\nSOURCE\n       user/browaeys/Mvelmap.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvelmap(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelmod-Tuple{}","page":"Home","title":"Madagascar.sfvelmod","text":"sfvelmod(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelmod on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelmod. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelmod(1)                   Madagascar Manuals                   sfvelmod(1)\n\nNAME\n       sfvelmod - Velocity transform.\n\nSYNOPSIS\n       sfvelmod < scan.rsf > cmp.rsf half=y extend=4 slowness=n\n\nCOMMENTS\n       Inverse of sfvscan.\n\nPARAMETERS\n       int    extend =4      trace extension\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\nUSED IN\n       bei/vela/vscan\nSOURCE\n       system/seismic/Mvelmod.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvelmod(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelsteer-Tuple{}","page":"Home","title":"Madagascar.sfvelsteer","text":"sfvelsteer(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelsteer on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelsteer. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelsteer(1)                 Madagascar Manuals                 sfvelsteer(1)\n\nNAME\n       sfvelsteer - Velocity steering for 2D receivers array.\n\nSYNOPSIS\n       sfvelsteer  <  in.rsf  >  out.rsf  nvx= dvx= ovx= nvy= dvy= ovy= iypi=0\n       iyps=ny-1 xp=\n\nPARAMETERS\n       float  dvx =      vx sampling\n       float  dvy =      vy sampling\n       int    iypi =0      first depth position  where  velocity  steering  is\n              computed\n       int    iyps  =ny-1       last depth position where velocity steering is\n              computed\n       int    nvx =      number of vx values\n       int    nvy =      number of vy values\n       float  ovx =      vx origin\n       float  ovy =      vy origin\n       float  xp =      lateral position where velocity steering is computed\nSOURCE\n       user/browaeys/Mvelsteer.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvelsteer(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfveltran-Tuple{}","page":"Home","title":"Madagascar.sfveltran","text":"sfveltran(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfveltran on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfveltran. See ?m8r for examples.\n\nRSF Documentation\n\nsfveltran(1)                  Madagascar Manuals                  sfveltran(1)\n\nNAME\n       sfveltran - Hyperbolic Radon transform\n\nSYNOPSIS\n       sfveltran < in.rsf > out.rsf adj=n anti=1. s02=0. pull=y\n\nPARAMETERS\n       bool   adj =n [y/n]     adjoint flag\n       float  anti =1.       antialiasing\n       bool   pull =y [y/n]     pull or push operator\n       float  s02 =0.       reference slowness squared (for antialiasing)\nUSED IN\n       bei/trimo/veltran\nSOURCE\n       system/seismic/Mveltran.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfveltran(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelxf-Tuple{}","page":"Home","title":"Madagascar.sfvelxf","text":"sfvelxf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelxf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelxf. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelxf(1)                    Madagascar Manuals                    sfvelxf(1)\n\nNAME\n       sfvelxf - None\n\nSYNOPSIS\n       sfvelxf  <  vtr.rsf  <  cmp.rsf adj=0 nx=ns dx=10. ox=0. ns=nx ds=0.001\n       os=0.00000001\n\nPARAMETERS\n       adj    =0      adj = 0 : from velocity-domain(t,s) to cmp-gather(t,x)\n       ds     =0.001 ®\n       dx     =10.  ®\n       ns     =nx ®\n       nx     =ns ®\n       os     =0.00000001 ®\n       ox     =0.  ®\nSOURCE\n       user/jun/Mvelxf.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvelxf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvelxf3-Tuple{}","page":"Home","title":"Madagascar.sfvelxf3","text":"sfvelxf3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvelxf3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvelxf3. See ?m8r for examples.\n\nRSF Documentation\n\nsfvelxf3(1)                   Madagascar Manuals                   sfvelxf3(1)\n\nNAME\n       sfvelxf3 - None\n\nSYNOPSIS\n       sfvelxf3  <  vtr.rsf  <  cmp.rsf adj=0 nx=nv ny=1 dx=0.01 dy=0.01 ox=0.\n       oy=0. nv=nx dv=0.01 ov=1.5\n\nPARAMETERS\n       adj    =0      adj = 0 : from velocity-domain(t,s) to cmp-gather(t,x)\n       dv     =0.01 ®\n       dx     =0.01 ®\n       dy     =0.01 ®\n       nv     =nx ®\n       nx     =nv ®\n       ny     =1 ®\n       ov     =1.5 ®\n       ox     =0.  ®\n       oy     =0.  ®\nSOURCE\n       user/seisinv/Mvelxf3.f90\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvelxf3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfversion-Tuple{}","page":"Home","title":"Madagascar.sfversion","text":"sfversion(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfversion on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfversion. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvfsacrsnh-Tuple{}","page":"Home","title":"Madagascar.sfvfsacrsnh","text":"sfvfsacrsnh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvfsacrsnh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvfsacrsnh. See ?m8r for examples.\n\nRSF Documentation\n\nsfvfsacrsnh(1)                Madagascar Manuals                sfvfsacrsnh(1)\n\nNAME\n       sfvfsacrsnh  -  Version 2.0 - Zero offset CRS parameters inversion (RN,\n       RNIP, BETA) with Very Fast Simulated Aneeling (VFSA)  Global  Optimiza‐\n       tion\n\nSYNOPSIS\n       sfvfsacrsnh  <  in.rsf  >  out.rsf om0=0.0 dm0=0.1 nm0=1 v0=1.5 ot0=0.0\n       dt0=0.1 nt0=1 c0=0.5 temp0=10 repeat=1 verb=0\n\nCOMMENTS\n       This program uses the Non-Hyperbolic CRS approximation to fit data cube\n       and get the zero-offset CRS parameters (Fomel, 2013).\n\n       Programmer: Rodolfo A. C. Neves (Dirack) 13/08/2021\n\n       Email:  rodolfo_profissional@hotmail.com\n\n       License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.\n\nPARAMETERS\n       float  c0 =0.5      damping factor of VFSA\n       float  dm0 =0.1      central CMP's sampling (Km)\n       float  dt0 =0.1      t0's sampling (s)\n       int    nm0 =1      central CMP's number of samples (Km)\n       int    nt0 =1      Number of t0's sampling (s)\n       float  om0 =0.0      central CMP's origin (Km)\n       float  ot0 =0.0      t0's origin (s)\n       int    repeat  =1       How many times to perform VFSA global optimiza‐\n              tion\n       float  temp0 =10      initial VFSA temperature\n       float  v0 =1.5      Near surface velocity (Km/s)\n       bool   verb =0 [y/n]     1: active mode; 0: quiet mode\nSOURCE\n       user/dirack/Mvfsacrsnh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvfsacrsnh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfviewbin-Tuple{}","page":"Home","title":"Madagascar.sfviewbin","text":"sfviewbin(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfviewbin on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfviewbin. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvipmig0-Tuple{}","page":"Home","title":"Madagascar.sfvipmig0","text":"sfvipmig0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvipmig0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvipmig0. See ?m8r for examples.\n\nRSF Documentation\n\nsfvipmig0(1)                  Madagascar Manuals                  sfvipmig0(1)\n\nNAME\n       sfvipmig0 - Velocity-independent phase-space zero-offset migration.\n\nSYNOPSIS\n       sfvipmig0 < inp.rsf > mig.rsf vmin= vmax=\n\nPARAMETERS\n       float  vmax =      convert to slowness\n       float  vmin = ®\nSOURCE\n       user/fomels/Mvipmig0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfvipmig0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvirtualdata-Tuple{}","page":"Home","title":"Madagascar.sfvirtualdata","text":"sfvirtualdata(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvirtualdata on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvirtualdata. See ?m8r for examples.\n\nRSF Documentation\n\nsfvirtualdata(1)              Madagascar Manuals              sfvirtualdata(1)\n\nNAME\n       sfvirtualdata - Construction of virtual seismic data.\n\nSYNOPSIS\n       sfvirtualdata  <  in.rsf  >  out.rsf  dif=dif.rsf verb=n stack=n both=n\n       jumpo=1 jumps=1\n\nPARAMETERS\n       bool   both =n [y/n]     receiver flag, if y, receiver with both sides\n       string dif =      auxiliary input file name\n       int    jumpo =1      jump in offset dimension, only for stack=n\n       int    jumps =1      jump in shot dimension, only for stack=n\n       bool   stack =n [y/n]     stack flag, if y, no common multiple gather\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mvirtualdata.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfvirtualdata(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfviscoa2d-Tuple{}","page":"Home","title":"Madagascar.sfviscoa2d","text":"sfviscoa2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfviscoa2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfviscoa2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfviscoa2d(1)                 Madagascar Manuals                 sfviscoa2d(1)\n\nNAME\n       sfviscoa2d  -  2D visco-acoustic modeling with 8th order staggered-grid\n       FD\n\nSYNOPSIS\n       sfviscoa2d < Fv.rsf rho=Frho.rsf tau=Ftau.rsf tauo=Ftauo.rsf  >  Fw.rsf\n       pz=Fpz.rsf px=Fpx.rsf nb=30 nt= dt= fm=20.0 ft=0 jt=1 verb=n kt=\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    kt =      output px and pz component at kt\n       int    nb =30      thickness of PML ABC\n       int    nt =      number of time steps\n       file   px =      auxiliary output file name\n       file   pz =      auxiliary output file name\n       file   rho =      auxiliary input file name\n       file   tau =      auxiliary input file name\n       file   tauo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity, if y, output px and pz\nSOURCE\n       user/pyang/Mviscoa2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfviscoa2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfviscoe2d-Tuple{}","page":"Home","title":"Madagascar.sfviscoe2d","text":"sfviscoe2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfviscoe2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfviscoe2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfviscoe2d(1)                 Madagascar Manuals                 sfviscoe2d(1)\n\nNAME\n       sfviscoe2d  - 2D 4-th order visco-elastic wave propagation using sponge\n       ABC\n\nSYNOPSIS\n       sfviscoe2d   <   Fvp.rsf   vs=Fvs.rsf    rho=Frho.rsf    taup=Ftaup.rsf\n       taus=Ftaus.rsf  tauo=Ftauo.rsf  > Fwavz.rsf wavx=Fwavx.rsf verb=n nb=30\n       nt= kt= dt= fm=20.0 ft=0 jt=1\n\nPARAMETERS\n       float  dt =      time sampling interval\n       float  fm =20.0      dominant freq of Ricker wavelet\n       int    ft =0      first recorded time\n       int    jt =1      time interval\n       int    kt =      record wavefield at time kt\n       int    nb =30      thickness of sponge ABC\n       int    nt =      number of time steps\n       file   rho =      auxiliary input file name\n       file   tauo =      auxiliary input file name\n       file   taup =      auxiliary input file name\n       file   taus =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       file   vs =      auxiliary input file name\n       file   wavx =      auxiliary output file name\nSOURCE\n       user/pyang/Mviscoe2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfviscoe2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvoft-Tuple{}","page":"Home","title":"Madagascar.sfvoft","text":"sfvoft(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvoft on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvoft. See ?m8r for examples.\n\nRSF Documentation\n\nsfvoft(1)                     Madagascar Manuals                     sfvoft(1)\n\nNAME\n       sfvoft - V(t) function for a linear V(Z) profile.\n\nSYNOPSIS\n       sfvoft < in.rsf > out.rsf v0=1.5 alpha=0.5\n\nPARAMETERS\n       float  alpha =0.5      velocity gradient\n       float  v0 =1.5      initial velocity\nUSED IN\n       bei/dwnc/vofz\nSOURCE\n       system/seismic/Mvoft.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfvoft(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvofz-Tuple{}","page":"Home","title":"Madagascar.sfvofz","text":"sfvofz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvofz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvofz. See ?m8r for examples.\n\nRSF Documentation\n\nsfvofz(1)                     Madagascar Manuals                     sfvofz(1)\n\nNAME\n       sfvofz - Analytical traveltime in a linear V(z) model.\n\nSYNOPSIS\n       sfvofz  >  out.rsf  n1=  n=  n2=  n=  g=1.  v0=0.5  s=0.5 d1=0.5/(n1-1)\n       d2=1./(n2-1) o1=0. o2=0. intime=n\n\nPARAMETERS\n       float  d1 =0.5/(n1-1)      vertical sampling\n       float  d2 =1./(n2-1)      horizontal sampling\n       float  g =1.       velocity gradient\n       bool   intime =n [y/n]     if in vertical time coordinates\n       int    n =      number of samples\n       int    n1 =      vertical samples\n       int    n2 =      horizontal samples\n       float  o1 =0.       vertical origin\n       float  o2 =0.       horizontal origin\n       float  s =0.5      shot location at the surface\n       float  v0 =0.5      initial velocity\nSOURCE\n       system/seismic/Mvofz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfvofz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvofzperm-Tuple{}","page":"Home","title":"Madagascar.sfvofzperm","text":"sfvofzperm(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvofzperm on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvofzperm. See ?m8r for examples.\n\nRSF Documentation\n\nsfvofzperm(1)                 Madagascar Manuals                 sfvofzperm(1)\n\nNAME\n       sfvofzperm - V(z) prestack exploditing reflector.\n\nSYNOPSIS\n       sfvofzperm  <  data.rsf  >  image.rsf  size=size.rsf left=left.rsf mid‐\n       dle=middle.rsf right=right.rsf mig=n nz= dz= nt= dt= nh= dh=\n\nPARAMETERS\n       float  dh =      offset sampling (if modeling)\n       float  dt =      time sampling (if modeling)\n       float  dz =      time sampling (if migration)\n       file   left =      auxiliary input file name\n       file   middle =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nh =      offset samples (if modeling)\n       int    nt =      time samples (if modeling)\n       int    nz =      time samples (if migration)\n       file   right =      auxiliary input file name\n       file   size =      auxiliary input file name\nSOURCE\n       user/fomels/Mvofzperm.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfvofzperm(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvplotdiff-Tuple{}","page":"Home","title":"Madagascar.sfvplotdiff","text":"sfvplotdiff(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvplotdiff on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvplotdiff. See ?m8r for examples.\n\nRSF Documentation\n\nsfvplotdiff(1)                Madagascar Manuals                sfvplotdiff(1)\n\nNAME\n       sfvplotdiff  -  Vplot diff - see if 2 vplot files represent \"identical\"\n       plots.\n\nSYNOPSIS\n       sfvplotdiff\n\nSOURCE\n       plot/main/vplotdiff.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvplotdiff(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvscan-Tuple{}","page":"Home","title":"Madagascar.sfvscan","text":"sfvscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvscan. See ?m8r for examples.\n\nRSF Documentation\n\nsfvscan(1)                    Madagascar Manuals                    sfvscan(1)\n\nNAME\n       sfvscan - Velocity analysis.\n\nSYNOPSIS\n       sfvscan   <   cmp.rsf   >   scan.rsf   offset=offset.rsf   mask=msk.rsf\n       grad=grd.rsf semblance=n diffsemblance=n avosemblance=n  nb=2  weight=y\n       half=y  smax=2.0 ns=1 slowness=n squared=n v1= extend=4 mute=12 str=0.5\n       v0= dv= nv= v1= type=\n\nCOMMENTS\n       Inverse of sfvelmod.\n\n       May 2013 program of the month: http://www.ahay.org/blog/2013/05/04/pro‐\n       gram-of-the-month-sfvscan/\n\nPARAMETERS\n       bool   avosemblance =n [y/n]     if y, compute AVO-friendly semblance\n       bool   diffsemblance =n [y/n]     if y, compute differential semblance\n       float  dv =      step in velocity\n       int    extend =4      trace extension\n       string grad =      auxiliary input file name\n       bool   half  =y  [y/n]     if y, the second axis is half-offset instead\n              of full offset\n       string mask =      optional mask file (auxiliary input file name)\n       int    mute =12      mute zone\n       int    nb =2      semblance averaging\n       int    ns =1      number of heterogeneity scans\n       int    nv =      number of scanned velocities\n       string offset =      auxiliary input file name\n       bool   semblance =n [y/n]     if y, compute semblance; if n, stack\n       bool   slowness =n [y/n]     if y, use slowness instead of velocity\n       float  smax =2.0      maximum heterogeneity\n       bool   squared =n [y/n]     if y, the slowness or velocity is squared\n       float  str =0.5      maximum stretch allowed\n       string type =      type of semblance (avo,diff,sembl,power,weighted)\n       float  v0 =      first scanned velocity\n       float  v1 =      reference velocity\n       bool   weight =y [y/n]     if y, apply pseudo-unitary weighting\nUSED IN\n       bei/dpmv/krchdmo\n       bei/vela/vscan\n       bei/wvs/vscan\n       data/alaska/line31-81-m8r\nSOURCE\n       system/seismic/Mvscan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfvscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvsptmigda-Tuple{}","page":"Home","title":"Madagascar.sfvsptmigda","text":"sfvsptmigda(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvsptmigda on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvsptmigda. See ?m8r for examples.\n\nRSF Documentation\n\nsfvsptmigda(1)                Madagascar Manuals                sfvsptmigda(1)\n\nNAME\n       sfvsptmigda - 3D time scattering-angle Kirchhoff migration for VSP data\n\nSYNOPSIS\n       sfvsptmigda  <  dataFile.rsf vel=velFile.rsf > imageFile.rsf semb=semb‐\n       File.rsf dag=dagFile.rsf cig=cigFile.rsf is3d=n axis2label=0 isAA=y is‐\n       DipAz=y hmign=dp.hNum sembWindow=11 itn=dp.zNum ixn=dp.xNum iyn=rp.is3D\n       ? vp.yNum : 1 ito=dp.zStart  ixo=dp.xStart  iyo=dp.yStart  itd=dp.zStep\n       ixd=dp.xStep  iyd=dp.yStep dipn=1 dipo=0.f dipd=1.f iscatn=1 iscato=0.f\n       iscatd=2 * gp.dipStep\n\nPARAMETERS\n       int    axis2label =0      0 - shot; 1 - cmp; 2 - receiver\n       string cig =      output file containing CIGs in the surface-offset do‐\n              main (auxiliary output file name)\n       string dag  =       output file containing CIGs in the dip-angle domain\n              (auxiliary output file name)\n       float  dipd =1.f      step in dip-angle\n       int    dipn =1      number of dip-angles\n       float  dipo =0.f      first dip-angle\n       int    hmign =dp.hNum      number of migrated offsets\n       bool   is3d =n [y/n]     if y, apply 3D migration\n       bool   isAA =y [y/n]     if y, apply anti-aliasing\n       bool   isDipAz =y [y/n]     if y, apply dip/azimuth mode; if  n,  apply\n              inline/crossline angle mode\n       float  iscatd  =2  * gp.dipStep      scattering-angle increment (in de‐\n              gree)\n       int    iscatn =1      number of scattering-angles\n       float  iscato =0.f      first scattering-angle (in degree)\n       float  itd =dp.zStep      step in imaged times (in ms)\n       int    itn =dp.zNum      number of imaged times\n       float  ito =dp.zStart      first imaged time (in ms)\n       float  ixd =dp.xStep      step in imaged inlines\n       int    ixn =dp.xNum      number of imaged inlines\n       float  ixo =dp.xStart      first imaged inline\n       float  iyd =dp.yStep      step in imaged crosslines\n       int    iyn =rp.is3D ? vp.yNum : 1      number of imaged crosslines\n       float  iyo =dp.yStart      first imaged crossline\n       string semb =      output file containing  semblance  measure  of  CIGs\n              stacking (auxiliary output file name)\n       int    sembWindow  =11       vertical  window for semblance calculation\n              (in samples)\n       string vel =      velocity model file (velocity in m/s) (auxiliary  in‐\n              put file name)\nSOURCE\n       user/aklokov/Mvsptmigda.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvsptmigda(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti2desep-Tuple{}","page":"Home","title":"Madagascar.sfvti2desep","text":"sfvti2desep(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti2desep on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti2desep. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti2desep(1)                Madagascar Manuals                sfvti2desep(1)\n\nNAME\n       sfvti2desep  -  2-D  two-components  wavefield  modeling using original\n       elastic displacement wave equation in VTI media.\n\nSYNOPSIS\n       sfvti2desep  <  Fvp0.rsf  vs0=Fvs0.rsf  epsi=Feps.rsf  del=Fdel.rsf   >\n       Fo1.rsf    Elasticz=Fo2.rsf    apx=Fo3.rsf   apz=Fo4.rsf   apxs=Fo5.rsf\n       apzs=Fo6.rsf  apxx=Fo7.rsf  apzz=Fo8.rsf  apxxs=Fo9.rsf  apzzs=Fo10.rsf\n       ElasticSepP=Fo11.rsf   ElasticSepSV=Fo12.rsf   ns=301  dt=0.001  isep=0\n       ihomo=0 nstep=1 tapertype=\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China Authors:  Jiubing\n       Cheng and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   ElasticSepP =      auxiliary output file name\n       file   ElasticSepSV =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       file   apx =      auxiliary output file name\n       file   apxs =      auxiliary output file name\n       file   apxx =      auxiliary output file name\n       file   apxxs =      auxiliary output file name\n       file   apz =      auxiliary output file name\n       file   apzs =      auxiliary output file name\n       file   apzz =      auxiliary output file name\n       file   apzzs =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    ns =301 ®\n       int    nstep =1      grid step to calculate operators: 1<=nstep<=5\n       string tapertype =      taper type\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti2desep.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfvti2desep(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti2dpseudop-Tuple{}","page":"Home","title":"Madagascar.sfvti2dpseudop","text":"sfvti2dpseudop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti2dpseudop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti2dpseudop. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti2dpseudop(1)             Madagascar Manuals             sfvti2dpseudop(1)\n\nNAME\n       sfvti2dpseudop  -  2-D  two-components wavefield modeling using pseudo-\n       pure mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sfvti2dpseudop < Fvp0.rsf  vs0=Fvs0.rsf  epsi=Feps.rsf  del=Fdel.rsf  >\n       Fo1.rsf     PseudoPurePz=Fo2.rsf    PseudoPureP=Fo3.rsf    apvx=Fo4.rsf\n       apvz=Fo5.rsf apvxx=Fo6.rsf apvzz=Fo7.rsf PseudoPureSepP=Fo8.rsf  ns=301\n       dt=0.001 isep=0 ihomo=0 itaper=0 nstep=1 tapertype=\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPureP =      auxiliary output file name\n       file   PseudoPurePz =      auxiliary output file name\n       file   PseudoPureSepP =      auxiliary output file name\n       file   apvx =      auxiliary output file name\n       file   apvxx =      auxiliary output file name\n       file   apvz =      auxiliary output file name\n       file   apvzz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    itaper =0      if itaper=1, taper the operator\n       int    ns =301 ®\n       int    nstep =1      grid step to calculate operators: 1<=nstep<=5\n       string tapertype =      taper type\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti2dpseudop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfvti2dpseudop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti2dpseudop1-Tuple{}","page":"Home","title":"Madagascar.sfvti2dpseudop1","text":"sfvti2dpseudop1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti2dpseudop1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti2dpseudop1. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti2dpseudop1(1)            Madagascar Manuals            sfvti2dpseudop1(1)\n\nNAME\n       sfvti2dpseudop1  -  2-D two-components wavefield modeling using pseudo-\n       pure mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sfvti2dpseudop1 < Fvp0.rsf vs0=Fvs0.rsf  epsi=Feps.rsf  del=Fdel.rsf  >\n       Fo1.rsf     PseudoPurePz=Fo2.rsf     PseudoPureP=Fo3.rsf    adx=Fo4.rsf\n       adz=Fo5.rsf   apx=Fo6.rsf   apz=Fo7.rsf    apvx=Fo8.rsf    apvz=Fo9.rsf\n       adxx=Fo10.rsf  adzz=Fo11.rsf apxx=Fo12.rsf apzz=Fo13.rsf apvxx=Fo14.rsf\n       apvzz=Fo15.rsf PseudoPureSepP=Fo16.rsf ns=301 dt=0.001  isep=0  ihomo=0\n       itaper=0 nstep=2 tapertype=\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng, Wei Kang and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPureP =      auxiliary output file name\n       file   PseudoPurePz =      auxiliary output file name\n       file   PseudoPureSepP =      auxiliary output file name\n       file   adx =      auxiliary output file name\n       file   adxx =      auxiliary output file name\n       file   adz =      auxiliary output file name\n       file   adzz =      auxiliary output file name\n       file   apvx =      auxiliary output file name\n       file   apvxx =      auxiliary output file name\n       file   apvz =      auxiliary output file name\n       file   apvzz =      auxiliary output file name\n       file   apx =      auxiliary output file name\n       file   apxx =      auxiliary output file name\n       file   apz =      auxiliary output file name\n       file   apzz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    itaper =0      if itaper=1, taper the wavenumber domain p=opera‐\n              tors\n       int    ns =301 ®\n       int    nstep =2 ®\n       string tapertype =      taper type\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti2dpseudop1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti2dpseudop1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti2dpseudopfvs0-Tuple{}","page":"Home","title":"Madagascar.sfvti2dpseudopfvs0","text":"sfvti2dpseudopfvs0(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti2dpseudopfvs0 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti2dpseudopfvs0. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti2dpseudopfvs0(1)         Madagascar Manuals         sfvti2dpseudopfvs0(1)\n\nNAME\n       sfvti2dpseudopfvs0   -  2-D  two-components  wavefield  modeling  using\n       pseudo-pure mode P-wave equation in VTI media.\n\nSYNOPSIS\n       sfvti2dpseudopfvs0 <  Fvp0.rsf  epsi=Feps.rsf  del=Fdel.rsf  >  Fo1.rsf\n       PseudoPurePz=Fo2.rsf   PseudoPureP=Fo3.rsf   Fvs0=Fo4.rsf  apvx=Fo5.rsf\n       apvz=Fo6.rsf apvxx=Fo7.rsf apvzz=Fo8.rsf PseudoPureSepP=Fo9.rsf  ns=301\n       dt=0.001 isep=0 ihomo=0 itaper=0 nstep=1 tapertype=\n\nCOMMENTS\n       with finite nonzero vs0\n\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   Fvs0 =      auxiliary output file name\n       file   PseudoPureP =      auxiliary output file name\n       file   PseudoPurePz =      auxiliary output file name\n       file   PseudoPureSepP =      auxiliary output file name\n       file   apvx =      auxiliary output file name\n       file   apvxx =      auxiliary output file name\n       file   apvz =      auxiliary output file name\n       file   apvzz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    itaper =0      if itaper=1, taper the operator\n       int    ns =301 ®\n       int    nstep =1      grid step to calculate operators: 1<=nstep<=5\n       string tapertype =      taper type\nSOURCE\n       user/chengjb/Mvti2dpseudopfvs0.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024             sfvti2dpseudopfvs0(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti2dpseudosv-Tuple{}","page":"Home","title":"Madagascar.sfvti2dpseudosv","text":"sfvti2dpseudosv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti2dpseudosv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti2dpseudosv. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti2dpseudosv(1)            Madagascar Manuals            sfvti2dpseudosv(1)\n\nNAME\n       sfvti2dpseudosv  -  2-D two-components wavefield modeling using pseudo-\n       pure mode qSV-wave equation in VTI media.\n\nSYNOPSIS\n       sfvti2dpseudosv < Fvp0.rsf vs0=Fvs0.rsf  epsi=Feps.rsf  del=Fdel.rsf  >\n       Fo1.rsf    PseudoPureSVz=Fo2.rsf    PseudoPureSV=Fo3.rsf    acx=Fo4.rsf\n       acz=Fo5.rsf   asx=Fo6.rsf   asz=Fo7.rsf    asvx=Fo8.rsf    asvz=Fo9.rsf\n       acxx=Fo10.rsf  aczz=Fo11.rsf asxx=Fo12.rsf aszz=Fo13.rsf asvxx=Fo14.rsf\n       asvzz=Fo15.rsf PseudoPureSepSV=Fo16.rsf ns=301 dt=0.001 isep=0  ihomo=0\n       itaper=0 nstep=2 tapertype=\n\nCOMMENTS\n       Copyright  (C) 2012 Tongji University, Shanghai, China Authors: Jiubing\n       Cheng, Wei Kang and Tengfei Wang\n\n       This program is free software; you can redistribute it and/or modify it\n       under  the  terms of the GNU General Public License as published by the\n       Free Software Foundation; either version 2 of the License, or (at  your\n       option) any later version.\n\n       This  program  is  distributed  in the hope that it will be useful, but\n       WITHOUT ANY  WARRANTY;  without  even  the  implied  warranty  of  MER‐\n       CHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPureSV =      auxiliary output file name\n       file   PseudoPureSVz =      auxiliary output file name\n       file   PseudoPureSepSV =      auxiliary output file name\n       file   acx =      auxiliary output file name\n       file   acxx =      auxiliary output file name\n       file   acz =      auxiliary output file name\n       file   aczz =      auxiliary output file name\n       file   asvx =      auxiliary output file name\n       file   asvxx =      auxiliary output file name\n       file   asvz =      auxiliary output file name\n       file   asvzz =      auxiliary output file name\n       file   asx =      auxiliary output file name\n       file   asxx =      auxiliary output file name\n       file   asz =      auxiliary output file name\n       file   aszz =      auxiliary output file name\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ihomo =0      if ihomo=1, homogeneous medium\n       int    isep =0      if isep=1, separate wave-modes\n       int    itaper =0      if itaper=1, taper the wavenumber domain p=opera‐\n              tors\n       int    ns =301 ®\n       int    nstep =2 ®\n       string tapertype =      taper type\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti2dpseudosv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti2dpseudosv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3de-Tuple{}","page":"Home","title":"Madagascar.sfvti3de","text":"sfvti3de(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3de on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3de. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3de(1)                   Madagascar Manuals                   sfvti3de(1)\n\nNAME\n       sfvti3de  -  3-D  three-components wavefield modeling using elasic wave\n       equation in VTI media.\n\nSYNOPSIS\n       sfvti3de < Fvp0.rsf vs0=Fvs0.rsf epsi=Fep.rsf del=Fde.rsf gam=Fga.rsf >\n       Fo1.rsf Elasticy=Fo2.rsf Elasticz=Fo3.rsf ns=301 dt=0.001 bd=20\n\nCOMMENTS\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   Elasticy =      auxiliary output file name\n       file   Elasticz =      auxiliary output file name\n       int    bd =20 ®\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       file   gam =      auxiliary input file name\n       int    ns =301 ®\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti3de.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfvti3de(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3delrsepP-Tuple{}","page":"Home","title":"Madagascar.sfvti3delrsepP","text":"sfvti3delrsepP(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3delrsepP on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3delrsepP. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3delrsepP(1)             Madagascar Manuals             sfvti3delrsepP(1)\n\nNAME\n       sfvti3delrsepP - None\n\nSYNOPSIS\n       sfvti3delrsepP < vp0.rsf seed=time(NULL eps=1.e-6 npk=20\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mvti3delrsepP.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfvti3delrsepP(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3delrsepSH-Tuple{}","page":"Home","title":"Madagascar.sfvti3delrsepSH","text":"sfvti3delrsepSH(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3delrsepSH on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3delrsepSH. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3delrsepSH(1)            Madagascar Manuals            sfvti3delrsepSH(1)\n\nNAME\n       sfvti3delrsepSH - None\n\nSYNOPSIS\n       sfvti3delrsepSH < vp0.rsf seed=time(NULL eps=1.e-6 npk=20\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mvti3delrsepSH.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti3delrsepSH(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3delrsepSV-Tuple{}","page":"Home","title":"Madagascar.sfvti3delrsepSV","text":"sfvti3delrsepSV(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3delrsepSV on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3delrsepSV. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3delrsepSV(1)            Madagascar Manuals            sfvti3delrsepSV(1)\n\nNAME\n       sfvti3delrsepSV - None\n\nSYNOPSIS\n       sfvti3delrsepSV < vp0.rsf seed=time(NULL eps=1.e-6 npk=20\n\nPARAMETERS\n       eps    =1.e-6      tolerance\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/chengjb/Mvti3delrsepSV.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti3delrsepSV(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3dpseudosh-Tuple{}","page":"Home","title":"Madagascar.sfvti3dpseudosh","text":"sfvti3dpseudosh(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3dpseudosh on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3dpseudosh. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3dpseudosh(1)            Madagascar Manuals            sfvti3dpseudosh(1)\n\nNAME\n       sfvti3dpseudosh  -  3-D  three-components wavefield modeling using pure\n       mode SH-wave equation in 3D VTI media.\n\nSYNOPSIS\n       sfvti3dpseudosh  <  Fvp0.rsf  vs0=Fvs0.rsf   epsi=Fep.rsf   del=Fde.rsf\n       gam=Fga.rsf > Fo1.rsf SHy=Fo2.rsf SH=Fo3.rsf ns=301 dt=0.001 bd=20\n\nCOMMENTS\n       * Note: The z-components of pure-mode qSV-wave are zero.\n\n       Refernces:  Cheng  et  al.  (15th  IWSA, 2012); Cheng and Kang (SEG Ab‐\n       stract, 2012); Kang and Cheng (SEG Abstract, 2012) Wang et al.(SEG  Ab‐\n       stract, 2012)\n\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This  code  is  first written by Tengfei Wang at Tongji University, and\n       then optimzied by Jiubing Cheng for Madagascar version at BEG,  Univer‐\n       sity of Texas at Austin.\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   SH =      auxiliary output file name\n       file   SHy =      auxiliary output file name\n       int    bd =20 ®\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       file   gam =      auxiliary input file name\n       int    ns =301 ®\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti3dpseudosh.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti3dpseudosh(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvti3dpseudosv-Tuple{}","page":"Home","title":"Madagascar.sfvti3dpseudosv","text":"sfvti3dpseudosv(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvti3dpseudosv on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvti3dpseudosv. See ?m8r for examples.\n\nRSF Documentation\n\nsfvti3dpseudosv(1)            Madagascar Manuals            sfvti3dpseudosv(1)\n\nNAME\n       sfvti3dpseudosv - 3-D three-components wavefield modeling using pseudo-\n       pure mode SV-wave equation in 3D VTI media.\n\nSYNOPSIS\n       sfvti3dpseudosv <  Fvp0.rsf  vs0=Fvs0.rsf  epsi=Fep.rsf  del=Fde.rsf  >\n       Fo1.rsf   PseudoPureSVz=Fo2.rsf  PseudoPureSV=Fo3.rsf  ns=301  dt=0.001\n       bd=20\n\nCOMMENTS\n       * Note: The x- and y-components of pseudo-pure-mode qSV-wave are summed\n       thus the * 2nd-order system only consist of two equations.\n\n       Refernces:  Cheng  et  al.  (15th  IWSA, 2012); Cheng and Kang (SEG Ab‐\n       stract, 2012); Kang and Cheng (SEG Abstract, 2012) Wang et al.(SEG  Ab‐\n       stract, 2012)\n\n       Copyright (C) 2012 Tongji University, Shanghai, China\n\n       Authors: Jiubing Cheng, Tengfei Wang and Wei Kang\n\n       This  code  is  first written by Tengfei Wang at Tongji University, and\n       then optimzied by Jiubing Cheng for Madagascar version at BEG,  Univer‐\n       sity of Texas at Austin.\n\n       This program is free software; you can redistribute it and/or modify it\n       under the terms of the GNU General Public License as published  by  the\n       Free  Software Foundation; either version 2 of the License, or (at your\n       option) any later version.\n\n       This program is distributed in the hope that it  will  be  useful,  but\n       WITHOUT  ANY  WARRANTY;  without  even  the  implied  warranty  of MER‐\n       CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  General\n       Public License for more details.\n\n       You should have received a copy of the GNU General Public License along\n       with this program; if not, write to the Free Software Foundation, Inc.,\n       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nPARAMETERS\n       file   PseudoPureSV =      auxiliary output file name\n       file   PseudoPureSVz =      auxiliary output file name\n       int    bd =20 ®\n       file   del =      auxiliary input file name\n       float  dt =0.001 ®\n       file   epsi =      auxiliary input file name\n       int    ns =301 ®\n       file   vs0 =      auxiliary input file name\nSOURCE\n       user/chengjb/Mvti3dpseudosv.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfvti3dpseudosv(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvtihti2ort-Tuple{}","page":"Home","title":"Madagascar.sfvtihti2ort","text":"sfvtihti2ort(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvtihti2ort on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvtihti2ort. See ?m8r for examples.\n\nRSF Documentation\n\nsfvtihti2ort(1)               Madagascar Manuals               sfvtihti2ort(1)\n\nNAME\n       sfvtihti2ort - Combining VTI and HTI parameters to orthorhombic accord‐\n       ing to Schoenberg & Sayer (1995)\n\nSYNOPSIS\n       sfvtihti2ort  >  c11o.rsf  c22o=c22o.rsf  c33o=c33o.rsf   c44o=c44o.rsf\n       c55o=c55o.rsf c66o=c66o.rsf c12o=c12o.rsf c13o=c13o.rsf c23o=c23o.rsf <\n       c33.rsf   c55=c55.rsf   c11v=c11v.rsf    c66v=c66v.rsf    c12v=c12v.rsf\n       c13v=c13v.rsf  c11h=c11h.rsf  c55h=c55h.rsf c12h=c12h.rsf c13h=c13h.rsf\n       phi=phi.rsf c16o=c16o.rsf c26o=c26o.rsf c36o=c36o.rsf c45o=c45o.rsf ro‐\n       tate=n\n\nCOMMENTS\n       NOTE:  HTI  is  defined  in  VTI  grid  with  respect  to  the vertical\n       (Ruger(1997)) Refer to SEAM 2 notes for detailed description\n\nPARAMETERS\n       file   c11h =      auxiliary input file name\n       file   c11v =      auxiliary input file name\n       file   c12h =      auxiliary input file name\n       file   c12o =      auxiliary output file name\n       file   c12v =      auxiliary input file name\n       file   c13h =      auxiliary input file name\n       file   c13o =      auxiliary output file name\n       file   c13v =      auxiliary input file name\n       file   c16o =      auxiliary output file name\n       file   c22o =      auxiliary output file name\n       file   c23o =      auxiliary output file name\n       file   c26o =      auxiliary output file name\n       file   c33o =      auxiliary output file name\n       file   c36o =      auxiliary output file name\n       file   c44o =      auxiliary output file name\n       file   c45o =      auxiliary output file name\n       file   c55 =      auxiliary input file name\n       file   c55h =      auxiliary input file name\n       file   c55o =      auxiliary output file name\n       file   c66o =      auxiliary output file name\n       file   c66v =      auxiliary input file name\n       file   phi =      auxiliary input file name\n       bool   rotate =n [y/n]     Doing azimuthal rotation (y-> mono, n->  or‐\n              tho)\nSOURCE\n       user/zone/Mvtihti2ort.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfvtihti2ort(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfvweks3d-Tuple{}","page":"Home","title":"Madagascar.sfvweks3d","text":"sfvweks3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfvweks3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfvweks3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfvweks3d(1)                  Madagascar Manuals                  sfvweks3d(1)\n\nNAME\n       sfvweks3d - 3D visco-elastic time-domain pseudo-spectral (k-space) mod‐\n       eling using shared-memory parallel FFT\n\nSYNOPSIS\n       sfvweks3d   <   Fwav.rsf   ccc=Fccc.rsf    den=Fden.rsf    sou=Fsou.rsf\n       rec=Frec.rsf  wfl=Fwfl.rsf > Fdat.rsf qqq=Fqqq.rsf verb=n snap=n free=n\n       ssou=0 dabc=n opot=n back=n kspace=n qmod=0  nbell=5  jdata=1  jsnap=nt\n       rfreq=1000  fcut=500  pcut=0.2  nqz=sf_n(az)  nqx=sf_n(ax) nqy=sf_n(ay)\n       oqz=sf_o(az) oqx=sf_o(ax) oqy=sf_o(ay)\n\nCOMMENTS\n       sou wavelet  (nx,ny,nc,nt)  rec  data      (nx,ny,nc,nt)  sou  geometry\n       (nc,nx,ny) rec geometry (nc,nx,ny)\n\nPARAMETERS\n       bool   back =n [y/n]     backward extrapolation flag (for rtm)\n       file   ccc =      auxiliary input file name\n       bool   dabc =n [y/n]     absorbing BC\n       file   den =      auxiliary input file name\n       float  fcut =500      cutoff frequency for Q-compensation\n       bool   free =n [y/n]     free surface flag\n       int    jdata =1 ®\n       int    jsnap =nt ®\n       bool   kspace =n [y/n]     k-space method (ps) flag\n       int    nbell =5      bell size\n       int    nqx =sf_n(ax) ®\n       int    nqy =sf_n(ay) ®\n       int    nqz =sf_n(az) ®\n       bool   opot =n [y/n]     output potentials -> 1*scalar, 3*vector poten‐\n              tials\n       float  oqx =sf_o(ax) ®\n       float  oqy =sf_o(ay) ®\n       float  oqz =sf_o(az) ®\n       float  pcut =0.2      pcut/2 is tapered portion w.r.t. 1\n       int    qmod =0      q modeling switch\n       file   qqq =      auxiliary input file name\n       file   rec =      auxiliary input file name\n       float  rfreq =1000      reference frequency for constant-Q\n       bool   snap =n [y/n]     wavefield snapshots flag\n       file   sou =      auxiliary input file name\n       int    ssou =0      0 -> acceleration source; 1 -> stress source; 2  ->\n              displacement source\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/jsun/Mvweks3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfvweks3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwarp1-Tuple{}","page":"Home","title":"Madagascar.sfwarp1","text":"sfwarp1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwarp1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwarp1. See ?m8r for examples.\n\nRSF Documentation\n\nsfwarp1(1)                    Madagascar Manuals                    sfwarp1(1)\n\nNAME\n       sfwarp1 - Multicomponent data registration by 1-D warping.\n\nSYNOPSIS\n       sfwarp1  <  in.rsf > warped.rsf other=other.rsf warpout=warpout.rsf am‐\n       plout=amplout.rsf warpin=warpin.rsf verb=n noamp=n accuracy=  nliter=10\n       niter=100\n\nPARAMETERS\n       int    accuracy = [1-4]     interpolation accuracy\n       file   amplout =      auxiliary output file name\n       int    niter =100      maximum number of linear iterations\n       int    nliter =10      number of non-linear iterations\n       bool   noamp =n [y/n]     if y, don't correct amplitudes\n       file   other =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\n       string warpin  =       optional initial warp file (auxiliary input file\n              name)\n       file   warpout =      auxiliary output file name\nSOURCE\n       user/fomels/Mwarp1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfwarp1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwarpadd-Tuple{}","page":"Home","title":"Madagascar.sfwarpadd","text":"sfwarpadd(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwarpadd on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwarpadd. See ?m8r for examples.\n\nRSF Documentation\n\nsfwarpadd(1)                  Madagascar Manuals                  sfwarpadd(1)\n\nNAME\n       sfwarpadd - Add a perturbation to the warping function.\n\nSYNOPSIS\n       sfwarpadd < in.rsf add=add.rsf > sum.rsf accuracy= m1=n1*2\n\nPARAMETERS\n       int    accuracy =      Interpolation accuracy order\n       file   add =      auxiliary input file name\n       int    m1 =n1*2      Trace pading\nSOURCE\n       user/fomels/Mwarpadd.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfwarpadd(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwarpscan-Tuple{}","page":"Home","title":"Madagascar.sfwarpscan","text":"sfwarpscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwarpscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwarpscan. See ?m8r for examples.\n\nRSF Documentation\n\nsfwarpscan(1)                 Madagascar Manuals                 sfwarpscan(1)\n\nNAME\n       sfwarpscan - Multicomponent data registration analysis.\n\nSYNOPSIS\n       sfwarpscan  <  in.rsf > warped.rsf other=other.rsf verb=y cheb=n sign=n\n       ng=1 g0= dg=g0 rect1=1 rect2=1 rect3=1 rect4=1 niter=10  shift=n  accu‐\n       racy=\n\nPARAMETERS\n       int    accuracy = [1-4]     interpolation accuracy\n       bool   cheb =n [y/n]     use Chebyshev scan\n       float  dg =g0      gamma sampling\n       float  g0 =      gamma origin\n       int    ng =1      number of gamma values\n       int    niter =10      number of iterations\n       file   other =      auxiliary input file name\n       int    rect1 =1      vertical smoothing\n       int    rect2 =1      gamma smoothing\n       int    rect3 =1      in-line smoothing\n       int    rect4 =1      cross-line smoothing\n       bool   shift =n [y/n]     use shift instead of stretch\n       bool   sign =n [y/n]     use signed similarity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/fomels/Mwarpscan.c\nVERSION\n       4.2-git Mwarpscan.c 744 2004-08-17 18:46:07Z fomels\n\nMadagascar                         JULY 2024                     sfwarpscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwarpscann-Tuple{}","page":"Home","title":"Madagascar.sfwarpscann","text":"sfwarpscann(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwarpscann on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwarpscann. See ?m8r for examples.\n\nRSF Documentation\n\nsfwarpscann(1)                Madagascar Manuals                sfwarpscann(1)\n\nNAME\n       sfwarpscann  -  Multicomponent data registration analysis with non-sta‐\n       tionary model smoothing.\n\nSYNOPSIS\n       sfwarpscann < in.rsf > warped.rsf other=other.rsf verb=y ng=1 g0= dg=g0\n       mode=0  rect1=1  rect2=1  rect3=1  rect4=1  niter=10  shift=n accuracy=\n       rect#= shift#=\n\nPARAMETERS\n       int    accuracy = [1-4]     interpolation accuracy\n       float  dg =g0      gamma sampling\n       float  g0 =      gamma origin\n       int    mode =0      mode=0: traditional; mode=1: high-resolution\n       int    ng =1      number of gamma values\n       int    niter =10      number of iterations\n       file   other =      auxiliary input file name\n       string rect# =      size of the smoothing  stencil  in  #-th  dimension\n              /auxiliary input file/\n       int    rect1 =1      vertical smoothing\n       int    rect2 =1      gamma smoothing\n       int    rect3 =1      in-line smoothing\n       int    rect4 =1      cross-line smoothing\n       bool   shift =n [y/n]     use shift instead of stretch\n       string shift#  =       shifting of the smoothing stencil in #-th dimen‐\n              sion /auxiliary input file/\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/chenyk/Mwarpscann.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwarpscann(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwarpscanw-Tuple{}","page":"Home","title":"Madagascar.sfwarpscanw","text":"sfwarpscanw(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwarpscanw on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwarpscanw. See ?m8r for examples.\n\nRSF Documentation\n\nsfwarpscanw(1)                Madagascar Manuals                sfwarpscanw(1)\n\nNAME\n       sfwarpscanw - Multicomponent data registration analysis.\n\nSYNOPSIS\n       sfwarpscanw  <  in.rsf > warped.rsf other=other.rsf renergy=renergy.rsf\n       denergy=denergy.rsf verb=y cheb=n sign=n ren=n  den=n  ng=1  g0=  dg=g0\n       rect1=1 rect2=1 rect3=1 rect4=1 niter=10 shift=n accuracy=\n\nPARAMETERS\n       int    accuracy = [1-4]     interpolation accuracy\n       bool   cheb =n [y/n]     use Chebyshev scan\n       bool   den =n [y/n]     use data energy\n       file   denergy =      auxiliary input file name\n       float  dg =g0      gamma sampling\n       float  g0 =      gamma origin\n       int    ng =1      number of gamma values\n       int    niter =10      number of iterations\n       file   other =      auxiliary input file name\n       int    rect1 =1      vertical smoothing\n       int    rect2 =1      gamma smoothing\n       int    rect3 =1      in-line smoothing\n       int    rect4 =1      cross-line smoothing\n       bool   ren =n [y/n]     use reference energy\n       file   renergy =      auxiliary input file name\n       bool   shift =n [y/n]     use shift instead of stretch\n       bool   sign =n [y/n]     use signed similarity\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/sbader/Mwarpscanw.c\nVERSION\n       4.2-git Mwarpscan.c 744 2004-08-17 18:46:07Z fomels\n\nMadagascar                         JULY 2024                    sfwarpscanw(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave-Tuple{}","page":"Home","title":"Madagascar.sfwave","text":"sfwave(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave1-Tuple{}","page":"Home","title":"Madagascar.sfwave1","text":"sfwave1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave1. See ?m8r for examples.\n\nRSF Documentation\n\nsfwave1(1)                    Madagascar Manuals                    sfwave1(1)\n\nNAME\n       sfwave1 - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwave1 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf\n\nPARAMETERS\n       file   grad =      auxiliary input file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mwave1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfwave1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave124-Tuple{}","page":"Home","title":"Madagascar.sfwave124","text":"sfwave124(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave124 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave124. See ?m8r for examples.\n\nRSF Documentation\n\nsfwave124(1)                  Madagascar Manuals                  sfwave124(1)\n\nNAME\n       sfwave124 - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwave124 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2\n\nPARAMETERS\n       file   grad =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       int    what =2      2nd or 4th order for FD\nSOURCE\n       user/songxl/Mwave124.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfwave124(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave24-Tuple{}","page":"Home","title":"Madagascar.sfwave24","text":"sfwave24(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave24 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave24. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave2dss-Tuple{}","page":"Home","title":"Madagascar.sfwave2dss","text":"sfwave2dss(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave2dss on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave2dss. See ?m8r for examples.\n\nRSF Documentation\n\nsfwave2dss(1)                 Madagascar Manuals                 sfwave2dss(1)\n\nNAME\n       sfwave2dss - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwave2dss    <   inp.rsf   >   out.rsf   vel=vel.rsf   grad1=grad1.rsf\n       grad2=grad2.rsf sl=nx/2 what=2 nb1=20 nb2=20\n\nPARAMETERS\n       file   grad1 =      auxiliary input file name\n       file   grad2 =      auxiliary input file name\n       int    nb1 =20      x boundary nodes\n       int    nb2 =20      z boundary nodes\n       int    sl =nx/2      source location\n       file   vel =      auxiliary input file name\n       int    what =2      2nd or 4th order for FD\nSOURCE\n       user/songxl/Mwave2dss.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwave2dss(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwave4-Tuple{}","page":"Home","title":"Madagascar.sfwave4","text":"sfwave4(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwave4 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwave4. See ?m8r for examples.\n\nRSF Documentation\n\nsfwave4(1)                    Madagascar Manuals                    sfwave4(1)\n\nNAME\n       sfwave4 - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwave4 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf\n\nPARAMETERS\n       file   grad =      auxiliary input file name\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mwave4.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfwave4(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwaveab-Tuple{}","page":"Home","title":"Madagascar.sfwaveab","text":"sfwaveab(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwaveab on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwaveab. See ?m8r for examples.\n\nRSF Documentation\n\nsfwaveab(1)                   Madagascar Manuals                   sfwaveab(1)\n\nNAME\n       sfwaveab - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwaveab < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf what=2 nb=10\n\nPARAMETERS\n       file   grad =      auxiliary input file name\n       int    nb =10      2nd or 4th order for FD\n       file   vel =      auxiliary input file name\n       int    what =2      2nd or 4th order for FD\nSOURCE\n       user/songxl/Mwaveab.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwaveab(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavefft1-Tuple{}","page":"Home","title":"Madagascar.sfwavefft1","text":"sfwavefft1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavefft1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavefft1. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavefft1(1)                 Madagascar Manuals                 sfwavefft1(1)\n\nNAME\n       sfwavefft1 - 1-D finite-difference wave extrapolation\n\nSYNOPSIS\n       sfwavefft1 < inp.rsf > out.rsf vel=vel.rsf grad=grad.rsf opt=y dt= nt=\n\nPARAMETERS\n       float  dt = ®\n       file   grad =      auxiliary input file name\n       int    nt =      if y, determine optimal size for efficiency\n       bool   opt =y [y/n]\n       file   vel =      auxiliary input file name\nSOURCE\n       user/songxl/Mwavefft1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwavefft1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavegeom-Tuple{}","page":"Home","title":"Madagascar.sfwavegeom","text":"sfwavegeom(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavegeom on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavegeom. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavegeom(1)                 Madagascar Manuals                 sfwavegeom(1)\n\nNAME\n       sfwavegeom - Rice HPCSS forward modeling.\n\nSYNOPSIS\n       sfwavegeom\n\nSOURCE\n       user/roman/Mwavegeom.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwavegeom(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavegeompetsc-Tuple{}","page":"Home","title":"Madagascar.sfwavegeompetsc","text":"sfwavegeompetsc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavegeompetsc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavegeompetsc. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavegeompetsc(1)            Madagascar Manuals            sfwavegeompetsc(1)\n\nNAME\n       sfwavegeompetsc - Rice HPCSS forward modeling.\n\nSYNOPSIS\n       sfwavegeompetsc\n\nSOURCE\n       user/petsc/Mwavegeompetsc.c\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                sfwavegeompetsc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavemis2-Tuple{}","page":"Home","title":"Madagascar.sfwavemis2","text":"sfwavemis2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavemis2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavemis2. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavemis2(1)                 Madagascar Manuals                 sfwavemis2(1)\n\nNAME\n       sfwavemis2  - Missing data interpolation in 2-D using wavelet transform\n       and compressive sensing.\n\nSYNOPSIS\n       sfwavemis2 < in.rsf > out.rsf mask=mask.rsf  niter=20  perc=99.  verb=n\n       ordert=1. ordert=1. nbreg=1 oper= type=\n\nPARAMETERS\n       string mask =      auxiliary input file name\n       int    nbreg =1      number of iterations for Bregman iteration\n       int    niter =20      number of iterations\n       string oper  =      [shaping,pocs,bregman] method, the default is shap‐\n              ing\n       float  ordert =1.       Curve order for thresholding parameter, default\n              is linear\n       float  perc =99.       percentage for soft-thresholding\n       string type =      [haar,linear,biorthogonal] wavelet type, the default\n              is linear\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/yliu/Mwavemis2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwavemis2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavemixop-Tuple{}","page":"Home","title":"Madagascar.sfwavemixop","text":"sfwavemixop(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavemixop on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavemixop. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavemixop(1)                Madagascar Manuals                sfwavemixop(1)\n\nNAME\n       sfwavemixop - Complex 2-D wave propagation (with kiss-fft)\n\nSYNOPSIS\n       sfwavemixop  <  Fw.rsf  >  Fo.rsf ref=Fr.rsf snaps=Fs.rsf left=left.rsf\n       right=right.rsf alpha=Fa.rsf beta=Fb.rsf verb=n snap=0 correct=n type=0\n       pad1=1 mode=\n\nPARAMETERS\n       file   alpha =      auxiliary input file name\n       file   beta =      auxiliary input file name\n       bool   correct =n [y/n]     jingwei's correction\n       file   left =      auxiliary input file name\n       string mode =      default mode is pspi\n       int    pad1 =1      padding factor on the first axis\n       file   ref =      auxiliary input file name\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       int    type =0      type of propagation; 0 means no correction applied,\n              and mode takes effect, 9 enables jjsf\n       bool   verb =n [y/n]     verbosity\nSOURCE\n       user/jsun/Mwavemixop.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwavemixop(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavemovie-Tuple{}","page":"Home","title":"Madagascar.sfwavemovie","text":"sfwavemovie(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavemovie on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavemovie. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavemovie(1)                Madagascar Manuals                sfwavemovie(1)\n\nNAME\n       sfwavemovie - Helmholtz factorization\n\nSYNOPSIS\n       sfwavemovie  >  out.rsf  imp=imp.rsf nz=96 nx=48 nt=12 nw=2 init=1 v=1.\n       dz=1. dx=2. lambda=nz*dz/4. sixth=0.0833 gamma=0.667 epsdamp=0.01  pad‐\n       factor=1024 nfilt=nx+2 impresp=n\n\nPARAMETERS\n       float  dx =2.  ®\n       float  dz =1.  ®\n       float  epsdamp =0.01 ®\n       float  gamma =0.667 ®\n       file   imp =      auxiliary output file name\n       bool   impresp =n [y/n]\n       int    init =1 ®\n       float  lambda =nz*dz/4.  ®\n       int    nfilt =nx+2 ®\n       int    nt =12 ®\n       int    nw =2 ®\n       int    nx =48 ®\n       int    nz =96 ®\n       int    padfactor =1024 ®\n       float  sixth =0.0833 ®\n       float  v =1.  ®\nSOURCE\n       user/gee/Mwavemovie.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwavemovie(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwavmod-Tuple{}","page":"Home","title":"Madagascar.sfwavmod","text":"sfwavmod(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwavmod on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwavmod. See ?m8r for examples.\n\nRSF Documentation\n\nsfwavmod(1)                   Madagascar Manuals                   sfwavmod(1)\n\nNAME\n       sfwavmod - 1-2-3D finite difference modeling\n\nSYNOPSIS\n       sfwavmod < in.rsf vel=vel.rsf sgrid=sgrid.rsf ggrid=ggrid.rsf > dat.rsf\n       wfl=wfl.rsf jt=1 jtm=100 ot=0.0 verb=n\n\nPARAMETERS\n       file   ggrid =      auxiliary input file name\n       int    jt =1      time interval in observation system\n       int    jtm =100      time interval of wave movie\n       float  ot =0.0      time delay\n       file   sgrid =      auxiliary input file name\n       file   vel =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       string wfl =      wavefield movie file (auxiliary output file name)\nUSED IN\n       chen/test/wavmod\nSOURCE\n       user/chen/Mwavmod.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwavmod(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwcfftexp2-Tuple{}","page":"Home","title":"Madagascar.sfwcfftexp2","text":"sfwcfftexp2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwcfftexp2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwcfftexp2. See ?m8r for examples.\n\nRSF Documentation\n\nsfwcfftexp2(1)                Madagascar Manuals                sfwcfftexp2(1)\n\nNAME\n       sfwcfftexp2  -  2-D  FFT-based  zero-offset  exploding reflector model‐\n       ing/migration\n\nSYNOPSIS\n       sfwcfftexp2 < data.rsf > image.rsf left=left.rsf right=right.rsf  mig=n\n       timer=n pad1=1 nz= dz= nt= dt=\n\nPARAMETERS\n       float  dt =      time sampling (if modeling)\n       float  dz =      depth sampling (if migration)\n       file   left =      auxiliary input file name\n       bool   mig =n [y/n]     if n, modeling; if y, migration\n       int    nt =      time samples (if modeling)\n       int    nz =      depth samples (if migration)\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       bool   timer =n [y/n]\nSOURCE\n       user/jsun/Mwcfftexp2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwcfftexp2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwcfftexp2adj-Tuple{}","page":"Home","title":"Madagascar.sfwcfftexp2adj","text":"sfwcfftexp2adj(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwcfftexp2adj on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwcfftexp2adj. See ?m8r for examples.\n\nRSF Documentation\n\nsfwcfftexp2adj(1)             Madagascar Manuals             sfwcfftexp2adj(1)\n\nNAME\n       sfwcfftexp2adj  -  2-D FFT-based zero-offset exploding reflector model‐\n       ing/migration\n\nSYNOPSIS\n       sfwcfftexp2adj < data.rsf  >  image.rsf  snaps=snaps.rsf  left=left.rsf\n       right=right.rsf adj=n timer=n snap=0 pad1=1 n0=0 nz= dz= nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       float  dt =      time sampling\n       float  dz =      depth sampling\n       file   left =      auxiliary input file name\n       int    n0 =0      geophone surface\n       int    nt =      time samples\n       int    nz =      depth samples\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   timer =n [y/n]\nSOURCE\n       user/jsun/Mwcfftexp2adj.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfwcfftexp2adj(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwcorr-Tuple{}","page":"Home","title":"Madagascar.sfwcorr","text":"sfwcorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwcorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwcorr. See ?m8r for examples.\n\nRSF Documentation\n\nsfwcorr(1)                    Madagascar Manuals                    sfwcorr(1)\n\nNAME\n       sfwcorr  -  Stack  a dataset over the second dimensions by SNR weighted\n       method.\n\nSYNOPSIS\n       sfwcorr < in.rsf other=other.rsf > out.rsf w=50 eps=0\n\nPARAMETERS\n       float  eps =0      stable parameter\n       file   other =      auxiliary input file name\n       int    w =50      size of window\nSOURCE\n       user/gchliu/Mwcorr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfwcorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwdf-Tuple{}","page":"Home","title":"Madagascar.sfwdf","text":"sfwdf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwdf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwdf. See ?m8r for examples.\n\nRSF Documentation\n\nsfwdf(1)                      Madagascar Manuals                      sfwdf(1)\n\nNAME\n       sfwdf - Assymptotic Wigner distribution\n\nSYNOPSIS\n       sfwdf < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0\n\nPARAMETERS\n       int    nh1 =0 ®\n       int    nh2 =0 ®\n       int    nh3 =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/circle\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008InterferometricImagingCondition/sigs2\nSOURCE\n       user/psava/Mwdf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfwdf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweas1-Tuple{}","page":"Home","title":"Madagascar.sfweas1","text":"sfweas1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweas1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweas1. See ?m8r for examples.\n\nRSF Documentation\n\nsfweas1(1)                    Madagascar Manuals                    sfweas1(1)\n\nNAME\n       sfweas1 - 1-D analytic solution for acoustic wave equation\n\nSYNOPSIS\n       sfweas1 < Fin.rsf > Fout.rsf vel= nx= dx= spx= kt= ox=0.0 rule=\n\nPARAMETERS\n       float  dx = ®\n       int    kt =      selected time\n       int    nx = ®\n       float  ox =0.0 ®\n       string rule =      t, s : quadrature rules\n       int    spx =      source point in x\n       float  vel = ®\nSOURCE\n       user/fangg/Mweas1.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfweas1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweas2-Tuple{}","page":"Home","title":"Madagascar.sfweas2","text":"sfweas2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweas2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweas2. See ?m8r for examples.\n\nRSF Documentation\n\nsfweas2(1)                    Madagascar Manuals                    sfweas2(1)\n\nNAME\n       sfweas2 - 2-D analytic solution for acoustic wave equation\n\nSYNOPSIS\n       sfweas2 < Fin.rsf > Fout.rsf vel= nx= dx= spx= selt= ox=0.0 rule=\n\nPARAMETERS\n       float  dx = ®\n       int    nx = ®\n       float  ox =0.0 ®\n       string rule =      t, s : quadrature rules\n       float  selt =      selected time\n       int    spx =      source point in x\n       float  vel = ®\nSOURCE\n       user/fangg/Mweas2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfweas2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwei-Tuple{}","page":"Home","title":"Madagascar.sfwei","text":"sfwei(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwei on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwei. See ?m8r for examples.\n\nRSF Documentation\n\nsfwei(1)                      Madagascar Manuals                      sfwei(1)\n\nNAME\n       sfwei - 3-D modeling/migration with extended SSF\n\nSYNOPSIS\n       sfwei  slo=Fslo.rsf  <  Fsou.rsf  dat=Frec.rsf  > Fcic.rsf coo=Fcoo.rsf\n       cip=Feic.rsf > Fwfl.rsf verb=n causal=n causal=n irun=\n\nPARAMETERS\n       bool   causal =n [y/n]     causality\n       file   cip =      auxiliary output file name\n       file   coo =      auxiliary input file name\n       file   dat =      auxiliary input file name\n       string irun = ®\n       file   slo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2011WideAzimuthAngleDecomposition/flatEICangle\nSOURCE\n       user/psava/Mwei.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfwei(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweiajs-Tuple{}","page":"Home","title":"Madagascar.sfweiajs","text":"sfweiajs(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweiajs on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweiajs. See ?m8r for examples.\n\nRSF Documentation\n\nsfweiajs(1)                   Madagascar Manuals                   sfweiajs(1)\n\nNAME\n       sfweiajs - Adjoint source construction for image-domain waveform tomog‐\n       raphy\n\nSYNOPSIS\n       sfweiajs bwf=Fbwf.rsf < Feic.rsf coo=Fcoo.rsf > Faso.rsf  verb=n  conj=\n       irun=\n\nPARAMETERS\n       file   bwf =      auxiliary input file name\n       bool   conj = [y/n]     flag\n       file   coo =      auxiliary input file name\n       string irun = ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mweiajs.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfweiajs(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweiajw-Tuple{}","page":"Home","title":"Madagascar.sfweiajw","text":"sfweiajw(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweiajw on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweiajw. See ?m8r for examples.\n\nRSF Documentation\n\nsfweiajw(1)                   Madagascar Manuals                   sfweiajw(1)\n\nNAME\n       sfweiajw - 3-D wave-equation wavefield continuation with adjoint-source\n\nSYNOPSIS\n       sfweiajw slo=Fslo.rsf < Fsou.rsf > Fwfl.rsf verb=n down=y causal=\n\nPARAMETERS\n       bool   causal = [y/n]     causality flag\n       bool   down =y [y/n]     up/down flag\n       file   slo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mweiajw.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfweiajw(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweigwf-Tuple{}","page":"Home","title":"Madagascar.sfweigwf","text":"sfweigwf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweigwf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweigwf. See ?m8r for examples.\n\nRSF Documentation\n\nsfweigwf(1)                   Madagascar Manuals                   sfweigwf(1)\n\nNAME\n       sfweigwf - 3-D wave-equation wavefield continuation with adjoint-source\n\nSYNOPSIS\n       sfweigwf  slo=Fslo.rsf < Fsou.rsf coo=Fcoo.rsf > Fwfl.rsf verb=n down=y\n       causal=n\n\nPARAMETERS\n       bool   causal =n [y/n]     causality flag\n       file   coo =      auxiliary input file name\n       bool   down =y [y/n]     up/down flag\n       file   slo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mweigwf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfweigwf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwem2d_gpu-Tuple{}","page":"Home","title":"Madagascar.sfwem2d_gpu","text":"sfwem2d_gpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwem2d_gpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwem2d_gpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfwem2dgpu(1)                Madagascar Manuals                sfwem2dgpu(1)\n\nNAME\n       sfwem2d_gpu - 2D ISOTROPIC wave-equation finite-difference migration on\n       GPU\n\nSYNOPSIS\n       sfwem2d_gpu vel=Fvel.rsf < Fxig.rsf  swf=Fswf.rsf  rwf=Frwf.rsf  >  Fx‐\n       igo.rsf   swfout=Fswfo.rsf   rwfout=Frwfo.rsf  sillum=Fsillum.rsf  ril‐\n       lum=Frillum.rsf gpu=0 nxtap=40 verbose=n wantwf=n wantillum=n nh=0\n\nPARAMETERS\n       int    gpu =0      ID of the GPU to be used\n       int    nh =0 ®\n       int    nxtap =40      TAPER size\n       file   rillum =      auxiliary output file name\n       file   rwf =      auxiliary input file name\n       file   rwfout =      auxiliary output file name\n       file   sillum =      auxiliary output file name\n       file   swf =      auxiliary input file name\n       file   swfout =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       bool   wantillum =n [y/n]     Want output wavefields\n       bool   wantwf =n [y/n]     Want output wavefields\nSOURCE\n       user/rweiss/Mwem2d_gpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwem2d_gpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwem2d_iso-Tuple{}","page":"Home","title":"Madagascar.sfwem2d_iso","text":"sfwem2d_iso(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwem2d_iso on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwem2d_iso. See ?m8r for examples.\n\nRSF Documentation\n\nsfwem2diso(1)                Madagascar Manuals                sfwem2diso(1)\n\nNAME\n       sfwem2d_iso - 2D ISOTROPIC wave-equation finite-difference migration\n\nSYNOPSIS\n       sfwem2d_iso  vel=Fvel.rsf  <  Fxig.rsf  swf=Fswf.rsf rwf=Frwf.rsf > Fx‐\n       igo.rsf  swfout=Fswfo.rsf  rwfout=Frwfo.rsf  nxtap=40  verbose=n  adj=y\n       add=n wantwf=n nh=0\n\nPARAMETERS\n       bool   add =n [y/n]\n       bool   adj =y [y/n]     ADJOINT flag\n       int    nh =0 ®\n       int    nxtap =40      TAPER size\n       file   rwf =      auxiliary input file name\n       file   rwfout =      auxiliary output file name\n       file   swf =      auxiliary input file name\n       file   swfout =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       bool   wantwf =n [y/n]     Want output wavefields\nSOURCE\n       user/jeff/Mwem2d_iso.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwem2d_iso(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwem3d_gpu-Tuple{}","page":"Home","title":"Madagascar.sfwem3d_gpu","text":"sfwem3d_gpu(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwem3d_gpu on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwem3d_gpu. See ?m8r for examples.\n\nRSF Documentation\n\nsfwem3dgpu(1)                Madagascar Manuals                sfwem3dgpu(1)\n\nNAME\n       sfwem3d_gpu - 3D ISOTROPIC wave-equation finite-difference migration on\n       GPU\n\nSYNOPSIS\n       sfwem3d_gpu vel=Fvel.rsf swf=Fswf.rsf rwf=Frwf.rsf swfout=Fswfo.rsf rw‐\n       fout=Frwfo.rsf  kxmap=Fkxmap.rsf  >  Fxigo.rsf  gpu=0 nxtap=40 nytap=40\n       verbose=n wantwf=n\n\nPARAMETERS\n       int    gpu =0      ID of the GPU to be used\n       file   kxmap =      auxiliary output file name\n       int    nxtap =40      TAPER size\n       int    nytap =40      TAPER size\n       file   rwf =      auxiliary input file name\n       file   rwfout =      auxiliary output file name\n       file   swf =      auxiliary input file name\n       file   swfout =      auxiliary output file name\n       file   vel =      auxiliary input file name\n       bool   verbose =n [y/n]     VERBOSITY flag\n       bool   wantwf =n [y/n]     Want output wavefields\nSOURCE\n       user/rweiss/Mwem3d_gpu.cu\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwem3d_gpu(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfweximg-Tuple{}","page":"Home","title":"Madagascar.sfweximg","text":"sfweximg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfweximg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfweximg. See ?m8r for examples.\n\nRSF Documentation\n\nsfweximg(1)                   Madagascar Manuals                   sfweximg(1)\n\nNAME\n       sfweximg - 3-D modeling/migration with extended SSF\n\nSYNOPSIS\n       sfweximg   slo=Fs.rsf   swfl=Fws.rsf   <   Fm.rsf  cc=Fc.rsf  >  Fd.rsf\n       rwfl=Fwr.rsf adj= save=0 feic=0  verb=n  eps=0.01  nrmax=1  dtmax=0.004\n       pmx=0 pmy=0 tmx=0 tmy=0 nhx=0 nhy=0 nhz=0 nht=0 dht=\n\nPARAMETERS\n       int    adj =      y=ADJ migration; n=FWD modeling\n       file   cc =      auxiliary input file name\n       float  dht = ®\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       int    feic =0      extended I.C. flag\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhy =0      number of lags on the y axis\n       int    nhz =0      number of lags on the z axis\n       int    nrmax =1      maximum references\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       string rwfl =      auxiliary output file name\n       int    save =0      save wfld flag\n       file   slo =      auxiliary input file name\n       file   swfl =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mweximg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfweximg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexmig-Tuple{}","page":"Home","title":"Madagascar.sfwexmig","text":"sfwexmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexmig(1)                   Madagascar Manuals                   sfwexmig(1)\n\nNAME\n       sfwexmig - 3-D modeling/migration with extended SSF\n\nSYNOPSIS\n       sfwexmig slo=Fs.rsf swfl=Fws.rsf < Fd.rsf > Fm.rsf cc=Fc.rsf cip=Fe.rsf\n       feic=n fdrv=n fnew=n verb=n eps=0.01 nrmax=1  dtmax=0.004  pmx=0  pmy=0\n       tmx=0 tmy=0 nhx=0 nhy=0 nhz=0 nht=0 dht=\n\nPARAMETERS\n       file   cc =      auxiliary input file name\n       file   cip =      auxiliary output file name\n       float  dht = ®\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       bool   fdrv =n [y/n]     image derivative flag\n       bool   feic =n [y/n]     extended I.C. flag\n       bool   fnew =n [y/n]     phase-shift flag\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhy =0      number of lags on the y axis\n       int    nhz =0      number of lags on the z axis\n       int    nrmax =1      maximum references\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       file   swfl =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mwexmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwexmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexmva-Tuple{}","page":"Home","title":"Madagascar.sfwexmva","text":"sfwexmva(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexmva on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexmva. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexmva(1)                   Madagascar Manuals                   sfwexmva(1)\n\nNAME\n       sfwexmva - 3-D S/R WEMVA with extended split-step\n\nSYNOPSIS\n       sfwexmva   slo=Bs.rsf  <  Pi.rsf  <  Ps.rsf  swfl=Bws.rsf  rwfl=Bwr.rsf\n       cc=Fc.rsf verb=y adj= feic= eps=0.01 nrmax=1  dtmax=0.004  pmx=0  pmy=0\n       tmx=0 tmy=0 nhx=0 nhy=0 nhz=0 nht=0 dht=\n\nPARAMETERS\n       int    adj =      y=ADJ Back-projection; n=FWD Forward Scattering\n       file   cc =      auxiliary input file name\n       float  dht = ®\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       int    feic =      extended I.C. flag\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhy =0      number of lags on the y axis\n       int    nhz =0      number of lags on the z axis\n       int    nrmax =1      max number of refs\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   rwfl =      auxiliary input file name\n       file   slo =      auxiliary input file name\n       file   swfl =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mwexmva.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwexmva(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexnmig-Tuple{}","page":"Home","title":"Madagascar.sfwexnmig","text":"sfwexnmig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexnmig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexnmig. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexnmig(1)                  Madagascar Manuals                  sfwexnmig(1)\n\nNAME\n       sfwexnmig - 3-D modeling/migration with extended SSF\n\nSYNOPSIS\n       sfwexnmig  slo=Fs.rsf swfl=Fws.rsf dipx=Fdx.rsf dipy=Fdy.rsf < Fd.rsf >\n       Fm.rsf cc=Fc.rsf cip=Fe.rsf feic=n verb=n eps=0.01 nrmax=1  dtmax=0.004\n       pmx=0  pmy=0  tmx=0 tmy=0 nhx=0 nhy=0 nhz=0 nht=0 dht= dhx=cub->amx.d*2\n       dhy=cub->amy.d*2 dhz=cub->az.d*2\n\nPARAMETERS\n       file   cc =      auxiliary input file name\n       file   cip =      auxiliary output file name\n       float  dht = ®\n       float  dhx =cub->amx.d*2 ®\n       float  dhy =cub->amy.d*2 ®\n       float  dhz =cub->az.d*2 ®\n       file   dipx =      auxiliary input file name\n       file   dipy =      auxiliary input file name\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       bool   feic =n [y/n]     extended I.C. flag\n       int    nht =0      number of lags on the t axis\n       int    nhx =0      number of lags on the x axis\n       int    nhy =0      number of lags on the y axis\n       int    nhz =0      number of lags on the z axis\n       int    nrmax =1      maximum references\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       file   swfl =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mwexnmig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfwexnmig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexwfl-Tuple{}","page":"Home","title":"Madagascar.sfwexwfl","text":"sfwexwfl(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexwfl on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexwfl. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexwfl(1)                   Madagascar Manuals                   sfwexwfl(1)\n\nNAME\n       sfwexwfl - 3-D wavefield extrapolation with extended SSF\n\nSYNOPSIS\n       sfwexwfl  slo=Fs.rsf  <  Fd.rsf  > Fw.rsf verb=n eps=0.01 datum=0 inv=1\n       causal=n nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0\n\nPARAMETERS\n       bool   causal =n [y/n]     causality flag\n       int    datum =0      datuming flag\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       int    inv =1      down/upward flag\n       int    nrmax =1      maximum references\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/cwp/Mwexwfl.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwexwfl(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexzoimg-Tuple{}","page":"Home","title":"Madagascar.sfwexzoimg","text":"sfwexzoimg(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexzoimg on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexzoimg. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexzoimg(1)                 Madagascar Manuals                 sfwexzoimg(1)\n\nNAME\n       sfwexzoimg - 3-D zero-offset modeling/migration with extended SSF\n\nSYNOPSIS\n       sfwexzoimg  < Fm.rsf < Fd.rsf slo=Fs.rsf wfl=Fwr.rsf adj= save=0 verb=n\n       eps=0.01 nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 nw= dw= ow=0.\n\nPARAMETERS\n       int    adj =      y=ADJ migration; n=FWD modeling\n       float  dtmax =0.004      max time error\n       float  dw = ®\n       float  eps =0.01      stability parameter\n       int    nrmax =1      maximum references\n       int    nw = ®\n       float  ow =0.  ®\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       int    save =0      save wfld flag\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary output file name\nSOURCE\n       user/cwp/Mwexzoimg.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwexzoimg(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwexzomva-Tuple{}","page":"Home","title":"Madagascar.sfwexzomva","text":"sfwexzomva(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwexzomva on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwexzomva. See ?m8r for examples.\n\nRSF Documentation\n\nsfwexzomva(1)                 Madagascar Manuals                 sfwexzomva(1)\n\nNAME\n       sfwexzomva - 3-D S/R WEMVA with extended split-step\n\nSYNOPSIS\n       sfwexzomva  slo=Bs.rsf  <  Pi.rsf  <  Ps.rsf  wfl=Bwr.rsf  verb=y  adj=\n       eps=0.01 nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0\n\nPARAMETERS\n       int    adj =      y=ADJ Back-projection; n=FWD Forward Scattering\n       float  dtmax =0.004      max time error\n       float  eps =0.01      stability parameter\n       int    nrmax =1      max number of refs\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   verb =y [y/n]     verbosity flag\n       file   wfl =      auxiliary input file name\nSOURCE\n       user/cwp/Mwexzomva.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwexzomva(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwigb-Tuple{}","page":"Home","title":"Madagascar.sfwigb","text":"sfwigb(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwigb on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwigb. See ?m8r for examples.\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwiggle-Tuple{}","page":"Home","title":"Madagascar.sfwiggle","text":"sfwiggle(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwiggle on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwiggle. See ?m8r for examples.\n\nRSF Documentation\n\nsfwiggle(1)                   Madagascar Manuals                   sfwiggle(1)\n\nNAME\n       sfwiggle - Plot data with wiggly traces.\n\nSYNOPSIS\n       sfwiggle  <  in.rsf  xpos=xpos.rsf  xmax= xmin= poly=n polyneg=n fatp=1\n       xmask=1 ymask=1 pclip=98. zplot=0.75 clip=0. seemean=n verb=n  transp=n\n       yreverse=n xreverse=n > plot.vpl\n\nCOMMENTS\n       Run \"sfdoc stdplot\" for more parameters.\n\n       June         2013         program         of         the         month:\n       http://www.ahay.org/blog/2013/06/12/program-of-the-month-sfwiggle/\n\nPARAMETERS\n       float  clip =0.       data clip (estimated from pclip by default\n       int    fatp =1      polygon border fatness\n       float  pclip =98.       clip percentile\n       bool   poly =n [y/n]     if draw polygons\n       bool   polyneg =n [y/n]     if polygons for negative values\n       bool   seemean =n [y/n]     if y, plot mean lines of traces\n       bool   transp =n [y/n]     if y, transpose the axes\n       bool   verb =n [y/n]     verbosity flag\n       int    xmask =1      polygon filling\n       float  xmax =      maximum trace position (if using xpos)\n       float  xmin =      minimum trace position (if using xpos)\n       string xpos =      optional header file with trace positions (auxiliary\n              input file name)\n       bool   xreverse =n [y/n]     if y, reverse the horizontal axis\n       int    ymask =1      polygon filling\n       bool   yreverse =n [y/n]     if y, reverse the vertical axis\n       float  zplot =0.75      vertical separation\nUSED IN\n       bei/ft1/matrix\n       bei/sg/toldi\n       bei/wvs/head\n       cup/rna2d/shot\n       cup/rna2d/simple\n       data/alaska/line31-81-m8r\nSOURCE\n       plot/main/wiggle.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwiggle(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwigner-Tuple{}","page":"Home","title":"Madagascar.sfwigner","text":"sfwigner(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwigner on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwigner. See ?m8r for examples.\n\nRSF Documentation\n\nsfwigner(1)                   Madagascar Manuals                   sfwigner(1)\n\nNAME\n       sfwigner - Assymptotic Wigner distribution in space-time\n\nSYNOPSIS\n       sfwigner < Fu.rsf > Fw.rsf ompchunk=1 verb=n nh1=0 nh2=0 nh3=0 wk=0.0\n\nPARAMETERS\n       int    nh1 =0 ®\n       int    nh2 =0 ®\n       int    nh3 =0 ®\n       int    ompchunk =1      OpenMP data chunk size\n       bool   verb =n [y/n]     verbosity flag\n       float  wk =0.0 ®\nUSED IN\n       cwp/pept2011MicroearthquakeMonitoring/saf1\n       cwp/pept2011MicroearthquakeMonitoring/saf2\n       cwp/pept2011MicroearthquakeMonitoring/saf3\nSOURCE\n       user/psava/Mwigner.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwigner(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwiki2static-Tuple{}","page":"Home","title":"Madagascar.sfwiki2static","text":"sfwiki2static(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwiki2static on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwiki2static. See ?m8r for examples.\n\nRSF Documentation\n\nsfwiki2static(1)              Madagascar Manuals              sfwiki2static(1)\n\nNAME\n       sfwiki2static - Downloads the Madagascar wiki as static html\n\nSYNOPSIS\n       sfwiki2static verb=n outdir=.\n\nCOMMENTS\n       Wiki  pages are downloaded every time. Main_Page is moved to index.html\n       Html files in local dir are deleted if not present on the wiki, in  or‐\n       der  to  avoid  accumulation of dead wiki pages. To save bandwidth cost\n       and download time, images and linked documents are downloaded only if a\n       local copy is not present.\n\nPARAMETERS\n       string outdir =.  ®\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/ivlad/Mwiki2static.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfwiki2static(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwile-Tuple{}","page":"Home","title":"Madagascar.sfwile","text":"sfwile(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwile on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwile. See ?m8r for examples.\n\nRSF Documentation\n\nsfwile(1)                     Madagascar Manuals                     sfwile(1)\n\nNAME\n       sfwile - Process data with GIMP 2.0.\n\nSYNOPSIS\n       sfwile < in.rsf > out.rsf command=\n\nCOMMENTS\n       Input  samples  must be in byte (unsigned char) format. Preprocess data\n       with sfbyte first, if they have float or other samples. Only  first  2D\n       section  (n1  x n2) is taken from input data, the rest is ignored.  Use\n       sfwindow and/or sftransp to generate input in adequate order.  o1,  o2,\n       d1, and d2 are ignored; data are treated by GIMP as equally spaced.\n\n       Be  advised,  that  a  greyscale  image file is created; not every GIMP\n       plugin is capable of working with greyscale input.\n\n       Examples:\n\n       sfwile < in.rsf command=\"gimp-equalize TRUE\" > out.rsf sfwile <  in.rsf\n       command=\"plug-in-spread  5  5\" > out.rsf sfwile < in.rsf command=\"plug-\n       in-gauss-rle 4.0 TRUE TRUE\" > out.rsf sfwile < in.rsf command=\"plug-in-\n       sobel  TRUE  TRUE TRUE\" > out.rsf sfwile < in.rsf command=\"plug-in-neon\n       5.0 0.0\" > out.rsf sfwile < in.rsf command=\"plug-in-emboss 315.0 45.0 7\n       TRUE\" > out.rsf sfwile < in.rsf command=\"plug-in-ripple 27 2 1 0 0 TRUE\n       TRUE\" > out.rsf sfwile <  in.rsf  command=\"plug-in-whirl-pinch  45  0.0\n       1.0\" > out.rsf\n\n       Documentation   for   basic   GIMP   plugins   can   be   found   here:\n       http://docs.gimp.org/en/filters.html Information about additional plug‐\n       ins is collected here: http://registry.gimp.org/\n\nPARAMETERS\n       string command =      Command to be executed by GIMP\nSOURCE\n       user/bash/Mwile.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfwile(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwilson-Tuple{}","page":"Home","title":"Madagascar.sfwilson","text":"sfwilson(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwilson on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwilson. See ?m8r for examples.\n\nRSF Documentation\n\nsfwilson(1)                   Madagascar Manuals                   sfwilson(1)\n\nNAME\n       sfwilson - Wilson-Burg spectral factorization.\n\nSYNOPSIS\n       sfwilson   <  in.rsf  >  out.rsf  lag=lag0.rsf  lagout=lag.rsf  maxlag=\n       niter=20 eps=1.e-6 n1=maxlag a0=1. verb=y stable=n lagin= filtin=\n\nPARAMETERS\n       float  a0 =1.  ®\n       float  eps =1.e-6      truncation tolerance\n       string filtin = ®\n       string lag =      optional input file with filter lags (auxiliary input\n              file name)\n       string lagin =      optional input file with output filter lags\n       string lagout =      auxiliary output file name\n       int    maxlag =      maximum lag\n       int    n1 =maxlag      output filter length\n       int    niter =20      number of iterations\n       bool   stable =n [y/n]     stability flag\n       bool   verb =y [y/n]     verbosity flag\nSOURCE\n       user/gee/Mwilson.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwilson(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwindow-Tuple{}","page":"Home","title":"Madagascar.sfwindow","text":"sfwindow(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwindow on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwindow. See ?m8r for examples.\n\nRSF Documentation\n\nsfwindow(1)                   Madagascar Manuals                   sfwindow(1)\n\nNAME\n       sfwindow - Window a portion of a dataset.\n\nSYNOPSIS\n       sfwindow  < in.rsf > out.rsf verb=n squeeze=y j#=(1,...) d#=(d1,d2,...)\n       f#=(0,...)                 min#=(o1,o2,,...)                 n#=(0,...)\n       max#=(o1+(n1-1)*d1,o2+(n1-1)*d2,,...)\n\nCOMMENTS\n       Other  parameters from the command line are passed to the output (simi‐\n       lar to sfput).\n\nPARAMETERS\n       float  d# =(d1,d2,...)       sampling in #-th dimension\n       largeint\n              f# =(0,...)       window start in #-th dimension\n       int    j# =(1,...)       jump in #-th dimension\n       float  max# =(o1+(n1-1)*d1,o2+(n1-1)*d2,,...)       maximum in #-th di‐\n              mension\n       float  min# =(o1,o2,,...)       minimum in #-th dimension\n       largeint\n              n# =(0,...)       window size in #-th dimension\n       bool   squeeze  =y [y/n]     if y, squeeze dimensions equal to 1 to the\n              end\n       bool   verb =n [y/n]     Verbosity flag\nUSED IN\n       bei/dpmv/krchdmo\n       bei/dpmv/matt\n       bei/dwnc/sigmoid\n       bei/fdm/kjartjac\n       bei/fld/cube\n       bei/fld/shotmovie\n       bei/fld/synmarine\n       bei/fld/yc\n       bei/ft1/autocor\n       bei/ft1/brad\n       bei/ft1/ft2d\n       bei/krch/sep73\n       bei/sg/denmark\n       bei/sg/toldi\n       bei/trimo/mod\n       bei/trimo/subsamp\n       bei/vela/stretch\n       bei/vela/vscan\n       bei/wvs/head\n       bei/wvs/vscan\n       cup/rna2d/real\n       cup/rna2d/shot\n       cup/rna2d/simple\n       cup/rna3d/real\n       cup/rna3d/shot\n       39 more examples listed in:\n       /home/runner/.mad_sandbox/madagascar/share/doc/madagascar/html/sfwin‐\n       dow.html\nSOURCE\n       system/main/window.c\nDOCUMENTATION\n       http://ahay.org/wiki/Guide_to_madagascar_programs#sfwindow\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwindow(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwinscan-Tuple{}","page":"Home","title":"Madagascar.sfwinscan","text":"sfwinscan(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwinscan on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwinscan. See ?m8r for examples.\n\nRSF Documentation\n\nsfwinscan(1)                  Madagascar Manuals                  sfwinscan(1)\n\nNAME\n       sfwinscan - Picking scanned data window trace by trace with fixed t0\n\nSYNOPSIS\n       sfwinscan < cmp.rsf > outf.rsf winsz=200 v0=1000 deltav=20 t0=0.5 n=100\n\nPARAMETERS\n       float  deltav =20      step lenth for velocity scan\n       int    n =100      numbers of velscan\n       float  t0 =0.5      t0 fixed\n       float  v0 =1000      init Vel for velocity scan\n       int    winsz  =200      for each trace,the width of window. unit:sample\n              point\nSOURCE\n       user/yliu/Mwinscan.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfwinscan(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwkbjTI-Tuple{}","page":"Home","title":"Madagascar.sfwkbjTI","text":"sfwkbjTI(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwkbjTI on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwkbjTI. See ?m8r for examples.\n\nRSF Documentation\n\nsfwkbjTI(1)                   Madagascar Manuals                   sfwkbjTI(1)\n\nNAME\n       sfwkbjTI - VTI eikonal solver (3-D).\n\nSYNOPSIS\n       sfwkbjTI  <  bv.rsf  > time.rsf shotfile=shots.rsf br1=d1 br2=d2 br3=d3\n       plane1=n  plane2=n  plane3=n  b1=plane[2]?   n1:   (int)   (br1/d1+0.5)\n       b2=plane[1]? n2: (int) (br2/d2+0.5) b3=plane[0]? n3: (int) (br3/d3+0.5)\n       zshot=0. yshot=o2 + 0.5*(n2-1)*d2 xshot=o3 + 0.5*(n3-1)*d3 vv= eta=\n\nPARAMETERS\n       int    b1 =plane[2]? n1: (int) (br1/d1+0.5) ®\n       int    b2 =plane[1]? n2: (int) (br2/d2+0.5) ®\n       int    b3 =plane[0]? n3: (int) (br3/d3+0.5)      Constant-velocity  box\n              around the source (in samples)\n       float  br1 =d1 ®\n       float  br2 =d2 ®\n       float  br3  =d3      Constant-velocity box around the source (in physi‐\n              cal dimensions)\n       string eta = ®\n       bool   plane1 =n [y/n]\n       bool   plane2 =n [y/n]\n       bool   plane3 =n [y/n]     plane-wave source\n       string shotfile =      File with shot locations  (n2=number  of  shots,\n              n1=3) (auxiliary input file name)\n       string vv = ®\n       float  xshot =o3 + 0.5*(n3-1)*d3 ®\n       float  yshot =o2 + 0.5*(n2-1)*d2 ®\n       float  zshot =0.       Shot location (used if no shotfile)\nSOURCE\n       user/tariq/MwkbjTI.c\nVERSION\n       4.2-git MwkbjTI.c 4136 2009-02-07 17:20:32Z sfomel\n\nMadagascar                         JULY 2024                       sfwkbjTI(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwlslfdc1-Tuple{}","page":"Home","title":"Madagascar.sfwlslfdc1","text":"sfwlslfdc1(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwlslfdc1 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwlslfdc1. See ?m8r for examples.\n\nRSF Documentation\n\nsfwlslfdc1(1)                 Madagascar Manuals                 sfwlslfdc1(1)\n\nNAME\n       sfwlslfdc1 - None\n\nSYNOPSIS\n       sfwlslfdc1  <  velf.rsf  >  outm.rsf  sx=fsx.rsf  Mexact=Mexactfile.rsf\n       wfun=Mwfun.rsf Mapp=Mappfile.rsf  tp=Mtpfile.rsf  seed=time(NULL  f0=15\n       a0=0.0001 tpa=0.0 tpb=0.0 eps=1.e-4 npk=20 dt= weight=true size=6\n\nPARAMETERS\n       file   Mapp =      auxiliary output file name\n       file   Mexact =      auxiliary output file name\n       a0     =0.0001      weight parameters\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       f0     =15      dominant frequency\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       file   tp =      auxiliary output file name\n       tpa    =0.0      taper for stability\n       tpb    =0.0 ®\n       weight =true ®\n       file   wfun =      auxiliary output file name\nSOURCE\n       user/fangg/Mwlslfdc1.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfwlslfdc1(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwlslfdc1tw2-Tuple{}","page":"Home","title":"Madagascar.sfwlslfdc1tw2","text":"sfwlslfdc1tw2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwlslfdc1tw2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwlslfdc1tw2. See ?m8r for examples.\n\nRSF Documentation\n\nsfwlslfdc1tw2(1)              Madagascar Manuals              sfwlslfdc1tw2(1)\n\nNAME\n       sfwlslfdc1tw2 - None\n\nSYNOPSIS\n       sfwlslfdc1tw2  <  velf.rsf  > outm.rsf sx=fsx.rsf Mwatpw=Mwatpwfile.rsf\n       wfun=Mwfun.rsf   Mapp=Mappfile.rsf   tp=Mtpfile.rsf    waw=Mwawfile.rsf\n       seed=time(NULL  f0=15  a0=0.0001  taper=true  tpa=0.0 tpb=0.0 eps=1.e-4\n       npk=20 dt= weight=true size=6\n\nPARAMETERS\n       file   Mapp =      auxiliary output file name\n       file   Mwatpw =      auxiliary output file name\n       a0     =0.0001      weight parameters\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       f0     =15      dominant frequency\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       taper  =true ®\n       file   tp =      auxiliary output file name\n       tpa    =0.0      taper for stability\n       tpb    =0.0 ®\n       file   waw =      auxiliary output file name\n       weight =true ®\n       file   wfun =      auxiliary output file name\nSOURCE\n       user/fangg/Mwlslfdc1tw2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfwlslfdc1tw2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwlslfdc1ww-Tuple{}","page":"Home","title":"Madagascar.sfwlslfdc1ww","text":"sfwlslfdc1ww(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwlslfdc1ww on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwlslfdc1ww. See ?m8r for examples.\n\nRSF Documentation\n\nsfwlslfdc1ww(1)               Madagascar Manuals               sfwlslfdc1ww(1)\n\nNAME\n       sfwlslfdc1ww - None\n\nSYNOPSIS\n       sfwlslfdc1ww  <  velf.rsf  >  outm.rsf sx=fsx.rsf Mexact=Mexactfile.rsf\n       wfun=Mwfun.rsf  Mapp=Mappfile.rsf   wtfull=Mwtfull.rsf   seed=time(NULL\n       f0=15 a0=0.0001 taper=0.0 eps=1.e-4 npk=20 dt= wavnumcut=1.0 size=6\n\nPARAMETERS\n       file   Mapp =      auxiliary output file name\n       file   Mexact =      auxiliary output file name\n       a0     =0.0001      weight parameters\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       f0     =15      dominant frequency\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       size   =6      stencil length\n       file   sx =      auxiliary output file name\n       taper  =0.0      taper for stability\n       wavnumcut\n              =1.0      wavenumber cut percentile\n       file   wfun =      auxiliary output file name\n       file   wtfull =      auxiliary output file name\nSOURCE\n       user/fangg/Mwlslfdc1ww.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfwlslfdc1ww(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwmf-Tuple{}","page":"Home","title":"Madagascar.sfwmf","text":"sfwmf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwmf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwmf. See ?m8r for examples.\n\nRSF Documentation\n\nsfwmf(1)                      Madagascar Manuals                      sfwmf(1)\n\nNAME\n       sfwmf - 1D weighted median filtering.\n\nSYNOPSIS\n       sfwmf < in.rsf > out.rsf weights=weights.rsf verb=n nfw= boundary=n\n\nPARAMETERS\n       bool   boundary =n [y/n]     if y, boundary is data, whereas zero\n       int    nfw =      filter-window length (positive and odd integer)\n       bool   verb =n [y/n]     verbosity flag\n       string weights =      auxiliary input file name\nSOURCE\n       user/yliu/Mwmf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfwmf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwuab-Tuple{}","page":"Home","title":"Madagascar.sfwuab","text":"sfwuab(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwuab on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwuab. See ?m8r for examples.\n\nRSF Documentation\n\nsfwuab(1)                     Madagascar Manuals                     sfwuab(1)\n\nNAME\n       sfwuab - Wrapper for Utilities Acting on Binaries\n\nSYNOPSIS\n       sfwuab prog= inp= tpar= ipar= verb=n\n\nPARAMETERS\n       string inp =      Input file\n       string ipar =      Independent params, i.e. perc=100 cmap=rgb\n       string prog =      Non-madagascar utility\n       string tpar =      Translated params, i.e.: ni1=n1 ni2=n2\n       bool   verb =n [y/n]\nSOURCE\n       user/ivlad/Mwuab.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfwuab(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwxipick-Tuple{}","page":"Home","title":"Madagascar.sfwxipick","text":"sfwxipick(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwxipick on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwxipick. See ?m8r for examples.\n\nRSF Documentation\n\nsfwxipick(1)                  Madagascar Manuals                  sfwxipick(1)\n\nNAME\n       sfwxipick - Simple interactive picking\n\nSYNOPSIS\n       sfwxipick\n\nSOURCE\n       user/fomels/Mwxipick.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfwxipick(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwxresults-Tuple{}","page":"Home","title":"Madagascar.sfwxresults","text":"sfwxresults(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwxresults on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwxresults. See ?m8r for examples.\n\nRSF Documentation\n\nsfwxresults(1)                Madagascar Manuals                sfwxresults(1)\n\nNAME\n       sfwxresults - Explore project results\n\nSYNOPSIS\n       sfwxresults\n\nSOURCE\n       user/fomels/Mwxresults.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfwxresults(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfwxzoom-Tuple{}","page":"Home","title":"Madagascar.sfwxzoom","text":"sfwxzoom(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfwxzoom on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfwxzoom. See ?m8r for examples.\n\nRSF Documentation\n\nsfwxzoom(1)                   Madagascar Manuals                   sfwxzoom(1)\n\nNAME\n       sfwxzoom - Show data with zoom\n\nSYNOPSIS\n       sfwxzoom\n\nSOURCE\n       user/fomels/Mwxzoom.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfwxzoom(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxcor2-Tuple{}","page":"Home","title":"Madagascar.sfxcor2","text":"sfxcor2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxcor2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxcor2. See ?m8r for examples.\n\nRSF Documentation\n\nsfxcor2(1)                    Madagascar Manuals                    sfxcor2(1)\n\nNAME\n       sfxcor2 - OpenMP time- or freq-domain cross-correlation on axes 1,2,3\n\nSYNOPSIS\n       sfxcor2 < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1\n\nPARAMETERS\n       int    axis =2      stack axis\n       int    nbuf =1      buffer size\n       file   uu =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jsun/Mxcor2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfxcor2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxcor2d-Tuple{}","page":"Home","title":"Madagascar.sfxcor2d","text":"sfxcor2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxcor2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxcor2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfxcor2d(1)                   Madagascar Manuals                   sfxcor2d(1)\n\nNAME\n       sfxcor2d - OpenMP time- or freq-domain cross-correlation on axes 1,2,3\n\nSYNOPSIS\n       sfxcor2d < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1\n\nPARAMETERS\n       int    axis =2      stack axis\n       int    nbuf =1      buffer size\n       file   uu =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2008InterferometricImagingCondition/sact1\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2oneA\nSOURCE\n       user/psava/Mxcor2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfxcor2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxcor3-Tuple{}","page":"Home","title":"Madagascar.sfxcor3","text":"sfxcor3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxcor3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxcor3. See ?m8r for examples.\n\nRSF Documentation\n\nsfxcor3(1)                    Madagascar Manuals                    sfxcor3(1)\n\nNAME\n       sfxcor3 - OpenMP time- or freq-domain cross-correlation on axes 1,2,3,4\n\nSYNOPSIS\n       sfxcor3 < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n axis=2 nbuf=1\n\nPARAMETERS\n       int    axis =2      stack axis\n       int    nbuf =1      buffer size\n       file   uu =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jsun/Mxcor3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfxcor3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxcor3d-Tuple{}","page":"Home","title":"Madagascar.sfxcor3d","text":"sfxcor3d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxcor3d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxcor3d. See ?m8r for examples.\n\nRSF Documentation\n\nsfxcor3d(1)                   Madagascar Manuals                   sfxcor3d(1)\n\nNAME\n       sfxcor3d  -  OpenMP  time- or freq-domain reversed cross-correlation on\n       the fourth axes, read entire cube into memory\n\nSYNOPSIS\n       sfxcor3d < Fs.rsf uu=Fr.rsf > Fi.rsf verb=n rev=n\n\nPARAMETERS\n       bool   rev =n [y/n]     reverse the fourth axis of uu\n       file   uu =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/jsun/Mxcor3d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfxcor3d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxcorr-Tuple{}","page":"Home","title":"Madagascar.sfxcorr","text":"sfxcorr(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxcorr on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxcorr. See ?m8r for examples.\n\nRSF Documentation\n\nsfxcorr(1)                    Madagascar Manuals                    sfxcorr(1)\n\nNAME\n       sfxcorr - Cross-correlation function\n\nSYNOPSIS\n       sfxcorr < in.rsf match=match.rsf > out.rsf lagfile=lagfile.rsf l=n1y-1\n\nCOMMENTS\n       C=XCORR(X,Y,L), computes the (auto/cross) correlation over the range of\n       lags: -L to L, i.e., 2*L+1 lags. If L is left out, default  is  L=n1-1,\n       where n1 is the length of Y.\n\nPARAMETERS\n       int    l =n1y-1      maxlag of auto/cross correlation function\n       string lagfile =      auxiliary output file name\n       file   match =      auxiliary input file name\nSOURCE\n       user/chenyk/Mxcorr.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfxcorr(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfximage-Tuple{}","page":"Home","title":"Madagascar.sfximage","text":"sfximage(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfximage on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfximage. See ?m8r for examples.\n\nRSF Documentation\n\nsfximage(1)                   Madagascar Manuals                   sfximage(1)\n\nNAME\n       sfximage - Displays a 2-D RSF file with Seismic Unix's ximage\n\nSYNOPSIS\n       sfximage inp= par= verb=n\n\nCOMMENTS\n       Test with: sfspike n1=5 n2=3 nsp=3 k1=1,3,4 k2=1,2,3 > junk.rsf; sfxim‐\n       age inp=junk.rsf par=\"perc=100 cmap=rgb1 legend=1\"; You  should  see  a\n       picture with blue background and red blobs.  See also sfimage.\n\nPARAMETERS\n       string inp =      Input file\n       string par =      ximage params that can't be found in RSF headr\n       bool   verb =n [y/n]\nSOURCE\n       user/ivlad/Mximage.py\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfximage(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxlagtoang2d-Tuple{}","page":"Home","title":"Madagascar.sfxlagtoang2d","text":"sfxlagtoang2d(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxlagtoang2d on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxlagtoang2d. See ?m8r for examples.\n\nRSF Documentation\n\nsfxlagtoang2d(1)              Madagascar Manuals              sfxlagtoang2d(1)\n\nNAME\n       sfxlagtoang2d - SS(x-lag) to angle transformation (PP or PS waves)\n\nSYNOPSIS\n       sfxlagtoang2d  <  Fstk.rsf > Fang.rsf vpvs=Fgam.rsf dip=Fdip.rsf verb=n\n       inv=n na=sf_n(axs) da=1./(sf_n(axs)-1) oa=0. extend=4\n\nPARAMETERS\n       float  da =1./(sf_n(axs)-1) ®\n       file   dip =      auxiliary input file name\n       int    extend =4      tmp extension\n       bool   inv =n [y/n]     inverse transformation flag\n       int    na =sf_n(axs) ®\n       float  oa =0.  ®\n       bool   verb =n [y/n]     verbosity flag\n       file   vpvs =      auxiliary input file name\nUSED IN\n       cwp/geo2008IsotropicAngleDomainElasticRTM/marm2allA\nSOURCE\n       system/seismic/Mxlagtoang2d.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                  sfxlagtoang2d(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfxtomo-Tuple{}","page":"Home","title":"Madagascar.sfxtomo","text":"sfxtomo(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfxtomo on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfxtomo. See ?m8r for examples.\n\nRSF Documentation\n\nsfxtomo(1)                    Madagascar Manuals                    sfxtomo(1)\n\nNAME\n       sfxtomo - Kjartansson-style tomography\n\nSYNOPSIS\n       sfxtomo  <  inp.rsf > out.rsf adj=y nz=nh oz=oh dz=dh nx=ny ox=oy dx=dy\n       nh=nz oh=oz dh=dz ny=nx oy=ox dy=dx niter=-1\n\nPARAMETERS\n       bool   adj =y [y/n]     adjoint flag\n       float  dh =dz ®\n       float  dx =dy ®\n       float  dy =dx ®\n       float  dz =dh ®\n       int    nh =nz ®\n       int    niter =-1      number of iterations\n       int    nx =ny ®\n       int    ny =nx ®\n       int    nz =nh ®\n       float  oh =oz ®\n       float  ox =oy ®\n       float  oy =ox ®\n       float  oz =oh ®\nSOURCE\n       user/gee/Mxtomo.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfxtomo(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfycvelinvww-Tuple{}","page":"Home","title":"Madagascar.sfycvelinvww","text":"sfycvelinvww(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfycvelinvww on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfycvelinvww. See ?m8r for examples.\n\nRSF Documentation\n\nsfycvelinvww(1)               Madagascar Manuals               sfycvelinvww(1)\n\nNAME\n       sfycvelinvww - Inverse velocity spectrum with interpolation by modeling\n       from inversion result (C version)\n\nSYNOPSIS\n       sfycvelinvww < in.rsf > out.rsf velout=vout.rsf ns=nh ds=  os=  huber=0\n       irls=0 nstep=1 niter=20 savevel=0 rwt=0.0 mwt=0.0 epw=0.01 srate=0.01\n\nPARAMETERS\n       float  ds = ®\n       float  epw =0.01 ®\n       int    huber =0 ®\n       int    irls =0 ®\n       float  mwt =0.0 ®\n       int    niter =20 ®\n       int    ns =nh ®\n       int    nstep =1 ®\n       float  os = ®\n       float  rwt =0.0 ®\n       int    savevel =0 ®\n       float  srate =0.01 ®\n       file   velout =      auxiliary output file name\nSOURCE\n       user/chenyk/Mycvelinvww.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfycvelinvww(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfycvelxf-Tuple{}","page":"Home","title":"Madagascar.sfycvelxf","text":"sfycvelxf(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfycvelxf on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfycvelxf. See ?m8r for examples.\n\nRSF Documentation\n\nsfycvelxf(1)                  Madagascar Manuals                  sfycvelxf(1)\n\nNAME\n       sfycvelxf  - Velocity transform for generating velocity spectra and its\n       corresponding hyperbolic modeling (C version)\n\nSYNOPSIS\n       sfycvelxf < in.rsf > out.rsf adj=n nx= dx= ox= ns= ds= os=\n\nPARAMETERS\n       bool   adj =n [y/n]     if implement the adjoint transform  instead  of\n              the inverse transform\n       float  ds = ®\n       float  dx = ®\n       int    ns = ®\n       int    nx = ®\n       float  os = ®\n       float  ox = ®\nSOURCE\n       user/chenyk/Mycvelxf.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                      sfycvelxf(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzanisolr2-Tuple{}","page":"Home","title":"Madagascar.sfzanisolr2","text":"sfzanisolr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzanisolr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzanisolr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfzanisolr2(1)                Madagascar Manuals                sfzanisolr2(1)\n\nNAME\n       sfzanisolr2  -  Lowrank decomposition for 2-D anisotropic wave propaga‐\n       tion (Complex).\n\nSYNOPSIS\n       sfzanisolr2  <  velz.rsf  vels=vels.rsf  fft=fft.rsf  left=left.rsf   >\n       right.rsf  mode=0 seed=time(NULL eps=1.e-4 npk=20 dt= os=true sub=false\n       sub=true abc=0 nbt=0 nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0  ta‐\n       per=1.0 approx=2 relation=3\n\nPARAMETERS\n       abc    =0       absorbing boundary condition (0=no abc, 1=direction de‐\n              pendent, 2=direction independent)\n       approx =2      Type of approximation (0=exact 1=zone 2=acoustic)\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      wave mode (0=p wave, 1=Sv wave)\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       os     =true ®\n       relation\n              =3      Type of q relationship  (0=shale,  1=sand,  2=carbonate,\n              default being smallest error)\n       seed   =time(NULL ®\n       sub    =true      for twostep, default true\n       taper  =1.0      wavenumber tapering flag\n       file   vels =      auxiliary input file name\nSOURCE\n       user/jsun/Mzanisolr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfzanisolr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzanisolr2abc-Tuple{}","page":"Home","title":"Madagascar.sfzanisolr2abc","text":"sfzanisolr2abc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzanisolr2abc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzanisolr2abc. See ?m8r for examples.\n\nRSF Documentation\n\nsfzanisolr2abc(1)             Madagascar Manuals             sfzanisolr2abc(1)\n\nNAME\n       sfzanisolr2abc  - Lowrank decomposition for 2-D anisotropic wave propa‐\n       gation.\n\nSYNOPSIS\n       sfzanisolr2abc  <  velz.rsf  fft=fft.rsf  left=left.rsf   >   right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20  dt=  nbt=0  nbb=0 nbl=0 nbr=0 ct=0.0\n       cb=0.0 cl=0.0 cr=0.0\n\nPARAMETERS\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mzanisolr2abc.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                 sfzanisolr2abc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzcp-Tuple{}","page":"Home","title":"Madagascar.sfzcp","text":"sfzcp(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzcp on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzcp. See ?m8r for examples.\n\nRSF Documentation\n\nsfzcp(1)                      Madagascar Manuals                      sfzcp(1)\n\nNAME\n       sfzcp - Copies header of float file, fills output binary with zeros\n\nSYNOPSIS\n       sfzcp\n\nCOMMENTS\n       Usage: sfzcp file1.rsf file2.rsf\n\nSOURCE\n       user/ivlad/Mzcp.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                          sfzcp(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzcwt-Tuple{}","page":"Home","title":"Madagascar.sfzcwt","text":"sfzcwt(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzcwt on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzcwt. See ?m8r for examples.\n\nRSF Documentation\n\nsfzcwt(1)                     Madagascar Manuals                     sfzcwt(1)\n\nNAME\n       sfzcwt  -  Improve  signal  resolution  using  zero-crossing of wavelet\n       transform.\n\nSYNOPSIS\n       sfzcwt < in.rsf > out.rsf maxscale=5 outscale=1\n\nPARAMETERS\n       int    maxscale =5      The maximum decomposition scale (default=5)\n       int    outscale =1      The output scale (default=1)\nSOURCE\n       user/yliu/Mzcwt.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfzcwt(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzero-Tuple{}","page":"Home","title":"Madagascar.sfzero","text":"sfzero(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzero on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzero. See ?m8r for examples.\n\nRSF Documentation\n\nsfzero(1)                     Madagascar Manuals                     sfzero(1)\n\nNAME\n       sfzero - Zero crossings with sub-pixel resolution.\n\nSYNOPSIS\n       sfzero < inp.rsf > out.rsf nzero=nzero.rsf nw=4 down=n\n\nPARAMETERS\n       bool   down =n [y/n]     only zeros on the way down\n       int    nw =4      Interpolation accuracy\n       file   nzero =      auxiliary output file name\nSOURCE\n       user/fomels/Mzero.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfzero(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzerocross-Tuple{}","page":"Home","title":"Madagascar.sfzerocross","text":"sfzerocross(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzerocross on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzerocross. See ?m8r for examples.\n\nRSF Documentation\n\nsfzerocross(1)                Madagascar Manuals                sfzerocross(1)\n\nNAME\n       sfzerocross - Zero crossings.\n\nSYNOPSIS\n       sfzerocross < in.rsf > out.rsf levels=3\n\nPARAMETERS\n       int    levels =3      levels of quantization [2,3,5].\n                    levels=2 1: zero crossing or zero; 0: otherwise\n                    levels=3 1:  positive to negative zc; -1 negative to posi‐\n              tive zc; 0: otherwise\n                    levels=5 +/-2: positive/negative values; +/-1: as in  lev‐\n              els=3; 0: zero.\nSOURCE\n       user/saragiotis/Mzerocross.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfzerocross(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzerotrace-Tuple{}","page":"Home","title":"Madagascar.sfzerotrace","text":"sfzerotrace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzerotrace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzerotrace. See ?m8r for examples.\n\nRSF Documentation\n\nsfzerotrace(1)                Madagascar Manuals                sfzerotrace(1)\n\nNAME\n       sfzerotrace - Zero part of traces in order to make aliasing\n\nSYNOPSIS\n       sfzerotrace < in.rsf > out.rsf beg=o2 j=2 l=1\n\nPARAMETERS\n       float  beg =o2      zero part beginning point\n       int    j =2      jump step between two consecutive zero parts\n       int    l =1      length of each zero part\nSOURCE\n       user/chenyk/Mzerotrace.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfzerotrace(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzfraclr2-Tuple{}","page":"Home","title":"Madagascar.sfzfraclr2","text":"sfzfraclr2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzfraclr2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzfraclr2. See ?m8r for examples.\n\nRSF Documentation\n\nsfzfraclr2(1)                 Madagascar Manuals                 sfzfraclr2(1)\n\nNAME\n       sfzfraclr2  -  Complex lowrank decomposition for 2-D viscoacoustic iso‐\n       tropic wave propagation.\n\nSYNOPSIS\n       sfzfraclr2   <   vel.rsf   fft=fft.rsf   left=left.rsf   >    right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20 dt= w0= rev=false mode=0 compen=false\n       taper=0.2 cutoff=250. vmax=6000. sign=0 avg=false  gamma=  abc=0  nbt=0\n       nbb=0 nbl=0 nbr=0 ct=0.0 cb=0.0 cl=0.0 cr=0.0\n\nPARAMETERS\n       abc    =0 ®\n       avg    =false      whether use average value of gamma\n       cb     =0.0 ®\n       cl     =0.0 ®\n       compen =false      compensate attenuation, only works if mode=0,1 (vis‐\n              coacoustic)\n       cr     =0.0 ®\n       ct     =0.0 ®\n       cutoff =250.       cutoff frequency\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       gamma  = ®\n       file   left =      auxiliary output file name\n       mode   =0      mode of propagation: 0 is viscoacoustic (default); 1  is\n              loss-dominated; 2 is dispersion dominated; 3 is acoustic\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       rev    =false      reverse propagation\n       seed   =time(NULL ®\n       sign   =0      sign of solution: 0 is positive, 1 is negative\n       taper  =0.2      taper ratio for tukey window\n       vmax   =6000.       maximum velocity\n       w0     =      reference frequency\nSOURCE\n       user/jsun/Mzfraclr2.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfzfraclr2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzisolr2abc-Tuple{}","page":"Home","title":"Madagascar.sfzisolr2abc","text":"sfzisolr2abc(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzisolr2abc on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzisolr2abc. See ?m8r for examples.\n\nRSF Documentation\n\nsfzisolr2abc(1)               Madagascar Manuals               sfzisolr2abc(1)\n\nNAME\n       sfzisolr2abc  -  Complex  lowrank  decomposition for 2-D isotropic wave\n       propagation with absorbing boundaries.\n\nSYNOPSIS\n       sfzisolr2abc  <   vel.rsf   fft=fft.rsf   left=left.rsf   >   right.rsf\n       seed=time(NULL  eps=1.e-4  npk=20  dt=  nbt=0  nbb=0 nbl=0 nbr=0 ct=0.0\n       cb=0.0 cl=0.0 cr=0.0 abc=0 rev=false\n\nPARAMETERS\n       abc    =0 ®\n       cb     =0.0 ®\n       cl     =0.0 ®\n       cr     =0.0 ®\n       ct     =0.0 ®\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       nbb    =0 ®\n       nbl    =0 ®\n       nbr    =0 ®\n       nbt    =0 ®\n       npk    =20      maximum rank\n       rev    =false ®\n       seed   =time(NULL ®\nSOURCE\n       user/jsun/Mzisolr2abc.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfzisolr2abc(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzmarch-Tuple{}","page":"Home","title":"Madagascar.sfzmarch","text":"sfzmarch(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzmarch on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzmarch. See ?m8r for examples.\n\nRSF Documentation\n\nsfzmarch(1)                   Madagascar Manuals                   sfzmarch(1)\n\nNAME\n       sfzmarch - Phase-space traveltime (marching in z)\n\nSYNOPSIS\n       sfzmarch < vel.rsf > out.rsf na= da= a0= order=3 scheme=2 verb=n what=\n\nPARAMETERS\n       float  a0 =      starting velocity\n       float  da =      angle sampling\n       int    na =      angle samples\n       int    order =3      interpolation order\n       int    scheme =2      finite-difference order\n       bool   verb =n [y/n]     verbosity\n       string what =      what to compute (t,x,z,a)\nSOURCE\n       user/fomels/Mzmarch.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfzmarch(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzoeppritz-Tuple{}","page":"Home","title":"Madagascar.sfzoeppritz","text":"sfzoeppritz(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzoeppritz on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzoeppritz. See ?m8r for examples.\n\nRSF Documentation\n\nsfzoeppritz(1)                Madagascar Manuals                sfzoeppritz(1)\n\nNAME\n       sfzoeppritz - Testing Zoeppritz equation\n\nSYNOPSIS\n       sfzoeppritz > out.rsf na=90 a0=0. da=90./na icoef=4 vp1= vp2= vs1= vs2=\n       rho1=1. rho2=1. incp=y outp=y refl=y\n\nPARAMETERS\n       float  a0 =0.       first angle\n       float  da =90./na      angle increment\n       int    icoef =4 [1,2,3,4] particle  displacement,  displacement  poten‐\n              tial, energy, real part\n       bool   incp =y [y/n]     incident P (or S)\n       int    na =90      number of angles\n       bool   outp =y [y/n]     rellected/transmitted P (or S)\n       bool   refl =y [y/n]     reflection or transmission\n       float  rho1 =1.  ®\n       float  rho2 =1.  ®\n       float  vp1 = ®\n       float  vp2 = ®\n       float  vs1 = ®\n       float  vs2 = ®\nSOURCE\n       system/seismic/Mzoeppritz.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfzoeppritz(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzolsrtm2-Tuple{}","page":"Home","title":"Madagascar.sfzolsrtm2","text":"sfzolsrtm2(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzolsrtm2 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzolsrtm2. See ?m8r for examples.\n\nRSF Documentation\n\nsfzolsrtm2(1)                 Madagascar Manuals                 sfzolsrtm2(1)\n\nNAME\n       sfzolsrtm2 - 2-D FFT-based zero-offset exploding reflector modeling/mi‐\n       gration linear operator\n\nSYNOPSIS\n       sfzolsrtm2  <  data.rsf  >  image.rsf   snaps=snaps.rsf   left=left.rsf\n       right=right.rsf  adj=n  timer=n  verb=n  snap=0  pad1=1  gpz=0  taper=0\n       thresh=0.92 oz=0. nz= dz= nt= dt=\n\nPARAMETERS\n       bool   adj =n [y/n]     if n, modeling; if y, migration\n       float  dt =      time sampling\n       float  dz =      depth sampling\n       int    gpz =0      geophone surface\n       file   left =      auxiliary input file name\n       int    nt =      time samples\n       int    nz =      depth samples\n       float  oz =0.  ®\n       int    pad1 =1      padding factor on the first axis\n       file   right =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       int    taper =0      tapering in the frequency domain\n       float  thresh =0.92      tapering threshold\n       bool   timer =n [y/n]\n       bool   verb =n [y/n]\nSOURCE\n       user/jsun/Mzolsrtm2.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                     sfzolsrtm2(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzomig-Tuple{}","page":"Home","title":"Madagascar.sfzomig","text":"sfzomig(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzomig on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzomig. See ?m8r for examples.\n\nRSF Documentation\n\nsfzomig(1)                    Madagascar Manuals                    sfzomig(1)\n\nNAME\n       sfzomig - 3-D zero-offset modeling/migration with extended split-step\n\nSYNOPSIS\n       sfzomig  slo=Fs.rsf < Fd.rsf > Fw.rsf < Fi.rsf verb=n incore=y eps=0.01\n       inv=n causal=n twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0 nw=\n       dw= ow=0. mode=\n\nCOMMENTS\n       To be deprecated in favor of zomig3\n\nPARAMETERS\n       bool   causal =n [y/n]     y=causal; n=anti-causal\n       float  dtmax =0.004      time error\n       float  dw = ®\n       float  eps =0.01      stability parameter\n       bool   incore =y [y/n]     in core execution\n       bool   inv =n [y/n]     y=modeling; n=migration\n       string mode = ®\n       int    nrmax =1      maximum references\n       int    nw = ®\n       float  ow =0.  ®\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =y [y/n]     two-way traveltime\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/jse2006RWEImagingOverturningReflections/sigsbee\nSOURCE\n       system/seismic/Mzomig.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfzomig(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzomig3-Tuple{}","page":"Home","title":"Madagascar.sfzomig3","text":"sfzomig3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzomig3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzomig3. See ?m8r for examples.\n\nRSF Documentation\n\nsfzomig3(1)                   Madagascar Manuals                   sfzomig3(1)\n\nNAME\n       sfzomig3 - 3-D zero-offset modeling/migration with extended SSF\n\nSYNOPSIS\n       sfzomig3  slo=Fs.rsf  <  Fd.rsf  >  Fw.rsf < Fi.rsf ompchunk=1 ompnth=0\n       verb=n eps=0.01 inv=n causal=n twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0\n       tmx=0 tmy=0 nw= dw= ow=0. mode=\n\nCOMMENTS\n       May 2019 program of the month: http://ahay.org/blog/2019/05/06/program-\n       of-the-month-sfzomig3/\n\nPARAMETERS\n       bool   causal =n [y/n]     y=causal; n=anti-causal\n       float  dtmax =0.004      time error\n       float  dw = ®\n       float  eps =0.01      stability parameter\n       bool   inv =n [y/n]     y=modeling; n=migration\n       string mode = ®\n       int    nrmax =1      maximum references\n       int    nw = ®\n       int    ompchunk =1      OpenMP data chunk size\n       int    ompnth =0      OpenMP available threads\n       float  ow =0.  ®\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =y [y/n]     two-way traveltime\n       bool   verb =n [y/n]     verbosity flag\nUSED IN\n       cwp/geo2007StereographicImagingCondition/sigsbee2\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       user/psava/Mzomig3.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfzomig3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzomiso-Tuple{}","page":"Home","title":"Madagascar.sfzomiso","text":"sfzomiso(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzomiso on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzomiso. See ?m8r for examples.\n\nRSF Documentation\n\nsfzomiso(1)                   Madagascar Manuals                   sfzomiso(1)\n\nNAME\n       sfzomiso - zero-offset isotropic reverse-time migration\n\nSYNOPSIS\n       sfzomiso   velo=Fvelo.rsf   cr=Fcr.rsf  wave=Fwave.rsf  <  Fimag.rsf  >\n       Fdata.rsf vmap=Fvmap.rsf sigm=Fsigm.rsf inv=n tau=n verb=n  opt=n  nt=1\n       dt=1. bzl=0 bzh=0 bxl=0 bxh=0 czl=1. czh=1. cxl=1. cxh=1. n3=nt eps=1\n\nCOMMENTS\n       * exploding reflector modeling : < imag.rsf sfzomiso inv=y > data.rsf *\n       zero-offset migration        : < data.rsf sfzomiso inv=n >  imag.rsf  *\n       forward  modeling              :  <  data.rsf sfzomiso inv=n > imag.rsf\n       Need (1) velo *= 2 (2) nr=1 (3) imag.rsf is useless\n\nPARAMETERS\n       int    bxh =0 ®\n       int    bxl =0 ®\n       int    bzh =0 ®\n       int    bzl =0 ®\n       file   cr =      auxiliary input file name\n       float  cxh =1.  ®\n       float  cxl =1.  ®\n       float  czh =1.  ®\n       float  czl =1.  ®\n       float  dt =1.       time d (if inv=y)\n       float  eps =1      regularize sigma\n       bool   inv =n [y/n]     if y, modeling; if n, migration\n       int    n3 =nt      wave time n\n       int    nt =1      time n (if inv=y)\n       bool   opt =n [y/n]     optimze fft size\n       file   sigm =      auxiliary input file name\n       bool   tau =n [y/n]     if y, tau domain; if n, cartesian\n       file   velo =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity\n       file   vmap =      auxiliary input file name\n       file   wave =      auxiliary output file name\nSOURCE\n       user/xuxin/Mzomiso.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfzomiso(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzomva-Tuple{}","page":"Home","title":"Madagascar.sfzomva","text":"sfzomva(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzomva on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzomva. See ?m8r for examples.\n\nRSF Documentation\n\nsfzomva(1)                    Madagascar Manuals                    sfzomva(1)\n\nNAME\n       sfzomva - 3-D zero-offset WEMVA\n\nSYNOPSIS\n       sfzomva  slo=Bs.rsf  wfl=Bw.rsf < Pi.rsf > Ps.rsf verb=n eps=0.01 inv=n\n       twoway=y nrmax=1 dtmax=0.004 pmx=0 pmy=0 tmx=0 tmy=0\n\nPARAMETERS\n       float  dtmax =0.004      time error\n       float  eps =0.01      stability parameter\n       bool   inv =n [y/n]     y=modeling; n=migration\n       int    nrmax =1      maximum number of references\n       int    pmx =0      padding on x\n       int    pmy =0      padding on y\n       file   slo =      auxiliary input file name\n       int    tmx =0      taper on x\n       int    tmy =0      taper on y\n       bool   twoway =y [y/n]     two-way traveltime\n       bool   verb =n [y/n]     verbosity flag\n       file   wfl =      auxiliary input file name\nUSED IN\n       cwp/geo2008NumericWEMVAoperators/flatWEMVA\n       cwp/geo2008NumericWEMVAoperators/saltWEMVA\nSOURCE\n       system/seismic/Mzomva.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfzomva(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzomvti-Tuple{}","page":"Home","title":"Madagascar.sfzomvti","text":"sfzomvti(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzomvti on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzomvti. See ?m8r for examples.\n\nRSF Documentation\n\nsfzomvti(1)                   Madagascar Manuals                   sfzomvti(1)\n\nNAME\n       sfzomvti - acoustic VTI wavefield\n\nSYNOPSIS\n       sfzomvti    vnmo=Fvnmo.rsf    vz=Fvver.rsf   eta=Fheta.rsf   cr=Fcr.rsf\n       wave=Fwave.rsf < Fimag.rsf >  Fdata.rsf  vmap=Fvmap.rsf  sigm=Fsigm.rsf\n       inv=n  tau=n  verb=n  opt=n  nt=1  dt=1. bzl=0 bzh=0 bxl=0 bxh=0 czl=1.\n       czh=1. cxl=1. cxh=1. n3=nt eps=1\n\nCOMMENTS\n       * exploding reflector modeling : < imag.rsf sfzomvti inv=y > data.rsf *\n       zero-offset  migration         : < data.rsf sfzomvti inv=n > imag.rsf *\n       prestack forward modeling    : < data.rsf  sfzomvti  inv=n  >  imag.rsf\n       Need (1) vnmo *= 2, vver *= 2 (2) nr=1\n\nPARAMETERS\n       int    bxh =0 ®\n       int    bxl =0 ®\n       int    bzh =0 ®\n       int    bzl =0 ®\n       file   cr =      auxiliary input file name\n       float  cxh =1.  ®\n       float  cxl =1.  ®\n       float  czh =1.  ®\n       float  czl =1.  ®\n       float  dt =1.       time d (if inv=y)\n       float  eps =1      regularize sigma\n       file   eta =      auxiliary input file name\n       bool   inv =n [y/n]     if y, modeling; if n, migration\n       int    n3 =nt      wave time n\n       int    nt =1      time n (if inv=y)\n       bool   opt =n [y/n]     optimze fft size\n       file   sigm =      auxiliary input file name\n       bool   tau =n [y/n]     if y, tau domain; if n, cartesian\n       bool   verb =n [y/n]     verbosity\n       file   vmap =      auxiliary input file name\n       file   vnmo =      auxiliary input file name\n       file   vz =      auxiliary input file name\n       file   wave =      auxiliary output file name\nSOURCE\n       user/xuxin/Mzomvti.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfzomvti(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzoom-Tuple{}","page":"Home","title":"Madagascar.sfzoom","text":"sfzoom(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzoom on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzoom. See ?m8r for examples.\n\nRSF Documentation\n\nsfzoom(1)                     Madagascar Manuals                     sfzoom(1)\n\nNAME\n       sfzoom - Show data with zoom\n\nSYNOPSIS\n       sfzoom\n\nSOURCE\n       user/fomels/Mzoom.py\n\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                         sfzoom(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzortholr3-Tuple{}","page":"Home","title":"Madagascar.sfzortholr3","text":"sfzortholr3(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzortholr3 on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzortholr3. See ?m8r for examples.\n\nRSF Documentation\n\nsfzortholr3(1)                Madagascar Manuals                sfzortholr3(1)\n\nNAME\n       sfzortholr3  - Lowrank decomposition for 3-D orthorhombic wave propaga‐\n       tion.\n\nSYNOPSIS\n       sfzortholr3  <  c11.rsf  seta1=seta1.rsf  fft=fft.rsf  left=left.rsf  >\n       right.rsf seed=time(NULL eps=1.e-4 npk=20 dt= mode=0 tilt=false\n\nPARAMETERS\n       dt     =      time step\n       eps    =1.e-4      tolerance\n       file   fft =      auxiliary input file name\n       file   left =      auxiliary output file name\n       mode   =0      '0' means quasi-P (default),'1' means quasi-S, '2' means\n              quasi-S2\n       npk    =20      maximum rank\n       seed   =time(NULL ®\n       file   seta1 =      auxiliary input file name\n       tilt   =false ®\nSOURCE\n       user/jsun/Mzortholr3.cc\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                    sfzortholr3(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzortmgmres-Tuple{}","page":"Home","title":"Madagascar.sfzortmgmres","text":"sfzortmgmres(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzortmgmres on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzortmgmres. See ?m8r for examples.\n\nRSF Documentation\n\nsfzortmgmres(1)               Madagascar Manuals               sfzortmgmres(1)\n\nNAME\n       sfzortmgmres  -  2-D  FFT-based  zero-offset exploding reflector model‐\n       ing/migration linear operator\n\nSYNOPSIS\n       sfzortmgmres < data.rsf  >  image.rsf  snaps=snaps.rsf  leftf=leftf.rsf\n       rightf=rightf.rsf  leftb=leftb.rsf  rightb=rightb.rsf  gmres=n niter=10\n       mem=20 timer=n verb=n snap=0 pad1=1 gpz=0 nz= dz= nt= dt= nt= dt=\n\nPARAMETERS\n       float  dt =      time sampling\n       float  dz =      depth sampling\n       bool   gmres =n [y/n]\n       int    gpz =0      geophone surface\n       file   leftb =      auxiliary input file name\n       file   leftf =      auxiliary input file name\n       int    mem =20 ®\n       int    niter =10 ®\n       int    nt =      time samples\n       int    nz =      depth samples\n       int    pad1 =1      padding factor on the first axis\n       file   rightb =      auxiliary input file name\n       file   rightf =      auxiliary input file name\n       int    snap =0      interval for snapshots\n       file   snaps =      auxiliary output file name\n       bool   timer =n [y/n]\n       bool   verb =n [y/n]\nSOURCE\n       user/jsun/Mzortmgmres.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                   sfzortmgmres(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfzowei-Tuple{}","page":"Home","title":"Madagascar.sfzowei","text":"sfzowei(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfzowei on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfzowei. See ?m8r for examples.\n\nRSF Documentation\n\nsfzowei(1)                    Madagascar Manuals                    sfzowei(1)\n\nNAME\n       sfzowei - 3-D zero-offset modeling/migration\n\nSYNOPSIS\n       sfzowei slo=Fslo.rsf < Fdat.rsf > Fcic.rsf sou=Fsou.rsf verb=n adj=y\n\nPARAMETERS\n       bool   adj  =y  [y/n]     adjoint  flag,  true for migration, false for\n              modeling\n       file   slo =      auxiliary input file name\n       file   sou =      auxiliary input file name\n       bool   verb =n [y/n]     verbosity flag\nSOURCE\n       user/psava/Mzowei.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                        sfzowei(1)\n\n\n\n\n\n","category":"method"},{"location":"#Madagascar.sfztrace-Tuple{}","page":"Home","title":"Madagascar.sfztrace","text":"sfztrace(input; kwargs...) -> m8r.RSFFile\n\nRuns RSF program sfztrace on the data provided by input. This may be an m8r.RSFFile or an array (and optionally, positional and keyword arguments n, d, o, l, u). If the program requires no input, it may be absent.\n\nIt is also possible to pass keyword arguments to the sfztrace. See ?m8r for examples.\n\nRSF Documentation\n\nsfztrace(1)                   Madagascar Manuals                   sfztrace(1)\n\nNAME\n       sfztrace - Multiple arrivals by depth marching.\n\nSYNOPSIS\n       sfztrace < in.rsf nt=nx*nz na=362 da=0.5 a0=-90. vel=y order=3 iorder=4\n\nPARAMETERS\n       float  a0 =-90.       starting angle (in degrees)\n       float  da =0.5      angle increment (in degrees)\n       int    iorder =4      interpolation accuracy for grid\n       int    na =362      number of angles\n       int    nt =nx*nz      ray length bound\n       int    order =3      interpolation accuracy for velocity\n       bool   vel =y [y/n]     y, input is velocity; n, slowness\nSOURCE\n       user/fomels/Mztrace.c\nVERSION\n       4.2-git\n\nMadagascar                         JULY 2024                       sfztrace(1)\n\n\n\n\n\n","category":"method"}]
}
